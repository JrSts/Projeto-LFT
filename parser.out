Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN
    CHAR
    DOUBLE
    FLOAT
    INT
    STRING

Grammar

Rule 0     S' -> kotlinFile
Rule 1     kotlinFile -> functionDeclaration kotlinFile
Rule 2     kotlinFile -> functionDeclaration
Rule 3     functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock
Rule 4     optionalType -> DOISP type
Rule 5     optionalType -> <empty>
Rule 6     optionalBlock -> block
Rule 7     optionalBlock -> <empty>
Rule 8     optionalPv -> PV
Rule 9     optionalPv -> <empty>
Rule 10    propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
Rule 11    varOrVal -> VAR
Rule 12    varOrVal -> VAL
Rule 13    optionalTypeParameters -> typeParameters
Rule 14    optionalTypeParameters -> <empty>
Rule 15    genericVariableDeclaration -> multiVariableDeclaration
Rule 16    genericVariableDeclaration -> variableDeclaration
Rule 17    typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR
Rule 18    typeParametersRecursive -> COMMA typeParameter
Rule 19    typeParametersRecursive -> COMMA typeParameter typeParametersRecursive
Rule 20    optionalCOMMA -> COMMA
Rule 21    optionalCOMMA -> <empty>
Rule 22    typeParameter -> simpleIdentifier
Rule 23    typeParameter -> simpleIdentifier DOISP type
Rule 24    functionBody -> block
Rule 25    functionBody -> ATRIBUICAO expression
Rule 26    functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN
Rule 27    functionValueParameters -> LPAREN RPAREN
Rule 28    functionValueParametersRecursive -> functionValueParameter optionalCOMMA
Rule 29    functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive
Rule 30    functionValueParameter -> parameter ATRIBUICAO expression
Rule 31    functionValueParameter -> parameter
Rule 32    variableDeclaration -> simpleIdentifier DOISP type
Rule 33    variableDeclaration -> simpleIdentifier
Rule 34    multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN
Rule 35    multiVariableDeclaration -> LPAREN RPAREN
Rule 36    multiVariableDeclarationRecursive -> variableDeclaration
Rule 37    multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive
Rule 38    parameter -> simpleIdentifier DOISP type
Rule 39    type -> optionalTypeModifiers optype
Rule 40    optionalTypeModifiers -> typeModifiers
Rule 41    optionalTypeModifiers -> <empty>
Rule 42    optype -> parenthesizedType
Rule 43    optype -> functionType
Rule 44    optype -> userType
Rule 45    typeModifiers -> typeModifier
Rule 46    typeModifiers -> typeModifier typeModifiers
Rule 47    typeModifier -> SUSPEND
Rule 48    typeProjectionModifier -> varianceModifier
Rule 49    varianceModifier -> IN
Rule 50    varianceModifier -> OUT
Rule 51    userType -> simpleUserType
Rule 52    simpleUserType -> simpleIdentifier typeArguments
Rule 53    simpleUserType -> simpleIdentifier
Rule 54    typeProjection -> typeProjectionModifiers type
Rule 55    typeProjection -> type
Rule 56    typeProjectionModifiers -> typeProjection
Rule 57    typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers
Rule 58    functionType -> receiverType PONTO functionTypeParameters SETA type
Rule 59    functionType -> functionTypeParameters SETA type
Rule 60    functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
Rule 61    optionalParameterOrType -> parameter
Rule 62    optionalParameterOrType -> type
Rule 63    optionalParameterOrType -> <empty>
Rule 64    parameterOrTypeRecursive -> COMMA optionalParameterOrType
Rule 65    parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive
Rule 66    parameterOrTypeRecursive -> <empty>
Rule 67    parenthesizedType -> LPAREN type RPAREN
Rule 68    receiverType -> typeModifier parenthesizedType
Rule 69    statements -> statement
Rule 70    statements -> statement statements
Rule 71    statement -> functionDeclaration
Rule 72    statement -> assignment
Rule 73    statement -> loopStatement
Rule 74    statement -> expression
Rule 75    statement -> propertyDeclaration
Rule 76    controlStructureBody -> block
Rule 77    controlStructureBody -> statement
Rule 78    block -> LCHAVE statements RCHAVE
Rule 79    loopStatement -> forStatement_MD
Rule 80    loopStatement -> forStatement_VD
Rule 81    loopStatement -> whileStatement
Rule 82    loopStatement -> doWhileStatement
Rule 83    forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
Rule 84    forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN
Rule 85    forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
Rule 86    forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN
Rule 87    whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody
Rule 88    whileStatement -> WHILE LPAREN expression RPAREN PV
Rule 89    doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN
Rule 90    doWhileStatement -> DO WHILE LPAREN expression RPAREN
Rule 91    assignment -> directlyAssignableExpression ATRIBUICAO expression
Rule 92    assignment -> assignableExpression assignmentAndOperator expression
Rule 93    expression -> disjunction
Rule 94    disjunction -> conjunction
Rule 95    disjunction -> conjunction OR disjunction
Rule 96    conjunction -> equality
Rule 97    conjunction -> equality AND conjunction
Rule 98    equality -> comparison
Rule 99    equality -> comparison equalityOperator equality
Rule 100   comparison -> infixOperation
Rule 101   comparison -> infixOperation comparisonOperator infixOperation
Rule 102   infixOperation -> elvisExpression infixOperationRecursive
Rule 103   infixOperation -> elvisExpression
Rule 104   infixOperationRecursive -> inOrIs elvisOrType
Rule 105   infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive
Rule 106   inOrIs -> inOperator
Rule 107   inOrIs -> isOperator
Rule 108   elvisOrType -> elvisExpression
Rule 109   elvisOrType -> type
Rule 110   elvisExpression -> infixFunctionCall
Rule 111   elvisExpression -> infixFunctionCall ELVIS elvisExpression
Rule 112   infixFunctionCall -> rangeExpression
Rule 113   infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall
Rule 114   rangeExpression -> additiveExpression
Rule 115   rangeExpression -> additiveExpression PONTOPONTO rangeExpression
Rule 116   additiveExpression -> multiplicativeExpression
Rule 117   additiveExpression -> multiplicativeExpression additiveOperator additiveExpression
Rule 118   multiplicativeExpression -> asExpression
Rule 119   multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression
Rule 120   asExpression -> prefixUnaryExpression
Rule 121   asExpression -> prefixUnaryExpression asOperator type
Rule 122   prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression
Rule 123   prefixUnaryExpression -> postfixUnaryExpression
Rule 124   prefixUnaryExpressionRecursive -> unaryPrefix
Rule 125   prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive
Rule 126   unaryPrefix -> label
Rule 127   unaryPrefix -> prefixUnaryOperator
Rule 128   label -> simpleIdentifier
Rule 129   postfixUnaryExpressionRecursive -> postfixUnarySuffix
Rule 130   postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive
Rule 131   postfixUnaryExpression -> primaryExpression
Rule 132   postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive
Rule 133   postfixUnarySuffix -> postfixUnaryOperator
Rule 134   postfixUnarySuffix -> typeArguments
Rule 135   postfixUnarySuffix -> callSuffix
Rule 136   postfixUnarySuffix -> indexingSuffix
Rule 137   postfixUnarySuffix -> navigationSuffix
Rule 138   directlyAssignableExpression -> postfixUnaryExpression assignableSuffix
Rule 139   directlyAssignableExpression -> simpleIdentifier
Rule 140   directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression
Rule 141   parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN
Rule 142   assignableExpression -> prefixUnaryExpression
Rule 143   assignableExpression -> parenthesizedAssignableExpression
Rule 144   parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN
Rule 145   assignableSuffix -> typeArguments
Rule 146   assignableSuffix -> indexingSuffix
Rule 147   assignableSuffix -> navigationSuffix
Rule 148   indexingSuffix -> LCCT indexingSuffixRecursive RCCT
Rule 149   indexingSuffix -> LCCT RCCT
Rule 150   indexingSuffixRecursive -> expression
Rule 151   indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive
Rule 152   navigationSuffix -> memberAccessOperator simpleIdentifier CLASS
Rule 153   navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS
Rule 154   callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda
Rule 155   callSuffix -> optionalTypeArguments optionalValueArguments
Rule 156   optionalTypeArguments -> typeArguments
Rule 157   optionalTypeArguments -> <empty>
Rule 158   optionalValueArguments -> valueArguments
Rule 159   optionalValueArguments -> <empty>
Rule 160   annotatedLambda -> lambdaLiteral
Rule 161   typeArguments -> MENOR typeArgumentsRecursive MAIOR
Rule 162   typeArguments -> MENOR MAIOR
Rule 163   typeArgumentsRecursive -> typeProjection
Rule 164   typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive
Rule 165   valueArgumentsRecursive -> valueArgument
Rule 166   valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive
Rule 167   valueArguments -> LPAREN RPAREN
Rule 168   valueArguments -> LPAREN valueArgumentsRecursive RPAREN
Rule 169   valueArgument -> simpleIdentifier IGUALDADE MULT expression
Rule 170   valueArgument -> simpleIdentifier IGUALDADE expression
Rule 171   valueArgument -> expression
Rule 172   primaryExpression -> parenthesizedExpression
Rule 173   primaryExpression -> simpleIdentifier
Rule 174   primaryExpression -> LITERAL_STRING
Rule 175   primaryExpression -> callableReference
Rule 176   primaryExpression -> functionLiteral
Rule 177   primaryExpression -> collectionLiteral
Rule 178   primaryExpression -> ifExpression
Rule 179   primaryExpression -> jumpExpression
Rule 180   parenthesizedExpression -> LPAREN expression RPAREN
Rule 181   collectionLiteral -> LCCT collectionLiteralRecursive RCCT
Rule 182   collectionLiteral -> LCCT RCCT
Rule 183   collectionLiteralRecursive -> expression
Rule 184   collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive
Rule 185   parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN
Rule 186   parametersWithOptionalType -> LPAREN RPAREN
Rule 187   parametersWithOptionalTypeRecursive -> parameterWithOptionalType
Rule 188   parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA
Rule 189   parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType
Rule 190   optionalParameterModifiers -> parameterModifiers
Rule 191   optionalParameterModifiers -> <empty>
Rule 192   parameterModifiers -> VARARG
Rule 193   parameterModifiers -> NOINLINE
Rule 194   parameterModifiers -> CROSSINLINE
Rule 195   lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE
Rule 196   optionsLambdaLiteral -> statements
Rule 197   optionsLambdaLiteral -> lambdaParameters SETA statements
Rule 198   optionsLambdaLiteral -> SETA statements
Rule 199   lambdaParameters -> lambdaParameter
Rule 200   lambdaParameters -> lambdaParameter COMMA lambdaParameters
Rule 201   lambdaParameter -> variableDeclaration
Rule 202   lambdaParameter -> multiVariableDeclaration optionalType
Rule 203   optionalTypePonto -> type PONTO
Rule 204   optionalTypePonto -> <empty>
Rule 205   optionalTypeConstraints -> typeConstraints
Rule 206   optionalTypeConstraints -> <empty>
Rule 207   optionalFunctionBody -> functionBody
Rule 208   optionalFunctionBody -> <empty>
Rule 209   anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
Rule 210   functionLiteral -> lambdaLiteral
Rule 211   functionLiteral -> anonymousFunction
Rule 212   typeConstraints -> simpleIdentifier DOISP type
Rule 213   ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV
Rule 214   ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
Rule 215   controlStructureBodyOrPV -> controlStructureBody
Rule 216   controlStructureBodyOrPV -> PV
Rule 217   optionalControlStructureBody -> controlStructureBody
Rule 218   optionalControlStructureBody -> <empty>
Rule 219   optionalPV -> PV
Rule 220   optionalPV -> <empty>
Rule 221   jumpExpression -> RETURN expression
Rule 222   jumpExpression -> RETURN_AT expression
Rule 223   jumpExpression -> expression
Rule 224   jumpExpression -> CONTINUE
Rule 225   jumpExpression -> CONTINUE_AT
Rule 226   jumpExpression -> BREAK
Rule 227   jumpExpression -> BREAK_AT
Rule 228   callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass
Rule 229   optionalReceiverType -> receiverType
Rule 230   optionalReceiverType -> <empty>
Rule 231   simpleIdentifierOrClass -> simpleIdentifier
Rule 232   simpleIdentifierOrClass -> CLASS
Rule 233   assignmentAndOperator -> MAISIGUAL
Rule 234   assignmentAndOperator -> MENOSIGUAL
Rule 235   assignmentAndOperator -> MULTIGUAL
Rule 236   assignmentAndOperator -> DIVIGUAL
Rule 237   assignmentAndOperator -> MODIGUAL
Rule 238   equalityOperator -> DIFERENTE
Rule 239   equalityOperator -> IDENTIDADE
Rule 240   equalityOperator -> IGUALDADE
Rule 241   equalityOperator -> SEMIDENTIDADE
Rule 242   comparisonOperator -> MENOR
Rule 243   comparisonOperator -> MAIOR
Rule 244   comparisonOperator -> MENORIGUAL
Rule 245   comparisonOperator -> MAIORIGUAL
Rule 246   inOperator -> IN
Rule 247   inOperator -> NOT_IN
Rule 248   isOperator -> IS
Rule 249   isOperator -> NOT_IS
Rule 250   additiveOperator -> PLUS
Rule 251   additiveOperator -> MINUS
Rule 252   multiplicativeOperator -> MULT
Rule 253   multiplicativeOperator -> DIVIDE
Rule 254   multiplicativeOperator -> MOD
Rule 255   asOperator -> AS
Rule 256   asOperator -> AS asOperator
Rule 257   prefixUnaryOperator -> INCREMENTO
Rule 258   prefixUnaryOperator -> DECREMENTO
Rule 259   prefixUnaryOperator -> MINUS
Rule 260   prefixUnaryOperator -> PLUS
Rule 261   prefixUnaryOperator -> NOT
Rule 262   postfixUnaryOperator -> INCREMENTO
Rule 263   postfixUnaryOperator -> DECREMENTO
Rule 264   memberAccessOperator -> safeNav
Rule 265   memberAccessOperator -> COLONCOLON
Rule 266   safeNav -> PONTO
Rule 267   simpleIdentifier -> ID
Rule 268   simpleIdentifier -> CROSSINLINE
Rule 269   simpleIdentifier -> IMPORT
Rule 270   simpleIdentifier -> INIT
Rule 271   simpleIdentifier -> NOINLINE
Rule 272   simpleIdentifier -> OUT
Rule 273   simpleIdentifier -> VARARG
Rule 274   simpleIdentifier -> WHERE
Rule 275   simpleIdentifier -> OBJECT
Rule 276   simpleIdentifier -> CONST
Rule 277   simpleIdentifier -> CONSTRUCTOR
Rule 278   simpleIdentifier -> EOF
Rule 279   simpleIdentifier -> FALSE
Rule 280   simpleIdentifier -> FUNCTION
Rule 281   simpleIdentifier -> NULL
Rule 282   simpleIdentifier -> NULLABLE
Rule 283   simpleIdentifier -> NUMBER
Rule 284   simpleIdentifier -> OPERATOR
Rule 285   simpleIdentifier -> SMARTCAST
Rule 286   simpleIdentifier -> THIS
Rule 287   simpleIdentifier -> TRUE
Rule 288   simpleIdentifier -> VAL
Rule 289   simpleIdentifier -> VAR
Rule 290   simpleIdentifier -> WHEN
Rule 291   simpleIdentifier -> LONG
Rule 292   simpleIdentifier -> ARRAY

Terminals, with rules where they appear

AND                  : 97
ARRAY                : 292
AS                   : 255 256
ATRIBUICAO           : 10 25 30 91
BOOLEAN              : 
BREAK                : 226
BREAK_AT             : 227
CHAR                 : 
CLASS                : 152 153 232
COLONCOLON           : 228 265
COMMA                : 18 19 20 29 37 64 65 151 164 166 184 188 188 200
CONST                : 276
CONSTRUCTOR          : 277
CONTINUE             : 224
CONTINUE_AT          : 225
CROSSINLINE          : 194 268
DECREMENTO           : 258 263
DIFERENTE            : 238
DIVIDE               : 253
DIVIGUAL             : 236
DO                   : 89 90
DOISP                : 4 23 32 38 212
DOUBLE               : 
ELSE                 : 214
ELVIS                : 111
EOF                  : 278
FALSE                : 279
FLOAT                : 
FOR                  : 83 84 85 86
FUN                  : 3 209
FUNCTION             : 280
ID                   : 267
IDENTIDADE           : 239
IF                   : 213 214
IGUALDADE            : 169 170 240
IMPORT               : 269
IN                   : 49 83 84 85 86 246
INCREMENTO           : 257 262
INIT                 : 270
INT                  : 
IS                   : 248
LCCT                 : 148 149 181 182
LCHAVE               : 78 195
LITERAL_STRING       : 174
LONG                 : 291
LPAREN               : 26 27 34 35 60 67 83 84 85 86 87 88 89 90 141 144 167 168 180 185 186 213 214
MAIOR                : 17 161 162 243
MAIORIGUAL           : 245
MAISIGUAL            : 233
MENOR                : 17 161 162 242
MENORIGUAL           : 244
MENOSIGUAL           : 234
MINUS                : 251 259
MOD                  : 254
MODIGUAL             : 237
MULT                 : 169 252
MULTIGUAL            : 235
NOINLINE             : 193 271
NOT                  : 261
NOT_IN               : 247
NOT_IS               : 249
NULL                 : 281
NULLABLE             : 282
NUMBER               : 283
OBJECT               : 275
OPERATOR             : 284
OR                   : 95
OUT                  : 50 272
PLUS                 : 250 260
PONTO                : 58 203 266
PONTOPONTO           : 115
PV                   : 8 88 216 219
RCCT                 : 148 149 181 182
RCHAVE               : 78 195
RETURN               : 221
RETURN_AT            : 222
RPAREN               : 26 27 34 35 60 67 83 84 85 86 87 88 89 90 141 144 167 168 180 185 186 213 214
SEMIDENTIDADE        : 241
SETA                 : 58 59 197 198
SMARTCAST            : 285
STRING               : 
SUSPEND              : 47
THIS                 : 286
TRUE                 : 287
VAL                  : 12 288
VAR                  : 11 289
VARARG               : 192 273
WHEN                 : 290
WHERE                : 274
WHILE                : 87 88 89 90
error                : 

Nonterminals, with rules where they appear

additiveExpression   : 114 115 117
additiveOperator     : 117
annotatedLambda      : 154
anonymousFunction    : 211
asExpression         : 118 119
asOperator           : 121 256
assignableExpression : 92 144
assignableSuffix     : 138
assignment           : 72
assignmentAndOperator : 92
block                : 6 24 76
callSuffix           : 135
callableReference    : 175
collectionLiteral    : 177
collectionLiteralRecursive : 181 184
comparison           : 98 99
comparisonOperator   : 101
conjunction          : 94 95 97
controlStructureBody : 83 85 87 89 215 217
controlStructureBodyOrPV : 213 214
directlyAssignableExpression : 91 141
disjunction          : 93 95
doWhileStatement     : 82
elvisExpression      : 102 103 108 111
elvisOrType          : 104 105
equality             : 96 97 99
equalityOperator     : 99
expression           : 10 25 30 74 83 84 85 86 87 88 89 90 91 92 150 151 169 170 171 180 183 184 213 214 221 222 223
forStatement_MD      : 79
forStatement_VD      : 80
functionBody         : 207
functionDeclaration  : 1 2 71
functionLiteral      : 176
functionType         : 43
functionTypeParameters : 58 59
functionValueParameter : 28 29
functionValueParameters : 3
functionValueParametersRecursive : 26 29
genericVariableDeclaration : 10
ifExpression         : 178
inOperator           : 106
inOrIs               : 104 105
indexingSuffix       : 136 146
indexingSuffixRecursive : 148 151
infixFunctionCall    : 110 111 113
infixOperation       : 100 101 101
infixOperationRecursive : 102 105
isOperator           : 107
jumpExpression       : 179
kotlinFile           : 1 0
label                : 126
lambdaLiteral        : 160 210
lambdaParameter      : 199 200
lambdaParameters     : 197 200
loopStatement        : 73
memberAccessOperator : 152 153
multiVariableDeclaration : 15 83 84 202
multiVariableDeclarationRecursive : 34 37
multiplicativeExpression : 116 117 119
multiplicativeOperator : 119
navigationSuffix     : 137 147
optionalBlock        : 3
optionalCOMMA        : 17 28 60
optionalControlStructureBody : 214
optionalFunctionBody : 209
optionalPV           : 214
optionalParameterModifiers : 189
optionalParameterOrType : 60 64 65
optionalPv           : 10
optionalReceiverType : 228
optionalType         : 3 189 202 209
optionalTypeArguments : 154 155
optionalTypeConstraints : 209
optionalTypeModifiers : 39
optionalTypeParameters : 10
optionalTypePonto    : 209
optionalValueArguments : 154 155
optionsLambdaLiteral : 195
optype               : 39
parameter            : 30 31 61
parameterModifiers   : 190
parameterOrTypeRecursive : 60 65
parameterWithOptionalType : 187 188
parametersWithOptionalType : 209
parametersWithOptionalTypeRecursive : 185 188
parenthesizedAssignableExpression : 143
parenthesizedDirectlyAssignableExpression : 140
parenthesizedExpression : 153 172
parenthesizedType    : 42 68
postfixUnaryExpression : 122 123 138
postfixUnaryExpressionRecursive : 130 132
postfixUnaryOperator : 133
postfixUnarySuffix   : 129 130
prefixUnaryExpression : 120 121 142
prefixUnaryExpressionRecursive : 122 125
prefixUnaryOperator  : 127
primaryExpression    : 131 132
propertyDeclaration  : 75
rangeExpression      : 112 113 115
receiverType         : 58 229
safeNav              : 264
simpleIdentifier     : 3 22 23 32 33 38 52 53 113 128 139 152 169 170 173 189 212 231
simpleIdentifierOrClass : 228
simpleUserType       : 51
statement            : 69 70 77
statements           : 70 78 196 197 198
type                 : 4 23 32 38 54 55 58 59 62 67 109 121 203 212
typeArguments        : 52 134 145 156
typeArgumentsRecursive : 161 164
typeConstraints      : 205
typeModifier         : 45 46 68
typeModifiers        : 40 46
typeParameter        : 17 18 19
typeParameters       : 13
typeParametersRecursive : 17 19
typeProjection       : 56 163 164
typeProjectionModifier : 57
typeProjectionModifiers : 54 57
unaryPrefix          : 124 125
userType             : 44
valueArgument        : 165 166
valueArguments       : 158
valueArgumentsRecursive : 166 168
varOrVal             : 10
variableDeclaration  : 16 36 37 85 86 201
varianceModifier     : 48
whileStatement       : 81

Parsing method: LALR

state 0

    (0) S' -> . kotlinFile
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock

    FUN             shift and go to state 3

    kotlinFile                     shift and go to state 1
    functionDeclaration            shift and go to state 2

state 1

    (0) S' -> kotlinFile .



state 2

    (1) kotlinFile -> functionDeclaration . kotlinFile
    (2) kotlinFile -> functionDeclaration .
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock

    $end            reduce using rule 2 (kotlinFile -> functionDeclaration .)
    FUN             shift and go to state 3

    functionDeclaration            shift and go to state 2
    kotlinFile                     shift and go to state 4

state 3

    (3) functionDeclaration -> FUN . simpleIdentifier functionValueParameters optionalType optionalBlock
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    simpleIdentifier               shift and go to state 5

state 4

    (1) kotlinFile -> functionDeclaration kotlinFile .

    $end            reduce using rule 1 (kotlinFile -> functionDeclaration kotlinFile .)


state 5

    (3) functionDeclaration -> FUN simpleIdentifier . functionValueParameters optionalType optionalBlock
    (26) functionValueParameters -> . LPAREN functionValueParametersRecursive RPAREN
    (27) functionValueParameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 33

    functionValueParameters        shift and go to state 32

state 6

    (267) simpleIdentifier -> ID .

    LPAREN          reduce using rule 267 (simpleIdentifier -> ID .)
    DOISP           reduce using rule 267 (simpleIdentifier -> ID .)
    ATRIBUICAO      reduce using rule 267 (simpleIdentifier -> ID .)
    INCREMENTO      reduce using rule 267 (simpleIdentifier -> ID .)
    DECREMENTO      reduce using rule 267 (simpleIdentifier -> ID .)
    MENOR           reduce using rule 267 (simpleIdentifier -> ID .)
    LCCT            reduce using rule 267 (simpleIdentifier -> ID .)
    COLONCOLON      reduce using rule 267 (simpleIdentifier -> ID .)
    PONTO           reduce using rule 267 (simpleIdentifier -> ID .)
    RCHAVE          reduce using rule 267 (simpleIdentifier -> ID .)
    AS              reduce using rule 267 (simpleIdentifier -> ID .)
    MAISIGUAL       reduce using rule 267 (simpleIdentifier -> ID .)
    MENOSIGUAL      reduce using rule 267 (simpleIdentifier -> ID .)
    MULTIGUAL       reduce using rule 267 (simpleIdentifier -> ID .)
    DIVIGUAL        reduce using rule 267 (simpleIdentifier -> ID .)
    MODIGUAL        reduce using rule 267 (simpleIdentifier -> ID .)
    MULT            reduce using rule 267 (simpleIdentifier -> ID .)
    DIVIDE          reduce using rule 267 (simpleIdentifier -> ID .)
    MOD             reduce using rule 267 (simpleIdentifier -> ID .)
    PLUS            reduce using rule 267 (simpleIdentifier -> ID .)
    MINUS           reduce using rule 267 (simpleIdentifier -> ID .)
    PONTOPONTO      reduce using rule 267 (simpleIdentifier -> ID .)
    ID              reduce using rule 267 (simpleIdentifier -> ID .)
    CROSSINLINE     reduce using rule 267 (simpleIdentifier -> ID .)
    IMPORT          reduce using rule 267 (simpleIdentifier -> ID .)
    INIT            reduce using rule 267 (simpleIdentifier -> ID .)
    NOINLINE        reduce using rule 267 (simpleIdentifier -> ID .)
    OUT             reduce using rule 267 (simpleIdentifier -> ID .)
    VARARG          reduce using rule 267 (simpleIdentifier -> ID .)
    WHERE           reduce using rule 267 (simpleIdentifier -> ID .)
    OBJECT          reduce using rule 267 (simpleIdentifier -> ID .)
    CONST           reduce using rule 267 (simpleIdentifier -> ID .)
    CONSTRUCTOR     reduce using rule 267 (simpleIdentifier -> ID .)
    EOF             reduce using rule 267 (simpleIdentifier -> ID .)
    FALSE           reduce using rule 267 (simpleIdentifier -> ID .)
    FUNCTION        reduce using rule 267 (simpleIdentifier -> ID .)
    NULL            reduce using rule 267 (simpleIdentifier -> ID .)
    NULLABLE        reduce using rule 267 (simpleIdentifier -> ID .)
    NUMBER          reduce using rule 267 (simpleIdentifier -> ID .)
    OPERATOR        reduce using rule 267 (simpleIdentifier -> ID .)
    SMARTCAST       reduce using rule 267 (simpleIdentifier -> ID .)
    THIS            reduce using rule 267 (simpleIdentifier -> ID .)
    TRUE            reduce using rule 267 (simpleIdentifier -> ID .)
    VAL             reduce using rule 267 (simpleIdentifier -> ID .)
    VAR             reduce using rule 267 (simpleIdentifier -> ID .)
    WHEN            reduce using rule 267 (simpleIdentifier -> ID .)
    LONG            reduce using rule 267 (simpleIdentifier -> ID .)
    ARRAY           reduce using rule 267 (simpleIdentifier -> ID .)
    ELVIS           reduce using rule 267 (simpleIdentifier -> ID .)
    IN              reduce using rule 267 (simpleIdentifier -> ID .)
    NOT_IN          reduce using rule 267 (simpleIdentifier -> ID .)
    IS              reduce using rule 267 (simpleIdentifier -> ID .)
    NOT_IS          reduce using rule 267 (simpleIdentifier -> ID .)
    MAIOR           reduce using rule 267 (simpleIdentifier -> ID .)
    MENORIGUAL      reduce using rule 267 (simpleIdentifier -> ID .)
    MAIORIGUAL      reduce using rule 267 (simpleIdentifier -> ID .)
    DIFERENTE       reduce using rule 267 (simpleIdentifier -> ID .)
    IDENTIDADE      reduce using rule 267 (simpleIdentifier -> ID .)
    IGUALDADE       reduce using rule 267 (simpleIdentifier -> ID .)
    SEMIDENTIDADE   reduce using rule 267 (simpleIdentifier -> ID .)
    AND             reduce using rule 267 (simpleIdentifier -> ID .)
    OR              reduce using rule 267 (simpleIdentifier -> ID .)
    FUN             reduce using rule 267 (simpleIdentifier -> ID .)
    FOR             reduce using rule 267 (simpleIdentifier -> ID .)
    WHILE           reduce using rule 267 (simpleIdentifier -> ID .)
    DO              reduce using rule 267 (simpleIdentifier -> ID .)
    LITERAL_STRING  reduce using rule 267 (simpleIdentifier -> ID .)
    IF              reduce using rule 267 (simpleIdentifier -> ID .)
    RETURN          reduce using rule 267 (simpleIdentifier -> ID .)
    RETURN_AT       reduce using rule 267 (simpleIdentifier -> ID .)
    CONTINUE        reduce using rule 267 (simpleIdentifier -> ID .)
    CONTINUE_AT     reduce using rule 267 (simpleIdentifier -> ID .)
    BREAK           reduce using rule 267 (simpleIdentifier -> ID .)
    BREAK_AT        reduce using rule 267 (simpleIdentifier -> ID .)
    NOT             reduce using rule 267 (simpleIdentifier -> ID .)
    SUSPEND         reduce using rule 267 (simpleIdentifier -> ID .)
    LCHAVE          reduce using rule 267 (simpleIdentifier -> ID .)
    $end            reduce using rule 267 (simpleIdentifier -> ID .)
    COMMA           reduce using rule 267 (simpleIdentifier -> ID .)
    RPAREN          reduce using rule 267 (simpleIdentifier -> ID .)
    RCCT            reduce using rule 267 (simpleIdentifier -> ID .)
    PV              reduce using rule 267 (simpleIdentifier -> ID .)
    ELSE            reduce using rule 267 (simpleIdentifier -> ID .)
    SETA            reduce using rule 267 (simpleIdentifier -> ID .)
    CLASS           reduce using rule 267 (simpleIdentifier -> ID .)


state 7

    (268) simpleIdentifier -> CROSSINLINE .

    LPAREN          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    DOISP           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    ATRIBUICAO      reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    INCREMENTO      reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    DECREMENTO      reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MENOR           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    LCCT            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    COLONCOLON      reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    PONTO           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    RCHAVE          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    AS              reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MAISIGUAL       reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MENOSIGUAL      reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MULTIGUAL       reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    DIVIGUAL        reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MODIGUAL        reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MULT            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    DIVIDE          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MOD             reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    PLUS            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MINUS           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    PONTOPONTO      reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    ID              reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    IMPORT          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    INIT            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    NOINLINE        reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    OUT             reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    VARARG          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    WHERE           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    OBJECT          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    CONST           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    CONSTRUCTOR     reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    EOF             reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    FALSE           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    FUNCTION        reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    NULL            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    NULLABLE        reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    NUMBER          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    OPERATOR        reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    SMARTCAST       reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    THIS            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    TRUE            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    VAL             reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    VAR             reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    WHEN            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    LONG            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    ARRAY           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    ELVIS           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    IN              reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    NOT_IN          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    IS              reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    NOT_IS          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MAIOR           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MENORIGUAL      reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    MAIORIGUAL      reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    DIFERENTE       reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    IDENTIDADE      reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    IGUALDADE       reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    SEMIDENTIDADE   reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    AND             reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    OR              reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    FUN             reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    FOR             reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    WHILE           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    DO              reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    LITERAL_STRING  reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    IF              reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    RETURN          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    RETURN_AT       reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE        reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE_AT     reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    BREAK           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    BREAK_AT        reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    NOT             reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    SUSPEND         reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    LCHAVE          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    $end            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    COMMA           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    RPAREN          reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    RCCT            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    PV              reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    ELSE            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    SETA            reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)
    CLASS           reduce using rule 268 (simpleIdentifier -> CROSSINLINE .)


state 8

    (269) simpleIdentifier -> IMPORT .

    LPAREN          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    DOISP           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    ATRIBUICAO      reduce using rule 269 (simpleIdentifier -> IMPORT .)
    INCREMENTO      reduce using rule 269 (simpleIdentifier -> IMPORT .)
    DECREMENTO      reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MENOR           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    LCCT            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    COLONCOLON      reduce using rule 269 (simpleIdentifier -> IMPORT .)
    PONTO           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    RCHAVE          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    AS              reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MAISIGUAL       reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MENOSIGUAL      reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MULTIGUAL       reduce using rule 269 (simpleIdentifier -> IMPORT .)
    DIVIGUAL        reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MODIGUAL        reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MULT            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    DIVIDE          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MOD             reduce using rule 269 (simpleIdentifier -> IMPORT .)
    PLUS            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MINUS           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    PONTOPONTO      reduce using rule 269 (simpleIdentifier -> IMPORT .)
    ID              reduce using rule 269 (simpleIdentifier -> IMPORT .)
    CROSSINLINE     reduce using rule 269 (simpleIdentifier -> IMPORT .)
    IMPORT          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    INIT            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    NOINLINE        reduce using rule 269 (simpleIdentifier -> IMPORT .)
    OUT             reduce using rule 269 (simpleIdentifier -> IMPORT .)
    VARARG          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    WHERE           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    OBJECT          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    CONST           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    CONSTRUCTOR     reduce using rule 269 (simpleIdentifier -> IMPORT .)
    EOF             reduce using rule 269 (simpleIdentifier -> IMPORT .)
    FALSE           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    FUNCTION        reduce using rule 269 (simpleIdentifier -> IMPORT .)
    NULL            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    NULLABLE        reduce using rule 269 (simpleIdentifier -> IMPORT .)
    NUMBER          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    OPERATOR        reduce using rule 269 (simpleIdentifier -> IMPORT .)
    SMARTCAST       reduce using rule 269 (simpleIdentifier -> IMPORT .)
    THIS            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    TRUE            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    VAL             reduce using rule 269 (simpleIdentifier -> IMPORT .)
    VAR             reduce using rule 269 (simpleIdentifier -> IMPORT .)
    WHEN            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    LONG            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    ARRAY           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    ELVIS           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    IN              reduce using rule 269 (simpleIdentifier -> IMPORT .)
    NOT_IN          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    IS              reduce using rule 269 (simpleIdentifier -> IMPORT .)
    NOT_IS          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MAIOR           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MENORIGUAL      reduce using rule 269 (simpleIdentifier -> IMPORT .)
    MAIORIGUAL      reduce using rule 269 (simpleIdentifier -> IMPORT .)
    DIFERENTE       reduce using rule 269 (simpleIdentifier -> IMPORT .)
    IDENTIDADE      reduce using rule 269 (simpleIdentifier -> IMPORT .)
    IGUALDADE       reduce using rule 269 (simpleIdentifier -> IMPORT .)
    SEMIDENTIDADE   reduce using rule 269 (simpleIdentifier -> IMPORT .)
    AND             reduce using rule 269 (simpleIdentifier -> IMPORT .)
    OR              reduce using rule 269 (simpleIdentifier -> IMPORT .)
    FUN             reduce using rule 269 (simpleIdentifier -> IMPORT .)
    FOR             reduce using rule 269 (simpleIdentifier -> IMPORT .)
    WHILE           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    DO              reduce using rule 269 (simpleIdentifier -> IMPORT .)
    LITERAL_STRING  reduce using rule 269 (simpleIdentifier -> IMPORT .)
    IF              reduce using rule 269 (simpleIdentifier -> IMPORT .)
    RETURN          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    RETURN_AT       reduce using rule 269 (simpleIdentifier -> IMPORT .)
    CONTINUE        reduce using rule 269 (simpleIdentifier -> IMPORT .)
    CONTINUE_AT     reduce using rule 269 (simpleIdentifier -> IMPORT .)
    BREAK           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    BREAK_AT        reduce using rule 269 (simpleIdentifier -> IMPORT .)
    NOT             reduce using rule 269 (simpleIdentifier -> IMPORT .)
    SUSPEND         reduce using rule 269 (simpleIdentifier -> IMPORT .)
    LCHAVE          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    $end            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    COMMA           reduce using rule 269 (simpleIdentifier -> IMPORT .)
    RPAREN          reduce using rule 269 (simpleIdentifier -> IMPORT .)
    RCCT            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    PV              reduce using rule 269 (simpleIdentifier -> IMPORT .)
    ELSE            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    SETA            reduce using rule 269 (simpleIdentifier -> IMPORT .)
    CLASS           reduce using rule 269 (simpleIdentifier -> IMPORT .)


state 9

    (270) simpleIdentifier -> INIT .

    LPAREN          reduce using rule 270 (simpleIdentifier -> INIT .)
    DOISP           reduce using rule 270 (simpleIdentifier -> INIT .)
    ATRIBUICAO      reduce using rule 270 (simpleIdentifier -> INIT .)
    INCREMENTO      reduce using rule 270 (simpleIdentifier -> INIT .)
    DECREMENTO      reduce using rule 270 (simpleIdentifier -> INIT .)
    MENOR           reduce using rule 270 (simpleIdentifier -> INIT .)
    LCCT            reduce using rule 270 (simpleIdentifier -> INIT .)
    COLONCOLON      reduce using rule 270 (simpleIdentifier -> INIT .)
    PONTO           reduce using rule 270 (simpleIdentifier -> INIT .)
    RCHAVE          reduce using rule 270 (simpleIdentifier -> INIT .)
    AS              reduce using rule 270 (simpleIdentifier -> INIT .)
    MAISIGUAL       reduce using rule 270 (simpleIdentifier -> INIT .)
    MENOSIGUAL      reduce using rule 270 (simpleIdentifier -> INIT .)
    MULTIGUAL       reduce using rule 270 (simpleIdentifier -> INIT .)
    DIVIGUAL        reduce using rule 270 (simpleIdentifier -> INIT .)
    MODIGUAL        reduce using rule 270 (simpleIdentifier -> INIT .)
    MULT            reduce using rule 270 (simpleIdentifier -> INIT .)
    DIVIDE          reduce using rule 270 (simpleIdentifier -> INIT .)
    MOD             reduce using rule 270 (simpleIdentifier -> INIT .)
    PLUS            reduce using rule 270 (simpleIdentifier -> INIT .)
    MINUS           reduce using rule 270 (simpleIdentifier -> INIT .)
    PONTOPONTO      reduce using rule 270 (simpleIdentifier -> INIT .)
    ID              reduce using rule 270 (simpleIdentifier -> INIT .)
    CROSSINLINE     reduce using rule 270 (simpleIdentifier -> INIT .)
    IMPORT          reduce using rule 270 (simpleIdentifier -> INIT .)
    INIT            reduce using rule 270 (simpleIdentifier -> INIT .)
    NOINLINE        reduce using rule 270 (simpleIdentifier -> INIT .)
    OUT             reduce using rule 270 (simpleIdentifier -> INIT .)
    VARARG          reduce using rule 270 (simpleIdentifier -> INIT .)
    WHERE           reduce using rule 270 (simpleIdentifier -> INIT .)
    OBJECT          reduce using rule 270 (simpleIdentifier -> INIT .)
    CONST           reduce using rule 270 (simpleIdentifier -> INIT .)
    CONSTRUCTOR     reduce using rule 270 (simpleIdentifier -> INIT .)
    EOF             reduce using rule 270 (simpleIdentifier -> INIT .)
    FALSE           reduce using rule 270 (simpleIdentifier -> INIT .)
    FUNCTION        reduce using rule 270 (simpleIdentifier -> INIT .)
    NULL            reduce using rule 270 (simpleIdentifier -> INIT .)
    NULLABLE        reduce using rule 270 (simpleIdentifier -> INIT .)
    NUMBER          reduce using rule 270 (simpleIdentifier -> INIT .)
    OPERATOR        reduce using rule 270 (simpleIdentifier -> INIT .)
    SMARTCAST       reduce using rule 270 (simpleIdentifier -> INIT .)
    THIS            reduce using rule 270 (simpleIdentifier -> INIT .)
    TRUE            reduce using rule 270 (simpleIdentifier -> INIT .)
    VAL             reduce using rule 270 (simpleIdentifier -> INIT .)
    VAR             reduce using rule 270 (simpleIdentifier -> INIT .)
    WHEN            reduce using rule 270 (simpleIdentifier -> INIT .)
    LONG            reduce using rule 270 (simpleIdentifier -> INIT .)
    ARRAY           reduce using rule 270 (simpleIdentifier -> INIT .)
    ELVIS           reduce using rule 270 (simpleIdentifier -> INIT .)
    IN              reduce using rule 270 (simpleIdentifier -> INIT .)
    NOT_IN          reduce using rule 270 (simpleIdentifier -> INIT .)
    IS              reduce using rule 270 (simpleIdentifier -> INIT .)
    NOT_IS          reduce using rule 270 (simpleIdentifier -> INIT .)
    MAIOR           reduce using rule 270 (simpleIdentifier -> INIT .)
    MENORIGUAL      reduce using rule 270 (simpleIdentifier -> INIT .)
    MAIORIGUAL      reduce using rule 270 (simpleIdentifier -> INIT .)
    DIFERENTE       reduce using rule 270 (simpleIdentifier -> INIT .)
    IDENTIDADE      reduce using rule 270 (simpleIdentifier -> INIT .)
    IGUALDADE       reduce using rule 270 (simpleIdentifier -> INIT .)
    SEMIDENTIDADE   reduce using rule 270 (simpleIdentifier -> INIT .)
    AND             reduce using rule 270 (simpleIdentifier -> INIT .)
    OR              reduce using rule 270 (simpleIdentifier -> INIT .)
    FUN             reduce using rule 270 (simpleIdentifier -> INIT .)
    FOR             reduce using rule 270 (simpleIdentifier -> INIT .)
    WHILE           reduce using rule 270 (simpleIdentifier -> INIT .)
    DO              reduce using rule 270 (simpleIdentifier -> INIT .)
    LITERAL_STRING  reduce using rule 270 (simpleIdentifier -> INIT .)
    IF              reduce using rule 270 (simpleIdentifier -> INIT .)
    RETURN          reduce using rule 270 (simpleIdentifier -> INIT .)
    RETURN_AT       reduce using rule 270 (simpleIdentifier -> INIT .)
    CONTINUE        reduce using rule 270 (simpleIdentifier -> INIT .)
    CONTINUE_AT     reduce using rule 270 (simpleIdentifier -> INIT .)
    BREAK           reduce using rule 270 (simpleIdentifier -> INIT .)
    BREAK_AT        reduce using rule 270 (simpleIdentifier -> INIT .)
    NOT             reduce using rule 270 (simpleIdentifier -> INIT .)
    SUSPEND         reduce using rule 270 (simpleIdentifier -> INIT .)
    LCHAVE          reduce using rule 270 (simpleIdentifier -> INIT .)
    $end            reduce using rule 270 (simpleIdentifier -> INIT .)
    COMMA           reduce using rule 270 (simpleIdentifier -> INIT .)
    RPAREN          reduce using rule 270 (simpleIdentifier -> INIT .)
    RCCT            reduce using rule 270 (simpleIdentifier -> INIT .)
    PV              reduce using rule 270 (simpleIdentifier -> INIT .)
    ELSE            reduce using rule 270 (simpleIdentifier -> INIT .)
    SETA            reduce using rule 270 (simpleIdentifier -> INIT .)
    CLASS           reduce using rule 270 (simpleIdentifier -> INIT .)


state 10

    (271) simpleIdentifier -> NOINLINE .

    LPAREN          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    DOISP           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    ATRIBUICAO      reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    INCREMENTO      reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    DECREMENTO      reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MENOR           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    LCCT            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    COLONCOLON      reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    PONTO           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    RCHAVE          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    AS              reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MAISIGUAL       reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MENOSIGUAL      reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MULTIGUAL       reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    DIVIGUAL        reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MODIGUAL        reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MULT            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    DIVIDE          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MOD             reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    PLUS            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MINUS           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    PONTOPONTO      reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    ID              reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    CROSSINLINE     reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    IMPORT          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    INIT            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    NOINLINE        reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    OUT             reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    VARARG          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    WHERE           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    OBJECT          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    CONST           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    CONSTRUCTOR     reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    EOF             reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    FALSE           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    FUNCTION        reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    NULL            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    NULLABLE        reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    NUMBER          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    OPERATOR        reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    SMARTCAST       reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    THIS            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    TRUE            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    VAL             reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    VAR             reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    WHEN            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    LONG            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    ARRAY           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    ELVIS           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    IN              reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    NOT_IN          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    IS              reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    NOT_IS          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MAIOR           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MENORIGUAL      reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    MAIORIGUAL      reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    DIFERENTE       reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    IDENTIDADE      reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    IGUALDADE       reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    SEMIDENTIDADE   reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    AND             reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    OR              reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    FUN             reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    FOR             reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    WHILE           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    DO              reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    LITERAL_STRING  reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    IF              reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    RETURN          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    RETURN_AT       reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    CONTINUE        reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    CONTINUE_AT     reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    BREAK           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    BREAK_AT        reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    NOT             reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    SUSPEND         reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    LCHAVE          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    $end            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    COMMA           reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    RPAREN          reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    RCCT            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    PV              reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    ELSE            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    SETA            reduce using rule 271 (simpleIdentifier -> NOINLINE .)
    CLASS           reduce using rule 271 (simpleIdentifier -> NOINLINE .)


state 11

    (272) simpleIdentifier -> OUT .

    LPAREN          reduce using rule 272 (simpleIdentifier -> OUT .)
    DOISP           reduce using rule 272 (simpleIdentifier -> OUT .)
    ATRIBUICAO      reduce using rule 272 (simpleIdentifier -> OUT .)
    INCREMENTO      reduce using rule 272 (simpleIdentifier -> OUT .)
    DECREMENTO      reduce using rule 272 (simpleIdentifier -> OUT .)
    MENOR           reduce using rule 272 (simpleIdentifier -> OUT .)
    LCCT            reduce using rule 272 (simpleIdentifier -> OUT .)
    COLONCOLON      reduce using rule 272 (simpleIdentifier -> OUT .)
    PONTO           reduce using rule 272 (simpleIdentifier -> OUT .)
    RCHAVE          reduce using rule 272 (simpleIdentifier -> OUT .)
    AS              reduce using rule 272 (simpleIdentifier -> OUT .)
    MAISIGUAL       reduce using rule 272 (simpleIdentifier -> OUT .)
    MENOSIGUAL      reduce using rule 272 (simpleIdentifier -> OUT .)
    MULTIGUAL       reduce using rule 272 (simpleIdentifier -> OUT .)
    DIVIGUAL        reduce using rule 272 (simpleIdentifier -> OUT .)
    MODIGUAL        reduce using rule 272 (simpleIdentifier -> OUT .)
    MULT            reduce using rule 272 (simpleIdentifier -> OUT .)
    DIVIDE          reduce using rule 272 (simpleIdentifier -> OUT .)
    MOD             reduce using rule 272 (simpleIdentifier -> OUT .)
    PLUS            reduce using rule 272 (simpleIdentifier -> OUT .)
    MINUS           reduce using rule 272 (simpleIdentifier -> OUT .)
    PONTOPONTO      reduce using rule 272 (simpleIdentifier -> OUT .)
    ID              reduce using rule 272 (simpleIdentifier -> OUT .)
    CROSSINLINE     reduce using rule 272 (simpleIdentifier -> OUT .)
    IMPORT          reduce using rule 272 (simpleIdentifier -> OUT .)
    INIT            reduce using rule 272 (simpleIdentifier -> OUT .)
    NOINLINE        reduce using rule 272 (simpleIdentifier -> OUT .)
    OUT             reduce using rule 272 (simpleIdentifier -> OUT .)
    VARARG          reduce using rule 272 (simpleIdentifier -> OUT .)
    WHERE           reduce using rule 272 (simpleIdentifier -> OUT .)
    OBJECT          reduce using rule 272 (simpleIdentifier -> OUT .)
    CONST           reduce using rule 272 (simpleIdentifier -> OUT .)
    CONSTRUCTOR     reduce using rule 272 (simpleIdentifier -> OUT .)
    EOF             reduce using rule 272 (simpleIdentifier -> OUT .)
    FALSE           reduce using rule 272 (simpleIdentifier -> OUT .)
    FUNCTION        reduce using rule 272 (simpleIdentifier -> OUT .)
    NULL            reduce using rule 272 (simpleIdentifier -> OUT .)
    NULLABLE        reduce using rule 272 (simpleIdentifier -> OUT .)
    NUMBER          reduce using rule 272 (simpleIdentifier -> OUT .)
    OPERATOR        reduce using rule 272 (simpleIdentifier -> OUT .)
    SMARTCAST       reduce using rule 272 (simpleIdentifier -> OUT .)
    THIS            reduce using rule 272 (simpleIdentifier -> OUT .)
    TRUE            reduce using rule 272 (simpleIdentifier -> OUT .)
    VAL             reduce using rule 272 (simpleIdentifier -> OUT .)
    VAR             reduce using rule 272 (simpleIdentifier -> OUT .)
    WHEN            reduce using rule 272 (simpleIdentifier -> OUT .)
    LONG            reduce using rule 272 (simpleIdentifier -> OUT .)
    ARRAY           reduce using rule 272 (simpleIdentifier -> OUT .)
    ELVIS           reduce using rule 272 (simpleIdentifier -> OUT .)
    IN              reduce using rule 272 (simpleIdentifier -> OUT .)
    NOT_IN          reduce using rule 272 (simpleIdentifier -> OUT .)
    IS              reduce using rule 272 (simpleIdentifier -> OUT .)
    NOT_IS          reduce using rule 272 (simpleIdentifier -> OUT .)
    MAIOR           reduce using rule 272 (simpleIdentifier -> OUT .)
    MENORIGUAL      reduce using rule 272 (simpleIdentifier -> OUT .)
    MAIORIGUAL      reduce using rule 272 (simpleIdentifier -> OUT .)
    DIFERENTE       reduce using rule 272 (simpleIdentifier -> OUT .)
    IDENTIDADE      reduce using rule 272 (simpleIdentifier -> OUT .)
    IGUALDADE       reduce using rule 272 (simpleIdentifier -> OUT .)
    SEMIDENTIDADE   reduce using rule 272 (simpleIdentifier -> OUT .)
    AND             reduce using rule 272 (simpleIdentifier -> OUT .)
    OR              reduce using rule 272 (simpleIdentifier -> OUT .)
    FUN             reduce using rule 272 (simpleIdentifier -> OUT .)
    FOR             reduce using rule 272 (simpleIdentifier -> OUT .)
    WHILE           reduce using rule 272 (simpleIdentifier -> OUT .)
    DO              reduce using rule 272 (simpleIdentifier -> OUT .)
    LITERAL_STRING  reduce using rule 272 (simpleIdentifier -> OUT .)
    IF              reduce using rule 272 (simpleIdentifier -> OUT .)
    RETURN          reduce using rule 272 (simpleIdentifier -> OUT .)
    RETURN_AT       reduce using rule 272 (simpleIdentifier -> OUT .)
    CONTINUE        reduce using rule 272 (simpleIdentifier -> OUT .)
    CONTINUE_AT     reduce using rule 272 (simpleIdentifier -> OUT .)
    BREAK           reduce using rule 272 (simpleIdentifier -> OUT .)
    BREAK_AT        reduce using rule 272 (simpleIdentifier -> OUT .)
    NOT             reduce using rule 272 (simpleIdentifier -> OUT .)
    SUSPEND         reduce using rule 272 (simpleIdentifier -> OUT .)
    LCHAVE          reduce using rule 272 (simpleIdentifier -> OUT .)
    $end            reduce using rule 272 (simpleIdentifier -> OUT .)
    COMMA           reduce using rule 272 (simpleIdentifier -> OUT .)
    RPAREN          reduce using rule 272 (simpleIdentifier -> OUT .)
    RCCT            reduce using rule 272 (simpleIdentifier -> OUT .)
    PV              reduce using rule 272 (simpleIdentifier -> OUT .)
    ELSE            reduce using rule 272 (simpleIdentifier -> OUT .)
    SETA            reduce using rule 272 (simpleIdentifier -> OUT .)
    CLASS           reduce using rule 272 (simpleIdentifier -> OUT .)


state 12

    (273) simpleIdentifier -> VARARG .

    LPAREN          reduce using rule 273 (simpleIdentifier -> VARARG .)
    DOISP           reduce using rule 273 (simpleIdentifier -> VARARG .)
    ATRIBUICAO      reduce using rule 273 (simpleIdentifier -> VARARG .)
    INCREMENTO      reduce using rule 273 (simpleIdentifier -> VARARG .)
    DECREMENTO      reduce using rule 273 (simpleIdentifier -> VARARG .)
    MENOR           reduce using rule 273 (simpleIdentifier -> VARARG .)
    LCCT            reduce using rule 273 (simpleIdentifier -> VARARG .)
    COLONCOLON      reduce using rule 273 (simpleIdentifier -> VARARG .)
    PONTO           reduce using rule 273 (simpleIdentifier -> VARARG .)
    RCHAVE          reduce using rule 273 (simpleIdentifier -> VARARG .)
    AS              reduce using rule 273 (simpleIdentifier -> VARARG .)
    MAISIGUAL       reduce using rule 273 (simpleIdentifier -> VARARG .)
    MENOSIGUAL      reduce using rule 273 (simpleIdentifier -> VARARG .)
    MULTIGUAL       reduce using rule 273 (simpleIdentifier -> VARARG .)
    DIVIGUAL        reduce using rule 273 (simpleIdentifier -> VARARG .)
    MODIGUAL        reduce using rule 273 (simpleIdentifier -> VARARG .)
    MULT            reduce using rule 273 (simpleIdentifier -> VARARG .)
    DIVIDE          reduce using rule 273 (simpleIdentifier -> VARARG .)
    MOD             reduce using rule 273 (simpleIdentifier -> VARARG .)
    PLUS            reduce using rule 273 (simpleIdentifier -> VARARG .)
    MINUS           reduce using rule 273 (simpleIdentifier -> VARARG .)
    PONTOPONTO      reduce using rule 273 (simpleIdentifier -> VARARG .)
    ID              reduce using rule 273 (simpleIdentifier -> VARARG .)
    CROSSINLINE     reduce using rule 273 (simpleIdentifier -> VARARG .)
    IMPORT          reduce using rule 273 (simpleIdentifier -> VARARG .)
    INIT            reduce using rule 273 (simpleIdentifier -> VARARG .)
    NOINLINE        reduce using rule 273 (simpleIdentifier -> VARARG .)
    OUT             reduce using rule 273 (simpleIdentifier -> VARARG .)
    VARARG          reduce using rule 273 (simpleIdentifier -> VARARG .)
    WHERE           reduce using rule 273 (simpleIdentifier -> VARARG .)
    OBJECT          reduce using rule 273 (simpleIdentifier -> VARARG .)
    CONST           reduce using rule 273 (simpleIdentifier -> VARARG .)
    CONSTRUCTOR     reduce using rule 273 (simpleIdentifier -> VARARG .)
    EOF             reduce using rule 273 (simpleIdentifier -> VARARG .)
    FALSE           reduce using rule 273 (simpleIdentifier -> VARARG .)
    FUNCTION        reduce using rule 273 (simpleIdentifier -> VARARG .)
    NULL            reduce using rule 273 (simpleIdentifier -> VARARG .)
    NULLABLE        reduce using rule 273 (simpleIdentifier -> VARARG .)
    NUMBER          reduce using rule 273 (simpleIdentifier -> VARARG .)
    OPERATOR        reduce using rule 273 (simpleIdentifier -> VARARG .)
    SMARTCAST       reduce using rule 273 (simpleIdentifier -> VARARG .)
    THIS            reduce using rule 273 (simpleIdentifier -> VARARG .)
    TRUE            reduce using rule 273 (simpleIdentifier -> VARARG .)
    VAL             reduce using rule 273 (simpleIdentifier -> VARARG .)
    VAR             reduce using rule 273 (simpleIdentifier -> VARARG .)
    WHEN            reduce using rule 273 (simpleIdentifier -> VARARG .)
    LONG            reduce using rule 273 (simpleIdentifier -> VARARG .)
    ARRAY           reduce using rule 273 (simpleIdentifier -> VARARG .)
    ELVIS           reduce using rule 273 (simpleIdentifier -> VARARG .)
    IN              reduce using rule 273 (simpleIdentifier -> VARARG .)
    NOT_IN          reduce using rule 273 (simpleIdentifier -> VARARG .)
    IS              reduce using rule 273 (simpleIdentifier -> VARARG .)
    NOT_IS          reduce using rule 273 (simpleIdentifier -> VARARG .)
    MAIOR           reduce using rule 273 (simpleIdentifier -> VARARG .)
    MENORIGUAL      reduce using rule 273 (simpleIdentifier -> VARARG .)
    MAIORIGUAL      reduce using rule 273 (simpleIdentifier -> VARARG .)
    DIFERENTE       reduce using rule 273 (simpleIdentifier -> VARARG .)
    IDENTIDADE      reduce using rule 273 (simpleIdentifier -> VARARG .)
    IGUALDADE       reduce using rule 273 (simpleIdentifier -> VARARG .)
    SEMIDENTIDADE   reduce using rule 273 (simpleIdentifier -> VARARG .)
    AND             reduce using rule 273 (simpleIdentifier -> VARARG .)
    OR              reduce using rule 273 (simpleIdentifier -> VARARG .)
    FUN             reduce using rule 273 (simpleIdentifier -> VARARG .)
    FOR             reduce using rule 273 (simpleIdentifier -> VARARG .)
    WHILE           reduce using rule 273 (simpleIdentifier -> VARARG .)
    DO              reduce using rule 273 (simpleIdentifier -> VARARG .)
    LITERAL_STRING  reduce using rule 273 (simpleIdentifier -> VARARG .)
    IF              reduce using rule 273 (simpleIdentifier -> VARARG .)
    RETURN          reduce using rule 273 (simpleIdentifier -> VARARG .)
    RETURN_AT       reduce using rule 273 (simpleIdentifier -> VARARG .)
    CONTINUE        reduce using rule 273 (simpleIdentifier -> VARARG .)
    CONTINUE_AT     reduce using rule 273 (simpleIdentifier -> VARARG .)
    BREAK           reduce using rule 273 (simpleIdentifier -> VARARG .)
    BREAK_AT        reduce using rule 273 (simpleIdentifier -> VARARG .)
    NOT             reduce using rule 273 (simpleIdentifier -> VARARG .)
    SUSPEND         reduce using rule 273 (simpleIdentifier -> VARARG .)
    LCHAVE          reduce using rule 273 (simpleIdentifier -> VARARG .)
    $end            reduce using rule 273 (simpleIdentifier -> VARARG .)
    COMMA           reduce using rule 273 (simpleIdentifier -> VARARG .)
    RPAREN          reduce using rule 273 (simpleIdentifier -> VARARG .)
    RCCT            reduce using rule 273 (simpleIdentifier -> VARARG .)
    PV              reduce using rule 273 (simpleIdentifier -> VARARG .)
    ELSE            reduce using rule 273 (simpleIdentifier -> VARARG .)
    SETA            reduce using rule 273 (simpleIdentifier -> VARARG .)
    CLASS           reduce using rule 273 (simpleIdentifier -> VARARG .)


state 13

    (274) simpleIdentifier -> WHERE .

    LPAREN          reduce using rule 274 (simpleIdentifier -> WHERE .)
    DOISP           reduce using rule 274 (simpleIdentifier -> WHERE .)
    ATRIBUICAO      reduce using rule 274 (simpleIdentifier -> WHERE .)
    INCREMENTO      reduce using rule 274 (simpleIdentifier -> WHERE .)
    DECREMENTO      reduce using rule 274 (simpleIdentifier -> WHERE .)
    MENOR           reduce using rule 274 (simpleIdentifier -> WHERE .)
    LCCT            reduce using rule 274 (simpleIdentifier -> WHERE .)
    COLONCOLON      reduce using rule 274 (simpleIdentifier -> WHERE .)
    PONTO           reduce using rule 274 (simpleIdentifier -> WHERE .)
    RCHAVE          reduce using rule 274 (simpleIdentifier -> WHERE .)
    AS              reduce using rule 274 (simpleIdentifier -> WHERE .)
    MAISIGUAL       reduce using rule 274 (simpleIdentifier -> WHERE .)
    MENOSIGUAL      reduce using rule 274 (simpleIdentifier -> WHERE .)
    MULTIGUAL       reduce using rule 274 (simpleIdentifier -> WHERE .)
    DIVIGUAL        reduce using rule 274 (simpleIdentifier -> WHERE .)
    MODIGUAL        reduce using rule 274 (simpleIdentifier -> WHERE .)
    MULT            reduce using rule 274 (simpleIdentifier -> WHERE .)
    DIVIDE          reduce using rule 274 (simpleIdentifier -> WHERE .)
    MOD             reduce using rule 274 (simpleIdentifier -> WHERE .)
    PLUS            reduce using rule 274 (simpleIdentifier -> WHERE .)
    MINUS           reduce using rule 274 (simpleIdentifier -> WHERE .)
    PONTOPONTO      reduce using rule 274 (simpleIdentifier -> WHERE .)
    ID              reduce using rule 274 (simpleIdentifier -> WHERE .)
    CROSSINLINE     reduce using rule 274 (simpleIdentifier -> WHERE .)
    IMPORT          reduce using rule 274 (simpleIdentifier -> WHERE .)
    INIT            reduce using rule 274 (simpleIdentifier -> WHERE .)
    NOINLINE        reduce using rule 274 (simpleIdentifier -> WHERE .)
    OUT             reduce using rule 274 (simpleIdentifier -> WHERE .)
    VARARG          reduce using rule 274 (simpleIdentifier -> WHERE .)
    WHERE           reduce using rule 274 (simpleIdentifier -> WHERE .)
    OBJECT          reduce using rule 274 (simpleIdentifier -> WHERE .)
    CONST           reduce using rule 274 (simpleIdentifier -> WHERE .)
    CONSTRUCTOR     reduce using rule 274 (simpleIdentifier -> WHERE .)
    EOF             reduce using rule 274 (simpleIdentifier -> WHERE .)
    FALSE           reduce using rule 274 (simpleIdentifier -> WHERE .)
    FUNCTION        reduce using rule 274 (simpleIdentifier -> WHERE .)
    NULL            reduce using rule 274 (simpleIdentifier -> WHERE .)
    NULLABLE        reduce using rule 274 (simpleIdentifier -> WHERE .)
    NUMBER          reduce using rule 274 (simpleIdentifier -> WHERE .)
    OPERATOR        reduce using rule 274 (simpleIdentifier -> WHERE .)
    SMARTCAST       reduce using rule 274 (simpleIdentifier -> WHERE .)
    THIS            reduce using rule 274 (simpleIdentifier -> WHERE .)
    TRUE            reduce using rule 274 (simpleIdentifier -> WHERE .)
    VAL             reduce using rule 274 (simpleIdentifier -> WHERE .)
    VAR             reduce using rule 274 (simpleIdentifier -> WHERE .)
    WHEN            reduce using rule 274 (simpleIdentifier -> WHERE .)
    LONG            reduce using rule 274 (simpleIdentifier -> WHERE .)
    ARRAY           reduce using rule 274 (simpleIdentifier -> WHERE .)
    ELVIS           reduce using rule 274 (simpleIdentifier -> WHERE .)
    IN              reduce using rule 274 (simpleIdentifier -> WHERE .)
    NOT_IN          reduce using rule 274 (simpleIdentifier -> WHERE .)
    IS              reduce using rule 274 (simpleIdentifier -> WHERE .)
    NOT_IS          reduce using rule 274 (simpleIdentifier -> WHERE .)
    MAIOR           reduce using rule 274 (simpleIdentifier -> WHERE .)
    MENORIGUAL      reduce using rule 274 (simpleIdentifier -> WHERE .)
    MAIORIGUAL      reduce using rule 274 (simpleIdentifier -> WHERE .)
    DIFERENTE       reduce using rule 274 (simpleIdentifier -> WHERE .)
    IDENTIDADE      reduce using rule 274 (simpleIdentifier -> WHERE .)
    IGUALDADE       reduce using rule 274 (simpleIdentifier -> WHERE .)
    SEMIDENTIDADE   reduce using rule 274 (simpleIdentifier -> WHERE .)
    AND             reduce using rule 274 (simpleIdentifier -> WHERE .)
    OR              reduce using rule 274 (simpleIdentifier -> WHERE .)
    FUN             reduce using rule 274 (simpleIdentifier -> WHERE .)
    FOR             reduce using rule 274 (simpleIdentifier -> WHERE .)
    WHILE           reduce using rule 274 (simpleIdentifier -> WHERE .)
    DO              reduce using rule 274 (simpleIdentifier -> WHERE .)
    LITERAL_STRING  reduce using rule 274 (simpleIdentifier -> WHERE .)
    IF              reduce using rule 274 (simpleIdentifier -> WHERE .)
    RETURN          reduce using rule 274 (simpleIdentifier -> WHERE .)
    RETURN_AT       reduce using rule 274 (simpleIdentifier -> WHERE .)
    CONTINUE        reduce using rule 274 (simpleIdentifier -> WHERE .)
    CONTINUE_AT     reduce using rule 274 (simpleIdentifier -> WHERE .)
    BREAK           reduce using rule 274 (simpleIdentifier -> WHERE .)
    BREAK_AT        reduce using rule 274 (simpleIdentifier -> WHERE .)
    NOT             reduce using rule 274 (simpleIdentifier -> WHERE .)
    SUSPEND         reduce using rule 274 (simpleIdentifier -> WHERE .)
    LCHAVE          reduce using rule 274 (simpleIdentifier -> WHERE .)
    $end            reduce using rule 274 (simpleIdentifier -> WHERE .)
    COMMA           reduce using rule 274 (simpleIdentifier -> WHERE .)
    RPAREN          reduce using rule 274 (simpleIdentifier -> WHERE .)
    RCCT            reduce using rule 274 (simpleIdentifier -> WHERE .)
    PV              reduce using rule 274 (simpleIdentifier -> WHERE .)
    ELSE            reduce using rule 274 (simpleIdentifier -> WHERE .)
    SETA            reduce using rule 274 (simpleIdentifier -> WHERE .)
    CLASS           reduce using rule 274 (simpleIdentifier -> WHERE .)


state 14

    (275) simpleIdentifier -> OBJECT .

    LPAREN          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    DOISP           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    ATRIBUICAO      reduce using rule 275 (simpleIdentifier -> OBJECT .)
    INCREMENTO      reduce using rule 275 (simpleIdentifier -> OBJECT .)
    DECREMENTO      reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MENOR           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    LCCT            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    COLONCOLON      reduce using rule 275 (simpleIdentifier -> OBJECT .)
    PONTO           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    RCHAVE          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    AS              reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MAISIGUAL       reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MENOSIGUAL      reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MULTIGUAL       reduce using rule 275 (simpleIdentifier -> OBJECT .)
    DIVIGUAL        reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MODIGUAL        reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MULT            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    DIVIDE          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MOD             reduce using rule 275 (simpleIdentifier -> OBJECT .)
    PLUS            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MINUS           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    PONTOPONTO      reduce using rule 275 (simpleIdentifier -> OBJECT .)
    ID              reduce using rule 275 (simpleIdentifier -> OBJECT .)
    CROSSINLINE     reduce using rule 275 (simpleIdentifier -> OBJECT .)
    IMPORT          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    INIT            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    NOINLINE        reduce using rule 275 (simpleIdentifier -> OBJECT .)
    OUT             reduce using rule 275 (simpleIdentifier -> OBJECT .)
    VARARG          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    WHERE           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    OBJECT          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    CONST           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    CONSTRUCTOR     reduce using rule 275 (simpleIdentifier -> OBJECT .)
    EOF             reduce using rule 275 (simpleIdentifier -> OBJECT .)
    FALSE           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    FUNCTION        reduce using rule 275 (simpleIdentifier -> OBJECT .)
    NULL            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    NULLABLE        reduce using rule 275 (simpleIdentifier -> OBJECT .)
    NUMBER          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    OPERATOR        reduce using rule 275 (simpleIdentifier -> OBJECT .)
    SMARTCAST       reduce using rule 275 (simpleIdentifier -> OBJECT .)
    THIS            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    TRUE            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    VAL             reduce using rule 275 (simpleIdentifier -> OBJECT .)
    VAR             reduce using rule 275 (simpleIdentifier -> OBJECT .)
    WHEN            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    LONG            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    ARRAY           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    ELVIS           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    IN              reduce using rule 275 (simpleIdentifier -> OBJECT .)
    NOT_IN          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    IS              reduce using rule 275 (simpleIdentifier -> OBJECT .)
    NOT_IS          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MAIOR           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MENORIGUAL      reduce using rule 275 (simpleIdentifier -> OBJECT .)
    MAIORIGUAL      reduce using rule 275 (simpleIdentifier -> OBJECT .)
    DIFERENTE       reduce using rule 275 (simpleIdentifier -> OBJECT .)
    IDENTIDADE      reduce using rule 275 (simpleIdentifier -> OBJECT .)
    IGUALDADE       reduce using rule 275 (simpleIdentifier -> OBJECT .)
    SEMIDENTIDADE   reduce using rule 275 (simpleIdentifier -> OBJECT .)
    AND             reduce using rule 275 (simpleIdentifier -> OBJECT .)
    OR              reduce using rule 275 (simpleIdentifier -> OBJECT .)
    FUN             reduce using rule 275 (simpleIdentifier -> OBJECT .)
    FOR             reduce using rule 275 (simpleIdentifier -> OBJECT .)
    WHILE           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    DO              reduce using rule 275 (simpleIdentifier -> OBJECT .)
    LITERAL_STRING  reduce using rule 275 (simpleIdentifier -> OBJECT .)
    IF              reduce using rule 275 (simpleIdentifier -> OBJECT .)
    RETURN          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    RETURN_AT       reduce using rule 275 (simpleIdentifier -> OBJECT .)
    CONTINUE        reduce using rule 275 (simpleIdentifier -> OBJECT .)
    CONTINUE_AT     reduce using rule 275 (simpleIdentifier -> OBJECT .)
    BREAK           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    BREAK_AT        reduce using rule 275 (simpleIdentifier -> OBJECT .)
    NOT             reduce using rule 275 (simpleIdentifier -> OBJECT .)
    SUSPEND         reduce using rule 275 (simpleIdentifier -> OBJECT .)
    LCHAVE          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    $end            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    COMMA           reduce using rule 275 (simpleIdentifier -> OBJECT .)
    RPAREN          reduce using rule 275 (simpleIdentifier -> OBJECT .)
    RCCT            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    PV              reduce using rule 275 (simpleIdentifier -> OBJECT .)
    ELSE            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    SETA            reduce using rule 275 (simpleIdentifier -> OBJECT .)
    CLASS           reduce using rule 275 (simpleIdentifier -> OBJECT .)


state 15

    (276) simpleIdentifier -> CONST .

    LPAREN          reduce using rule 276 (simpleIdentifier -> CONST .)
    DOISP           reduce using rule 276 (simpleIdentifier -> CONST .)
    ATRIBUICAO      reduce using rule 276 (simpleIdentifier -> CONST .)
    INCREMENTO      reduce using rule 276 (simpleIdentifier -> CONST .)
    DECREMENTO      reduce using rule 276 (simpleIdentifier -> CONST .)
    MENOR           reduce using rule 276 (simpleIdentifier -> CONST .)
    LCCT            reduce using rule 276 (simpleIdentifier -> CONST .)
    COLONCOLON      reduce using rule 276 (simpleIdentifier -> CONST .)
    PONTO           reduce using rule 276 (simpleIdentifier -> CONST .)
    RCHAVE          reduce using rule 276 (simpleIdentifier -> CONST .)
    AS              reduce using rule 276 (simpleIdentifier -> CONST .)
    MAISIGUAL       reduce using rule 276 (simpleIdentifier -> CONST .)
    MENOSIGUAL      reduce using rule 276 (simpleIdentifier -> CONST .)
    MULTIGUAL       reduce using rule 276 (simpleIdentifier -> CONST .)
    DIVIGUAL        reduce using rule 276 (simpleIdentifier -> CONST .)
    MODIGUAL        reduce using rule 276 (simpleIdentifier -> CONST .)
    MULT            reduce using rule 276 (simpleIdentifier -> CONST .)
    DIVIDE          reduce using rule 276 (simpleIdentifier -> CONST .)
    MOD             reduce using rule 276 (simpleIdentifier -> CONST .)
    PLUS            reduce using rule 276 (simpleIdentifier -> CONST .)
    MINUS           reduce using rule 276 (simpleIdentifier -> CONST .)
    PONTOPONTO      reduce using rule 276 (simpleIdentifier -> CONST .)
    ID              reduce using rule 276 (simpleIdentifier -> CONST .)
    CROSSINLINE     reduce using rule 276 (simpleIdentifier -> CONST .)
    IMPORT          reduce using rule 276 (simpleIdentifier -> CONST .)
    INIT            reduce using rule 276 (simpleIdentifier -> CONST .)
    NOINLINE        reduce using rule 276 (simpleIdentifier -> CONST .)
    OUT             reduce using rule 276 (simpleIdentifier -> CONST .)
    VARARG          reduce using rule 276 (simpleIdentifier -> CONST .)
    WHERE           reduce using rule 276 (simpleIdentifier -> CONST .)
    OBJECT          reduce using rule 276 (simpleIdentifier -> CONST .)
    CONST           reduce using rule 276 (simpleIdentifier -> CONST .)
    CONSTRUCTOR     reduce using rule 276 (simpleIdentifier -> CONST .)
    EOF             reduce using rule 276 (simpleIdentifier -> CONST .)
    FALSE           reduce using rule 276 (simpleIdentifier -> CONST .)
    FUNCTION        reduce using rule 276 (simpleIdentifier -> CONST .)
    NULL            reduce using rule 276 (simpleIdentifier -> CONST .)
    NULLABLE        reduce using rule 276 (simpleIdentifier -> CONST .)
    NUMBER          reduce using rule 276 (simpleIdentifier -> CONST .)
    OPERATOR        reduce using rule 276 (simpleIdentifier -> CONST .)
    SMARTCAST       reduce using rule 276 (simpleIdentifier -> CONST .)
    THIS            reduce using rule 276 (simpleIdentifier -> CONST .)
    TRUE            reduce using rule 276 (simpleIdentifier -> CONST .)
    VAL             reduce using rule 276 (simpleIdentifier -> CONST .)
    VAR             reduce using rule 276 (simpleIdentifier -> CONST .)
    WHEN            reduce using rule 276 (simpleIdentifier -> CONST .)
    LONG            reduce using rule 276 (simpleIdentifier -> CONST .)
    ARRAY           reduce using rule 276 (simpleIdentifier -> CONST .)
    ELVIS           reduce using rule 276 (simpleIdentifier -> CONST .)
    IN              reduce using rule 276 (simpleIdentifier -> CONST .)
    NOT_IN          reduce using rule 276 (simpleIdentifier -> CONST .)
    IS              reduce using rule 276 (simpleIdentifier -> CONST .)
    NOT_IS          reduce using rule 276 (simpleIdentifier -> CONST .)
    MAIOR           reduce using rule 276 (simpleIdentifier -> CONST .)
    MENORIGUAL      reduce using rule 276 (simpleIdentifier -> CONST .)
    MAIORIGUAL      reduce using rule 276 (simpleIdentifier -> CONST .)
    DIFERENTE       reduce using rule 276 (simpleIdentifier -> CONST .)
    IDENTIDADE      reduce using rule 276 (simpleIdentifier -> CONST .)
    IGUALDADE       reduce using rule 276 (simpleIdentifier -> CONST .)
    SEMIDENTIDADE   reduce using rule 276 (simpleIdentifier -> CONST .)
    AND             reduce using rule 276 (simpleIdentifier -> CONST .)
    OR              reduce using rule 276 (simpleIdentifier -> CONST .)
    FUN             reduce using rule 276 (simpleIdentifier -> CONST .)
    FOR             reduce using rule 276 (simpleIdentifier -> CONST .)
    WHILE           reduce using rule 276 (simpleIdentifier -> CONST .)
    DO              reduce using rule 276 (simpleIdentifier -> CONST .)
    LITERAL_STRING  reduce using rule 276 (simpleIdentifier -> CONST .)
    IF              reduce using rule 276 (simpleIdentifier -> CONST .)
    RETURN          reduce using rule 276 (simpleIdentifier -> CONST .)
    RETURN_AT       reduce using rule 276 (simpleIdentifier -> CONST .)
    CONTINUE        reduce using rule 276 (simpleIdentifier -> CONST .)
    CONTINUE_AT     reduce using rule 276 (simpleIdentifier -> CONST .)
    BREAK           reduce using rule 276 (simpleIdentifier -> CONST .)
    BREAK_AT        reduce using rule 276 (simpleIdentifier -> CONST .)
    NOT             reduce using rule 276 (simpleIdentifier -> CONST .)
    SUSPEND         reduce using rule 276 (simpleIdentifier -> CONST .)
    LCHAVE          reduce using rule 276 (simpleIdentifier -> CONST .)
    $end            reduce using rule 276 (simpleIdentifier -> CONST .)
    COMMA           reduce using rule 276 (simpleIdentifier -> CONST .)
    RPAREN          reduce using rule 276 (simpleIdentifier -> CONST .)
    RCCT            reduce using rule 276 (simpleIdentifier -> CONST .)
    PV              reduce using rule 276 (simpleIdentifier -> CONST .)
    ELSE            reduce using rule 276 (simpleIdentifier -> CONST .)
    SETA            reduce using rule 276 (simpleIdentifier -> CONST .)
    CLASS           reduce using rule 276 (simpleIdentifier -> CONST .)


state 16

    (277) simpleIdentifier -> CONSTRUCTOR .

    LPAREN          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    DOISP           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    ATRIBUICAO      reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    INCREMENTO      reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    DECREMENTO      reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MENOR           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    LCCT            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    COLONCOLON      reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    PONTO           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    RCHAVE          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    AS              reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MAISIGUAL       reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MENOSIGUAL      reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MULTIGUAL       reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    DIVIGUAL        reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MODIGUAL        reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MULT            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    DIVIDE          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MOD             reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    PLUS            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MINUS           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    PONTOPONTO      reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    ID              reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    CROSSINLINE     reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    IMPORT          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    INIT            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    NOINLINE        reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    OUT             reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    VARARG          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    WHERE           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    OBJECT          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    CONST           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    CONSTRUCTOR     reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    EOF             reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    FALSE           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    FUNCTION        reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    NULL            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    NULLABLE        reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    NUMBER          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    OPERATOR        reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    SMARTCAST       reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    THIS            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    TRUE            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    VAL             reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    VAR             reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    WHEN            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    LONG            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    ARRAY           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    ELVIS           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    IN              reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    NOT_IN          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    IS              reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    NOT_IS          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MAIOR           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MENORIGUAL      reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    MAIORIGUAL      reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    DIFERENTE       reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    IDENTIDADE      reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    IGUALDADE       reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    SEMIDENTIDADE   reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    AND             reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    OR              reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    FUN             reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    FOR             reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    WHILE           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    DO              reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    LITERAL_STRING  reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    IF              reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    RETURN          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    RETURN_AT       reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    CONTINUE        reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    CONTINUE_AT     reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    BREAK           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    BREAK_AT        reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    NOT             reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    SUSPEND         reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    LCHAVE          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    $end            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    COMMA           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    RPAREN          reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    RCCT            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    PV              reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    ELSE            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    SETA            reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)
    CLASS           reduce using rule 277 (simpleIdentifier -> CONSTRUCTOR .)


state 17

    (278) simpleIdentifier -> EOF .

    LPAREN          reduce using rule 278 (simpleIdentifier -> EOF .)
    DOISP           reduce using rule 278 (simpleIdentifier -> EOF .)
    ATRIBUICAO      reduce using rule 278 (simpleIdentifier -> EOF .)
    INCREMENTO      reduce using rule 278 (simpleIdentifier -> EOF .)
    DECREMENTO      reduce using rule 278 (simpleIdentifier -> EOF .)
    MENOR           reduce using rule 278 (simpleIdentifier -> EOF .)
    LCCT            reduce using rule 278 (simpleIdentifier -> EOF .)
    COLONCOLON      reduce using rule 278 (simpleIdentifier -> EOF .)
    PONTO           reduce using rule 278 (simpleIdentifier -> EOF .)
    RCHAVE          reduce using rule 278 (simpleIdentifier -> EOF .)
    AS              reduce using rule 278 (simpleIdentifier -> EOF .)
    MAISIGUAL       reduce using rule 278 (simpleIdentifier -> EOF .)
    MENOSIGUAL      reduce using rule 278 (simpleIdentifier -> EOF .)
    MULTIGUAL       reduce using rule 278 (simpleIdentifier -> EOF .)
    DIVIGUAL        reduce using rule 278 (simpleIdentifier -> EOF .)
    MODIGUAL        reduce using rule 278 (simpleIdentifier -> EOF .)
    MULT            reduce using rule 278 (simpleIdentifier -> EOF .)
    DIVIDE          reduce using rule 278 (simpleIdentifier -> EOF .)
    MOD             reduce using rule 278 (simpleIdentifier -> EOF .)
    PLUS            reduce using rule 278 (simpleIdentifier -> EOF .)
    MINUS           reduce using rule 278 (simpleIdentifier -> EOF .)
    PONTOPONTO      reduce using rule 278 (simpleIdentifier -> EOF .)
    ID              reduce using rule 278 (simpleIdentifier -> EOF .)
    CROSSINLINE     reduce using rule 278 (simpleIdentifier -> EOF .)
    IMPORT          reduce using rule 278 (simpleIdentifier -> EOF .)
    INIT            reduce using rule 278 (simpleIdentifier -> EOF .)
    NOINLINE        reduce using rule 278 (simpleIdentifier -> EOF .)
    OUT             reduce using rule 278 (simpleIdentifier -> EOF .)
    VARARG          reduce using rule 278 (simpleIdentifier -> EOF .)
    WHERE           reduce using rule 278 (simpleIdentifier -> EOF .)
    OBJECT          reduce using rule 278 (simpleIdentifier -> EOF .)
    CONST           reduce using rule 278 (simpleIdentifier -> EOF .)
    CONSTRUCTOR     reduce using rule 278 (simpleIdentifier -> EOF .)
    EOF             reduce using rule 278 (simpleIdentifier -> EOF .)
    FALSE           reduce using rule 278 (simpleIdentifier -> EOF .)
    FUNCTION        reduce using rule 278 (simpleIdentifier -> EOF .)
    NULL            reduce using rule 278 (simpleIdentifier -> EOF .)
    NULLABLE        reduce using rule 278 (simpleIdentifier -> EOF .)
    NUMBER          reduce using rule 278 (simpleIdentifier -> EOF .)
    OPERATOR        reduce using rule 278 (simpleIdentifier -> EOF .)
    SMARTCAST       reduce using rule 278 (simpleIdentifier -> EOF .)
    THIS            reduce using rule 278 (simpleIdentifier -> EOF .)
    TRUE            reduce using rule 278 (simpleIdentifier -> EOF .)
    VAL             reduce using rule 278 (simpleIdentifier -> EOF .)
    VAR             reduce using rule 278 (simpleIdentifier -> EOF .)
    WHEN            reduce using rule 278 (simpleIdentifier -> EOF .)
    LONG            reduce using rule 278 (simpleIdentifier -> EOF .)
    ARRAY           reduce using rule 278 (simpleIdentifier -> EOF .)
    ELVIS           reduce using rule 278 (simpleIdentifier -> EOF .)
    IN              reduce using rule 278 (simpleIdentifier -> EOF .)
    NOT_IN          reduce using rule 278 (simpleIdentifier -> EOF .)
    IS              reduce using rule 278 (simpleIdentifier -> EOF .)
    NOT_IS          reduce using rule 278 (simpleIdentifier -> EOF .)
    MAIOR           reduce using rule 278 (simpleIdentifier -> EOF .)
    MENORIGUAL      reduce using rule 278 (simpleIdentifier -> EOF .)
    MAIORIGUAL      reduce using rule 278 (simpleIdentifier -> EOF .)
    DIFERENTE       reduce using rule 278 (simpleIdentifier -> EOF .)
    IDENTIDADE      reduce using rule 278 (simpleIdentifier -> EOF .)
    IGUALDADE       reduce using rule 278 (simpleIdentifier -> EOF .)
    SEMIDENTIDADE   reduce using rule 278 (simpleIdentifier -> EOF .)
    AND             reduce using rule 278 (simpleIdentifier -> EOF .)
    OR              reduce using rule 278 (simpleIdentifier -> EOF .)
    FUN             reduce using rule 278 (simpleIdentifier -> EOF .)
    FOR             reduce using rule 278 (simpleIdentifier -> EOF .)
    WHILE           reduce using rule 278 (simpleIdentifier -> EOF .)
    DO              reduce using rule 278 (simpleIdentifier -> EOF .)
    LITERAL_STRING  reduce using rule 278 (simpleIdentifier -> EOF .)
    IF              reduce using rule 278 (simpleIdentifier -> EOF .)
    RETURN          reduce using rule 278 (simpleIdentifier -> EOF .)
    RETURN_AT       reduce using rule 278 (simpleIdentifier -> EOF .)
    CONTINUE        reduce using rule 278 (simpleIdentifier -> EOF .)
    CONTINUE_AT     reduce using rule 278 (simpleIdentifier -> EOF .)
    BREAK           reduce using rule 278 (simpleIdentifier -> EOF .)
    BREAK_AT        reduce using rule 278 (simpleIdentifier -> EOF .)
    NOT             reduce using rule 278 (simpleIdentifier -> EOF .)
    SUSPEND         reduce using rule 278 (simpleIdentifier -> EOF .)
    LCHAVE          reduce using rule 278 (simpleIdentifier -> EOF .)
    $end            reduce using rule 278 (simpleIdentifier -> EOF .)
    COMMA           reduce using rule 278 (simpleIdentifier -> EOF .)
    RPAREN          reduce using rule 278 (simpleIdentifier -> EOF .)
    RCCT            reduce using rule 278 (simpleIdentifier -> EOF .)
    PV              reduce using rule 278 (simpleIdentifier -> EOF .)
    ELSE            reduce using rule 278 (simpleIdentifier -> EOF .)
    SETA            reduce using rule 278 (simpleIdentifier -> EOF .)
    CLASS           reduce using rule 278 (simpleIdentifier -> EOF .)


state 18

    (279) simpleIdentifier -> FALSE .

    LPAREN          reduce using rule 279 (simpleIdentifier -> FALSE .)
    DOISP           reduce using rule 279 (simpleIdentifier -> FALSE .)
    ATRIBUICAO      reduce using rule 279 (simpleIdentifier -> FALSE .)
    INCREMENTO      reduce using rule 279 (simpleIdentifier -> FALSE .)
    DECREMENTO      reduce using rule 279 (simpleIdentifier -> FALSE .)
    MENOR           reduce using rule 279 (simpleIdentifier -> FALSE .)
    LCCT            reduce using rule 279 (simpleIdentifier -> FALSE .)
    COLONCOLON      reduce using rule 279 (simpleIdentifier -> FALSE .)
    PONTO           reduce using rule 279 (simpleIdentifier -> FALSE .)
    RCHAVE          reduce using rule 279 (simpleIdentifier -> FALSE .)
    AS              reduce using rule 279 (simpleIdentifier -> FALSE .)
    MAISIGUAL       reduce using rule 279 (simpleIdentifier -> FALSE .)
    MENOSIGUAL      reduce using rule 279 (simpleIdentifier -> FALSE .)
    MULTIGUAL       reduce using rule 279 (simpleIdentifier -> FALSE .)
    DIVIGUAL        reduce using rule 279 (simpleIdentifier -> FALSE .)
    MODIGUAL        reduce using rule 279 (simpleIdentifier -> FALSE .)
    MULT            reduce using rule 279 (simpleIdentifier -> FALSE .)
    DIVIDE          reduce using rule 279 (simpleIdentifier -> FALSE .)
    MOD             reduce using rule 279 (simpleIdentifier -> FALSE .)
    PLUS            reduce using rule 279 (simpleIdentifier -> FALSE .)
    MINUS           reduce using rule 279 (simpleIdentifier -> FALSE .)
    PONTOPONTO      reduce using rule 279 (simpleIdentifier -> FALSE .)
    ID              reduce using rule 279 (simpleIdentifier -> FALSE .)
    CROSSINLINE     reduce using rule 279 (simpleIdentifier -> FALSE .)
    IMPORT          reduce using rule 279 (simpleIdentifier -> FALSE .)
    INIT            reduce using rule 279 (simpleIdentifier -> FALSE .)
    NOINLINE        reduce using rule 279 (simpleIdentifier -> FALSE .)
    OUT             reduce using rule 279 (simpleIdentifier -> FALSE .)
    VARARG          reduce using rule 279 (simpleIdentifier -> FALSE .)
    WHERE           reduce using rule 279 (simpleIdentifier -> FALSE .)
    OBJECT          reduce using rule 279 (simpleIdentifier -> FALSE .)
    CONST           reduce using rule 279 (simpleIdentifier -> FALSE .)
    CONSTRUCTOR     reduce using rule 279 (simpleIdentifier -> FALSE .)
    EOF             reduce using rule 279 (simpleIdentifier -> FALSE .)
    FALSE           reduce using rule 279 (simpleIdentifier -> FALSE .)
    FUNCTION        reduce using rule 279 (simpleIdentifier -> FALSE .)
    NULL            reduce using rule 279 (simpleIdentifier -> FALSE .)
    NULLABLE        reduce using rule 279 (simpleIdentifier -> FALSE .)
    NUMBER          reduce using rule 279 (simpleIdentifier -> FALSE .)
    OPERATOR        reduce using rule 279 (simpleIdentifier -> FALSE .)
    SMARTCAST       reduce using rule 279 (simpleIdentifier -> FALSE .)
    THIS            reduce using rule 279 (simpleIdentifier -> FALSE .)
    TRUE            reduce using rule 279 (simpleIdentifier -> FALSE .)
    VAL             reduce using rule 279 (simpleIdentifier -> FALSE .)
    VAR             reduce using rule 279 (simpleIdentifier -> FALSE .)
    WHEN            reduce using rule 279 (simpleIdentifier -> FALSE .)
    LONG            reduce using rule 279 (simpleIdentifier -> FALSE .)
    ARRAY           reduce using rule 279 (simpleIdentifier -> FALSE .)
    ELVIS           reduce using rule 279 (simpleIdentifier -> FALSE .)
    IN              reduce using rule 279 (simpleIdentifier -> FALSE .)
    NOT_IN          reduce using rule 279 (simpleIdentifier -> FALSE .)
    IS              reduce using rule 279 (simpleIdentifier -> FALSE .)
    NOT_IS          reduce using rule 279 (simpleIdentifier -> FALSE .)
    MAIOR           reduce using rule 279 (simpleIdentifier -> FALSE .)
    MENORIGUAL      reduce using rule 279 (simpleIdentifier -> FALSE .)
    MAIORIGUAL      reduce using rule 279 (simpleIdentifier -> FALSE .)
    DIFERENTE       reduce using rule 279 (simpleIdentifier -> FALSE .)
    IDENTIDADE      reduce using rule 279 (simpleIdentifier -> FALSE .)
    IGUALDADE       reduce using rule 279 (simpleIdentifier -> FALSE .)
    SEMIDENTIDADE   reduce using rule 279 (simpleIdentifier -> FALSE .)
    AND             reduce using rule 279 (simpleIdentifier -> FALSE .)
    OR              reduce using rule 279 (simpleIdentifier -> FALSE .)
    FUN             reduce using rule 279 (simpleIdentifier -> FALSE .)
    FOR             reduce using rule 279 (simpleIdentifier -> FALSE .)
    WHILE           reduce using rule 279 (simpleIdentifier -> FALSE .)
    DO              reduce using rule 279 (simpleIdentifier -> FALSE .)
    LITERAL_STRING  reduce using rule 279 (simpleIdentifier -> FALSE .)
    IF              reduce using rule 279 (simpleIdentifier -> FALSE .)
    RETURN          reduce using rule 279 (simpleIdentifier -> FALSE .)
    RETURN_AT       reduce using rule 279 (simpleIdentifier -> FALSE .)
    CONTINUE        reduce using rule 279 (simpleIdentifier -> FALSE .)
    CONTINUE_AT     reduce using rule 279 (simpleIdentifier -> FALSE .)
    BREAK           reduce using rule 279 (simpleIdentifier -> FALSE .)
    BREAK_AT        reduce using rule 279 (simpleIdentifier -> FALSE .)
    NOT             reduce using rule 279 (simpleIdentifier -> FALSE .)
    SUSPEND         reduce using rule 279 (simpleIdentifier -> FALSE .)
    LCHAVE          reduce using rule 279 (simpleIdentifier -> FALSE .)
    $end            reduce using rule 279 (simpleIdentifier -> FALSE .)
    COMMA           reduce using rule 279 (simpleIdentifier -> FALSE .)
    RPAREN          reduce using rule 279 (simpleIdentifier -> FALSE .)
    RCCT            reduce using rule 279 (simpleIdentifier -> FALSE .)
    PV              reduce using rule 279 (simpleIdentifier -> FALSE .)
    ELSE            reduce using rule 279 (simpleIdentifier -> FALSE .)
    SETA            reduce using rule 279 (simpleIdentifier -> FALSE .)
    CLASS           reduce using rule 279 (simpleIdentifier -> FALSE .)


state 19

    (280) simpleIdentifier -> FUNCTION .

    LPAREN          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    DOISP           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    ATRIBUICAO      reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    INCREMENTO      reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    DECREMENTO      reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MENOR           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    LCCT            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    COLONCOLON      reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    PONTO           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    RCHAVE          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    AS              reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MAISIGUAL       reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MENOSIGUAL      reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MULTIGUAL       reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    DIVIGUAL        reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MODIGUAL        reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MULT            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    DIVIDE          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MOD             reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    PLUS            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MINUS           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    PONTOPONTO      reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    ID              reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    CROSSINLINE     reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    IMPORT          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    INIT            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    NOINLINE        reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    OUT             reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    VARARG          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    WHERE           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    OBJECT          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    CONST           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    CONSTRUCTOR     reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    EOF             reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    FALSE           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    FUNCTION        reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    NULL            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    NULLABLE        reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    NUMBER          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    OPERATOR        reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    SMARTCAST       reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    THIS            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    TRUE            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    VAL             reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    VAR             reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    WHEN            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    LONG            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    ARRAY           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    ELVIS           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    IN              reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    NOT_IN          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    IS              reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    NOT_IS          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MAIOR           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MENORIGUAL      reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    MAIORIGUAL      reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    DIFERENTE       reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    IDENTIDADE      reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    IGUALDADE       reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    SEMIDENTIDADE   reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    AND             reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    OR              reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    FUN             reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    FOR             reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    WHILE           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    DO              reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    LITERAL_STRING  reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    IF              reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    RETURN          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    RETURN_AT       reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    CONTINUE        reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    CONTINUE_AT     reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    BREAK           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    BREAK_AT        reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    NOT             reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    SUSPEND         reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    LCHAVE          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    $end            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    COMMA           reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    RPAREN          reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    RCCT            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    PV              reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    ELSE            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    SETA            reduce using rule 280 (simpleIdentifier -> FUNCTION .)
    CLASS           reduce using rule 280 (simpleIdentifier -> FUNCTION .)


state 20

    (281) simpleIdentifier -> NULL .

    LPAREN          reduce using rule 281 (simpleIdentifier -> NULL .)
    DOISP           reduce using rule 281 (simpleIdentifier -> NULL .)
    ATRIBUICAO      reduce using rule 281 (simpleIdentifier -> NULL .)
    INCREMENTO      reduce using rule 281 (simpleIdentifier -> NULL .)
    DECREMENTO      reduce using rule 281 (simpleIdentifier -> NULL .)
    MENOR           reduce using rule 281 (simpleIdentifier -> NULL .)
    LCCT            reduce using rule 281 (simpleIdentifier -> NULL .)
    COLONCOLON      reduce using rule 281 (simpleIdentifier -> NULL .)
    PONTO           reduce using rule 281 (simpleIdentifier -> NULL .)
    RCHAVE          reduce using rule 281 (simpleIdentifier -> NULL .)
    AS              reduce using rule 281 (simpleIdentifier -> NULL .)
    MAISIGUAL       reduce using rule 281 (simpleIdentifier -> NULL .)
    MENOSIGUAL      reduce using rule 281 (simpleIdentifier -> NULL .)
    MULTIGUAL       reduce using rule 281 (simpleIdentifier -> NULL .)
    DIVIGUAL        reduce using rule 281 (simpleIdentifier -> NULL .)
    MODIGUAL        reduce using rule 281 (simpleIdentifier -> NULL .)
    MULT            reduce using rule 281 (simpleIdentifier -> NULL .)
    DIVIDE          reduce using rule 281 (simpleIdentifier -> NULL .)
    MOD             reduce using rule 281 (simpleIdentifier -> NULL .)
    PLUS            reduce using rule 281 (simpleIdentifier -> NULL .)
    MINUS           reduce using rule 281 (simpleIdentifier -> NULL .)
    PONTOPONTO      reduce using rule 281 (simpleIdentifier -> NULL .)
    ID              reduce using rule 281 (simpleIdentifier -> NULL .)
    CROSSINLINE     reduce using rule 281 (simpleIdentifier -> NULL .)
    IMPORT          reduce using rule 281 (simpleIdentifier -> NULL .)
    INIT            reduce using rule 281 (simpleIdentifier -> NULL .)
    NOINLINE        reduce using rule 281 (simpleIdentifier -> NULL .)
    OUT             reduce using rule 281 (simpleIdentifier -> NULL .)
    VARARG          reduce using rule 281 (simpleIdentifier -> NULL .)
    WHERE           reduce using rule 281 (simpleIdentifier -> NULL .)
    OBJECT          reduce using rule 281 (simpleIdentifier -> NULL .)
    CONST           reduce using rule 281 (simpleIdentifier -> NULL .)
    CONSTRUCTOR     reduce using rule 281 (simpleIdentifier -> NULL .)
    EOF             reduce using rule 281 (simpleIdentifier -> NULL .)
    FALSE           reduce using rule 281 (simpleIdentifier -> NULL .)
    FUNCTION        reduce using rule 281 (simpleIdentifier -> NULL .)
    NULL            reduce using rule 281 (simpleIdentifier -> NULL .)
    NULLABLE        reduce using rule 281 (simpleIdentifier -> NULL .)
    NUMBER          reduce using rule 281 (simpleIdentifier -> NULL .)
    OPERATOR        reduce using rule 281 (simpleIdentifier -> NULL .)
    SMARTCAST       reduce using rule 281 (simpleIdentifier -> NULL .)
    THIS            reduce using rule 281 (simpleIdentifier -> NULL .)
    TRUE            reduce using rule 281 (simpleIdentifier -> NULL .)
    VAL             reduce using rule 281 (simpleIdentifier -> NULL .)
    VAR             reduce using rule 281 (simpleIdentifier -> NULL .)
    WHEN            reduce using rule 281 (simpleIdentifier -> NULL .)
    LONG            reduce using rule 281 (simpleIdentifier -> NULL .)
    ARRAY           reduce using rule 281 (simpleIdentifier -> NULL .)
    ELVIS           reduce using rule 281 (simpleIdentifier -> NULL .)
    IN              reduce using rule 281 (simpleIdentifier -> NULL .)
    NOT_IN          reduce using rule 281 (simpleIdentifier -> NULL .)
    IS              reduce using rule 281 (simpleIdentifier -> NULL .)
    NOT_IS          reduce using rule 281 (simpleIdentifier -> NULL .)
    MAIOR           reduce using rule 281 (simpleIdentifier -> NULL .)
    MENORIGUAL      reduce using rule 281 (simpleIdentifier -> NULL .)
    MAIORIGUAL      reduce using rule 281 (simpleIdentifier -> NULL .)
    DIFERENTE       reduce using rule 281 (simpleIdentifier -> NULL .)
    IDENTIDADE      reduce using rule 281 (simpleIdentifier -> NULL .)
    IGUALDADE       reduce using rule 281 (simpleIdentifier -> NULL .)
    SEMIDENTIDADE   reduce using rule 281 (simpleIdentifier -> NULL .)
    AND             reduce using rule 281 (simpleIdentifier -> NULL .)
    OR              reduce using rule 281 (simpleIdentifier -> NULL .)
    FUN             reduce using rule 281 (simpleIdentifier -> NULL .)
    FOR             reduce using rule 281 (simpleIdentifier -> NULL .)
    WHILE           reduce using rule 281 (simpleIdentifier -> NULL .)
    DO              reduce using rule 281 (simpleIdentifier -> NULL .)
    LITERAL_STRING  reduce using rule 281 (simpleIdentifier -> NULL .)
    IF              reduce using rule 281 (simpleIdentifier -> NULL .)
    RETURN          reduce using rule 281 (simpleIdentifier -> NULL .)
    RETURN_AT       reduce using rule 281 (simpleIdentifier -> NULL .)
    CONTINUE        reduce using rule 281 (simpleIdentifier -> NULL .)
    CONTINUE_AT     reduce using rule 281 (simpleIdentifier -> NULL .)
    BREAK           reduce using rule 281 (simpleIdentifier -> NULL .)
    BREAK_AT        reduce using rule 281 (simpleIdentifier -> NULL .)
    NOT             reduce using rule 281 (simpleIdentifier -> NULL .)
    SUSPEND         reduce using rule 281 (simpleIdentifier -> NULL .)
    LCHAVE          reduce using rule 281 (simpleIdentifier -> NULL .)
    $end            reduce using rule 281 (simpleIdentifier -> NULL .)
    COMMA           reduce using rule 281 (simpleIdentifier -> NULL .)
    RPAREN          reduce using rule 281 (simpleIdentifier -> NULL .)
    RCCT            reduce using rule 281 (simpleIdentifier -> NULL .)
    PV              reduce using rule 281 (simpleIdentifier -> NULL .)
    ELSE            reduce using rule 281 (simpleIdentifier -> NULL .)
    SETA            reduce using rule 281 (simpleIdentifier -> NULL .)
    CLASS           reduce using rule 281 (simpleIdentifier -> NULL .)


state 21

    (282) simpleIdentifier -> NULLABLE .

    LPAREN          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    DOISP           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    ATRIBUICAO      reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    INCREMENTO      reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    DECREMENTO      reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MENOR           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    LCCT            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    COLONCOLON      reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    PONTO           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    RCHAVE          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    AS              reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MAISIGUAL       reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MENOSIGUAL      reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MULTIGUAL       reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    DIVIGUAL        reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MODIGUAL        reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MULT            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    DIVIDE          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MOD             reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    PLUS            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MINUS           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    PONTOPONTO      reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    ID              reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    CROSSINLINE     reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    IMPORT          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    INIT            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    NOINLINE        reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    OUT             reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    VARARG          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    WHERE           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    OBJECT          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    CONST           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    CONSTRUCTOR     reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    EOF             reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    FALSE           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    FUNCTION        reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    NULL            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    NULLABLE        reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    NUMBER          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    OPERATOR        reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    SMARTCAST       reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    THIS            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    TRUE            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    VAL             reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    VAR             reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    WHEN            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    LONG            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    ARRAY           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    ELVIS           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    IN              reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    NOT_IN          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    IS              reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    NOT_IS          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MAIOR           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MENORIGUAL      reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    MAIORIGUAL      reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    DIFERENTE       reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    IDENTIDADE      reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    IGUALDADE       reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    SEMIDENTIDADE   reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    AND             reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    OR              reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    FUN             reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    FOR             reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    WHILE           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    DO              reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    LITERAL_STRING  reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    IF              reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    RETURN          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    RETURN_AT       reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    CONTINUE        reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    CONTINUE_AT     reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    BREAK           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    BREAK_AT        reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    NOT             reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    SUSPEND         reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    LCHAVE          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    $end            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    COMMA           reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    RPAREN          reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    RCCT            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    PV              reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    ELSE            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    SETA            reduce using rule 282 (simpleIdentifier -> NULLABLE .)
    CLASS           reduce using rule 282 (simpleIdentifier -> NULLABLE .)


state 22

    (283) simpleIdentifier -> NUMBER .

    LPAREN          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    DOISP           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    ATRIBUICAO      reduce using rule 283 (simpleIdentifier -> NUMBER .)
    INCREMENTO      reduce using rule 283 (simpleIdentifier -> NUMBER .)
    DECREMENTO      reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MENOR           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    LCCT            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    COLONCOLON      reduce using rule 283 (simpleIdentifier -> NUMBER .)
    PONTO           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    RCHAVE          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    AS              reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MAISIGUAL       reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MENOSIGUAL      reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MULTIGUAL       reduce using rule 283 (simpleIdentifier -> NUMBER .)
    DIVIGUAL        reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MODIGUAL        reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MULT            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    DIVIDE          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MOD             reduce using rule 283 (simpleIdentifier -> NUMBER .)
    PLUS            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MINUS           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    PONTOPONTO      reduce using rule 283 (simpleIdentifier -> NUMBER .)
    ID              reduce using rule 283 (simpleIdentifier -> NUMBER .)
    CROSSINLINE     reduce using rule 283 (simpleIdentifier -> NUMBER .)
    IMPORT          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    INIT            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    NOINLINE        reduce using rule 283 (simpleIdentifier -> NUMBER .)
    OUT             reduce using rule 283 (simpleIdentifier -> NUMBER .)
    VARARG          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    WHERE           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    OBJECT          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    CONST           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    CONSTRUCTOR     reduce using rule 283 (simpleIdentifier -> NUMBER .)
    EOF             reduce using rule 283 (simpleIdentifier -> NUMBER .)
    FALSE           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    FUNCTION        reduce using rule 283 (simpleIdentifier -> NUMBER .)
    NULL            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    NULLABLE        reduce using rule 283 (simpleIdentifier -> NUMBER .)
    NUMBER          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    OPERATOR        reduce using rule 283 (simpleIdentifier -> NUMBER .)
    SMARTCAST       reduce using rule 283 (simpleIdentifier -> NUMBER .)
    THIS            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    TRUE            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    VAL             reduce using rule 283 (simpleIdentifier -> NUMBER .)
    VAR             reduce using rule 283 (simpleIdentifier -> NUMBER .)
    WHEN            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    LONG            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    ARRAY           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    ELVIS           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    IN              reduce using rule 283 (simpleIdentifier -> NUMBER .)
    NOT_IN          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    IS              reduce using rule 283 (simpleIdentifier -> NUMBER .)
    NOT_IS          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MAIOR           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MENORIGUAL      reduce using rule 283 (simpleIdentifier -> NUMBER .)
    MAIORIGUAL      reduce using rule 283 (simpleIdentifier -> NUMBER .)
    DIFERENTE       reduce using rule 283 (simpleIdentifier -> NUMBER .)
    IDENTIDADE      reduce using rule 283 (simpleIdentifier -> NUMBER .)
    IGUALDADE       reduce using rule 283 (simpleIdentifier -> NUMBER .)
    SEMIDENTIDADE   reduce using rule 283 (simpleIdentifier -> NUMBER .)
    AND             reduce using rule 283 (simpleIdentifier -> NUMBER .)
    OR              reduce using rule 283 (simpleIdentifier -> NUMBER .)
    FUN             reduce using rule 283 (simpleIdentifier -> NUMBER .)
    FOR             reduce using rule 283 (simpleIdentifier -> NUMBER .)
    WHILE           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    DO              reduce using rule 283 (simpleIdentifier -> NUMBER .)
    LITERAL_STRING  reduce using rule 283 (simpleIdentifier -> NUMBER .)
    IF              reduce using rule 283 (simpleIdentifier -> NUMBER .)
    RETURN          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    RETURN_AT       reduce using rule 283 (simpleIdentifier -> NUMBER .)
    CONTINUE        reduce using rule 283 (simpleIdentifier -> NUMBER .)
    CONTINUE_AT     reduce using rule 283 (simpleIdentifier -> NUMBER .)
    BREAK           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    BREAK_AT        reduce using rule 283 (simpleIdentifier -> NUMBER .)
    NOT             reduce using rule 283 (simpleIdentifier -> NUMBER .)
    SUSPEND         reduce using rule 283 (simpleIdentifier -> NUMBER .)
    LCHAVE          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    $end            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    COMMA           reduce using rule 283 (simpleIdentifier -> NUMBER .)
    RPAREN          reduce using rule 283 (simpleIdentifier -> NUMBER .)
    RCCT            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    PV              reduce using rule 283 (simpleIdentifier -> NUMBER .)
    ELSE            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    SETA            reduce using rule 283 (simpleIdentifier -> NUMBER .)
    CLASS           reduce using rule 283 (simpleIdentifier -> NUMBER .)


state 23

    (284) simpleIdentifier -> OPERATOR .

    LPAREN          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    DOISP           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    ATRIBUICAO      reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    INCREMENTO      reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    DECREMENTO      reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MENOR           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    LCCT            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    COLONCOLON      reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    PONTO           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    RCHAVE          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    AS              reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MAISIGUAL       reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MENOSIGUAL      reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MULTIGUAL       reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    DIVIGUAL        reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MODIGUAL        reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MULT            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    DIVIDE          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MOD             reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    PLUS            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MINUS           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    PONTOPONTO      reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    ID              reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    CROSSINLINE     reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    IMPORT          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    INIT            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    NOINLINE        reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    OUT             reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    VARARG          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    WHERE           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    OBJECT          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    CONST           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    CONSTRUCTOR     reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    EOF             reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    FALSE           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    FUNCTION        reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    NULL            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    NULLABLE        reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    NUMBER          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    OPERATOR        reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    SMARTCAST       reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    THIS            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    TRUE            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    VAL             reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    VAR             reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    WHEN            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    LONG            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    ARRAY           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    ELVIS           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    IN              reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    NOT_IN          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    IS              reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    NOT_IS          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MAIOR           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MENORIGUAL      reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    MAIORIGUAL      reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    DIFERENTE       reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    IDENTIDADE      reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    IGUALDADE       reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    SEMIDENTIDADE   reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    AND             reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    OR              reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    FUN             reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    FOR             reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    WHILE           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    DO              reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    LITERAL_STRING  reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    IF              reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    RETURN          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    RETURN_AT       reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    CONTINUE        reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    CONTINUE_AT     reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    BREAK           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    BREAK_AT        reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    NOT             reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    SUSPEND         reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    LCHAVE          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    $end            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    COMMA           reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    RPAREN          reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    RCCT            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    PV              reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    ELSE            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    SETA            reduce using rule 284 (simpleIdentifier -> OPERATOR .)
    CLASS           reduce using rule 284 (simpleIdentifier -> OPERATOR .)


state 24

    (285) simpleIdentifier -> SMARTCAST .

    LPAREN          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    DOISP           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    ATRIBUICAO      reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    INCREMENTO      reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    DECREMENTO      reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MENOR           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    LCCT            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    COLONCOLON      reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    PONTO           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    RCHAVE          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    AS              reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MAISIGUAL       reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MENOSIGUAL      reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MULTIGUAL       reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    DIVIGUAL        reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MODIGUAL        reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MULT            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    DIVIDE          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MOD             reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    PLUS            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MINUS           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    PONTOPONTO      reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    ID              reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    CROSSINLINE     reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    IMPORT          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    INIT            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    NOINLINE        reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    OUT             reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    VARARG          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    WHERE           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    OBJECT          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    CONST           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    CONSTRUCTOR     reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    EOF             reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    FALSE           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    FUNCTION        reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    NULL            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    NULLABLE        reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    NUMBER          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    OPERATOR        reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    SMARTCAST       reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    THIS            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    TRUE            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    VAL             reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    VAR             reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    WHEN            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    LONG            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    ARRAY           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    ELVIS           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    IN              reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    NOT_IN          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    IS              reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    NOT_IS          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MAIOR           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MENORIGUAL      reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    MAIORIGUAL      reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    DIFERENTE       reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    IDENTIDADE      reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    IGUALDADE       reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    SEMIDENTIDADE   reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    AND             reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    OR              reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    FUN             reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    FOR             reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    WHILE           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    DO              reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    LITERAL_STRING  reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    IF              reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    RETURN          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    RETURN_AT       reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    CONTINUE        reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    CONTINUE_AT     reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    BREAK           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    BREAK_AT        reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    NOT             reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    SUSPEND         reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    LCHAVE          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    $end            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    COMMA           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    RPAREN          reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    RCCT            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    PV              reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    ELSE            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    SETA            reduce using rule 285 (simpleIdentifier -> SMARTCAST .)
    CLASS           reduce using rule 285 (simpleIdentifier -> SMARTCAST .)


state 25

    (286) simpleIdentifier -> THIS .

    LPAREN          reduce using rule 286 (simpleIdentifier -> THIS .)
    DOISP           reduce using rule 286 (simpleIdentifier -> THIS .)
    ATRIBUICAO      reduce using rule 286 (simpleIdentifier -> THIS .)
    INCREMENTO      reduce using rule 286 (simpleIdentifier -> THIS .)
    DECREMENTO      reduce using rule 286 (simpleIdentifier -> THIS .)
    MENOR           reduce using rule 286 (simpleIdentifier -> THIS .)
    LCCT            reduce using rule 286 (simpleIdentifier -> THIS .)
    COLONCOLON      reduce using rule 286 (simpleIdentifier -> THIS .)
    PONTO           reduce using rule 286 (simpleIdentifier -> THIS .)
    RCHAVE          reduce using rule 286 (simpleIdentifier -> THIS .)
    AS              reduce using rule 286 (simpleIdentifier -> THIS .)
    MAISIGUAL       reduce using rule 286 (simpleIdentifier -> THIS .)
    MENOSIGUAL      reduce using rule 286 (simpleIdentifier -> THIS .)
    MULTIGUAL       reduce using rule 286 (simpleIdentifier -> THIS .)
    DIVIGUAL        reduce using rule 286 (simpleIdentifier -> THIS .)
    MODIGUAL        reduce using rule 286 (simpleIdentifier -> THIS .)
    MULT            reduce using rule 286 (simpleIdentifier -> THIS .)
    DIVIDE          reduce using rule 286 (simpleIdentifier -> THIS .)
    MOD             reduce using rule 286 (simpleIdentifier -> THIS .)
    PLUS            reduce using rule 286 (simpleIdentifier -> THIS .)
    MINUS           reduce using rule 286 (simpleIdentifier -> THIS .)
    PONTOPONTO      reduce using rule 286 (simpleIdentifier -> THIS .)
    ID              reduce using rule 286 (simpleIdentifier -> THIS .)
    CROSSINLINE     reduce using rule 286 (simpleIdentifier -> THIS .)
    IMPORT          reduce using rule 286 (simpleIdentifier -> THIS .)
    INIT            reduce using rule 286 (simpleIdentifier -> THIS .)
    NOINLINE        reduce using rule 286 (simpleIdentifier -> THIS .)
    OUT             reduce using rule 286 (simpleIdentifier -> THIS .)
    VARARG          reduce using rule 286 (simpleIdentifier -> THIS .)
    WHERE           reduce using rule 286 (simpleIdentifier -> THIS .)
    OBJECT          reduce using rule 286 (simpleIdentifier -> THIS .)
    CONST           reduce using rule 286 (simpleIdentifier -> THIS .)
    CONSTRUCTOR     reduce using rule 286 (simpleIdentifier -> THIS .)
    EOF             reduce using rule 286 (simpleIdentifier -> THIS .)
    FALSE           reduce using rule 286 (simpleIdentifier -> THIS .)
    FUNCTION        reduce using rule 286 (simpleIdentifier -> THIS .)
    NULL            reduce using rule 286 (simpleIdentifier -> THIS .)
    NULLABLE        reduce using rule 286 (simpleIdentifier -> THIS .)
    NUMBER          reduce using rule 286 (simpleIdentifier -> THIS .)
    OPERATOR        reduce using rule 286 (simpleIdentifier -> THIS .)
    SMARTCAST       reduce using rule 286 (simpleIdentifier -> THIS .)
    THIS            reduce using rule 286 (simpleIdentifier -> THIS .)
    TRUE            reduce using rule 286 (simpleIdentifier -> THIS .)
    VAL             reduce using rule 286 (simpleIdentifier -> THIS .)
    VAR             reduce using rule 286 (simpleIdentifier -> THIS .)
    WHEN            reduce using rule 286 (simpleIdentifier -> THIS .)
    LONG            reduce using rule 286 (simpleIdentifier -> THIS .)
    ARRAY           reduce using rule 286 (simpleIdentifier -> THIS .)
    ELVIS           reduce using rule 286 (simpleIdentifier -> THIS .)
    IN              reduce using rule 286 (simpleIdentifier -> THIS .)
    NOT_IN          reduce using rule 286 (simpleIdentifier -> THIS .)
    IS              reduce using rule 286 (simpleIdentifier -> THIS .)
    NOT_IS          reduce using rule 286 (simpleIdentifier -> THIS .)
    MAIOR           reduce using rule 286 (simpleIdentifier -> THIS .)
    MENORIGUAL      reduce using rule 286 (simpleIdentifier -> THIS .)
    MAIORIGUAL      reduce using rule 286 (simpleIdentifier -> THIS .)
    DIFERENTE       reduce using rule 286 (simpleIdentifier -> THIS .)
    IDENTIDADE      reduce using rule 286 (simpleIdentifier -> THIS .)
    IGUALDADE       reduce using rule 286 (simpleIdentifier -> THIS .)
    SEMIDENTIDADE   reduce using rule 286 (simpleIdentifier -> THIS .)
    AND             reduce using rule 286 (simpleIdentifier -> THIS .)
    OR              reduce using rule 286 (simpleIdentifier -> THIS .)
    FUN             reduce using rule 286 (simpleIdentifier -> THIS .)
    FOR             reduce using rule 286 (simpleIdentifier -> THIS .)
    WHILE           reduce using rule 286 (simpleIdentifier -> THIS .)
    DO              reduce using rule 286 (simpleIdentifier -> THIS .)
    LITERAL_STRING  reduce using rule 286 (simpleIdentifier -> THIS .)
    IF              reduce using rule 286 (simpleIdentifier -> THIS .)
    RETURN          reduce using rule 286 (simpleIdentifier -> THIS .)
    RETURN_AT       reduce using rule 286 (simpleIdentifier -> THIS .)
    CONTINUE        reduce using rule 286 (simpleIdentifier -> THIS .)
    CONTINUE_AT     reduce using rule 286 (simpleIdentifier -> THIS .)
    BREAK           reduce using rule 286 (simpleIdentifier -> THIS .)
    BREAK_AT        reduce using rule 286 (simpleIdentifier -> THIS .)
    NOT             reduce using rule 286 (simpleIdentifier -> THIS .)
    SUSPEND         reduce using rule 286 (simpleIdentifier -> THIS .)
    LCHAVE          reduce using rule 286 (simpleIdentifier -> THIS .)
    $end            reduce using rule 286 (simpleIdentifier -> THIS .)
    COMMA           reduce using rule 286 (simpleIdentifier -> THIS .)
    RPAREN          reduce using rule 286 (simpleIdentifier -> THIS .)
    RCCT            reduce using rule 286 (simpleIdentifier -> THIS .)
    PV              reduce using rule 286 (simpleIdentifier -> THIS .)
    ELSE            reduce using rule 286 (simpleIdentifier -> THIS .)
    SETA            reduce using rule 286 (simpleIdentifier -> THIS .)
    CLASS           reduce using rule 286 (simpleIdentifier -> THIS .)


state 26

    (287) simpleIdentifier -> TRUE .

    LPAREN          reduce using rule 287 (simpleIdentifier -> TRUE .)
    DOISP           reduce using rule 287 (simpleIdentifier -> TRUE .)
    ATRIBUICAO      reduce using rule 287 (simpleIdentifier -> TRUE .)
    INCREMENTO      reduce using rule 287 (simpleIdentifier -> TRUE .)
    DECREMENTO      reduce using rule 287 (simpleIdentifier -> TRUE .)
    MENOR           reduce using rule 287 (simpleIdentifier -> TRUE .)
    LCCT            reduce using rule 287 (simpleIdentifier -> TRUE .)
    COLONCOLON      reduce using rule 287 (simpleIdentifier -> TRUE .)
    PONTO           reduce using rule 287 (simpleIdentifier -> TRUE .)
    RCHAVE          reduce using rule 287 (simpleIdentifier -> TRUE .)
    AS              reduce using rule 287 (simpleIdentifier -> TRUE .)
    MAISIGUAL       reduce using rule 287 (simpleIdentifier -> TRUE .)
    MENOSIGUAL      reduce using rule 287 (simpleIdentifier -> TRUE .)
    MULTIGUAL       reduce using rule 287 (simpleIdentifier -> TRUE .)
    DIVIGUAL        reduce using rule 287 (simpleIdentifier -> TRUE .)
    MODIGUAL        reduce using rule 287 (simpleIdentifier -> TRUE .)
    MULT            reduce using rule 287 (simpleIdentifier -> TRUE .)
    DIVIDE          reduce using rule 287 (simpleIdentifier -> TRUE .)
    MOD             reduce using rule 287 (simpleIdentifier -> TRUE .)
    PLUS            reduce using rule 287 (simpleIdentifier -> TRUE .)
    MINUS           reduce using rule 287 (simpleIdentifier -> TRUE .)
    PONTOPONTO      reduce using rule 287 (simpleIdentifier -> TRUE .)
    ID              reduce using rule 287 (simpleIdentifier -> TRUE .)
    CROSSINLINE     reduce using rule 287 (simpleIdentifier -> TRUE .)
    IMPORT          reduce using rule 287 (simpleIdentifier -> TRUE .)
    INIT            reduce using rule 287 (simpleIdentifier -> TRUE .)
    NOINLINE        reduce using rule 287 (simpleIdentifier -> TRUE .)
    OUT             reduce using rule 287 (simpleIdentifier -> TRUE .)
    VARARG          reduce using rule 287 (simpleIdentifier -> TRUE .)
    WHERE           reduce using rule 287 (simpleIdentifier -> TRUE .)
    OBJECT          reduce using rule 287 (simpleIdentifier -> TRUE .)
    CONST           reduce using rule 287 (simpleIdentifier -> TRUE .)
    CONSTRUCTOR     reduce using rule 287 (simpleIdentifier -> TRUE .)
    EOF             reduce using rule 287 (simpleIdentifier -> TRUE .)
    FALSE           reduce using rule 287 (simpleIdentifier -> TRUE .)
    FUNCTION        reduce using rule 287 (simpleIdentifier -> TRUE .)
    NULL            reduce using rule 287 (simpleIdentifier -> TRUE .)
    NULLABLE        reduce using rule 287 (simpleIdentifier -> TRUE .)
    NUMBER          reduce using rule 287 (simpleIdentifier -> TRUE .)
    OPERATOR        reduce using rule 287 (simpleIdentifier -> TRUE .)
    SMARTCAST       reduce using rule 287 (simpleIdentifier -> TRUE .)
    THIS            reduce using rule 287 (simpleIdentifier -> TRUE .)
    TRUE            reduce using rule 287 (simpleIdentifier -> TRUE .)
    VAL             reduce using rule 287 (simpleIdentifier -> TRUE .)
    VAR             reduce using rule 287 (simpleIdentifier -> TRUE .)
    WHEN            reduce using rule 287 (simpleIdentifier -> TRUE .)
    LONG            reduce using rule 287 (simpleIdentifier -> TRUE .)
    ARRAY           reduce using rule 287 (simpleIdentifier -> TRUE .)
    ELVIS           reduce using rule 287 (simpleIdentifier -> TRUE .)
    IN              reduce using rule 287 (simpleIdentifier -> TRUE .)
    NOT_IN          reduce using rule 287 (simpleIdentifier -> TRUE .)
    IS              reduce using rule 287 (simpleIdentifier -> TRUE .)
    NOT_IS          reduce using rule 287 (simpleIdentifier -> TRUE .)
    MAIOR           reduce using rule 287 (simpleIdentifier -> TRUE .)
    MENORIGUAL      reduce using rule 287 (simpleIdentifier -> TRUE .)
    MAIORIGUAL      reduce using rule 287 (simpleIdentifier -> TRUE .)
    DIFERENTE       reduce using rule 287 (simpleIdentifier -> TRUE .)
    IDENTIDADE      reduce using rule 287 (simpleIdentifier -> TRUE .)
    IGUALDADE       reduce using rule 287 (simpleIdentifier -> TRUE .)
    SEMIDENTIDADE   reduce using rule 287 (simpleIdentifier -> TRUE .)
    AND             reduce using rule 287 (simpleIdentifier -> TRUE .)
    OR              reduce using rule 287 (simpleIdentifier -> TRUE .)
    FUN             reduce using rule 287 (simpleIdentifier -> TRUE .)
    FOR             reduce using rule 287 (simpleIdentifier -> TRUE .)
    WHILE           reduce using rule 287 (simpleIdentifier -> TRUE .)
    DO              reduce using rule 287 (simpleIdentifier -> TRUE .)
    LITERAL_STRING  reduce using rule 287 (simpleIdentifier -> TRUE .)
    IF              reduce using rule 287 (simpleIdentifier -> TRUE .)
    RETURN          reduce using rule 287 (simpleIdentifier -> TRUE .)
    RETURN_AT       reduce using rule 287 (simpleIdentifier -> TRUE .)
    CONTINUE        reduce using rule 287 (simpleIdentifier -> TRUE .)
    CONTINUE_AT     reduce using rule 287 (simpleIdentifier -> TRUE .)
    BREAK           reduce using rule 287 (simpleIdentifier -> TRUE .)
    BREAK_AT        reduce using rule 287 (simpleIdentifier -> TRUE .)
    NOT             reduce using rule 287 (simpleIdentifier -> TRUE .)
    SUSPEND         reduce using rule 287 (simpleIdentifier -> TRUE .)
    LCHAVE          reduce using rule 287 (simpleIdentifier -> TRUE .)
    $end            reduce using rule 287 (simpleIdentifier -> TRUE .)
    COMMA           reduce using rule 287 (simpleIdentifier -> TRUE .)
    RPAREN          reduce using rule 287 (simpleIdentifier -> TRUE .)
    RCCT            reduce using rule 287 (simpleIdentifier -> TRUE .)
    PV              reduce using rule 287 (simpleIdentifier -> TRUE .)
    ELSE            reduce using rule 287 (simpleIdentifier -> TRUE .)
    SETA            reduce using rule 287 (simpleIdentifier -> TRUE .)
    CLASS           reduce using rule 287 (simpleIdentifier -> TRUE .)


state 27

    (288) simpleIdentifier -> VAL .

    LPAREN          reduce using rule 288 (simpleIdentifier -> VAL .)
    DOISP           reduce using rule 288 (simpleIdentifier -> VAL .)
    MENOR           reduce using rule 288 (simpleIdentifier -> VAL .)
    LCHAVE          reduce using rule 288 (simpleIdentifier -> VAL .)
    FUN             reduce using rule 288 (simpleIdentifier -> VAL .)
    $end            reduce using rule 288 (simpleIdentifier -> VAL .)
    FOR             reduce using rule 288 (simpleIdentifier -> VAL .)
    WHILE           reduce using rule 288 (simpleIdentifier -> VAL .)
    DO              reduce using rule 288 (simpleIdentifier -> VAL .)
    VAR             reduce using rule 288 (simpleIdentifier -> VAL .)
    VAL             reduce using rule 288 (simpleIdentifier -> VAL .)
    ID              reduce using rule 288 (simpleIdentifier -> VAL .)
    CROSSINLINE     reduce using rule 288 (simpleIdentifier -> VAL .)
    IMPORT          reduce using rule 288 (simpleIdentifier -> VAL .)
    INIT            reduce using rule 288 (simpleIdentifier -> VAL .)
    NOINLINE        reduce using rule 288 (simpleIdentifier -> VAL .)
    OUT             reduce using rule 288 (simpleIdentifier -> VAL .)
    VARARG          reduce using rule 288 (simpleIdentifier -> VAL .)
    WHERE           reduce using rule 288 (simpleIdentifier -> VAL .)
    OBJECT          reduce using rule 288 (simpleIdentifier -> VAL .)
    CONST           reduce using rule 288 (simpleIdentifier -> VAL .)
    CONSTRUCTOR     reduce using rule 288 (simpleIdentifier -> VAL .)
    EOF             reduce using rule 288 (simpleIdentifier -> VAL .)
    FALSE           reduce using rule 288 (simpleIdentifier -> VAL .)
    FUNCTION        reduce using rule 288 (simpleIdentifier -> VAL .)
    NULL            reduce using rule 288 (simpleIdentifier -> VAL .)
    NULLABLE        reduce using rule 288 (simpleIdentifier -> VAL .)
    NUMBER          reduce using rule 288 (simpleIdentifier -> VAL .)
    OPERATOR        reduce using rule 288 (simpleIdentifier -> VAL .)
    SMARTCAST       reduce using rule 288 (simpleIdentifier -> VAL .)
    THIS            reduce using rule 288 (simpleIdentifier -> VAL .)
    TRUE            reduce using rule 288 (simpleIdentifier -> VAL .)
    WHEN            reduce using rule 288 (simpleIdentifier -> VAL .)
    LONG            reduce using rule 288 (simpleIdentifier -> VAL .)
    ARRAY           reduce using rule 288 (simpleIdentifier -> VAL .)
    LITERAL_STRING  reduce using rule 288 (simpleIdentifier -> VAL .)
    LCCT            reduce using rule 288 (simpleIdentifier -> VAL .)
    IF              reduce using rule 288 (simpleIdentifier -> VAL .)
    RETURN          reduce using rule 288 (simpleIdentifier -> VAL .)
    RETURN_AT       reduce using rule 288 (simpleIdentifier -> VAL .)
    CONTINUE        reduce using rule 288 (simpleIdentifier -> VAL .)
    CONTINUE_AT     reduce using rule 288 (simpleIdentifier -> VAL .)
    BREAK           reduce using rule 288 (simpleIdentifier -> VAL .)
    BREAK_AT        reduce using rule 288 (simpleIdentifier -> VAL .)
    RCHAVE          reduce using rule 288 (simpleIdentifier -> VAL .)
    INCREMENTO      reduce using rule 288 (simpleIdentifier -> VAL .)
    DECREMENTO      reduce using rule 288 (simpleIdentifier -> VAL .)
    MINUS           reduce using rule 288 (simpleIdentifier -> VAL .)
    PLUS            reduce using rule 288 (simpleIdentifier -> VAL .)
    NOT             reduce using rule 288 (simpleIdentifier -> VAL .)
    SUSPEND         reduce using rule 288 (simpleIdentifier -> VAL .)
    COLONCOLON      reduce using rule 288 (simpleIdentifier -> VAL .)
    PONTO           reduce using rule 288 (simpleIdentifier -> VAL .)
    AS              reduce using rule 288 (simpleIdentifier -> VAL .)
    MAISIGUAL       reduce using rule 288 (simpleIdentifier -> VAL .)
    MENOSIGUAL      reduce using rule 288 (simpleIdentifier -> VAL .)
    MULTIGUAL       reduce using rule 288 (simpleIdentifier -> VAL .)
    DIVIGUAL        reduce using rule 288 (simpleIdentifier -> VAL .)
    MODIGUAL        reduce using rule 288 (simpleIdentifier -> VAL .)
    MULT            reduce using rule 288 (simpleIdentifier -> VAL .)
    DIVIDE          reduce using rule 288 (simpleIdentifier -> VAL .)
    MOD             reduce using rule 288 (simpleIdentifier -> VAL .)
    PONTOPONTO      reduce using rule 288 (simpleIdentifier -> VAL .)
    ELVIS           reduce using rule 288 (simpleIdentifier -> VAL .)
    IN              reduce using rule 288 (simpleIdentifier -> VAL .)
    NOT_IN          reduce using rule 288 (simpleIdentifier -> VAL .)
    IS              reduce using rule 288 (simpleIdentifier -> VAL .)
    NOT_IS          reduce using rule 288 (simpleIdentifier -> VAL .)
    MAIOR           reduce using rule 288 (simpleIdentifier -> VAL .)
    MENORIGUAL      reduce using rule 288 (simpleIdentifier -> VAL .)
    MAIORIGUAL      reduce using rule 288 (simpleIdentifier -> VAL .)
    DIFERENTE       reduce using rule 288 (simpleIdentifier -> VAL .)
    IDENTIDADE      reduce using rule 288 (simpleIdentifier -> VAL .)
    IGUALDADE       reduce using rule 288 (simpleIdentifier -> VAL .)
    SEMIDENTIDADE   reduce using rule 288 (simpleIdentifier -> VAL .)
    AND             reduce using rule 288 (simpleIdentifier -> VAL .)
    OR              reduce using rule 288 (simpleIdentifier -> VAL .)
    COMMA           reduce using rule 288 (simpleIdentifier -> VAL .)
    RPAREN          reduce using rule 288 (simpleIdentifier -> VAL .)
    RCCT            reduce using rule 288 (simpleIdentifier -> VAL .)
    PV              reduce using rule 288 (simpleIdentifier -> VAL .)
    ELSE            reduce using rule 288 (simpleIdentifier -> VAL .)
    SETA            reduce using rule 288 (simpleIdentifier -> VAL .)
    ATRIBUICAO      reduce using rule 288 (simpleIdentifier -> VAL .)
    CLASS           reduce using rule 288 (simpleIdentifier -> VAL .)


state 28

    (289) simpleIdentifier -> VAR .

    LPAREN          reduce using rule 289 (simpleIdentifier -> VAR .)
    DOISP           reduce using rule 289 (simpleIdentifier -> VAR .)
    MENOR           reduce using rule 289 (simpleIdentifier -> VAR .)
    LCHAVE          reduce using rule 289 (simpleIdentifier -> VAR .)
    FUN             reduce using rule 289 (simpleIdentifier -> VAR .)
    $end            reduce using rule 289 (simpleIdentifier -> VAR .)
    FOR             reduce using rule 289 (simpleIdentifier -> VAR .)
    WHILE           reduce using rule 289 (simpleIdentifier -> VAR .)
    DO              reduce using rule 289 (simpleIdentifier -> VAR .)
    VAR             reduce using rule 289 (simpleIdentifier -> VAR .)
    VAL             reduce using rule 289 (simpleIdentifier -> VAR .)
    ID              reduce using rule 289 (simpleIdentifier -> VAR .)
    CROSSINLINE     reduce using rule 289 (simpleIdentifier -> VAR .)
    IMPORT          reduce using rule 289 (simpleIdentifier -> VAR .)
    INIT            reduce using rule 289 (simpleIdentifier -> VAR .)
    NOINLINE        reduce using rule 289 (simpleIdentifier -> VAR .)
    OUT             reduce using rule 289 (simpleIdentifier -> VAR .)
    VARARG          reduce using rule 289 (simpleIdentifier -> VAR .)
    WHERE           reduce using rule 289 (simpleIdentifier -> VAR .)
    OBJECT          reduce using rule 289 (simpleIdentifier -> VAR .)
    CONST           reduce using rule 289 (simpleIdentifier -> VAR .)
    CONSTRUCTOR     reduce using rule 289 (simpleIdentifier -> VAR .)
    EOF             reduce using rule 289 (simpleIdentifier -> VAR .)
    FALSE           reduce using rule 289 (simpleIdentifier -> VAR .)
    FUNCTION        reduce using rule 289 (simpleIdentifier -> VAR .)
    NULL            reduce using rule 289 (simpleIdentifier -> VAR .)
    NULLABLE        reduce using rule 289 (simpleIdentifier -> VAR .)
    NUMBER          reduce using rule 289 (simpleIdentifier -> VAR .)
    OPERATOR        reduce using rule 289 (simpleIdentifier -> VAR .)
    SMARTCAST       reduce using rule 289 (simpleIdentifier -> VAR .)
    THIS            reduce using rule 289 (simpleIdentifier -> VAR .)
    TRUE            reduce using rule 289 (simpleIdentifier -> VAR .)
    WHEN            reduce using rule 289 (simpleIdentifier -> VAR .)
    LONG            reduce using rule 289 (simpleIdentifier -> VAR .)
    ARRAY           reduce using rule 289 (simpleIdentifier -> VAR .)
    LITERAL_STRING  reduce using rule 289 (simpleIdentifier -> VAR .)
    LCCT            reduce using rule 289 (simpleIdentifier -> VAR .)
    IF              reduce using rule 289 (simpleIdentifier -> VAR .)
    RETURN          reduce using rule 289 (simpleIdentifier -> VAR .)
    RETURN_AT       reduce using rule 289 (simpleIdentifier -> VAR .)
    CONTINUE        reduce using rule 289 (simpleIdentifier -> VAR .)
    CONTINUE_AT     reduce using rule 289 (simpleIdentifier -> VAR .)
    BREAK           reduce using rule 289 (simpleIdentifier -> VAR .)
    BREAK_AT        reduce using rule 289 (simpleIdentifier -> VAR .)
    RCHAVE          reduce using rule 289 (simpleIdentifier -> VAR .)
    INCREMENTO      reduce using rule 289 (simpleIdentifier -> VAR .)
    DECREMENTO      reduce using rule 289 (simpleIdentifier -> VAR .)
    MINUS           reduce using rule 289 (simpleIdentifier -> VAR .)
    PLUS            reduce using rule 289 (simpleIdentifier -> VAR .)
    NOT             reduce using rule 289 (simpleIdentifier -> VAR .)
    SUSPEND         reduce using rule 289 (simpleIdentifier -> VAR .)
    COLONCOLON      reduce using rule 289 (simpleIdentifier -> VAR .)
    PONTO           reduce using rule 289 (simpleIdentifier -> VAR .)
    AS              reduce using rule 289 (simpleIdentifier -> VAR .)
    MAISIGUAL       reduce using rule 289 (simpleIdentifier -> VAR .)
    MENOSIGUAL      reduce using rule 289 (simpleIdentifier -> VAR .)
    MULTIGUAL       reduce using rule 289 (simpleIdentifier -> VAR .)
    DIVIGUAL        reduce using rule 289 (simpleIdentifier -> VAR .)
    MODIGUAL        reduce using rule 289 (simpleIdentifier -> VAR .)
    MULT            reduce using rule 289 (simpleIdentifier -> VAR .)
    DIVIDE          reduce using rule 289 (simpleIdentifier -> VAR .)
    MOD             reduce using rule 289 (simpleIdentifier -> VAR .)
    PONTOPONTO      reduce using rule 289 (simpleIdentifier -> VAR .)
    ELVIS           reduce using rule 289 (simpleIdentifier -> VAR .)
    IN              reduce using rule 289 (simpleIdentifier -> VAR .)
    NOT_IN          reduce using rule 289 (simpleIdentifier -> VAR .)
    IS              reduce using rule 289 (simpleIdentifier -> VAR .)
    NOT_IS          reduce using rule 289 (simpleIdentifier -> VAR .)
    MAIOR           reduce using rule 289 (simpleIdentifier -> VAR .)
    MENORIGUAL      reduce using rule 289 (simpleIdentifier -> VAR .)
    MAIORIGUAL      reduce using rule 289 (simpleIdentifier -> VAR .)
    DIFERENTE       reduce using rule 289 (simpleIdentifier -> VAR .)
    IDENTIDADE      reduce using rule 289 (simpleIdentifier -> VAR .)
    IGUALDADE       reduce using rule 289 (simpleIdentifier -> VAR .)
    SEMIDENTIDADE   reduce using rule 289 (simpleIdentifier -> VAR .)
    AND             reduce using rule 289 (simpleIdentifier -> VAR .)
    OR              reduce using rule 289 (simpleIdentifier -> VAR .)
    COMMA           reduce using rule 289 (simpleIdentifier -> VAR .)
    RPAREN          reduce using rule 289 (simpleIdentifier -> VAR .)
    RCCT            reduce using rule 289 (simpleIdentifier -> VAR .)
    PV              reduce using rule 289 (simpleIdentifier -> VAR .)
    ELSE            reduce using rule 289 (simpleIdentifier -> VAR .)
    SETA            reduce using rule 289 (simpleIdentifier -> VAR .)
    ATRIBUICAO      reduce using rule 289 (simpleIdentifier -> VAR .)
    CLASS           reduce using rule 289 (simpleIdentifier -> VAR .)


state 29

    (290) simpleIdentifier -> WHEN .

    LPAREN          reduce using rule 290 (simpleIdentifier -> WHEN .)
    DOISP           reduce using rule 290 (simpleIdentifier -> WHEN .)
    ATRIBUICAO      reduce using rule 290 (simpleIdentifier -> WHEN .)
    INCREMENTO      reduce using rule 290 (simpleIdentifier -> WHEN .)
    DECREMENTO      reduce using rule 290 (simpleIdentifier -> WHEN .)
    MENOR           reduce using rule 290 (simpleIdentifier -> WHEN .)
    LCCT            reduce using rule 290 (simpleIdentifier -> WHEN .)
    COLONCOLON      reduce using rule 290 (simpleIdentifier -> WHEN .)
    PONTO           reduce using rule 290 (simpleIdentifier -> WHEN .)
    RCHAVE          reduce using rule 290 (simpleIdentifier -> WHEN .)
    AS              reduce using rule 290 (simpleIdentifier -> WHEN .)
    MAISIGUAL       reduce using rule 290 (simpleIdentifier -> WHEN .)
    MENOSIGUAL      reduce using rule 290 (simpleIdentifier -> WHEN .)
    MULTIGUAL       reduce using rule 290 (simpleIdentifier -> WHEN .)
    DIVIGUAL        reduce using rule 290 (simpleIdentifier -> WHEN .)
    MODIGUAL        reduce using rule 290 (simpleIdentifier -> WHEN .)
    MULT            reduce using rule 290 (simpleIdentifier -> WHEN .)
    DIVIDE          reduce using rule 290 (simpleIdentifier -> WHEN .)
    MOD             reduce using rule 290 (simpleIdentifier -> WHEN .)
    PLUS            reduce using rule 290 (simpleIdentifier -> WHEN .)
    MINUS           reduce using rule 290 (simpleIdentifier -> WHEN .)
    PONTOPONTO      reduce using rule 290 (simpleIdentifier -> WHEN .)
    ID              reduce using rule 290 (simpleIdentifier -> WHEN .)
    CROSSINLINE     reduce using rule 290 (simpleIdentifier -> WHEN .)
    IMPORT          reduce using rule 290 (simpleIdentifier -> WHEN .)
    INIT            reduce using rule 290 (simpleIdentifier -> WHEN .)
    NOINLINE        reduce using rule 290 (simpleIdentifier -> WHEN .)
    OUT             reduce using rule 290 (simpleIdentifier -> WHEN .)
    VARARG          reduce using rule 290 (simpleIdentifier -> WHEN .)
    WHERE           reduce using rule 290 (simpleIdentifier -> WHEN .)
    OBJECT          reduce using rule 290 (simpleIdentifier -> WHEN .)
    CONST           reduce using rule 290 (simpleIdentifier -> WHEN .)
    CONSTRUCTOR     reduce using rule 290 (simpleIdentifier -> WHEN .)
    EOF             reduce using rule 290 (simpleIdentifier -> WHEN .)
    FALSE           reduce using rule 290 (simpleIdentifier -> WHEN .)
    FUNCTION        reduce using rule 290 (simpleIdentifier -> WHEN .)
    NULL            reduce using rule 290 (simpleIdentifier -> WHEN .)
    NULLABLE        reduce using rule 290 (simpleIdentifier -> WHEN .)
    NUMBER          reduce using rule 290 (simpleIdentifier -> WHEN .)
    OPERATOR        reduce using rule 290 (simpleIdentifier -> WHEN .)
    SMARTCAST       reduce using rule 290 (simpleIdentifier -> WHEN .)
    THIS            reduce using rule 290 (simpleIdentifier -> WHEN .)
    TRUE            reduce using rule 290 (simpleIdentifier -> WHEN .)
    VAL             reduce using rule 290 (simpleIdentifier -> WHEN .)
    VAR             reduce using rule 290 (simpleIdentifier -> WHEN .)
    WHEN            reduce using rule 290 (simpleIdentifier -> WHEN .)
    LONG            reduce using rule 290 (simpleIdentifier -> WHEN .)
    ARRAY           reduce using rule 290 (simpleIdentifier -> WHEN .)
    ELVIS           reduce using rule 290 (simpleIdentifier -> WHEN .)
    IN              reduce using rule 290 (simpleIdentifier -> WHEN .)
    NOT_IN          reduce using rule 290 (simpleIdentifier -> WHEN .)
    IS              reduce using rule 290 (simpleIdentifier -> WHEN .)
    NOT_IS          reduce using rule 290 (simpleIdentifier -> WHEN .)
    MAIOR           reduce using rule 290 (simpleIdentifier -> WHEN .)
    MENORIGUAL      reduce using rule 290 (simpleIdentifier -> WHEN .)
    MAIORIGUAL      reduce using rule 290 (simpleIdentifier -> WHEN .)
    DIFERENTE       reduce using rule 290 (simpleIdentifier -> WHEN .)
    IDENTIDADE      reduce using rule 290 (simpleIdentifier -> WHEN .)
    IGUALDADE       reduce using rule 290 (simpleIdentifier -> WHEN .)
    SEMIDENTIDADE   reduce using rule 290 (simpleIdentifier -> WHEN .)
    AND             reduce using rule 290 (simpleIdentifier -> WHEN .)
    OR              reduce using rule 290 (simpleIdentifier -> WHEN .)
    FUN             reduce using rule 290 (simpleIdentifier -> WHEN .)
    FOR             reduce using rule 290 (simpleIdentifier -> WHEN .)
    WHILE           reduce using rule 290 (simpleIdentifier -> WHEN .)
    DO              reduce using rule 290 (simpleIdentifier -> WHEN .)
    LITERAL_STRING  reduce using rule 290 (simpleIdentifier -> WHEN .)
    IF              reduce using rule 290 (simpleIdentifier -> WHEN .)
    RETURN          reduce using rule 290 (simpleIdentifier -> WHEN .)
    RETURN_AT       reduce using rule 290 (simpleIdentifier -> WHEN .)
    CONTINUE        reduce using rule 290 (simpleIdentifier -> WHEN .)
    CONTINUE_AT     reduce using rule 290 (simpleIdentifier -> WHEN .)
    BREAK           reduce using rule 290 (simpleIdentifier -> WHEN .)
    BREAK_AT        reduce using rule 290 (simpleIdentifier -> WHEN .)
    NOT             reduce using rule 290 (simpleIdentifier -> WHEN .)
    SUSPEND         reduce using rule 290 (simpleIdentifier -> WHEN .)
    LCHAVE          reduce using rule 290 (simpleIdentifier -> WHEN .)
    $end            reduce using rule 290 (simpleIdentifier -> WHEN .)
    COMMA           reduce using rule 290 (simpleIdentifier -> WHEN .)
    RPAREN          reduce using rule 290 (simpleIdentifier -> WHEN .)
    RCCT            reduce using rule 290 (simpleIdentifier -> WHEN .)
    PV              reduce using rule 290 (simpleIdentifier -> WHEN .)
    ELSE            reduce using rule 290 (simpleIdentifier -> WHEN .)
    SETA            reduce using rule 290 (simpleIdentifier -> WHEN .)
    CLASS           reduce using rule 290 (simpleIdentifier -> WHEN .)


state 30

    (291) simpleIdentifier -> LONG .

    LPAREN          reduce using rule 291 (simpleIdentifier -> LONG .)
    DOISP           reduce using rule 291 (simpleIdentifier -> LONG .)
    ATRIBUICAO      reduce using rule 291 (simpleIdentifier -> LONG .)
    INCREMENTO      reduce using rule 291 (simpleIdentifier -> LONG .)
    DECREMENTO      reduce using rule 291 (simpleIdentifier -> LONG .)
    MENOR           reduce using rule 291 (simpleIdentifier -> LONG .)
    LCCT            reduce using rule 291 (simpleIdentifier -> LONG .)
    COLONCOLON      reduce using rule 291 (simpleIdentifier -> LONG .)
    PONTO           reduce using rule 291 (simpleIdentifier -> LONG .)
    RCHAVE          reduce using rule 291 (simpleIdentifier -> LONG .)
    AS              reduce using rule 291 (simpleIdentifier -> LONG .)
    MAISIGUAL       reduce using rule 291 (simpleIdentifier -> LONG .)
    MENOSIGUAL      reduce using rule 291 (simpleIdentifier -> LONG .)
    MULTIGUAL       reduce using rule 291 (simpleIdentifier -> LONG .)
    DIVIGUAL        reduce using rule 291 (simpleIdentifier -> LONG .)
    MODIGUAL        reduce using rule 291 (simpleIdentifier -> LONG .)
    MULT            reduce using rule 291 (simpleIdentifier -> LONG .)
    DIVIDE          reduce using rule 291 (simpleIdentifier -> LONG .)
    MOD             reduce using rule 291 (simpleIdentifier -> LONG .)
    PLUS            reduce using rule 291 (simpleIdentifier -> LONG .)
    MINUS           reduce using rule 291 (simpleIdentifier -> LONG .)
    PONTOPONTO      reduce using rule 291 (simpleIdentifier -> LONG .)
    ID              reduce using rule 291 (simpleIdentifier -> LONG .)
    CROSSINLINE     reduce using rule 291 (simpleIdentifier -> LONG .)
    IMPORT          reduce using rule 291 (simpleIdentifier -> LONG .)
    INIT            reduce using rule 291 (simpleIdentifier -> LONG .)
    NOINLINE        reduce using rule 291 (simpleIdentifier -> LONG .)
    OUT             reduce using rule 291 (simpleIdentifier -> LONG .)
    VARARG          reduce using rule 291 (simpleIdentifier -> LONG .)
    WHERE           reduce using rule 291 (simpleIdentifier -> LONG .)
    OBJECT          reduce using rule 291 (simpleIdentifier -> LONG .)
    CONST           reduce using rule 291 (simpleIdentifier -> LONG .)
    CONSTRUCTOR     reduce using rule 291 (simpleIdentifier -> LONG .)
    EOF             reduce using rule 291 (simpleIdentifier -> LONG .)
    FALSE           reduce using rule 291 (simpleIdentifier -> LONG .)
    FUNCTION        reduce using rule 291 (simpleIdentifier -> LONG .)
    NULL            reduce using rule 291 (simpleIdentifier -> LONG .)
    NULLABLE        reduce using rule 291 (simpleIdentifier -> LONG .)
    NUMBER          reduce using rule 291 (simpleIdentifier -> LONG .)
    OPERATOR        reduce using rule 291 (simpleIdentifier -> LONG .)
    SMARTCAST       reduce using rule 291 (simpleIdentifier -> LONG .)
    THIS            reduce using rule 291 (simpleIdentifier -> LONG .)
    TRUE            reduce using rule 291 (simpleIdentifier -> LONG .)
    VAL             reduce using rule 291 (simpleIdentifier -> LONG .)
    VAR             reduce using rule 291 (simpleIdentifier -> LONG .)
    WHEN            reduce using rule 291 (simpleIdentifier -> LONG .)
    LONG            reduce using rule 291 (simpleIdentifier -> LONG .)
    ARRAY           reduce using rule 291 (simpleIdentifier -> LONG .)
    ELVIS           reduce using rule 291 (simpleIdentifier -> LONG .)
    IN              reduce using rule 291 (simpleIdentifier -> LONG .)
    NOT_IN          reduce using rule 291 (simpleIdentifier -> LONG .)
    IS              reduce using rule 291 (simpleIdentifier -> LONG .)
    NOT_IS          reduce using rule 291 (simpleIdentifier -> LONG .)
    MAIOR           reduce using rule 291 (simpleIdentifier -> LONG .)
    MENORIGUAL      reduce using rule 291 (simpleIdentifier -> LONG .)
    MAIORIGUAL      reduce using rule 291 (simpleIdentifier -> LONG .)
    DIFERENTE       reduce using rule 291 (simpleIdentifier -> LONG .)
    IDENTIDADE      reduce using rule 291 (simpleIdentifier -> LONG .)
    IGUALDADE       reduce using rule 291 (simpleIdentifier -> LONG .)
    SEMIDENTIDADE   reduce using rule 291 (simpleIdentifier -> LONG .)
    AND             reduce using rule 291 (simpleIdentifier -> LONG .)
    OR              reduce using rule 291 (simpleIdentifier -> LONG .)
    FUN             reduce using rule 291 (simpleIdentifier -> LONG .)
    FOR             reduce using rule 291 (simpleIdentifier -> LONG .)
    WHILE           reduce using rule 291 (simpleIdentifier -> LONG .)
    DO              reduce using rule 291 (simpleIdentifier -> LONG .)
    LITERAL_STRING  reduce using rule 291 (simpleIdentifier -> LONG .)
    IF              reduce using rule 291 (simpleIdentifier -> LONG .)
    RETURN          reduce using rule 291 (simpleIdentifier -> LONG .)
    RETURN_AT       reduce using rule 291 (simpleIdentifier -> LONG .)
    CONTINUE        reduce using rule 291 (simpleIdentifier -> LONG .)
    CONTINUE_AT     reduce using rule 291 (simpleIdentifier -> LONG .)
    BREAK           reduce using rule 291 (simpleIdentifier -> LONG .)
    BREAK_AT        reduce using rule 291 (simpleIdentifier -> LONG .)
    NOT             reduce using rule 291 (simpleIdentifier -> LONG .)
    SUSPEND         reduce using rule 291 (simpleIdentifier -> LONG .)
    LCHAVE          reduce using rule 291 (simpleIdentifier -> LONG .)
    $end            reduce using rule 291 (simpleIdentifier -> LONG .)
    COMMA           reduce using rule 291 (simpleIdentifier -> LONG .)
    RPAREN          reduce using rule 291 (simpleIdentifier -> LONG .)
    RCCT            reduce using rule 291 (simpleIdentifier -> LONG .)
    PV              reduce using rule 291 (simpleIdentifier -> LONG .)
    ELSE            reduce using rule 291 (simpleIdentifier -> LONG .)
    SETA            reduce using rule 291 (simpleIdentifier -> LONG .)
    CLASS           reduce using rule 291 (simpleIdentifier -> LONG .)


state 31

    (292) simpleIdentifier -> ARRAY .

    LPAREN          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    DOISP           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    ATRIBUICAO      reduce using rule 292 (simpleIdentifier -> ARRAY .)
    INCREMENTO      reduce using rule 292 (simpleIdentifier -> ARRAY .)
    DECREMENTO      reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MENOR           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    LCCT            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    COLONCOLON      reduce using rule 292 (simpleIdentifier -> ARRAY .)
    PONTO           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    RCHAVE          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    AS              reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MAISIGUAL       reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MENOSIGUAL      reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MULTIGUAL       reduce using rule 292 (simpleIdentifier -> ARRAY .)
    DIVIGUAL        reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MODIGUAL        reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MULT            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    DIVIDE          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MOD             reduce using rule 292 (simpleIdentifier -> ARRAY .)
    PLUS            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MINUS           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    PONTOPONTO      reduce using rule 292 (simpleIdentifier -> ARRAY .)
    ID              reduce using rule 292 (simpleIdentifier -> ARRAY .)
    CROSSINLINE     reduce using rule 292 (simpleIdentifier -> ARRAY .)
    IMPORT          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    INIT            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    NOINLINE        reduce using rule 292 (simpleIdentifier -> ARRAY .)
    OUT             reduce using rule 292 (simpleIdentifier -> ARRAY .)
    VARARG          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    WHERE           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    OBJECT          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    CONST           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    CONSTRUCTOR     reduce using rule 292 (simpleIdentifier -> ARRAY .)
    EOF             reduce using rule 292 (simpleIdentifier -> ARRAY .)
    FALSE           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    FUNCTION        reduce using rule 292 (simpleIdentifier -> ARRAY .)
    NULL            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    NULLABLE        reduce using rule 292 (simpleIdentifier -> ARRAY .)
    NUMBER          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    OPERATOR        reduce using rule 292 (simpleIdentifier -> ARRAY .)
    SMARTCAST       reduce using rule 292 (simpleIdentifier -> ARRAY .)
    THIS            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    TRUE            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    VAL             reduce using rule 292 (simpleIdentifier -> ARRAY .)
    VAR             reduce using rule 292 (simpleIdentifier -> ARRAY .)
    WHEN            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    LONG            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    ARRAY           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    ELVIS           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    IN              reduce using rule 292 (simpleIdentifier -> ARRAY .)
    NOT_IN          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    IS              reduce using rule 292 (simpleIdentifier -> ARRAY .)
    NOT_IS          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MAIOR           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MENORIGUAL      reduce using rule 292 (simpleIdentifier -> ARRAY .)
    MAIORIGUAL      reduce using rule 292 (simpleIdentifier -> ARRAY .)
    DIFERENTE       reduce using rule 292 (simpleIdentifier -> ARRAY .)
    IDENTIDADE      reduce using rule 292 (simpleIdentifier -> ARRAY .)
    IGUALDADE       reduce using rule 292 (simpleIdentifier -> ARRAY .)
    SEMIDENTIDADE   reduce using rule 292 (simpleIdentifier -> ARRAY .)
    AND             reduce using rule 292 (simpleIdentifier -> ARRAY .)
    OR              reduce using rule 292 (simpleIdentifier -> ARRAY .)
    FUN             reduce using rule 292 (simpleIdentifier -> ARRAY .)
    FOR             reduce using rule 292 (simpleIdentifier -> ARRAY .)
    WHILE           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    DO              reduce using rule 292 (simpleIdentifier -> ARRAY .)
    LITERAL_STRING  reduce using rule 292 (simpleIdentifier -> ARRAY .)
    IF              reduce using rule 292 (simpleIdentifier -> ARRAY .)
    RETURN          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    RETURN_AT       reduce using rule 292 (simpleIdentifier -> ARRAY .)
    CONTINUE        reduce using rule 292 (simpleIdentifier -> ARRAY .)
    CONTINUE_AT     reduce using rule 292 (simpleIdentifier -> ARRAY .)
    BREAK           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    BREAK_AT        reduce using rule 292 (simpleIdentifier -> ARRAY .)
    NOT             reduce using rule 292 (simpleIdentifier -> ARRAY .)
    SUSPEND         reduce using rule 292 (simpleIdentifier -> ARRAY .)
    LCHAVE          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    $end            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    COMMA           reduce using rule 292 (simpleIdentifier -> ARRAY .)
    RPAREN          reduce using rule 292 (simpleIdentifier -> ARRAY .)
    RCCT            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    PV              reduce using rule 292 (simpleIdentifier -> ARRAY .)
    ELSE            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    SETA            reduce using rule 292 (simpleIdentifier -> ARRAY .)
    CLASS           reduce using rule 292 (simpleIdentifier -> ARRAY .)


state 32

    (3) functionDeclaration -> FUN simpleIdentifier functionValueParameters . optionalType optionalBlock
    (4) optionalType -> . DOISP type
    (5) optionalType -> .

    DOISP           shift and go to state 35
    LCHAVE          reduce using rule 5 (optionalType -> .)
    FUN             reduce using rule 5 (optionalType -> .)
    $end            reduce using rule 5 (optionalType -> .)
    FOR             reduce using rule 5 (optionalType -> .)
    WHILE           reduce using rule 5 (optionalType -> .)
    DO              reduce using rule 5 (optionalType -> .)
    VAR             reduce using rule 5 (optionalType -> .)
    VAL             reduce using rule 5 (optionalType -> .)
    ID              reduce using rule 5 (optionalType -> .)
    CROSSINLINE     reduce using rule 5 (optionalType -> .)
    IMPORT          reduce using rule 5 (optionalType -> .)
    INIT            reduce using rule 5 (optionalType -> .)
    NOINLINE        reduce using rule 5 (optionalType -> .)
    OUT             reduce using rule 5 (optionalType -> .)
    VARARG          reduce using rule 5 (optionalType -> .)
    WHERE           reduce using rule 5 (optionalType -> .)
    OBJECT          reduce using rule 5 (optionalType -> .)
    CONST           reduce using rule 5 (optionalType -> .)
    CONSTRUCTOR     reduce using rule 5 (optionalType -> .)
    EOF             reduce using rule 5 (optionalType -> .)
    FALSE           reduce using rule 5 (optionalType -> .)
    FUNCTION        reduce using rule 5 (optionalType -> .)
    NULL            reduce using rule 5 (optionalType -> .)
    NULLABLE        reduce using rule 5 (optionalType -> .)
    NUMBER          reduce using rule 5 (optionalType -> .)
    OPERATOR        reduce using rule 5 (optionalType -> .)
    SMARTCAST       reduce using rule 5 (optionalType -> .)
    THIS            reduce using rule 5 (optionalType -> .)
    TRUE            reduce using rule 5 (optionalType -> .)
    WHEN            reduce using rule 5 (optionalType -> .)
    LONG            reduce using rule 5 (optionalType -> .)
    ARRAY           reduce using rule 5 (optionalType -> .)
    LPAREN          reduce using rule 5 (optionalType -> .)
    LITERAL_STRING  reduce using rule 5 (optionalType -> .)
    LCCT            reduce using rule 5 (optionalType -> .)
    IF              reduce using rule 5 (optionalType -> .)
    RETURN          reduce using rule 5 (optionalType -> .)
    RETURN_AT       reduce using rule 5 (optionalType -> .)
    CONTINUE        reduce using rule 5 (optionalType -> .)
    CONTINUE_AT     reduce using rule 5 (optionalType -> .)
    BREAK           reduce using rule 5 (optionalType -> .)
    BREAK_AT        reduce using rule 5 (optionalType -> .)
    RCHAVE          reduce using rule 5 (optionalType -> .)
    INCREMENTO      reduce using rule 5 (optionalType -> .)
    DECREMENTO      reduce using rule 5 (optionalType -> .)
    MINUS           reduce using rule 5 (optionalType -> .)
    PLUS            reduce using rule 5 (optionalType -> .)
    NOT             reduce using rule 5 (optionalType -> .)
    SUSPEND         reduce using rule 5 (optionalType -> .)
    COLONCOLON      reduce using rule 5 (optionalType -> .)
    MENOR           reduce using rule 5 (optionalType -> .)
    PONTO           reduce using rule 5 (optionalType -> .)
    AS              reduce using rule 5 (optionalType -> .)
    MAISIGUAL       reduce using rule 5 (optionalType -> .)
    MENOSIGUAL      reduce using rule 5 (optionalType -> .)
    MULTIGUAL       reduce using rule 5 (optionalType -> .)
    DIVIGUAL        reduce using rule 5 (optionalType -> .)
    MODIGUAL        reduce using rule 5 (optionalType -> .)
    MULT            reduce using rule 5 (optionalType -> .)
    DIVIDE          reduce using rule 5 (optionalType -> .)
    MOD             reduce using rule 5 (optionalType -> .)
    PONTOPONTO      reduce using rule 5 (optionalType -> .)
    ELVIS           reduce using rule 5 (optionalType -> .)
    IN              reduce using rule 5 (optionalType -> .)
    NOT_IN          reduce using rule 5 (optionalType -> .)
    IS              reduce using rule 5 (optionalType -> .)
    NOT_IS          reduce using rule 5 (optionalType -> .)
    MAIOR           reduce using rule 5 (optionalType -> .)
    MENORIGUAL      reduce using rule 5 (optionalType -> .)
    MAIORIGUAL      reduce using rule 5 (optionalType -> .)
    DIFERENTE       reduce using rule 5 (optionalType -> .)
    IDENTIDADE      reduce using rule 5 (optionalType -> .)
    IGUALDADE       reduce using rule 5 (optionalType -> .)
    SEMIDENTIDADE   reduce using rule 5 (optionalType -> .)
    AND             reduce using rule 5 (optionalType -> .)
    OR              reduce using rule 5 (optionalType -> .)
    COMMA           reduce using rule 5 (optionalType -> .)
    RPAREN          reduce using rule 5 (optionalType -> .)
    RCCT            reduce using rule 5 (optionalType -> .)
    PV              reduce using rule 5 (optionalType -> .)
    ELSE            reduce using rule 5 (optionalType -> .)

    optionalType                   shift and go to state 34

state 33

    (26) functionValueParameters -> LPAREN . functionValueParametersRecursive RPAREN
    (27) functionValueParameters -> LPAREN . RPAREN
    (28) functionValueParametersRecursive -> . functionValueParameter optionalCOMMA
    (29) functionValueParametersRecursive -> . functionValueParameter COMMA functionValueParametersRecursive
    (30) functionValueParameter -> . parameter ATRIBUICAO expression
    (31) functionValueParameter -> . parameter
    (38) parameter -> . simpleIdentifier DOISP type
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    RPAREN          shift and go to state 37
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    functionValueParametersRecursive shift and go to state 36
    functionValueParameter         shift and go to state 38
    parameter                      shift and go to state 39
    simpleIdentifier               shift and go to state 40

state 34

    (3) functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType . optionalBlock
    (6) optionalBlock -> . block
    (7) optionalBlock -> .
    (78) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 7 (optionalBlock -> .)
    $end            reduce using rule 7 (optionalBlock -> .)
    FOR             reduce using rule 7 (optionalBlock -> .)
    WHILE           reduce using rule 7 (optionalBlock -> .)
    DO              reduce using rule 7 (optionalBlock -> .)
    VAR             reduce using rule 7 (optionalBlock -> .)
    VAL             reduce using rule 7 (optionalBlock -> .)
    ID              reduce using rule 7 (optionalBlock -> .)
    CROSSINLINE     reduce using rule 7 (optionalBlock -> .)
    IMPORT          reduce using rule 7 (optionalBlock -> .)
    INIT            reduce using rule 7 (optionalBlock -> .)
    NOINLINE        reduce using rule 7 (optionalBlock -> .)
    OUT             reduce using rule 7 (optionalBlock -> .)
    VARARG          reduce using rule 7 (optionalBlock -> .)
    WHERE           reduce using rule 7 (optionalBlock -> .)
    OBJECT          reduce using rule 7 (optionalBlock -> .)
    CONST           reduce using rule 7 (optionalBlock -> .)
    CONSTRUCTOR     reduce using rule 7 (optionalBlock -> .)
    EOF             reduce using rule 7 (optionalBlock -> .)
    FALSE           reduce using rule 7 (optionalBlock -> .)
    FUNCTION        reduce using rule 7 (optionalBlock -> .)
    NULL            reduce using rule 7 (optionalBlock -> .)
    NULLABLE        reduce using rule 7 (optionalBlock -> .)
    NUMBER          reduce using rule 7 (optionalBlock -> .)
    OPERATOR        reduce using rule 7 (optionalBlock -> .)
    SMARTCAST       reduce using rule 7 (optionalBlock -> .)
    THIS            reduce using rule 7 (optionalBlock -> .)
    TRUE            reduce using rule 7 (optionalBlock -> .)
    WHEN            reduce using rule 7 (optionalBlock -> .)
    LONG            reduce using rule 7 (optionalBlock -> .)
    ARRAY           reduce using rule 7 (optionalBlock -> .)
    LPAREN          reduce using rule 7 (optionalBlock -> .)
    LITERAL_STRING  reduce using rule 7 (optionalBlock -> .)
    LCCT            reduce using rule 7 (optionalBlock -> .)
    IF              reduce using rule 7 (optionalBlock -> .)
    RETURN          reduce using rule 7 (optionalBlock -> .)
    RETURN_AT       reduce using rule 7 (optionalBlock -> .)
    CONTINUE        reduce using rule 7 (optionalBlock -> .)
    CONTINUE_AT     reduce using rule 7 (optionalBlock -> .)
    BREAK           reduce using rule 7 (optionalBlock -> .)
    BREAK_AT        reduce using rule 7 (optionalBlock -> .)
    RCHAVE          reduce using rule 7 (optionalBlock -> .)
    INCREMENTO      reduce using rule 7 (optionalBlock -> .)
    DECREMENTO      reduce using rule 7 (optionalBlock -> .)
    MINUS           reduce using rule 7 (optionalBlock -> .)
    PLUS            reduce using rule 7 (optionalBlock -> .)
    NOT             reduce using rule 7 (optionalBlock -> .)
    SUSPEND         reduce using rule 7 (optionalBlock -> .)
    COLONCOLON      reduce using rule 7 (optionalBlock -> .)
    MENOR           reduce using rule 7 (optionalBlock -> .)
    PONTO           reduce using rule 7 (optionalBlock -> .)
    AS              reduce using rule 7 (optionalBlock -> .)
    MAISIGUAL       reduce using rule 7 (optionalBlock -> .)
    MENOSIGUAL      reduce using rule 7 (optionalBlock -> .)
    MULTIGUAL       reduce using rule 7 (optionalBlock -> .)
    DIVIGUAL        reduce using rule 7 (optionalBlock -> .)
    MODIGUAL        reduce using rule 7 (optionalBlock -> .)
    MULT            reduce using rule 7 (optionalBlock -> .)
    DIVIDE          reduce using rule 7 (optionalBlock -> .)
    MOD             reduce using rule 7 (optionalBlock -> .)
    PONTOPONTO      reduce using rule 7 (optionalBlock -> .)
    ELVIS           reduce using rule 7 (optionalBlock -> .)
    IN              reduce using rule 7 (optionalBlock -> .)
    NOT_IN          reduce using rule 7 (optionalBlock -> .)
    IS              reduce using rule 7 (optionalBlock -> .)
    NOT_IS          reduce using rule 7 (optionalBlock -> .)
    MAIOR           reduce using rule 7 (optionalBlock -> .)
    MENORIGUAL      reduce using rule 7 (optionalBlock -> .)
    MAIORIGUAL      reduce using rule 7 (optionalBlock -> .)
    DIFERENTE       reduce using rule 7 (optionalBlock -> .)
    IDENTIDADE      reduce using rule 7 (optionalBlock -> .)
    IGUALDADE       reduce using rule 7 (optionalBlock -> .)
    SEMIDENTIDADE   reduce using rule 7 (optionalBlock -> .)
    AND             reduce using rule 7 (optionalBlock -> .)
    OR              reduce using rule 7 (optionalBlock -> .)
    COMMA           reduce using rule 7 (optionalBlock -> .)
    RPAREN          reduce using rule 7 (optionalBlock -> .)
    RCCT            reduce using rule 7 (optionalBlock -> .)
    PV              reduce using rule 7 (optionalBlock -> .)
    ELSE            reduce using rule 7 (optionalBlock -> .)
    LCHAVE          shift and go to state 43

  ! LCHAVE          [ reduce using rule 7 (optionalBlock -> .) ]

    optionalBlock                  shift and go to state 41
    block                          shift and go to state 42

state 35

    (4) optionalType -> DOISP . type
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 44
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 36

    (26) functionValueParameters -> LPAREN functionValueParametersRecursive . RPAREN

    RPAREN          shift and go to state 49


state 37

    (27) functionValueParameters -> LPAREN RPAREN .

    DOISP           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    FUN             reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    $end            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    FOR             reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    WHILE           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    DO              reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    VAR             reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    VAL             reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    ID              reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    IMPORT          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    INIT            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    OUT             reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    VARARG          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    WHERE           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    OBJECT          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    CONST           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    CONSTRUCTOR     reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    EOF             reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    FALSE           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    NULL            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    NULLABLE        reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    NUMBER          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    SMARTCAST       reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    THIS            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    TRUE            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    WHEN            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    LONG            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    ARRAY           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    LPAREN          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    LCCT            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    IF              reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    RETURN          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    BREAK           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MINUS           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    PLUS            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    NOT             reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MENOR           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    PONTO           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    AS              reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MULT            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MOD             reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    ELVIS           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    IN              reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    IS              reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MAIOR           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    AND             reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    OR              reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    COMMA           reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    RPAREN          reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    RCCT            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    PV              reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)
    ELSE            reduce using rule 27 (functionValueParameters -> LPAREN RPAREN .)


state 38

    (28) functionValueParametersRecursive -> functionValueParameter . optionalCOMMA
    (29) functionValueParametersRecursive -> functionValueParameter . COMMA functionValueParametersRecursive
    (20) optionalCOMMA -> . COMMA
    (21) optionalCOMMA -> .

    COMMA           shift and go to state 51
    RPAREN          reduce using rule 21 (optionalCOMMA -> .)

    optionalCOMMA                  shift and go to state 50

state 39

    (30) functionValueParameter -> parameter . ATRIBUICAO expression
    (31) functionValueParameter -> parameter .

    ATRIBUICAO      shift and go to state 52
    COMMA           reduce using rule 31 (functionValueParameter -> parameter .)
    RPAREN          reduce using rule 31 (functionValueParameter -> parameter .)


state 40

    (38) parameter -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 53


state 41

    (3) functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .

    FUN             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    $end            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    FOR             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    WHILE           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DO              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    VAR             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    VAL             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ID              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CROSSINLINE     reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IMPORT          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    INIT            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOINLINE        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OUT             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    VARARG          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    WHERE           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OBJECT          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CONST           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CONSTRUCTOR     reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    EOF             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    FALSE           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    FUNCTION        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NULL            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NULLABLE        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NUMBER          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OPERATOR        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    SMARTCAST       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    THIS            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    TRUE            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    WHEN            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LONG            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ARRAY           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LPAREN          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LITERAL_STRING  reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LCCT            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IF              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RETURN          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RETURN_AT       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CONTINUE        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CONTINUE_AT     reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    BREAK           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    BREAK_AT        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RCHAVE          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    INCREMENTO      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DECREMENTO      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MINUS           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PLUS            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOT             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    SUSPEND         reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    COLONCOLON      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LCHAVE          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MENOR           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PONTO           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    AS              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MAISIGUAL       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MENOSIGUAL      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MULTIGUAL       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DIVIGUAL        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MODIGUAL        reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MULT            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DIVIDE          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MOD             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PONTOPONTO      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ELVIS           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IN              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOT_IN          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IS              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOT_IS          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MAIOR           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MENORIGUAL      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MAIORIGUAL      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DIFERENTE       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IDENTIDADE      reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IGUALDADE       reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    SEMIDENTIDADE   reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    AND             reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OR              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    COMMA           reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RPAREN          reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RCCT            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PV              reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ELSE            reduce using rule 3 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)


state 42

    (6) optionalBlock -> block .

    FUN             reduce using rule 6 (optionalBlock -> block .)
    $end            reduce using rule 6 (optionalBlock -> block .)
    FOR             reduce using rule 6 (optionalBlock -> block .)
    WHILE           reduce using rule 6 (optionalBlock -> block .)
    DO              reduce using rule 6 (optionalBlock -> block .)
    VAR             reduce using rule 6 (optionalBlock -> block .)
    VAL             reduce using rule 6 (optionalBlock -> block .)
    ID              reduce using rule 6 (optionalBlock -> block .)
    CROSSINLINE     reduce using rule 6 (optionalBlock -> block .)
    IMPORT          reduce using rule 6 (optionalBlock -> block .)
    INIT            reduce using rule 6 (optionalBlock -> block .)
    NOINLINE        reduce using rule 6 (optionalBlock -> block .)
    OUT             reduce using rule 6 (optionalBlock -> block .)
    VARARG          reduce using rule 6 (optionalBlock -> block .)
    WHERE           reduce using rule 6 (optionalBlock -> block .)
    OBJECT          reduce using rule 6 (optionalBlock -> block .)
    CONST           reduce using rule 6 (optionalBlock -> block .)
    CONSTRUCTOR     reduce using rule 6 (optionalBlock -> block .)
    EOF             reduce using rule 6 (optionalBlock -> block .)
    FALSE           reduce using rule 6 (optionalBlock -> block .)
    FUNCTION        reduce using rule 6 (optionalBlock -> block .)
    NULL            reduce using rule 6 (optionalBlock -> block .)
    NULLABLE        reduce using rule 6 (optionalBlock -> block .)
    NUMBER          reduce using rule 6 (optionalBlock -> block .)
    OPERATOR        reduce using rule 6 (optionalBlock -> block .)
    SMARTCAST       reduce using rule 6 (optionalBlock -> block .)
    THIS            reduce using rule 6 (optionalBlock -> block .)
    TRUE            reduce using rule 6 (optionalBlock -> block .)
    WHEN            reduce using rule 6 (optionalBlock -> block .)
    LONG            reduce using rule 6 (optionalBlock -> block .)
    ARRAY           reduce using rule 6 (optionalBlock -> block .)
    LPAREN          reduce using rule 6 (optionalBlock -> block .)
    LITERAL_STRING  reduce using rule 6 (optionalBlock -> block .)
    LCCT            reduce using rule 6 (optionalBlock -> block .)
    IF              reduce using rule 6 (optionalBlock -> block .)
    RETURN          reduce using rule 6 (optionalBlock -> block .)
    RETURN_AT       reduce using rule 6 (optionalBlock -> block .)
    CONTINUE        reduce using rule 6 (optionalBlock -> block .)
    CONTINUE_AT     reduce using rule 6 (optionalBlock -> block .)
    BREAK           reduce using rule 6 (optionalBlock -> block .)
    BREAK_AT        reduce using rule 6 (optionalBlock -> block .)
    RCHAVE          reduce using rule 6 (optionalBlock -> block .)
    INCREMENTO      reduce using rule 6 (optionalBlock -> block .)
    DECREMENTO      reduce using rule 6 (optionalBlock -> block .)
    MINUS           reduce using rule 6 (optionalBlock -> block .)
    PLUS            reduce using rule 6 (optionalBlock -> block .)
    NOT             reduce using rule 6 (optionalBlock -> block .)
    SUSPEND         reduce using rule 6 (optionalBlock -> block .)
    COLONCOLON      reduce using rule 6 (optionalBlock -> block .)
    LCHAVE          reduce using rule 6 (optionalBlock -> block .)
    MENOR           reduce using rule 6 (optionalBlock -> block .)
    PONTO           reduce using rule 6 (optionalBlock -> block .)
    AS              reduce using rule 6 (optionalBlock -> block .)
    MAISIGUAL       reduce using rule 6 (optionalBlock -> block .)
    MENOSIGUAL      reduce using rule 6 (optionalBlock -> block .)
    MULTIGUAL       reduce using rule 6 (optionalBlock -> block .)
    DIVIGUAL        reduce using rule 6 (optionalBlock -> block .)
    MODIGUAL        reduce using rule 6 (optionalBlock -> block .)
    MULT            reduce using rule 6 (optionalBlock -> block .)
    DIVIDE          reduce using rule 6 (optionalBlock -> block .)
    MOD             reduce using rule 6 (optionalBlock -> block .)
    PONTOPONTO      reduce using rule 6 (optionalBlock -> block .)
    ELVIS           reduce using rule 6 (optionalBlock -> block .)
    IN              reduce using rule 6 (optionalBlock -> block .)
    NOT_IN          reduce using rule 6 (optionalBlock -> block .)
    IS              reduce using rule 6 (optionalBlock -> block .)
    NOT_IS          reduce using rule 6 (optionalBlock -> block .)
    MAIOR           reduce using rule 6 (optionalBlock -> block .)
    MENORIGUAL      reduce using rule 6 (optionalBlock -> block .)
    MAIORIGUAL      reduce using rule 6 (optionalBlock -> block .)
    DIFERENTE       reduce using rule 6 (optionalBlock -> block .)
    IDENTIDADE      reduce using rule 6 (optionalBlock -> block .)
    IGUALDADE       reduce using rule 6 (optionalBlock -> block .)
    SEMIDENTIDADE   reduce using rule 6 (optionalBlock -> block .)
    AND             reduce using rule 6 (optionalBlock -> block .)
    OR              reduce using rule 6 (optionalBlock -> block .)
    COMMA           reduce using rule 6 (optionalBlock -> block .)
    RPAREN          reduce using rule 6 (optionalBlock -> block .)
    RCCT            reduce using rule 6 (optionalBlock -> block .)
    PV              reduce using rule 6 (optionalBlock -> block .)
    ELSE            reduce using rule 6 (optionalBlock -> block .)


state 43

    (78) block -> LCHAVE . statements RCHAVE
    (69) statements -> . statement
    (70) statements -> . statement statements
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

    FUN             shift and go to state 62
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

    statements                     shift and go to state 54
    statement                      shift and go to state 56
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    expression                     shift and go to state 60
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 44

    (4) optionalType -> DOISP type .

    LCHAVE          reduce using rule 4 (optionalType -> DOISP type .)
    FUN             reduce using rule 4 (optionalType -> DOISP type .)
    $end            reduce using rule 4 (optionalType -> DOISP type .)
    FOR             reduce using rule 4 (optionalType -> DOISP type .)
    WHILE           reduce using rule 4 (optionalType -> DOISP type .)
    DO              reduce using rule 4 (optionalType -> DOISP type .)
    VAR             reduce using rule 4 (optionalType -> DOISP type .)
    VAL             reduce using rule 4 (optionalType -> DOISP type .)
    ID              reduce using rule 4 (optionalType -> DOISP type .)
    CROSSINLINE     reduce using rule 4 (optionalType -> DOISP type .)
    IMPORT          reduce using rule 4 (optionalType -> DOISP type .)
    INIT            reduce using rule 4 (optionalType -> DOISP type .)
    NOINLINE        reduce using rule 4 (optionalType -> DOISP type .)
    OUT             reduce using rule 4 (optionalType -> DOISP type .)
    VARARG          reduce using rule 4 (optionalType -> DOISP type .)
    WHERE           reduce using rule 4 (optionalType -> DOISP type .)
    OBJECT          reduce using rule 4 (optionalType -> DOISP type .)
    CONST           reduce using rule 4 (optionalType -> DOISP type .)
    CONSTRUCTOR     reduce using rule 4 (optionalType -> DOISP type .)
    EOF             reduce using rule 4 (optionalType -> DOISP type .)
    FALSE           reduce using rule 4 (optionalType -> DOISP type .)
    FUNCTION        reduce using rule 4 (optionalType -> DOISP type .)
    NULL            reduce using rule 4 (optionalType -> DOISP type .)
    NULLABLE        reduce using rule 4 (optionalType -> DOISP type .)
    NUMBER          reduce using rule 4 (optionalType -> DOISP type .)
    OPERATOR        reduce using rule 4 (optionalType -> DOISP type .)
    SMARTCAST       reduce using rule 4 (optionalType -> DOISP type .)
    THIS            reduce using rule 4 (optionalType -> DOISP type .)
    TRUE            reduce using rule 4 (optionalType -> DOISP type .)
    WHEN            reduce using rule 4 (optionalType -> DOISP type .)
    LONG            reduce using rule 4 (optionalType -> DOISP type .)
    ARRAY           reduce using rule 4 (optionalType -> DOISP type .)
    LPAREN          reduce using rule 4 (optionalType -> DOISP type .)
    LITERAL_STRING  reduce using rule 4 (optionalType -> DOISP type .)
    LCCT            reduce using rule 4 (optionalType -> DOISP type .)
    IF              reduce using rule 4 (optionalType -> DOISP type .)
    RETURN          reduce using rule 4 (optionalType -> DOISP type .)
    RETURN_AT       reduce using rule 4 (optionalType -> DOISP type .)
    CONTINUE        reduce using rule 4 (optionalType -> DOISP type .)
    CONTINUE_AT     reduce using rule 4 (optionalType -> DOISP type .)
    BREAK           reduce using rule 4 (optionalType -> DOISP type .)
    BREAK_AT        reduce using rule 4 (optionalType -> DOISP type .)
    RCHAVE          reduce using rule 4 (optionalType -> DOISP type .)
    INCREMENTO      reduce using rule 4 (optionalType -> DOISP type .)
    DECREMENTO      reduce using rule 4 (optionalType -> DOISP type .)
    MINUS           reduce using rule 4 (optionalType -> DOISP type .)
    PLUS            reduce using rule 4 (optionalType -> DOISP type .)
    NOT             reduce using rule 4 (optionalType -> DOISP type .)
    SUSPEND         reduce using rule 4 (optionalType -> DOISP type .)
    COLONCOLON      reduce using rule 4 (optionalType -> DOISP type .)
    MENOR           reduce using rule 4 (optionalType -> DOISP type .)
    PONTO           reduce using rule 4 (optionalType -> DOISP type .)
    AS              reduce using rule 4 (optionalType -> DOISP type .)
    MAISIGUAL       reduce using rule 4 (optionalType -> DOISP type .)
    MENOSIGUAL      reduce using rule 4 (optionalType -> DOISP type .)
    MULTIGUAL       reduce using rule 4 (optionalType -> DOISP type .)
    DIVIGUAL        reduce using rule 4 (optionalType -> DOISP type .)
    MODIGUAL        reduce using rule 4 (optionalType -> DOISP type .)
    MULT            reduce using rule 4 (optionalType -> DOISP type .)
    DIVIDE          reduce using rule 4 (optionalType -> DOISP type .)
    MOD             reduce using rule 4 (optionalType -> DOISP type .)
    PONTOPONTO      reduce using rule 4 (optionalType -> DOISP type .)
    ELVIS           reduce using rule 4 (optionalType -> DOISP type .)
    IN              reduce using rule 4 (optionalType -> DOISP type .)
    NOT_IN          reduce using rule 4 (optionalType -> DOISP type .)
    IS              reduce using rule 4 (optionalType -> DOISP type .)
    NOT_IS          reduce using rule 4 (optionalType -> DOISP type .)
    MAIOR           reduce using rule 4 (optionalType -> DOISP type .)
    MENORIGUAL      reduce using rule 4 (optionalType -> DOISP type .)
    MAIORIGUAL      reduce using rule 4 (optionalType -> DOISP type .)
    DIFERENTE       reduce using rule 4 (optionalType -> DOISP type .)
    IDENTIDADE      reduce using rule 4 (optionalType -> DOISP type .)
    IGUALDADE       reduce using rule 4 (optionalType -> DOISP type .)
    SEMIDENTIDADE   reduce using rule 4 (optionalType -> DOISP type .)
    AND             reduce using rule 4 (optionalType -> DOISP type .)
    OR              reduce using rule 4 (optionalType -> DOISP type .)
    COMMA           reduce using rule 4 (optionalType -> DOISP type .)
    RPAREN          reduce using rule 4 (optionalType -> DOISP type .)
    RCCT            reduce using rule 4 (optionalType -> DOISP type .)
    PV              reduce using rule 4 (optionalType -> DOISP type .)
    ELSE            reduce using rule 4 (optionalType -> DOISP type .)
    SETA            reduce using rule 4 (optionalType -> DOISP type .)
    ATRIBUICAO      reduce using rule 4 (optionalType -> DOISP type .)


state 45

    (39) type -> optionalTypeModifiers . optype
    (42) optype -> . parenthesizedType
    (43) optype -> . functionType
    (44) optype -> . userType
    (67) parenthesizedType -> . LPAREN type RPAREN
    (58) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (59) functionType -> . functionTypeParameters SETA type
    (51) userType -> . simpleUserType
    (68) receiverType -> . typeModifier parenthesizedType
    (60) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (52) simpleUserType -> . simpleIdentifier typeArguments
    (53) simpleUserType -> . simpleIdentifier
    (47) typeModifier -> . SUSPEND
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    LPAREN          shift and go to state 126
    SUSPEND         shift and go to state 48
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    optype                         shift and go to state 122
    parenthesizedType              shift and go to state 123
    functionType                   shift and go to state 124
    userType                       shift and go to state 125
    receiverType                   shift and go to state 127
    functionTypeParameters         shift and go to state 128
    simpleUserType                 shift and go to state 129
    typeModifier                   shift and go to state 116
    simpleIdentifier               shift and go to state 130

state 46

    (40) optionalTypeModifiers -> typeModifiers .

    LPAREN          reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    SUSPEND         reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    ID              reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    CROSSINLINE     reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    IMPORT          reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    INIT            reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    NOINLINE        reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    OUT             reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    VARARG          reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    WHERE           reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    OBJECT          reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    CONST           reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    CONSTRUCTOR     reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    EOF             reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    FALSE           reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    FUNCTION        reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    NULL            reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    NULLABLE        reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    NUMBER          reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    OPERATOR        reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    SMARTCAST       reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    THIS            reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    TRUE            reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    VAL             reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    VAR             reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    WHEN            reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    LONG            reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)
    ARRAY           reduce using rule 40 (optionalTypeModifiers -> typeModifiers .)


state 47

    (45) typeModifiers -> typeModifier .
    (46) typeModifiers -> typeModifier . typeModifiers
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 45 (typeModifiers -> typeModifier .)
    ID              reduce using rule 45 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 45 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 45 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 45 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 45 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 45 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 45 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 45 (typeModifiers -> typeModifier .)
    OBJECT          reduce using rule 45 (typeModifiers -> typeModifier .)
    CONST           reduce using rule 45 (typeModifiers -> typeModifier .)
    CONSTRUCTOR     reduce using rule 45 (typeModifiers -> typeModifier .)
    EOF             reduce using rule 45 (typeModifiers -> typeModifier .)
    FALSE           reduce using rule 45 (typeModifiers -> typeModifier .)
    FUNCTION        reduce using rule 45 (typeModifiers -> typeModifier .)
    NULL            reduce using rule 45 (typeModifiers -> typeModifier .)
    NULLABLE        reduce using rule 45 (typeModifiers -> typeModifier .)
    NUMBER          reduce using rule 45 (typeModifiers -> typeModifier .)
    OPERATOR        reduce using rule 45 (typeModifiers -> typeModifier .)
    SMARTCAST       reduce using rule 45 (typeModifiers -> typeModifier .)
    THIS            reduce using rule 45 (typeModifiers -> typeModifier .)
    TRUE            reduce using rule 45 (typeModifiers -> typeModifier .)
    VAL             reduce using rule 45 (typeModifiers -> typeModifier .)
    VAR             reduce using rule 45 (typeModifiers -> typeModifier .)
    WHEN            reduce using rule 45 (typeModifiers -> typeModifier .)
    LONG            reduce using rule 45 (typeModifiers -> typeModifier .)
    ARRAY           reduce using rule 45 (typeModifiers -> typeModifier .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 45 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 47
    typeModifiers                  shift and go to state 131

state 48

    (47) typeModifier -> SUSPEND .

    SUSPEND         reduce using rule 47 (typeModifier -> SUSPEND .)
    LPAREN          reduce using rule 47 (typeModifier -> SUSPEND .)
    ID              reduce using rule 47 (typeModifier -> SUSPEND .)
    CROSSINLINE     reduce using rule 47 (typeModifier -> SUSPEND .)
    IMPORT          reduce using rule 47 (typeModifier -> SUSPEND .)
    INIT            reduce using rule 47 (typeModifier -> SUSPEND .)
    NOINLINE        reduce using rule 47 (typeModifier -> SUSPEND .)
    OUT             reduce using rule 47 (typeModifier -> SUSPEND .)
    VARARG          reduce using rule 47 (typeModifier -> SUSPEND .)
    WHERE           reduce using rule 47 (typeModifier -> SUSPEND .)
    OBJECT          reduce using rule 47 (typeModifier -> SUSPEND .)
    CONST           reduce using rule 47 (typeModifier -> SUSPEND .)
    CONSTRUCTOR     reduce using rule 47 (typeModifier -> SUSPEND .)
    EOF             reduce using rule 47 (typeModifier -> SUSPEND .)
    FALSE           reduce using rule 47 (typeModifier -> SUSPEND .)
    FUNCTION        reduce using rule 47 (typeModifier -> SUSPEND .)
    NULL            reduce using rule 47 (typeModifier -> SUSPEND .)
    NULLABLE        reduce using rule 47 (typeModifier -> SUSPEND .)
    NUMBER          reduce using rule 47 (typeModifier -> SUSPEND .)
    OPERATOR        reduce using rule 47 (typeModifier -> SUSPEND .)
    SMARTCAST       reduce using rule 47 (typeModifier -> SUSPEND .)
    THIS            reduce using rule 47 (typeModifier -> SUSPEND .)
    TRUE            reduce using rule 47 (typeModifier -> SUSPEND .)
    VAL             reduce using rule 47 (typeModifier -> SUSPEND .)
    VAR             reduce using rule 47 (typeModifier -> SUSPEND .)
    WHEN            reduce using rule 47 (typeModifier -> SUSPEND .)
    LONG            reduce using rule 47 (typeModifier -> SUSPEND .)
    ARRAY           reduce using rule 47 (typeModifier -> SUSPEND .)


state 49

    (26) functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .

    DOISP           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LCHAVE          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    FUN             reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    $end            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    FOR             reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    WHILE           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DO              reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    VAR             reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    VAL             reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ID              reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CROSSINLINE     reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IMPORT          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    INIT            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOINLINE        reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OUT             reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    VARARG          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    WHERE           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OBJECT          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CONST           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CONSTRUCTOR     reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    EOF             reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    FALSE           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    FUNCTION        reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NULL            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NULLABLE        reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NUMBER          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OPERATOR        reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    SMARTCAST       reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    THIS            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    TRUE            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    WHEN            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LONG            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ARRAY           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LPAREN          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LCCT            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IF              reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RETURN          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RETURN_AT       reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CONTINUE        reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    BREAK           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    BREAK_AT        reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RCHAVE          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    INCREMENTO      reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DECREMENTO      reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MINUS           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PLUS            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOT             reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    SUSPEND         reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    COLONCOLON      reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MENOR           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PONTO           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    AS              reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MAISIGUAL       reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MULTIGUAL       reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DIVIGUAL        reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MODIGUAL        reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MULT            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DIVIDE          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MOD             reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PONTOPONTO      reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ELVIS           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IN              reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOT_IN          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IS              reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOT_IS          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MAIOR           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MENORIGUAL      reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DIFERENTE       reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IDENTIDADE      reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IGUALDADE       reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    AND             reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OR              reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    COMMA           reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RPAREN          reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RCCT            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PV              reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ELSE            reduce using rule 26 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)


state 50

    (28) functionValueParametersRecursive -> functionValueParameter optionalCOMMA .

    RPAREN          reduce using rule 28 (functionValueParametersRecursive -> functionValueParameter optionalCOMMA .)


state 51

    (29) functionValueParametersRecursive -> functionValueParameter COMMA . functionValueParametersRecursive
    (20) optionalCOMMA -> COMMA .
    (28) functionValueParametersRecursive -> . functionValueParameter optionalCOMMA
    (29) functionValueParametersRecursive -> . functionValueParameter COMMA functionValueParametersRecursive
    (30) functionValueParameter -> . parameter ATRIBUICAO expression
    (31) functionValueParameter -> . parameter
    (38) parameter -> . simpleIdentifier DOISP type
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    RPAREN          reduce using rule 20 (optionalCOMMA -> COMMA .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    functionValueParameter         shift and go to state 38
    functionValueParametersRecursive shift and go to state 132
    parameter                      shift and go to state 39
    simpleIdentifier               shift and go to state 40

state 52

    (30) functionValueParameter -> parameter ATRIBUICAO . expression
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 133
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 53

    (38) parameter -> simpleIdentifier DOISP . type
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 139
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 54

    (78) block -> LCHAVE statements . RCHAVE

    RCHAVE          shift and go to state 140


state 55

    (195) lambdaLiteral -> RCHAVE . optionsLambdaLiteral LCHAVE
    (196) optionsLambdaLiteral -> . statements
    (197) optionsLambdaLiteral -> . lambdaParameters SETA statements
    (198) optionsLambdaLiteral -> . SETA statements
    (69) statements -> . statement
    (70) statements -> . statement statements
    (199) lambdaParameters -> . lambdaParameter
    (200) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (201) lambdaParameter -> . variableDeclaration
    (202) lambdaParameter -> . multiVariableDeclaration optionalType
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (32) variableDeclaration -> . simpleIdentifier DOISP type
    (33) variableDeclaration -> . simpleIdentifier
    (34) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (35) multiVariableDeclaration -> . LPAREN RPAREN
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

    SETA            shift and go to state 144
    FUN             shift and go to state 62
    LPAREN          shift and go to state 149
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

    optionsLambdaLiteral           shift and go to state 141
    statements                     shift and go to state 142
    lambdaParameters               shift and go to state 143
    statement                      shift and go to state 56
    lambdaParameter                shift and go to state 145
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    expression                     shift and go to state 60
    propertyDeclaration            shift and go to state 61
    variableDeclaration            shift and go to state 146
    multiVariableDeclaration       shift and go to state 147
    simpleIdentifier               shift and go to state 148
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 56

    (69) statements -> statement .
    (70) statements -> statement . statements
    (69) statements -> . statement
    (70) statements -> . statement statements
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for RCHAVE resolved as shift
    LCHAVE          reduce using rule 69 (statements -> statement .)
    FUN             shift and go to state 62
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

  ! RCHAVE          [ reduce using rule 69 (statements -> statement .) ]

    statement                      shift and go to state 56
    statements                     shift and go to state 150
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    expression                     shift and go to state 60
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 57

    (71) statement -> functionDeclaration .

    FUN             reduce using rule 71 (statement -> functionDeclaration .)
    FOR             reduce using rule 71 (statement -> functionDeclaration .)
    WHILE           reduce using rule 71 (statement -> functionDeclaration .)
    DO              reduce using rule 71 (statement -> functionDeclaration .)
    VAR             reduce using rule 71 (statement -> functionDeclaration .)
    VAL             reduce using rule 71 (statement -> functionDeclaration .)
    ID              reduce using rule 71 (statement -> functionDeclaration .)
    CROSSINLINE     reduce using rule 71 (statement -> functionDeclaration .)
    IMPORT          reduce using rule 71 (statement -> functionDeclaration .)
    INIT            reduce using rule 71 (statement -> functionDeclaration .)
    NOINLINE        reduce using rule 71 (statement -> functionDeclaration .)
    OUT             reduce using rule 71 (statement -> functionDeclaration .)
    VARARG          reduce using rule 71 (statement -> functionDeclaration .)
    WHERE           reduce using rule 71 (statement -> functionDeclaration .)
    OBJECT          reduce using rule 71 (statement -> functionDeclaration .)
    CONST           reduce using rule 71 (statement -> functionDeclaration .)
    CONSTRUCTOR     reduce using rule 71 (statement -> functionDeclaration .)
    EOF             reduce using rule 71 (statement -> functionDeclaration .)
    FALSE           reduce using rule 71 (statement -> functionDeclaration .)
    FUNCTION        reduce using rule 71 (statement -> functionDeclaration .)
    NULL            reduce using rule 71 (statement -> functionDeclaration .)
    NULLABLE        reduce using rule 71 (statement -> functionDeclaration .)
    NUMBER          reduce using rule 71 (statement -> functionDeclaration .)
    OPERATOR        reduce using rule 71 (statement -> functionDeclaration .)
    SMARTCAST       reduce using rule 71 (statement -> functionDeclaration .)
    THIS            reduce using rule 71 (statement -> functionDeclaration .)
    TRUE            reduce using rule 71 (statement -> functionDeclaration .)
    WHEN            reduce using rule 71 (statement -> functionDeclaration .)
    LONG            reduce using rule 71 (statement -> functionDeclaration .)
    ARRAY           reduce using rule 71 (statement -> functionDeclaration .)
    LPAREN          reduce using rule 71 (statement -> functionDeclaration .)
    LITERAL_STRING  reduce using rule 71 (statement -> functionDeclaration .)
    LCCT            reduce using rule 71 (statement -> functionDeclaration .)
    IF              reduce using rule 71 (statement -> functionDeclaration .)
    RETURN          reduce using rule 71 (statement -> functionDeclaration .)
    RETURN_AT       reduce using rule 71 (statement -> functionDeclaration .)
    CONTINUE        reduce using rule 71 (statement -> functionDeclaration .)
    CONTINUE_AT     reduce using rule 71 (statement -> functionDeclaration .)
    BREAK           reduce using rule 71 (statement -> functionDeclaration .)
    BREAK_AT        reduce using rule 71 (statement -> functionDeclaration .)
    RCHAVE          reduce using rule 71 (statement -> functionDeclaration .)
    INCREMENTO      reduce using rule 71 (statement -> functionDeclaration .)
    DECREMENTO      reduce using rule 71 (statement -> functionDeclaration .)
    MINUS           reduce using rule 71 (statement -> functionDeclaration .)
    PLUS            reduce using rule 71 (statement -> functionDeclaration .)
    NOT             reduce using rule 71 (statement -> functionDeclaration .)
    SUSPEND         reduce using rule 71 (statement -> functionDeclaration .)
    COLONCOLON      reduce using rule 71 (statement -> functionDeclaration .)
    LCHAVE          reduce using rule 71 (statement -> functionDeclaration .)
    MENOR           reduce using rule 71 (statement -> functionDeclaration .)
    PONTO           reduce using rule 71 (statement -> functionDeclaration .)
    AS              reduce using rule 71 (statement -> functionDeclaration .)
    MAISIGUAL       reduce using rule 71 (statement -> functionDeclaration .)
    MENOSIGUAL      reduce using rule 71 (statement -> functionDeclaration .)
    MULTIGUAL       reduce using rule 71 (statement -> functionDeclaration .)
    DIVIGUAL        reduce using rule 71 (statement -> functionDeclaration .)
    MODIGUAL        reduce using rule 71 (statement -> functionDeclaration .)
    MULT            reduce using rule 71 (statement -> functionDeclaration .)
    DIVIDE          reduce using rule 71 (statement -> functionDeclaration .)
    MOD             reduce using rule 71 (statement -> functionDeclaration .)
    PONTOPONTO      reduce using rule 71 (statement -> functionDeclaration .)
    ELVIS           reduce using rule 71 (statement -> functionDeclaration .)
    IN              reduce using rule 71 (statement -> functionDeclaration .)
    NOT_IN          reduce using rule 71 (statement -> functionDeclaration .)
    IS              reduce using rule 71 (statement -> functionDeclaration .)
    NOT_IS          reduce using rule 71 (statement -> functionDeclaration .)
    MAIOR           reduce using rule 71 (statement -> functionDeclaration .)
    MENORIGUAL      reduce using rule 71 (statement -> functionDeclaration .)
    MAIORIGUAL      reduce using rule 71 (statement -> functionDeclaration .)
    DIFERENTE       reduce using rule 71 (statement -> functionDeclaration .)
    IDENTIDADE      reduce using rule 71 (statement -> functionDeclaration .)
    IGUALDADE       reduce using rule 71 (statement -> functionDeclaration .)
    SEMIDENTIDADE   reduce using rule 71 (statement -> functionDeclaration .)
    AND             reduce using rule 71 (statement -> functionDeclaration .)
    OR              reduce using rule 71 (statement -> functionDeclaration .)
    COMMA           reduce using rule 71 (statement -> functionDeclaration .)
    RPAREN          reduce using rule 71 (statement -> functionDeclaration .)
    RCCT            reduce using rule 71 (statement -> functionDeclaration .)
    PV              reduce using rule 71 (statement -> functionDeclaration .)
    ELSE            reduce using rule 71 (statement -> functionDeclaration .)


state 58

    (72) statement -> assignment .

    FUN             reduce using rule 72 (statement -> assignment .)
    FOR             reduce using rule 72 (statement -> assignment .)
    WHILE           reduce using rule 72 (statement -> assignment .)
    DO              reduce using rule 72 (statement -> assignment .)
    VAR             reduce using rule 72 (statement -> assignment .)
    VAL             reduce using rule 72 (statement -> assignment .)
    ID              reduce using rule 72 (statement -> assignment .)
    CROSSINLINE     reduce using rule 72 (statement -> assignment .)
    IMPORT          reduce using rule 72 (statement -> assignment .)
    INIT            reduce using rule 72 (statement -> assignment .)
    NOINLINE        reduce using rule 72 (statement -> assignment .)
    OUT             reduce using rule 72 (statement -> assignment .)
    VARARG          reduce using rule 72 (statement -> assignment .)
    WHERE           reduce using rule 72 (statement -> assignment .)
    OBJECT          reduce using rule 72 (statement -> assignment .)
    CONST           reduce using rule 72 (statement -> assignment .)
    CONSTRUCTOR     reduce using rule 72 (statement -> assignment .)
    EOF             reduce using rule 72 (statement -> assignment .)
    FALSE           reduce using rule 72 (statement -> assignment .)
    FUNCTION        reduce using rule 72 (statement -> assignment .)
    NULL            reduce using rule 72 (statement -> assignment .)
    NULLABLE        reduce using rule 72 (statement -> assignment .)
    NUMBER          reduce using rule 72 (statement -> assignment .)
    OPERATOR        reduce using rule 72 (statement -> assignment .)
    SMARTCAST       reduce using rule 72 (statement -> assignment .)
    THIS            reduce using rule 72 (statement -> assignment .)
    TRUE            reduce using rule 72 (statement -> assignment .)
    WHEN            reduce using rule 72 (statement -> assignment .)
    LONG            reduce using rule 72 (statement -> assignment .)
    ARRAY           reduce using rule 72 (statement -> assignment .)
    LPAREN          reduce using rule 72 (statement -> assignment .)
    LITERAL_STRING  reduce using rule 72 (statement -> assignment .)
    LCCT            reduce using rule 72 (statement -> assignment .)
    IF              reduce using rule 72 (statement -> assignment .)
    RETURN          reduce using rule 72 (statement -> assignment .)
    RETURN_AT       reduce using rule 72 (statement -> assignment .)
    CONTINUE        reduce using rule 72 (statement -> assignment .)
    CONTINUE_AT     reduce using rule 72 (statement -> assignment .)
    BREAK           reduce using rule 72 (statement -> assignment .)
    BREAK_AT        reduce using rule 72 (statement -> assignment .)
    RCHAVE          reduce using rule 72 (statement -> assignment .)
    INCREMENTO      reduce using rule 72 (statement -> assignment .)
    DECREMENTO      reduce using rule 72 (statement -> assignment .)
    MINUS           reduce using rule 72 (statement -> assignment .)
    PLUS            reduce using rule 72 (statement -> assignment .)
    NOT             reduce using rule 72 (statement -> assignment .)
    SUSPEND         reduce using rule 72 (statement -> assignment .)
    COLONCOLON      reduce using rule 72 (statement -> assignment .)
    LCHAVE          reduce using rule 72 (statement -> assignment .)
    MENOR           reduce using rule 72 (statement -> assignment .)
    PONTO           reduce using rule 72 (statement -> assignment .)
    AS              reduce using rule 72 (statement -> assignment .)
    MAISIGUAL       reduce using rule 72 (statement -> assignment .)
    MENOSIGUAL      reduce using rule 72 (statement -> assignment .)
    MULTIGUAL       reduce using rule 72 (statement -> assignment .)
    DIVIGUAL        reduce using rule 72 (statement -> assignment .)
    MODIGUAL        reduce using rule 72 (statement -> assignment .)
    MULT            reduce using rule 72 (statement -> assignment .)
    DIVIDE          reduce using rule 72 (statement -> assignment .)
    MOD             reduce using rule 72 (statement -> assignment .)
    PONTOPONTO      reduce using rule 72 (statement -> assignment .)
    ELVIS           reduce using rule 72 (statement -> assignment .)
    IN              reduce using rule 72 (statement -> assignment .)
    NOT_IN          reduce using rule 72 (statement -> assignment .)
    IS              reduce using rule 72 (statement -> assignment .)
    NOT_IS          reduce using rule 72 (statement -> assignment .)
    MAIOR           reduce using rule 72 (statement -> assignment .)
    MENORIGUAL      reduce using rule 72 (statement -> assignment .)
    MAIORIGUAL      reduce using rule 72 (statement -> assignment .)
    DIFERENTE       reduce using rule 72 (statement -> assignment .)
    IDENTIDADE      reduce using rule 72 (statement -> assignment .)
    IGUALDADE       reduce using rule 72 (statement -> assignment .)
    SEMIDENTIDADE   reduce using rule 72 (statement -> assignment .)
    AND             reduce using rule 72 (statement -> assignment .)
    OR              reduce using rule 72 (statement -> assignment .)
    COMMA           reduce using rule 72 (statement -> assignment .)
    RPAREN          reduce using rule 72 (statement -> assignment .)
    RCCT            reduce using rule 72 (statement -> assignment .)
    PV              reduce using rule 72 (statement -> assignment .)
    ELSE            reduce using rule 72 (statement -> assignment .)


state 59

    (73) statement -> loopStatement .

    FUN             reduce using rule 73 (statement -> loopStatement .)
    FOR             reduce using rule 73 (statement -> loopStatement .)
    WHILE           reduce using rule 73 (statement -> loopStatement .)
    DO              reduce using rule 73 (statement -> loopStatement .)
    VAR             reduce using rule 73 (statement -> loopStatement .)
    VAL             reduce using rule 73 (statement -> loopStatement .)
    ID              reduce using rule 73 (statement -> loopStatement .)
    CROSSINLINE     reduce using rule 73 (statement -> loopStatement .)
    IMPORT          reduce using rule 73 (statement -> loopStatement .)
    INIT            reduce using rule 73 (statement -> loopStatement .)
    NOINLINE        reduce using rule 73 (statement -> loopStatement .)
    OUT             reduce using rule 73 (statement -> loopStatement .)
    VARARG          reduce using rule 73 (statement -> loopStatement .)
    WHERE           reduce using rule 73 (statement -> loopStatement .)
    OBJECT          reduce using rule 73 (statement -> loopStatement .)
    CONST           reduce using rule 73 (statement -> loopStatement .)
    CONSTRUCTOR     reduce using rule 73 (statement -> loopStatement .)
    EOF             reduce using rule 73 (statement -> loopStatement .)
    FALSE           reduce using rule 73 (statement -> loopStatement .)
    FUNCTION        reduce using rule 73 (statement -> loopStatement .)
    NULL            reduce using rule 73 (statement -> loopStatement .)
    NULLABLE        reduce using rule 73 (statement -> loopStatement .)
    NUMBER          reduce using rule 73 (statement -> loopStatement .)
    OPERATOR        reduce using rule 73 (statement -> loopStatement .)
    SMARTCAST       reduce using rule 73 (statement -> loopStatement .)
    THIS            reduce using rule 73 (statement -> loopStatement .)
    TRUE            reduce using rule 73 (statement -> loopStatement .)
    WHEN            reduce using rule 73 (statement -> loopStatement .)
    LONG            reduce using rule 73 (statement -> loopStatement .)
    ARRAY           reduce using rule 73 (statement -> loopStatement .)
    LPAREN          reduce using rule 73 (statement -> loopStatement .)
    LITERAL_STRING  reduce using rule 73 (statement -> loopStatement .)
    LCCT            reduce using rule 73 (statement -> loopStatement .)
    IF              reduce using rule 73 (statement -> loopStatement .)
    RETURN          reduce using rule 73 (statement -> loopStatement .)
    RETURN_AT       reduce using rule 73 (statement -> loopStatement .)
    CONTINUE        reduce using rule 73 (statement -> loopStatement .)
    CONTINUE_AT     reduce using rule 73 (statement -> loopStatement .)
    BREAK           reduce using rule 73 (statement -> loopStatement .)
    BREAK_AT        reduce using rule 73 (statement -> loopStatement .)
    RCHAVE          reduce using rule 73 (statement -> loopStatement .)
    INCREMENTO      reduce using rule 73 (statement -> loopStatement .)
    DECREMENTO      reduce using rule 73 (statement -> loopStatement .)
    MINUS           reduce using rule 73 (statement -> loopStatement .)
    PLUS            reduce using rule 73 (statement -> loopStatement .)
    NOT             reduce using rule 73 (statement -> loopStatement .)
    SUSPEND         reduce using rule 73 (statement -> loopStatement .)
    COLONCOLON      reduce using rule 73 (statement -> loopStatement .)
    LCHAVE          reduce using rule 73 (statement -> loopStatement .)
    MENOR           reduce using rule 73 (statement -> loopStatement .)
    PONTO           reduce using rule 73 (statement -> loopStatement .)
    AS              reduce using rule 73 (statement -> loopStatement .)
    MAISIGUAL       reduce using rule 73 (statement -> loopStatement .)
    MENOSIGUAL      reduce using rule 73 (statement -> loopStatement .)
    MULTIGUAL       reduce using rule 73 (statement -> loopStatement .)
    DIVIGUAL        reduce using rule 73 (statement -> loopStatement .)
    MODIGUAL        reduce using rule 73 (statement -> loopStatement .)
    MULT            reduce using rule 73 (statement -> loopStatement .)
    DIVIDE          reduce using rule 73 (statement -> loopStatement .)
    MOD             reduce using rule 73 (statement -> loopStatement .)
    PONTOPONTO      reduce using rule 73 (statement -> loopStatement .)
    ELVIS           reduce using rule 73 (statement -> loopStatement .)
    IN              reduce using rule 73 (statement -> loopStatement .)
    NOT_IN          reduce using rule 73 (statement -> loopStatement .)
    IS              reduce using rule 73 (statement -> loopStatement .)
    NOT_IS          reduce using rule 73 (statement -> loopStatement .)
    MAIOR           reduce using rule 73 (statement -> loopStatement .)
    MENORIGUAL      reduce using rule 73 (statement -> loopStatement .)
    MAIORIGUAL      reduce using rule 73 (statement -> loopStatement .)
    DIFERENTE       reduce using rule 73 (statement -> loopStatement .)
    IDENTIDADE      reduce using rule 73 (statement -> loopStatement .)
    IGUALDADE       reduce using rule 73 (statement -> loopStatement .)
    SEMIDENTIDADE   reduce using rule 73 (statement -> loopStatement .)
    AND             reduce using rule 73 (statement -> loopStatement .)
    OR              reduce using rule 73 (statement -> loopStatement .)
    COMMA           reduce using rule 73 (statement -> loopStatement .)
    RPAREN          reduce using rule 73 (statement -> loopStatement .)
    RCCT            reduce using rule 73 (statement -> loopStatement .)
    PV              reduce using rule 73 (statement -> loopStatement .)
    ELSE            reduce using rule 73 (statement -> loopStatement .)


state 60

    (74) statement -> expression .
    (223) jumpExpression -> expression .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for AS resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MULT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MOD resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for ID resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for INIT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for OUT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for CONST resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for EOF resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for NULL resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for THIS resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for VAL resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for VAR resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for LONG resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for IN resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for IS resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for AND resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for OR resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for FUN resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for FOR resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for DO resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for IF resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for NOT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for PV resolved using rule 74 (statement -> expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 74 (statement -> expression .)
    FUN             reduce using rule 74 (statement -> expression .)
    FOR             reduce using rule 74 (statement -> expression .)
    WHILE           reduce using rule 74 (statement -> expression .)
    DO              reduce using rule 74 (statement -> expression .)
    VAR             reduce using rule 74 (statement -> expression .)
    VAL             reduce using rule 74 (statement -> expression .)
    ID              reduce using rule 74 (statement -> expression .)
    CROSSINLINE     reduce using rule 74 (statement -> expression .)
    IMPORT          reduce using rule 74 (statement -> expression .)
    INIT            reduce using rule 74 (statement -> expression .)
    NOINLINE        reduce using rule 74 (statement -> expression .)
    OUT             reduce using rule 74 (statement -> expression .)
    VARARG          reduce using rule 74 (statement -> expression .)
    WHERE           reduce using rule 74 (statement -> expression .)
    OBJECT          reduce using rule 74 (statement -> expression .)
    CONST           reduce using rule 74 (statement -> expression .)
    CONSTRUCTOR     reduce using rule 74 (statement -> expression .)
    EOF             reduce using rule 74 (statement -> expression .)
    FALSE           reduce using rule 74 (statement -> expression .)
    FUNCTION        reduce using rule 74 (statement -> expression .)
    NULL            reduce using rule 74 (statement -> expression .)
    NULLABLE        reduce using rule 74 (statement -> expression .)
    NUMBER          reduce using rule 74 (statement -> expression .)
    OPERATOR        reduce using rule 74 (statement -> expression .)
    SMARTCAST       reduce using rule 74 (statement -> expression .)
    THIS            reduce using rule 74 (statement -> expression .)
    TRUE            reduce using rule 74 (statement -> expression .)
    WHEN            reduce using rule 74 (statement -> expression .)
    LONG            reduce using rule 74 (statement -> expression .)
    ARRAY           reduce using rule 74 (statement -> expression .)
    LPAREN          reduce using rule 74 (statement -> expression .)
    LITERAL_STRING  reduce using rule 74 (statement -> expression .)
    LCCT            reduce using rule 74 (statement -> expression .)
    IF              reduce using rule 74 (statement -> expression .)
    RETURN          reduce using rule 74 (statement -> expression .)
    RETURN_AT       reduce using rule 74 (statement -> expression .)
    CONTINUE        reduce using rule 74 (statement -> expression .)
    CONTINUE_AT     reduce using rule 74 (statement -> expression .)
    BREAK           reduce using rule 74 (statement -> expression .)
    BREAK_AT        reduce using rule 74 (statement -> expression .)
    RCHAVE          reduce using rule 74 (statement -> expression .)
    INCREMENTO      reduce using rule 74 (statement -> expression .)
    DECREMENTO      reduce using rule 74 (statement -> expression .)
    MINUS           reduce using rule 74 (statement -> expression .)
    PLUS            reduce using rule 74 (statement -> expression .)
    NOT             reduce using rule 74 (statement -> expression .)
    SUSPEND         reduce using rule 74 (statement -> expression .)
    COLONCOLON      reduce using rule 74 (statement -> expression .)
    LCHAVE          reduce using rule 74 (statement -> expression .)
    MENOR           reduce using rule 74 (statement -> expression .)
    PONTO           reduce using rule 74 (statement -> expression .)
    AS              reduce using rule 74 (statement -> expression .)
    MAISIGUAL       reduce using rule 74 (statement -> expression .)
    MENOSIGUAL      reduce using rule 74 (statement -> expression .)
    MULTIGUAL       reduce using rule 74 (statement -> expression .)
    DIVIGUAL        reduce using rule 74 (statement -> expression .)
    MODIGUAL        reduce using rule 74 (statement -> expression .)
    MULT            reduce using rule 74 (statement -> expression .)
    DIVIDE          reduce using rule 74 (statement -> expression .)
    MOD             reduce using rule 74 (statement -> expression .)
    PONTOPONTO      reduce using rule 74 (statement -> expression .)
    ELVIS           reduce using rule 74 (statement -> expression .)
    IN              reduce using rule 74 (statement -> expression .)
    NOT_IN          reduce using rule 74 (statement -> expression .)
    IS              reduce using rule 74 (statement -> expression .)
    NOT_IS          reduce using rule 74 (statement -> expression .)
    MAIOR           reduce using rule 74 (statement -> expression .)
    MENORIGUAL      reduce using rule 74 (statement -> expression .)
    MAIORIGUAL      reduce using rule 74 (statement -> expression .)
    DIFERENTE       reduce using rule 74 (statement -> expression .)
    IDENTIDADE      reduce using rule 74 (statement -> expression .)
    IGUALDADE       reduce using rule 74 (statement -> expression .)
    SEMIDENTIDADE   reduce using rule 74 (statement -> expression .)
    AND             reduce using rule 74 (statement -> expression .)
    OR              reduce using rule 74 (statement -> expression .)
    COMMA           reduce using rule 74 (statement -> expression .)
    RPAREN          reduce using rule 74 (statement -> expression .)
    RCCT            reduce using rule 74 (statement -> expression .)
    PV              reduce using rule 74 (statement -> expression .)
    ELSE            reduce using rule 74 (statement -> expression .)

  ! INCREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FUN             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 223 (jumpExpression -> expression .) ]


state 61

    (75) statement -> propertyDeclaration .

    FUN             reduce using rule 75 (statement -> propertyDeclaration .)
    FOR             reduce using rule 75 (statement -> propertyDeclaration .)
    WHILE           reduce using rule 75 (statement -> propertyDeclaration .)
    DO              reduce using rule 75 (statement -> propertyDeclaration .)
    VAR             reduce using rule 75 (statement -> propertyDeclaration .)
    VAL             reduce using rule 75 (statement -> propertyDeclaration .)
    ID              reduce using rule 75 (statement -> propertyDeclaration .)
    CROSSINLINE     reduce using rule 75 (statement -> propertyDeclaration .)
    IMPORT          reduce using rule 75 (statement -> propertyDeclaration .)
    INIT            reduce using rule 75 (statement -> propertyDeclaration .)
    NOINLINE        reduce using rule 75 (statement -> propertyDeclaration .)
    OUT             reduce using rule 75 (statement -> propertyDeclaration .)
    VARARG          reduce using rule 75 (statement -> propertyDeclaration .)
    WHERE           reduce using rule 75 (statement -> propertyDeclaration .)
    OBJECT          reduce using rule 75 (statement -> propertyDeclaration .)
    CONST           reduce using rule 75 (statement -> propertyDeclaration .)
    CONSTRUCTOR     reduce using rule 75 (statement -> propertyDeclaration .)
    EOF             reduce using rule 75 (statement -> propertyDeclaration .)
    FALSE           reduce using rule 75 (statement -> propertyDeclaration .)
    FUNCTION        reduce using rule 75 (statement -> propertyDeclaration .)
    NULL            reduce using rule 75 (statement -> propertyDeclaration .)
    NULLABLE        reduce using rule 75 (statement -> propertyDeclaration .)
    NUMBER          reduce using rule 75 (statement -> propertyDeclaration .)
    OPERATOR        reduce using rule 75 (statement -> propertyDeclaration .)
    SMARTCAST       reduce using rule 75 (statement -> propertyDeclaration .)
    THIS            reduce using rule 75 (statement -> propertyDeclaration .)
    TRUE            reduce using rule 75 (statement -> propertyDeclaration .)
    WHEN            reduce using rule 75 (statement -> propertyDeclaration .)
    LONG            reduce using rule 75 (statement -> propertyDeclaration .)
    ARRAY           reduce using rule 75 (statement -> propertyDeclaration .)
    LPAREN          reduce using rule 75 (statement -> propertyDeclaration .)
    LITERAL_STRING  reduce using rule 75 (statement -> propertyDeclaration .)
    LCCT            reduce using rule 75 (statement -> propertyDeclaration .)
    IF              reduce using rule 75 (statement -> propertyDeclaration .)
    RETURN          reduce using rule 75 (statement -> propertyDeclaration .)
    RETURN_AT       reduce using rule 75 (statement -> propertyDeclaration .)
    CONTINUE        reduce using rule 75 (statement -> propertyDeclaration .)
    CONTINUE_AT     reduce using rule 75 (statement -> propertyDeclaration .)
    BREAK           reduce using rule 75 (statement -> propertyDeclaration .)
    BREAK_AT        reduce using rule 75 (statement -> propertyDeclaration .)
    RCHAVE          reduce using rule 75 (statement -> propertyDeclaration .)
    INCREMENTO      reduce using rule 75 (statement -> propertyDeclaration .)
    DECREMENTO      reduce using rule 75 (statement -> propertyDeclaration .)
    MINUS           reduce using rule 75 (statement -> propertyDeclaration .)
    PLUS            reduce using rule 75 (statement -> propertyDeclaration .)
    NOT             reduce using rule 75 (statement -> propertyDeclaration .)
    SUSPEND         reduce using rule 75 (statement -> propertyDeclaration .)
    COLONCOLON      reduce using rule 75 (statement -> propertyDeclaration .)
    LCHAVE          reduce using rule 75 (statement -> propertyDeclaration .)
    MENOR           reduce using rule 75 (statement -> propertyDeclaration .)
    PONTO           reduce using rule 75 (statement -> propertyDeclaration .)
    AS              reduce using rule 75 (statement -> propertyDeclaration .)
    MAISIGUAL       reduce using rule 75 (statement -> propertyDeclaration .)
    MENOSIGUAL      reduce using rule 75 (statement -> propertyDeclaration .)
    MULTIGUAL       reduce using rule 75 (statement -> propertyDeclaration .)
    DIVIGUAL        reduce using rule 75 (statement -> propertyDeclaration .)
    MODIGUAL        reduce using rule 75 (statement -> propertyDeclaration .)
    MULT            reduce using rule 75 (statement -> propertyDeclaration .)
    DIVIDE          reduce using rule 75 (statement -> propertyDeclaration .)
    MOD             reduce using rule 75 (statement -> propertyDeclaration .)
    PONTOPONTO      reduce using rule 75 (statement -> propertyDeclaration .)
    ELVIS           reduce using rule 75 (statement -> propertyDeclaration .)
    IN              reduce using rule 75 (statement -> propertyDeclaration .)
    NOT_IN          reduce using rule 75 (statement -> propertyDeclaration .)
    IS              reduce using rule 75 (statement -> propertyDeclaration .)
    NOT_IS          reduce using rule 75 (statement -> propertyDeclaration .)
    MAIOR           reduce using rule 75 (statement -> propertyDeclaration .)
    MENORIGUAL      reduce using rule 75 (statement -> propertyDeclaration .)
    MAIORIGUAL      reduce using rule 75 (statement -> propertyDeclaration .)
    DIFERENTE       reduce using rule 75 (statement -> propertyDeclaration .)
    IDENTIDADE      reduce using rule 75 (statement -> propertyDeclaration .)
    IGUALDADE       reduce using rule 75 (statement -> propertyDeclaration .)
    SEMIDENTIDADE   reduce using rule 75 (statement -> propertyDeclaration .)
    AND             reduce using rule 75 (statement -> propertyDeclaration .)
    OR              reduce using rule 75 (statement -> propertyDeclaration .)
    COMMA           reduce using rule 75 (statement -> propertyDeclaration .)
    RPAREN          reduce using rule 75 (statement -> propertyDeclaration .)
    RCCT            reduce using rule 75 (statement -> propertyDeclaration .)
    PV              reduce using rule 75 (statement -> propertyDeclaration .)
    ELSE            reduce using rule 75 (statement -> propertyDeclaration .)


state 62

    (3) functionDeclaration -> FUN . simpleIdentifier functionValueParameters optionalType optionalBlock
    (209) anonymousFunction -> FUN . optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (203) optionalTypePonto -> . type PONTO
    (204) optionalTypePonto -> .
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! reduce/reduce conflict for LPAREN resolved using rule 41 (optionalTypeModifiers -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! LPAREN          [ reduce using rule 204 (optionalTypePonto -> .) ]
  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! ID              [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CROSSINLINE     [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! IMPORT          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! INIT            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VARARG          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! WHERE           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OBJECT          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CONST           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! EOF             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! FALSE           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! FUNCTION        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NULL            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NULLABLE        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NUMBER          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OPERATOR        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! SMARTCAST       [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! THIS            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! TRUE            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VAL             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VAR             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! WHEN            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! LONG            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! ARRAY           [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    simpleIdentifier               shift and go to state 5
    optionalTypePonto              shift and go to state 151
    type                           shift and go to state 152
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 63

    (139) directlyAssignableExpression -> simpleIdentifier .
    (173) primaryExpression -> simpleIdentifier .
    (128) label -> simpleIdentifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 139 (directlyAssignableExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 128 (label -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 139 (directlyAssignableExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 139 (directlyAssignableExpression -> simpleIdentifier .)
    MENOR           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    MINUS           reduce using rule 128 (label -> simpleIdentifier .)
    PLUS            reduce using rule 128 (label -> simpleIdentifier .)
    NOT             reduce using rule 128 (label -> simpleIdentifier .)
    ID              reduce using rule 128 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 128 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 128 (label -> simpleIdentifier .)
    INIT            reduce using rule 128 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 128 (label -> simpleIdentifier .)
    OUT             reduce using rule 128 (label -> simpleIdentifier .)
    VARARG          reduce using rule 128 (label -> simpleIdentifier .)
    WHERE           reduce using rule 128 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 128 (label -> simpleIdentifier .)
    CONST           reduce using rule 128 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 128 (label -> simpleIdentifier .)
    EOF             reduce using rule 128 (label -> simpleIdentifier .)
    FALSE           reduce using rule 128 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 128 (label -> simpleIdentifier .)
    NULL            reduce using rule 128 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 128 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 128 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 128 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 128 (label -> simpleIdentifier .)
    THIS            reduce using rule 128 (label -> simpleIdentifier .)
    TRUE            reduce using rule 128 (label -> simpleIdentifier .)
    VAL             reduce using rule 128 (label -> simpleIdentifier .)
    VAR             reduce using rule 128 (label -> simpleIdentifier .)
    WHEN            reduce using rule 128 (label -> simpleIdentifier .)
    LONG            reduce using rule 128 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 128 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 128 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 128 (label -> simpleIdentifier .)
    LCCT            reduce using rule 128 (label -> simpleIdentifier .)
    IF              reduce using rule 128 (label -> simpleIdentifier .)
    RETURN          reduce using rule 128 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 128 (label -> simpleIdentifier .)
    BREAK           reduce using rule 128 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 128 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 128 (label -> simpleIdentifier .)
    FUN             reduce using rule 128 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 128 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 128 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]


state 64

    (91) assignment -> directlyAssignableExpression . ATRIBUICAO expression

    ATRIBUICAO      shift and go to state 153


state 65

    (92) assignment -> assignableExpression . assignmentAndOperator expression
    (233) assignmentAndOperator -> . MAISIGUAL
    (234) assignmentAndOperator -> . MENOSIGUAL
    (235) assignmentAndOperator -> . MULTIGUAL
    (236) assignmentAndOperator -> . DIVIGUAL
    (237) assignmentAndOperator -> . MODIGUAL

    MAISIGUAL       shift and go to state 155
    MENOSIGUAL      shift and go to state 156
    MULTIGUAL       shift and go to state 157
    DIVIGUAL        shift and go to state 158
    MODIGUAL        shift and go to state 159

    assignmentAndOperator          shift and go to state 154

state 66

    (79) loopStatement -> forStatement_MD .

    FUN             reduce using rule 79 (loopStatement -> forStatement_MD .)
    FOR             reduce using rule 79 (loopStatement -> forStatement_MD .)
    WHILE           reduce using rule 79 (loopStatement -> forStatement_MD .)
    DO              reduce using rule 79 (loopStatement -> forStatement_MD .)
    VAR             reduce using rule 79 (loopStatement -> forStatement_MD .)
    VAL             reduce using rule 79 (loopStatement -> forStatement_MD .)
    ID              reduce using rule 79 (loopStatement -> forStatement_MD .)
    CROSSINLINE     reduce using rule 79 (loopStatement -> forStatement_MD .)
    IMPORT          reduce using rule 79 (loopStatement -> forStatement_MD .)
    INIT            reduce using rule 79 (loopStatement -> forStatement_MD .)
    NOINLINE        reduce using rule 79 (loopStatement -> forStatement_MD .)
    OUT             reduce using rule 79 (loopStatement -> forStatement_MD .)
    VARARG          reduce using rule 79 (loopStatement -> forStatement_MD .)
    WHERE           reduce using rule 79 (loopStatement -> forStatement_MD .)
    OBJECT          reduce using rule 79 (loopStatement -> forStatement_MD .)
    CONST           reduce using rule 79 (loopStatement -> forStatement_MD .)
    CONSTRUCTOR     reduce using rule 79 (loopStatement -> forStatement_MD .)
    EOF             reduce using rule 79 (loopStatement -> forStatement_MD .)
    FALSE           reduce using rule 79 (loopStatement -> forStatement_MD .)
    FUNCTION        reduce using rule 79 (loopStatement -> forStatement_MD .)
    NULL            reduce using rule 79 (loopStatement -> forStatement_MD .)
    NULLABLE        reduce using rule 79 (loopStatement -> forStatement_MD .)
    NUMBER          reduce using rule 79 (loopStatement -> forStatement_MD .)
    OPERATOR        reduce using rule 79 (loopStatement -> forStatement_MD .)
    SMARTCAST       reduce using rule 79 (loopStatement -> forStatement_MD .)
    THIS            reduce using rule 79 (loopStatement -> forStatement_MD .)
    TRUE            reduce using rule 79 (loopStatement -> forStatement_MD .)
    WHEN            reduce using rule 79 (loopStatement -> forStatement_MD .)
    LONG            reduce using rule 79 (loopStatement -> forStatement_MD .)
    ARRAY           reduce using rule 79 (loopStatement -> forStatement_MD .)
    LPAREN          reduce using rule 79 (loopStatement -> forStatement_MD .)
    LITERAL_STRING  reduce using rule 79 (loopStatement -> forStatement_MD .)
    LCCT            reduce using rule 79 (loopStatement -> forStatement_MD .)
    IF              reduce using rule 79 (loopStatement -> forStatement_MD .)
    RETURN          reduce using rule 79 (loopStatement -> forStatement_MD .)
    RETURN_AT       reduce using rule 79 (loopStatement -> forStatement_MD .)
    CONTINUE        reduce using rule 79 (loopStatement -> forStatement_MD .)
    CONTINUE_AT     reduce using rule 79 (loopStatement -> forStatement_MD .)
    BREAK           reduce using rule 79 (loopStatement -> forStatement_MD .)
    BREAK_AT        reduce using rule 79 (loopStatement -> forStatement_MD .)
    RCHAVE          reduce using rule 79 (loopStatement -> forStatement_MD .)
    INCREMENTO      reduce using rule 79 (loopStatement -> forStatement_MD .)
    DECREMENTO      reduce using rule 79 (loopStatement -> forStatement_MD .)
    MINUS           reduce using rule 79 (loopStatement -> forStatement_MD .)
    PLUS            reduce using rule 79 (loopStatement -> forStatement_MD .)
    NOT             reduce using rule 79 (loopStatement -> forStatement_MD .)
    SUSPEND         reduce using rule 79 (loopStatement -> forStatement_MD .)
    COLONCOLON      reduce using rule 79 (loopStatement -> forStatement_MD .)
    LCHAVE          reduce using rule 79 (loopStatement -> forStatement_MD .)
    MENOR           reduce using rule 79 (loopStatement -> forStatement_MD .)
    PONTO           reduce using rule 79 (loopStatement -> forStatement_MD .)
    AS              reduce using rule 79 (loopStatement -> forStatement_MD .)
    MAISIGUAL       reduce using rule 79 (loopStatement -> forStatement_MD .)
    MENOSIGUAL      reduce using rule 79 (loopStatement -> forStatement_MD .)
    MULTIGUAL       reduce using rule 79 (loopStatement -> forStatement_MD .)
    DIVIGUAL        reduce using rule 79 (loopStatement -> forStatement_MD .)
    MODIGUAL        reduce using rule 79 (loopStatement -> forStatement_MD .)
    MULT            reduce using rule 79 (loopStatement -> forStatement_MD .)
    DIVIDE          reduce using rule 79 (loopStatement -> forStatement_MD .)
    MOD             reduce using rule 79 (loopStatement -> forStatement_MD .)
    PONTOPONTO      reduce using rule 79 (loopStatement -> forStatement_MD .)
    ELVIS           reduce using rule 79 (loopStatement -> forStatement_MD .)
    IN              reduce using rule 79 (loopStatement -> forStatement_MD .)
    NOT_IN          reduce using rule 79 (loopStatement -> forStatement_MD .)
    IS              reduce using rule 79 (loopStatement -> forStatement_MD .)
    NOT_IS          reduce using rule 79 (loopStatement -> forStatement_MD .)
    MAIOR           reduce using rule 79 (loopStatement -> forStatement_MD .)
    MENORIGUAL      reduce using rule 79 (loopStatement -> forStatement_MD .)
    MAIORIGUAL      reduce using rule 79 (loopStatement -> forStatement_MD .)
    DIFERENTE       reduce using rule 79 (loopStatement -> forStatement_MD .)
    IDENTIDADE      reduce using rule 79 (loopStatement -> forStatement_MD .)
    IGUALDADE       reduce using rule 79 (loopStatement -> forStatement_MD .)
    SEMIDENTIDADE   reduce using rule 79 (loopStatement -> forStatement_MD .)
    AND             reduce using rule 79 (loopStatement -> forStatement_MD .)
    OR              reduce using rule 79 (loopStatement -> forStatement_MD .)
    COMMA           reduce using rule 79 (loopStatement -> forStatement_MD .)
    RPAREN          reduce using rule 79 (loopStatement -> forStatement_MD .)
    RCCT            reduce using rule 79 (loopStatement -> forStatement_MD .)
    PV              reduce using rule 79 (loopStatement -> forStatement_MD .)
    ELSE            reduce using rule 79 (loopStatement -> forStatement_MD .)


state 67

    (80) loopStatement -> forStatement_VD .

    FUN             reduce using rule 80 (loopStatement -> forStatement_VD .)
    FOR             reduce using rule 80 (loopStatement -> forStatement_VD .)
    WHILE           reduce using rule 80 (loopStatement -> forStatement_VD .)
    DO              reduce using rule 80 (loopStatement -> forStatement_VD .)
    VAR             reduce using rule 80 (loopStatement -> forStatement_VD .)
    VAL             reduce using rule 80 (loopStatement -> forStatement_VD .)
    ID              reduce using rule 80 (loopStatement -> forStatement_VD .)
    CROSSINLINE     reduce using rule 80 (loopStatement -> forStatement_VD .)
    IMPORT          reduce using rule 80 (loopStatement -> forStatement_VD .)
    INIT            reduce using rule 80 (loopStatement -> forStatement_VD .)
    NOINLINE        reduce using rule 80 (loopStatement -> forStatement_VD .)
    OUT             reduce using rule 80 (loopStatement -> forStatement_VD .)
    VARARG          reduce using rule 80 (loopStatement -> forStatement_VD .)
    WHERE           reduce using rule 80 (loopStatement -> forStatement_VD .)
    OBJECT          reduce using rule 80 (loopStatement -> forStatement_VD .)
    CONST           reduce using rule 80 (loopStatement -> forStatement_VD .)
    CONSTRUCTOR     reduce using rule 80 (loopStatement -> forStatement_VD .)
    EOF             reduce using rule 80 (loopStatement -> forStatement_VD .)
    FALSE           reduce using rule 80 (loopStatement -> forStatement_VD .)
    FUNCTION        reduce using rule 80 (loopStatement -> forStatement_VD .)
    NULL            reduce using rule 80 (loopStatement -> forStatement_VD .)
    NULLABLE        reduce using rule 80 (loopStatement -> forStatement_VD .)
    NUMBER          reduce using rule 80 (loopStatement -> forStatement_VD .)
    OPERATOR        reduce using rule 80 (loopStatement -> forStatement_VD .)
    SMARTCAST       reduce using rule 80 (loopStatement -> forStatement_VD .)
    THIS            reduce using rule 80 (loopStatement -> forStatement_VD .)
    TRUE            reduce using rule 80 (loopStatement -> forStatement_VD .)
    WHEN            reduce using rule 80 (loopStatement -> forStatement_VD .)
    LONG            reduce using rule 80 (loopStatement -> forStatement_VD .)
    ARRAY           reduce using rule 80 (loopStatement -> forStatement_VD .)
    LPAREN          reduce using rule 80 (loopStatement -> forStatement_VD .)
    LITERAL_STRING  reduce using rule 80 (loopStatement -> forStatement_VD .)
    LCCT            reduce using rule 80 (loopStatement -> forStatement_VD .)
    IF              reduce using rule 80 (loopStatement -> forStatement_VD .)
    RETURN          reduce using rule 80 (loopStatement -> forStatement_VD .)
    RETURN_AT       reduce using rule 80 (loopStatement -> forStatement_VD .)
    CONTINUE        reduce using rule 80 (loopStatement -> forStatement_VD .)
    CONTINUE_AT     reduce using rule 80 (loopStatement -> forStatement_VD .)
    BREAK           reduce using rule 80 (loopStatement -> forStatement_VD .)
    BREAK_AT        reduce using rule 80 (loopStatement -> forStatement_VD .)
    RCHAVE          reduce using rule 80 (loopStatement -> forStatement_VD .)
    INCREMENTO      reduce using rule 80 (loopStatement -> forStatement_VD .)
    DECREMENTO      reduce using rule 80 (loopStatement -> forStatement_VD .)
    MINUS           reduce using rule 80 (loopStatement -> forStatement_VD .)
    PLUS            reduce using rule 80 (loopStatement -> forStatement_VD .)
    NOT             reduce using rule 80 (loopStatement -> forStatement_VD .)
    SUSPEND         reduce using rule 80 (loopStatement -> forStatement_VD .)
    COLONCOLON      reduce using rule 80 (loopStatement -> forStatement_VD .)
    LCHAVE          reduce using rule 80 (loopStatement -> forStatement_VD .)
    MENOR           reduce using rule 80 (loopStatement -> forStatement_VD .)
    PONTO           reduce using rule 80 (loopStatement -> forStatement_VD .)
    AS              reduce using rule 80 (loopStatement -> forStatement_VD .)
    MAISIGUAL       reduce using rule 80 (loopStatement -> forStatement_VD .)
    MENOSIGUAL      reduce using rule 80 (loopStatement -> forStatement_VD .)
    MULTIGUAL       reduce using rule 80 (loopStatement -> forStatement_VD .)
    DIVIGUAL        reduce using rule 80 (loopStatement -> forStatement_VD .)
    MODIGUAL        reduce using rule 80 (loopStatement -> forStatement_VD .)
    MULT            reduce using rule 80 (loopStatement -> forStatement_VD .)
    DIVIDE          reduce using rule 80 (loopStatement -> forStatement_VD .)
    MOD             reduce using rule 80 (loopStatement -> forStatement_VD .)
    PONTOPONTO      reduce using rule 80 (loopStatement -> forStatement_VD .)
    ELVIS           reduce using rule 80 (loopStatement -> forStatement_VD .)
    IN              reduce using rule 80 (loopStatement -> forStatement_VD .)
    NOT_IN          reduce using rule 80 (loopStatement -> forStatement_VD .)
    IS              reduce using rule 80 (loopStatement -> forStatement_VD .)
    NOT_IS          reduce using rule 80 (loopStatement -> forStatement_VD .)
    MAIOR           reduce using rule 80 (loopStatement -> forStatement_VD .)
    MENORIGUAL      reduce using rule 80 (loopStatement -> forStatement_VD .)
    MAIORIGUAL      reduce using rule 80 (loopStatement -> forStatement_VD .)
    DIFERENTE       reduce using rule 80 (loopStatement -> forStatement_VD .)
    IDENTIDADE      reduce using rule 80 (loopStatement -> forStatement_VD .)
    IGUALDADE       reduce using rule 80 (loopStatement -> forStatement_VD .)
    SEMIDENTIDADE   reduce using rule 80 (loopStatement -> forStatement_VD .)
    AND             reduce using rule 80 (loopStatement -> forStatement_VD .)
    OR              reduce using rule 80 (loopStatement -> forStatement_VD .)
    COMMA           reduce using rule 80 (loopStatement -> forStatement_VD .)
    RPAREN          reduce using rule 80 (loopStatement -> forStatement_VD .)
    RCCT            reduce using rule 80 (loopStatement -> forStatement_VD .)
    PV              reduce using rule 80 (loopStatement -> forStatement_VD .)
    ELSE            reduce using rule 80 (loopStatement -> forStatement_VD .)


state 68

    (81) loopStatement -> whileStatement .

    FUN             reduce using rule 81 (loopStatement -> whileStatement .)
    FOR             reduce using rule 81 (loopStatement -> whileStatement .)
    WHILE           reduce using rule 81 (loopStatement -> whileStatement .)
    DO              reduce using rule 81 (loopStatement -> whileStatement .)
    VAR             reduce using rule 81 (loopStatement -> whileStatement .)
    VAL             reduce using rule 81 (loopStatement -> whileStatement .)
    ID              reduce using rule 81 (loopStatement -> whileStatement .)
    CROSSINLINE     reduce using rule 81 (loopStatement -> whileStatement .)
    IMPORT          reduce using rule 81 (loopStatement -> whileStatement .)
    INIT            reduce using rule 81 (loopStatement -> whileStatement .)
    NOINLINE        reduce using rule 81 (loopStatement -> whileStatement .)
    OUT             reduce using rule 81 (loopStatement -> whileStatement .)
    VARARG          reduce using rule 81 (loopStatement -> whileStatement .)
    WHERE           reduce using rule 81 (loopStatement -> whileStatement .)
    OBJECT          reduce using rule 81 (loopStatement -> whileStatement .)
    CONST           reduce using rule 81 (loopStatement -> whileStatement .)
    CONSTRUCTOR     reduce using rule 81 (loopStatement -> whileStatement .)
    EOF             reduce using rule 81 (loopStatement -> whileStatement .)
    FALSE           reduce using rule 81 (loopStatement -> whileStatement .)
    FUNCTION        reduce using rule 81 (loopStatement -> whileStatement .)
    NULL            reduce using rule 81 (loopStatement -> whileStatement .)
    NULLABLE        reduce using rule 81 (loopStatement -> whileStatement .)
    NUMBER          reduce using rule 81 (loopStatement -> whileStatement .)
    OPERATOR        reduce using rule 81 (loopStatement -> whileStatement .)
    SMARTCAST       reduce using rule 81 (loopStatement -> whileStatement .)
    THIS            reduce using rule 81 (loopStatement -> whileStatement .)
    TRUE            reduce using rule 81 (loopStatement -> whileStatement .)
    WHEN            reduce using rule 81 (loopStatement -> whileStatement .)
    LONG            reduce using rule 81 (loopStatement -> whileStatement .)
    ARRAY           reduce using rule 81 (loopStatement -> whileStatement .)
    LPAREN          reduce using rule 81 (loopStatement -> whileStatement .)
    LITERAL_STRING  reduce using rule 81 (loopStatement -> whileStatement .)
    LCCT            reduce using rule 81 (loopStatement -> whileStatement .)
    IF              reduce using rule 81 (loopStatement -> whileStatement .)
    RETURN          reduce using rule 81 (loopStatement -> whileStatement .)
    RETURN_AT       reduce using rule 81 (loopStatement -> whileStatement .)
    CONTINUE        reduce using rule 81 (loopStatement -> whileStatement .)
    CONTINUE_AT     reduce using rule 81 (loopStatement -> whileStatement .)
    BREAK           reduce using rule 81 (loopStatement -> whileStatement .)
    BREAK_AT        reduce using rule 81 (loopStatement -> whileStatement .)
    RCHAVE          reduce using rule 81 (loopStatement -> whileStatement .)
    INCREMENTO      reduce using rule 81 (loopStatement -> whileStatement .)
    DECREMENTO      reduce using rule 81 (loopStatement -> whileStatement .)
    MINUS           reduce using rule 81 (loopStatement -> whileStatement .)
    PLUS            reduce using rule 81 (loopStatement -> whileStatement .)
    NOT             reduce using rule 81 (loopStatement -> whileStatement .)
    SUSPEND         reduce using rule 81 (loopStatement -> whileStatement .)
    COLONCOLON      reduce using rule 81 (loopStatement -> whileStatement .)
    LCHAVE          reduce using rule 81 (loopStatement -> whileStatement .)
    MENOR           reduce using rule 81 (loopStatement -> whileStatement .)
    PONTO           reduce using rule 81 (loopStatement -> whileStatement .)
    AS              reduce using rule 81 (loopStatement -> whileStatement .)
    MAISIGUAL       reduce using rule 81 (loopStatement -> whileStatement .)
    MENOSIGUAL      reduce using rule 81 (loopStatement -> whileStatement .)
    MULTIGUAL       reduce using rule 81 (loopStatement -> whileStatement .)
    DIVIGUAL        reduce using rule 81 (loopStatement -> whileStatement .)
    MODIGUAL        reduce using rule 81 (loopStatement -> whileStatement .)
    MULT            reduce using rule 81 (loopStatement -> whileStatement .)
    DIVIDE          reduce using rule 81 (loopStatement -> whileStatement .)
    MOD             reduce using rule 81 (loopStatement -> whileStatement .)
    PONTOPONTO      reduce using rule 81 (loopStatement -> whileStatement .)
    ELVIS           reduce using rule 81 (loopStatement -> whileStatement .)
    IN              reduce using rule 81 (loopStatement -> whileStatement .)
    NOT_IN          reduce using rule 81 (loopStatement -> whileStatement .)
    IS              reduce using rule 81 (loopStatement -> whileStatement .)
    NOT_IS          reduce using rule 81 (loopStatement -> whileStatement .)
    MAIOR           reduce using rule 81 (loopStatement -> whileStatement .)
    MENORIGUAL      reduce using rule 81 (loopStatement -> whileStatement .)
    MAIORIGUAL      reduce using rule 81 (loopStatement -> whileStatement .)
    DIFERENTE       reduce using rule 81 (loopStatement -> whileStatement .)
    IDENTIDADE      reduce using rule 81 (loopStatement -> whileStatement .)
    IGUALDADE       reduce using rule 81 (loopStatement -> whileStatement .)
    SEMIDENTIDADE   reduce using rule 81 (loopStatement -> whileStatement .)
    AND             reduce using rule 81 (loopStatement -> whileStatement .)
    OR              reduce using rule 81 (loopStatement -> whileStatement .)
    COMMA           reduce using rule 81 (loopStatement -> whileStatement .)
    RPAREN          reduce using rule 81 (loopStatement -> whileStatement .)
    RCCT            reduce using rule 81 (loopStatement -> whileStatement .)
    PV              reduce using rule 81 (loopStatement -> whileStatement .)
    ELSE            reduce using rule 81 (loopStatement -> whileStatement .)


state 69

    (82) loopStatement -> doWhileStatement .

    FUN             reduce using rule 82 (loopStatement -> doWhileStatement .)
    FOR             reduce using rule 82 (loopStatement -> doWhileStatement .)
    WHILE           reduce using rule 82 (loopStatement -> doWhileStatement .)
    DO              reduce using rule 82 (loopStatement -> doWhileStatement .)
    VAR             reduce using rule 82 (loopStatement -> doWhileStatement .)
    VAL             reduce using rule 82 (loopStatement -> doWhileStatement .)
    ID              reduce using rule 82 (loopStatement -> doWhileStatement .)
    CROSSINLINE     reduce using rule 82 (loopStatement -> doWhileStatement .)
    IMPORT          reduce using rule 82 (loopStatement -> doWhileStatement .)
    INIT            reduce using rule 82 (loopStatement -> doWhileStatement .)
    NOINLINE        reduce using rule 82 (loopStatement -> doWhileStatement .)
    OUT             reduce using rule 82 (loopStatement -> doWhileStatement .)
    VARARG          reduce using rule 82 (loopStatement -> doWhileStatement .)
    WHERE           reduce using rule 82 (loopStatement -> doWhileStatement .)
    OBJECT          reduce using rule 82 (loopStatement -> doWhileStatement .)
    CONST           reduce using rule 82 (loopStatement -> doWhileStatement .)
    CONSTRUCTOR     reduce using rule 82 (loopStatement -> doWhileStatement .)
    EOF             reduce using rule 82 (loopStatement -> doWhileStatement .)
    FALSE           reduce using rule 82 (loopStatement -> doWhileStatement .)
    FUNCTION        reduce using rule 82 (loopStatement -> doWhileStatement .)
    NULL            reduce using rule 82 (loopStatement -> doWhileStatement .)
    NULLABLE        reduce using rule 82 (loopStatement -> doWhileStatement .)
    NUMBER          reduce using rule 82 (loopStatement -> doWhileStatement .)
    OPERATOR        reduce using rule 82 (loopStatement -> doWhileStatement .)
    SMARTCAST       reduce using rule 82 (loopStatement -> doWhileStatement .)
    THIS            reduce using rule 82 (loopStatement -> doWhileStatement .)
    TRUE            reduce using rule 82 (loopStatement -> doWhileStatement .)
    WHEN            reduce using rule 82 (loopStatement -> doWhileStatement .)
    LONG            reduce using rule 82 (loopStatement -> doWhileStatement .)
    ARRAY           reduce using rule 82 (loopStatement -> doWhileStatement .)
    LPAREN          reduce using rule 82 (loopStatement -> doWhileStatement .)
    LITERAL_STRING  reduce using rule 82 (loopStatement -> doWhileStatement .)
    LCCT            reduce using rule 82 (loopStatement -> doWhileStatement .)
    IF              reduce using rule 82 (loopStatement -> doWhileStatement .)
    RETURN          reduce using rule 82 (loopStatement -> doWhileStatement .)
    RETURN_AT       reduce using rule 82 (loopStatement -> doWhileStatement .)
    CONTINUE        reduce using rule 82 (loopStatement -> doWhileStatement .)
    CONTINUE_AT     reduce using rule 82 (loopStatement -> doWhileStatement .)
    BREAK           reduce using rule 82 (loopStatement -> doWhileStatement .)
    BREAK_AT        reduce using rule 82 (loopStatement -> doWhileStatement .)
    RCHAVE          reduce using rule 82 (loopStatement -> doWhileStatement .)
    INCREMENTO      reduce using rule 82 (loopStatement -> doWhileStatement .)
    DECREMENTO      reduce using rule 82 (loopStatement -> doWhileStatement .)
    MINUS           reduce using rule 82 (loopStatement -> doWhileStatement .)
    PLUS            reduce using rule 82 (loopStatement -> doWhileStatement .)
    NOT             reduce using rule 82 (loopStatement -> doWhileStatement .)
    SUSPEND         reduce using rule 82 (loopStatement -> doWhileStatement .)
    COLONCOLON      reduce using rule 82 (loopStatement -> doWhileStatement .)
    LCHAVE          reduce using rule 82 (loopStatement -> doWhileStatement .)
    MENOR           reduce using rule 82 (loopStatement -> doWhileStatement .)
    PONTO           reduce using rule 82 (loopStatement -> doWhileStatement .)
    AS              reduce using rule 82 (loopStatement -> doWhileStatement .)
    MAISIGUAL       reduce using rule 82 (loopStatement -> doWhileStatement .)
    MENOSIGUAL      reduce using rule 82 (loopStatement -> doWhileStatement .)
    MULTIGUAL       reduce using rule 82 (loopStatement -> doWhileStatement .)
    DIVIGUAL        reduce using rule 82 (loopStatement -> doWhileStatement .)
    MODIGUAL        reduce using rule 82 (loopStatement -> doWhileStatement .)
    MULT            reduce using rule 82 (loopStatement -> doWhileStatement .)
    DIVIDE          reduce using rule 82 (loopStatement -> doWhileStatement .)
    MOD             reduce using rule 82 (loopStatement -> doWhileStatement .)
    PONTOPONTO      reduce using rule 82 (loopStatement -> doWhileStatement .)
    ELVIS           reduce using rule 82 (loopStatement -> doWhileStatement .)
    IN              reduce using rule 82 (loopStatement -> doWhileStatement .)
    NOT_IN          reduce using rule 82 (loopStatement -> doWhileStatement .)
    IS              reduce using rule 82 (loopStatement -> doWhileStatement .)
    NOT_IS          reduce using rule 82 (loopStatement -> doWhileStatement .)
    MAIOR           reduce using rule 82 (loopStatement -> doWhileStatement .)
    MENORIGUAL      reduce using rule 82 (loopStatement -> doWhileStatement .)
    MAIORIGUAL      reduce using rule 82 (loopStatement -> doWhileStatement .)
    DIFERENTE       reduce using rule 82 (loopStatement -> doWhileStatement .)
    IDENTIDADE      reduce using rule 82 (loopStatement -> doWhileStatement .)
    IGUALDADE       reduce using rule 82 (loopStatement -> doWhileStatement .)
    SEMIDENTIDADE   reduce using rule 82 (loopStatement -> doWhileStatement .)
    AND             reduce using rule 82 (loopStatement -> doWhileStatement .)
    OR              reduce using rule 82 (loopStatement -> doWhileStatement .)
    COMMA           reduce using rule 82 (loopStatement -> doWhileStatement .)
    RPAREN          reduce using rule 82 (loopStatement -> doWhileStatement .)
    RCCT            reduce using rule 82 (loopStatement -> doWhileStatement .)
    PV              reduce using rule 82 (loopStatement -> doWhileStatement .)
    ELSE            reduce using rule 82 (loopStatement -> doWhileStatement .)


state 70

    (93) expression -> disjunction .

    INCREMENTO      reduce using rule 93 (expression -> disjunction .)
    DECREMENTO      reduce using rule 93 (expression -> disjunction .)
    MENOR           reduce using rule 93 (expression -> disjunction .)
    LCCT            reduce using rule 93 (expression -> disjunction .)
    COLONCOLON      reduce using rule 93 (expression -> disjunction .)
    PONTO           reduce using rule 93 (expression -> disjunction .)
    LPAREN          reduce using rule 93 (expression -> disjunction .)
    RCHAVE          reduce using rule 93 (expression -> disjunction .)
    AS              reduce using rule 93 (expression -> disjunction .)
    MAISIGUAL       reduce using rule 93 (expression -> disjunction .)
    MENOSIGUAL      reduce using rule 93 (expression -> disjunction .)
    MULTIGUAL       reduce using rule 93 (expression -> disjunction .)
    DIVIGUAL        reduce using rule 93 (expression -> disjunction .)
    MODIGUAL        reduce using rule 93 (expression -> disjunction .)
    MULT            reduce using rule 93 (expression -> disjunction .)
    DIVIDE          reduce using rule 93 (expression -> disjunction .)
    MOD             reduce using rule 93 (expression -> disjunction .)
    PLUS            reduce using rule 93 (expression -> disjunction .)
    MINUS           reduce using rule 93 (expression -> disjunction .)
    PONTOPONTO      reduce using rule 93 (expression -> disjunction .)
    ID              reduce using rule 93 (expression -> disjunction .)
    CROSSINLINE     reduce using rule 93 (expression -> disjunction .)
    IMPORT          reduce using rule 93 (expression -> disjunction .)
    INIT            reduce using rule 93 (expression -> disjunction .)
    NOINLINE        reduce using rule 93 (expression -> disjunction .)
    OUT             reduce using rule 93 (expression -> disjunction .)
    VARARG          reduce using rule 93 (expression -> disjunction .)
    WHERE           reduce using rule 93 (expression -> disjunction .)
    OBJECT          reduce using rule 93 (expression -> disjunction .)
    CONST           reduce using rule 93 (expression -> disjunction .)
    CONSTRUCTOR     reduce using rule 93 (expression -> disjunction .)
    EOF             reduce using rule 93 (expression -> disjunction .)
    FALSE           reduce using rule 93 (expression -> disjunction .)
    FUNCTION        reduce using rule 93 (expression -> disjunction .)
    NULL            reduce using rule 93 (expression -> disjunction .)
    NULLABLE        reduce using rule 93 (expression -> disjunction .)
    NUMBER          reduce using rule 93 (expression -> disjunction .)
    OPERATOR        reduce using rule 93 (expression -> disjunction .)
    SMARTCAST       reduce using rule 93 (expression -> disjunction .)
    THIS            reduce using rule 93 (expression -> disjunction .)
    TRUE            reduce using rule 93 (expression -> disjunction .)
    VAL             reduce using rule 93 (expression -> disjunction .)
    VAR             reduce using rule 93 (expression -> disjunction .)
    WHEN            reduce using rule 93 (expression -> disjunction .)
    LONG            reduce using rule 93 (expression -> disjunction .)
    ARRAY           reduce using rule 93 (expression -> disjunction .)
    ELVIS           reduce using rule 93 (expression -> disjunction .)
    IN              reduce using rule 93 (expression -> disjunction .)
    NOT_IN          reduce using rule 93 (expression -> disjunction .)
    IS              reduce using rule 93 (expression -> disjunction .)
    NOT_IS          reduce using rule 93 (expression -> disjunction .)
    MAIOR           reduce using rule 93 (expression -> disjunction .)
    MENORIGUAL      reduce using rule 93 (expression -> disjunction .)
    MAIORIGUAL      reduce using rule 93 (expression -> disjunction .)
    DIFERENTE       reduce using rule 93 (expression -> disjunction .)
    IDENTIDADE      reduce using rule 93 (expression -> disjunction .)
    IGUALDADE       reduce using rule 93 (expression -> disjunction .)
    SEMIDENTIDADE   reduce using rule 93 (expression -> disjunction .)
    AND             reduce using rule 93 (expression -> disjunction .)
    OR              reduce using rule 93 (expression -> disjunction .)
    FUN             reduce using rule 93 (expression -> disjunction .)
    FOR             reduce using rule 93 (expression -> disjunction .)
    WHILE           reduce using rule 93 (expression -> disjunction .)
    DO              reduce using rule 93 (expression -> disjunction .)
    LITERAL_STRING  reduce using rule 93 (expression -> disjunction .)
    IF              reduce using rule 93 (expression -> disjunction .)
    RETURN          reduce using rule 93 (expression -> disjunction .)
    RETURN_AT       reduce using rule 93 (expression -> disjunction .)
    CONTINUE        reduce using rule 93 (expression -> disjunction .)
    CONTINUE_AT     reduce using rule 93 (expression -> disjunction .)
    BREAK           reduce using rule 93 (expression -> disjunction .)
    BREAK_AT        reduce using rule 93 (expression -> disjunction .)
    NOT             reduce using rule 93 (expression -> disjunction .)
    SUSPEND         reduce using rule 93 (expression -> disjunction .)
    COMMA           reduce using rule 93 (expression -> disjunction .)
    RPAREN          reduce using rule 93 (expression -> disjunction .)
    LCHAVE          reduce using rule 93 (expression -> disjunction .)
    RCCT            reduce using rule 93 (expression -> disjunction .)
    PV              reduce using rule 93 (expression -> disjunction .)
    ELSE            reduce using rule 93 (expression -> disjunction .)


state 71

    (10) propertyDeclaration -> varOrVal . optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (13) optionalTypeParameters -> . typeParameters
    (14) optionalTypeParameters -> .
    (17) typeParameters -> . MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR

    LPAREN          reduce using rule 14 (optionalTypeParameters -> .)
    ID              reduce using rule 14 (optionalTypeParameters -> .)
    CROSSINLINE     reduce using rule 14 (optionalTypeParameters -> .)
    IMPORT          reduce using rule 14 (optionalTypeParameters -> .)
    INIT            reduce using rule 14 (optionalTypeParameters -> .)
    NOINLINE        reduce using rule 14 (optionalTypeParameters -> .)
    OUT             reduce using rule 14 (optionalTypeParameters -> .)
    VARARG          reduce using rule 14 (optionalTypeParameters -> .)
    WHERE           reduce using rule 14 (optionalTypeParameters -> .)
    OBJECT          reduce using rule 14 (optionalTypeParameters -> .)
    CONST           reduce using rule 14 (optionalTypeParameters -> .)
    CONSTRUCTOR     reduce using rule 14 (optionalTypeParameters -> .)
    EOF             reduce using rule 14 (optionalTypeParameters -> .)
    FALSE           reduce using rule 14 (optionalTypeParameters -> .)
    FUNCTION        reduce using rule 14 (optionalTypeParameters -> .)
    NULL            reduce using rule 14 (optionalTypeParameters -> .)
    NULLABLE        reduce using rule 14 (optionalTypeParameters -> .)
    NUMBER          reduce using rule 14 (optionalTypeParameters -> .)
    OPERATOR        reduce using rule 14 (optionalTypeParameters -> .)
    SMARTCAST       reduce using rule 14 (optionalTypeParameters -> .)
    THIS            reduce using rule 14 (optionalTypeParameters -> .)
    TRUE            reduce using rule 14 (optionalTypeParameters -> .)
    VAL             reduce using rule 14 (optionalTypeParameters -> .)
    VAR             reduce using rule 14 (optionalTypeParameters -> .)
    WHEN            reduce using rule 14 (optionalTypeParameters -> .)
    LONG            reduce using rule 14 (optionalTypeParameters -> .)
    ARRAY           reduce using rule 14 (optionalTypeParameters -> .)
    MENOR           shift and go to state 162

    optionalTypeParameters         shift and go to state 160
    typeParameters                 shift and go to state 161

state 72

    (138) directlyAssignableExpression -> postfixUnaryExpression . assignableSuffix
    (123) prefixUnaryExpression -> postfixUnaryExpression .
    (145) assignableSuffix -> . typeArguments
    (146) assignableSuffix -> . indexingSuffix
    (147) assignableSuffix -> . navigationSuffix
    (161) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (162) typeArguments -> . MENOR MAIOR
    (148) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (149) indexingSuffix -> . LCCT RCCT
    (152) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (153) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (264) memberAccessOperator -> . safeNav
    (265) memberAccessOperator -> . COLONCOLON
    (266) safeNav -> . PONTO

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    INCREMENTO      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    DECREMENTO      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    LPAREN          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCHAVE          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    AS              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MODIGUAL        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULT            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIDE          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MOD             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    PLUS            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MINUS           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    ID              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IMPORT          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    INIT            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOINLINE        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    OUT             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    VARARG          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHERE           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    OBJECT          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONST           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    EOF             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    FALSE           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUNCTION        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULL            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULLABLE        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NUMBER          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    OPERATOR        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    SMARTCAST       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    THIS            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    TRUE            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAL             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAR             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHEN            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    LONG            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    ARRAY           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELVIS           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IN              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IN          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IS              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IS          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIOR           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIFERENTE       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IGUALDADE       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    AND             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    OR              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUN             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    FOR             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHILE           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    DO              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IF              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN_AT       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK_AT        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    SUSPEND         reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCHAVE          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    RPAREN          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    COMMA           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCCT            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    PV              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELSE            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOR           shift and go to state 167
    LCCT            shift and go to state 168
    COLONCOLON      shift and go to state 171
    PONTO           shift and go to state 172

  ! MENOR           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCCT            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTO           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]

    assignableSuffix               shift and go to state 163
    typeArguments                  shift and go to state 164
    indexingSuffix                 shift and go to state 165
    navigationSuffix               shift and go to state 166
    memberAccessOperator           shift and go to state 169
    safeNav                        shift and go to state 170

state 73

    (140) directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .

    ATRIBUICAO      reduce using rule 140 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)
    RPAREN          reduce using rule 140 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)


state 74

    (142) assignableExpression -> prefixUnaryExpression .
    (120) asExpression -> prefixUnaryExpression .
    (121) asExpression -> prefixUnaryExpression . asOperator type
    (255) asOperator -> . AS
    (256) asOperator -> . AS asOperator

  ! reduce/reduce conflict for MAISIGUAL resolved using rule 120 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 120 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 120 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 120 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 120 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 120 (asExpression -> prefixUnaryExpression .)
  ! shift/reduce conflict for AS resolved as shift
    INCREMENTO      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    DECREMENTO      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MENOR           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    LCCT            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    COLONCOLON      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    PONTO           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    LPAREN          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    RCHAVE          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MAISIGUAL       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MENOSIGUAL      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MULTIGUAL       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    DIVIGUAL        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MODIGUAL        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MULT            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    DIVIDE          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MOD             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    PLUS            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MINUS           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    PONTOPONTO      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    ID              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    CROSSINLINE     reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IMPORT          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    INIT            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NOINLINE        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    OUT             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    VARARG          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    WHERE           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    OBJECT          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    CONST           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    EOF             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    FALSE           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    FUNCTION        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NULL            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NULLABLE        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NUMBER          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    OPERATOR        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    SMARTCAST       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    THIS            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    TRUE            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    VAL             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    VAR             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    WHEN            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    LONG            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    ARRAY           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    ELVIS           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IN              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NOT_IN          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IS              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NOT_IS          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MAIOR           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MENORIGUAL      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MAIORIGUAL      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    DIFERENTE       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IDENTIDADE      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IGUALDADE       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    AND             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    OR              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    FUN             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    FOR             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    WHILE           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    DO              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    LITERAL_STRING  reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IF              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    RETURN          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    RETURN_AT       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    CONTINUE        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    CONTINUE_AT     reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    BREAK           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    BREAK_AT        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NOT             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    SUSPEND         reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    LCHAVE          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    RPAREN          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    RCCT            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    PV              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    ELSE            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    AS              shift and go to state 174

  ! MAISIGUAL       [ reduce using rule 142 (assignableExpression -> prefixUnaryExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 142 (assignableExpression -> prefixUnaryExpression .) ]
  ! MULTIGUAL       [ reduce using rule 142 (assignableExpression -> prefixUnaryExpression .) ]
  ! DIVIGUAL        [ reduce using rule 142 (assignableExpression -> prefixUnaryExpression .) ]
  ! MODIGUAL        [ reduce using rule 142 (assignableExpression -> prefixUnaryExpression .) ]
  ! RPAREN          [ reduce using rule 142 (assignableExpression -> prefixUnaryExpression .) ]
  ! AS              [ reduce using rule 120 (asExpression -> prefixUnaryExpression .) ]

    asOperator                     shift and go to state 173

state 75

    (143) assignableExpression -> parenthesizedAssignableExpression .

    MAISIGUAL       reduce using rule 143 (assignableExpression -> parenthesizedAssignableExpression .)
    MENOSIGUAL      reduce using rule 143 (assignableExpression -> parenthesizedAssignableExpression .)
    MULTIGUAL       reduce using rule 143 (assignableExpression -> parenthesizedAssignableExpression .)
    DIVIGUAL        reduce using rule 143 (assignableExpression -> parenthesizedAssignableExpression .)
    MODIGUAL        reduce using rule 143 (assignableExpression -> parenthesizedAssignableExpression .)
    RPAREN          reduce using rule 143 (assignableExpression -> parenthesizedAssignableExpression .)


state 76

    (83) forStatement_MD -> FOR . LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> FOR . LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> FOR . LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> FOR . LPAREN variableDeclaration IN expression RPAREN

    LPAREN          shift and go to state 175


state 77

    (141) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (144) parenthesizedAssignableExpression -> LPAREN . assignableExpression RPAREN
    (180) parenthesizedExpression -> LPAREN . expression RPAREN
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (93) expression -> . disjunction
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (68) receiverType -> . typeModifier parenthesizedType
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (47) typeModifier -> . SUSPEND
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

    directlyAssignableExpression   shift and go to state 176
    assignableExpression           shift and go to state 177
    expression                     shift and go to state 178
    postfixUnaryExpression         shift and go to state 72
    simpleIdentifier               shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    disjunction                    shift and go to state 70
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    conjunction                    shift and go to state 80
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    equality                       shift and go to state 85
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    comparison                     shift and go to state 94
    receiverType                   shift and go to state 109
    infixOperation                 shift and go to state 108
    typeModifier                   shift and go to state 116
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 78

    (87) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 179


state 79

    (89) doWhileStatement -> DO . controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> DO . WHILE LPAREN expression RPAREN
    (76) controlStructureBody -> . block
    (77) controlStructureBody -> . statement
    (78) block -> . LCHAVE statements RCHAVE
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

    WHILE           shift and go to state 181
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 76
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

    controlStructureBody           shift and go to state 180
    expression                     shift and go to state 60
    block                          shift and go to state 182
    statement                      shift and go to state 183
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 80

    (94) disjunction -> conjunction .
    (95) disjunction -> conjunction . OR disjunction

  ! shift/reduce conflict for OR resolved as shift
    INCREMENTO      reduce using rule 94 (disjunction -> conjunction .)
    DECREMENTO      reduce using rule 94 (disjunction -> conjunction .)
    MENOR           reduce using rule 94 (disjunction -> conjunction .)
    LCCT            reduce using rule 94 (disjunction -> conjunction .)
    COLONCOLON      reduce using rule 94 (disjunction -> conjunction .)
    PONTO           reduce using rule 94 (disjunction -> conjunction .)
    LPAREN          reduce using rule 94 (disjunction -> conjunction .)
    RCHAVE          reduce using rule 94 (disjunction -> conjunction .)
    AS              reduce using rule 94 (disjunction -> conjunction .)
    MAISIGUAL       reduce using rule 94 (disjunction -> conjunction .)
    MENOSIGUAL      reduce using rule 94 (disjunction -> conjunction .)
    MULTIGUAL       reduce using rule 94 (disjunction -> conjunction .)
    DIVIGUAL        reduce using rule 94 (disjunction -> conjunction .)
    MODIGUAL        reduce using rule 94 (disjunction -> conjunction .)
    MULT            reduce using rule 94 (disjunction -> conjunction .)
    DIVIDE          reduce using rule 94 (disjunction -> conjunction .)
    MOD             reduce using rule 94 (disjunction -> conjunction .)
    PLUS            reduce using rule 94 (disjunction -> conjunction .)
    MINUS           reduce using rule 94 (disjunction -> conjunction .)
    PONTOPONTO      reduce using rule 94 (disjunction -> conjunction .)
    ID              reduce using rule 94 (disjunction -> conjunction .)
    CROSSINLINE     reduce using rule 94 (disjunction -> conjunction .)
    IMPORT          reduce using rule 94 (disjunction -> conjunction .)
    INIT            reduce using rule 94 (disjunction -> conjunction .)
    NOINLINE        reduce using rule 94 (disjunction -> conjunction .)
    OUT             reduce using rule 94 (disjunction -> conjunction .)
    VARARG          reduce using rule 94 (disjunction -> conjunction .)
    WHERE           reduce using rule 94 (disjunction -> conjunction .)
    OBJECT          reduce using rule 94 (disjunction -> conjunction .)
    CONST           reduce using rule 94 (disjunction -> conjunction .)
    CONSTRUCTOR     reduce using rule 94 (disjunction -> conjunction .)
    EOF             reduce using rule 94 (disjunction -> conjunction .)
    FALSE           reduce using rule 94 (disjunction -> conjunction .)
    FUNCTION        reduce using rule 94 (disjunction -> conjunction .)
    NULL            reduce using rule 94 (disjunction -> conjunction .)
    NULLABLE        reduce using rule 94 (disjunction -> conjunction .)
    NUMBER          reduce using rule 94 (disjunction -> conjunction .)
    OPERATOR        reduce using rule 94 (disjunction -> conjunction .)
    SMARTCAST       reduce using rule 94 (disjunction -> conjunction .)
    THIS            reduce using rule 94 (disjunction -> conjunction .)
    TRUE            reduce using rule 94 (disjunction -> conjunction .)
    VAL             reduce using rule 94 (disjunction -> conjunction .)
    VAR             reduce using rule 94 (disjunction -> conjunction .)
    WHEN            reduce using rule 94 (disjunction -> conjunction .)
    LONG            reduce using rule 94 (disjunction -> conjunction .)
    ARRAY           reduce using rule 94 (disjunction -> conjunction .)
    ELVIS           reduce using rule 94 (disjunction -> conjunction .)
    IN              reduce using rule 94 (disjunction -> conjunction .)
    NOT_IN          reduce using rule 94 (disjunction -> conjunction .)
    IS              reduce using rule 94 (disjunction -> conjunction .)
    NOT_IS          reduce using rule 94 (disjunction -> conjunction .)
    MAIOR           reduce using rule 94 (disjunction -> conjunction .)
    MENORIGUAL      reduce using rule 94 (disjunction -> conjunction .)
    MAIORIGUAL      reduce using rule 94 (disjunction -> conjunction .)
    DIFERENTE       reduce using rule 94 (disjunction -> conjunction .)
    IDENTIDADE      reduce using rule 94 (disjunction -> conjunction .)
    IGUALDADE       reduce using rule 94 (disjunction -> conjunction .)
    SEMIDENTIDADE   reduce using rule 94 (disjunction -> conjunction .)
    AND             reduce using rule 94 (disjunction -> conjunction .)
    FUN             reduce using rule 94 (disjunction -> conjunction .)
    FOR             reduce using rule 94 (disjunction -> conjunction .)
    WHILE           reduce using rule 94 (disjunction -> conjunction .)
    DO              reduce using rule 94 (disjunction -> conjunction .)
    LITERAL_STRING  reduce using rule 94 (disjunction -> conjunction .)
    IF              reduce using rule 94 (disjunction -> conjunction .)
    RETURN          reduce using rule 94 (disjunction -> conjunction .)
    RETURN_AT       reduce using rule 94 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 94 (disjunction -> conjunction .)
    CONTINUE_AT     reduce using rule 94 (disjunction -> conjunction .)
    BREAK           reduce using rule 94 (disjunction -> conjunction .)
    BREAK_AT        reduce using rule 94 (disjunction -> conjunction .)
    NOT             reduce using rule 94 (disjunction -> conjunction .)
    SUSPEND         reduce using rule 94 (disjunction -> conjunction .)
    COMMA           reduce using rule 94 (disjunction -> conjunction .)
    RPAREN          reduce using rule 94 (disjunction -> conjunction .)
    LCHAVE          reduce using rule 94 (disjunction -> conjunction .)
    RCCT            reduce using rule 94 (disjunction -> conjunction .)
    PV              reduce using rule 94 (disjunction -> conjunction .)
    ELSE            reduce using rule 94 (disjunction -> conjunction .)
    OR              shift and go to state 184

  ! OR              [ reduce using rule 94 (disjunction -> conjunction .) ]


state 81

    (11) varOrVal -> VAR .
    (289) simpleIdentifier -> VAR .

  ! reduce/reduce conflict for MENOR resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for LPAREN resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for ID resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for IMPORT resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for INIT resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for OUT resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for VARARG resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for WHERE resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for OBJECT resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for CONST resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for EOF resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for FALSE resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for NULL resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for NUMBER resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for THIS resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for TRUE resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for VAL resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for VAR resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for WHEN resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for LONG resolved using rule 11 (varOrVal -> VAR .)
  ! reduce/reduce conflict for ARRAY resolved using rule 11 (varOrVal -> VAR .)
    MENOR           reduce using rule 11 (varOrVal -> VAR .)
    LPAREN          reduce using rule 11 (varOrVal -> VAR .)
    ID              reduce using rule 11 (varOrVal -> VAR .)
    CROSSINLINE     reduce using rule 11 (varOrVal -> VAR .)
    IMPORT          reduce using rule 11 (varOrVal -> VAR .)
    INIT            reduce using rule 11 (varOrVal -> VAR .)
    NOINLINE        reduce using rule 11 (varOrVal -> VAR .)
    OUT             reduce using rule 11 (varOrVal -> VAR .)
    VARARG          reduce using rule 11 (varOrVal -> VAR .)
    WHERE           reduce using rule 11 (varOrVal -> VAR .)
    OBJECT          reduce using rule 11 (varOrVal -> VAR .)
    CONST           reduce using rule 11 (varOrVal -> VAR .)
    CONSTRUCTOR     reduce using rule 11 (varOrVal -> VAR .)
    EOF             reduce using rule 11 (varOrVal -> VAR .)
    FALSE           reduce using rule 11 (varOrVal -> VAR .)
    FUNCTION        reduce using rule 11 (varOrVal -> VAR .)
    NULL            reduce using rule 11 (varOrVal -> VAR .)
    NULLABLE        reduce using rule 11 (varOrVal -> VAR .)
    NUMBER          reduce using rule 11 (varOrVal -> VAR .)
    OPERATOR        reduce using rule 11 (varOrVal -> VAR .)
    SMARTCAST       reduce using rule 11 (varOrVal -> VAR .)
    THIS            reduce using rule 11 (varOrVal -> VAR .)
    TRUE            reduce using rule 11 (varOrVal -> VAR .)
    VAL             reduce using rule 11 (varOrVal -> VAR .)
    VAR             reduce using rule 11 (varOrVal -> VAR .)
    WHEN            reduce using rule 11 (varOrVal -> VAR .)
    LONG            reduce using rule 11 (varOrVal -> VAR .)
    ARRAY           reduce using rule 11 (varOrVal -> VAR .)
    ATRIBUICAO      reduce using rule 289 (simpleIdentifier -> VAR .)
    INCREMENTO      reduce using rule 289 (simpleIdentifier -> VAR .)
    DECREMENTO      reduce using rule 289 (simpleIdentifier -> VAR .)
    LCCT            reduce using rule 289 (simpleIdentifier -> VAR .)
    COLONCOLON      reduce using rule 289 (simpleIdentifier -> VAR .)
    PONTO           reduce using rule 289 (simpleIdentifier -> VAR .)
    RCHAVE          reduce using rule 289 (simpleIdentifier -> VAR .)
    AS              reduce using rule 289 (simpleIdentifier -> VAR .)
    MAISIGUAL       reduce using rule 289 (simpleIdentifier -> VAR .)
    MENOSIGUAL      reduce using rule 289 (simpleIdentifier -> VAR .)
    MULTIGUAL       reduce using rule 289 (simpleIdentifier -> VAR .)
    DIVIGUAL        reduce using rule 289 (simpleIdentifier -> VAR .)
    MODIGUAL        reduce using rule 289 (simpleIdentifier -> VAR .)
    MULT            reduce using rule 289 (simpleIdentifier -> VAR .)
    DIVIDE          reduce using rule 289 (simpleIdentifier -> VAR .)
    MOD             reduce using rule 289 (simpleIdentifier -> VAR .)
    PLUS            reduce using rule 289 (simpleIdentifier -> VAR .)
    MINUS           reduce using rule 289 (simpleIdentifier -> VAR .)
    PONTOPONTO      reduce using rule 289 (simpleIdentifier -> VAR .)
    ELVIS           reduce using rule 289 (simpleIdentifier -> VAR .)
    IN              reduce using rule 289 (simpleIdentifier -> VAR .)
    NOT_IN          reduce using rule 289 (simpleIdentifier -> VAR .)
    IS              reduce using rule 289 (simpleIdentifier -> VAR .)
    NOT_IS          reduce using rule 289 (simpleIdentifier -> VAR .)
    MAIOR           reduce using rule 289 (simpleIdentifier -> VAR .)
    MENORIGUAL      reduce using rule 289 (simpleIdentifier -> VAR .)
    MAIORIGUAL      reduce using rule 289 (simpleIdentifier -> VAR .)
    DIFERENTE       reduce using rule 289 (simpleIdentifier -> VAR .)
    IDENTIDADE      reduce using rule 289 (simpleIdentifier -> VAR .)
    IGUALDADE       reduce using rule 289 (simpleIdentifier -> VAR .)
    SEMIDENTIDADE   reduce using rule 289 (simpleIdentifier -> VAR .)
    AND             reduce using rule 289 (simpleIdentifier -> VAR .)
    OR              reduce using rule 289 (simpleIdentifier -> VAR .)
    FUN             reduce using rule 289 (simpleIdentifier -> VAR .)
    FOR             reduce using rule 289 (simpleIdentifier -> VAR .)
    WHILE           reduce using rule 289 (simpleIdentifier -> VAR .)
    DO              reduce using rule 289 (simpleIdentifier -> VAR .)
    LITERAL_STRING  reduce using rule 289 (simpleIdentifier -> VAR .)
    IF              reduce using rule 289 (simpleIdentifier -> VAR .)
    RETURN          reduce using rule 289 (simpleIdentifier -> VAR .)
    RETURN_AT       reduce using rule 289 (simpleIdentifier -> VAR .)
    CONTINUE        reduce using rule 289 (simpleIdentifier -> VAR .)
    CONTINUE_AT     reduce using rule 289 (simpleIdentifier -> VAR .)
    BREAK           reduce using rule 289 (simpleIdentifier -> VAR .)
    BREAK_AT        reduce using rule 289 (simpleIdentifier -> VAR .)
    NOT             reduce using rule 289 (simpleIdentifier -> VAR .)
    SUSPEND         reduce using rule 289 (simpleIdentifier -> VAR .)
    DOISP           reduce using rule 289 (simpleIdentifier -> VAR .)
    COMMA           reduce using rule 289 (simpleIdentifier -> VAR .)
    SETA            reduce using rule 289 (simpleIdentifier -> VAR .)
    LCHAVE          reduce using rule 289 (simpleIdentifier -> VAR .)
    RPAREN          reduce using rule 289 (simpleIdentifier -> VAR .)
    RCCT            reduce using rule 289 (simpleIdentifier -> VAR .)
    PV              reduce using rule 289 (simpleIdentifier -> VAR .)
    ELSE            reduce using rule 289 (simpleIdentifier -> VAR .)

  ! MENOR           [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! LPAREN          [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! ID              [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! CROSSINLINE     [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! IMPORT          [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! INIT            [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! NOINLINE        [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! OUT             [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! VARARG          [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! WHERE           [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! OBJECT          [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! CONST           [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! CONSTRUCTOR     [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! EOF             [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! FALSE           [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! FUNCTION        [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! NULL            [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! NULLABLE        [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! NUMBER          [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! OPERATOR        [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! SMARTCAST       [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! THIS            [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! TRUE            [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! VAL             [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! VAR             [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! WHEN            [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! LONG            [ reduce using rule 289 (simpleIdentifier -> VAR .) ]
  ! ARRAY           [ reduce using rule 289 (simpleIdentifier -> VAR .) ]


state 82

    (12) varOrVal -> VAL .
    (288) simpleIdentifier -> VAL .

  ! reduce/reduce conflict for MENOR resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for LPAREN resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for ID resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for IMPORT resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for INIT resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for OUT resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for VARARG resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for WHERE resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for OBJECT resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for CONST resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for EOF resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for FALSE resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for NULL resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for NUMBER resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for THIS resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for TRUE resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for VAL resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for VAR resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for WHEN resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for LONG resolved using rule 12 (varOrVal -> VAL .)
  ! reduce/reduce conflict for ARRAY resolved using rule 12 (varOrVal -> VAL .)
    MENOR           reduce using rule 12 (varOrVal -> VAL .)
    LPAREN          reduce using rule 12 (varOrVal -> VAL .)
    ID              reduce using rule 12 (varOrVal -> VAL .)
    CROSSINLINE     reduce using rule 12 (varOrVal -> VAL .)
    IMPORT          reduce using rule 12 (varOrVal -> VAL .)
    INIT            reduce using rule 12 (varOrVal -> VAL .)
    NOINLINE        reduce using rule 12 (varOrVal -> VAL .)
    OUT             reduce using rule 12 (varOrVal -> VAL .)
    VARARG          reduce using rule 12 (varOrVal -> VAL .)
    WHERE           reduce using rule 12 (varOrVal -> VAL .)
    OBJECT          reduce using rule 12 (varOrVal -> VAL .)
    CONST           reduce using rule 12 (varOrVal -> VAL .)
    CONSTRUCTOR     reduce using rule 12 (varOrVal -> VAL .)
    EOF             reduce using rule 12 (varOrVal -> VAL .)
    FALSE           reduce using rule 12 (varOrVal -> VAL .)
    FUNCTION        reduce using rule 12 (varOrVal -> VAL .)
    NULL            reduce using rule 12 (varOrVal -> VAL .)
    NULLABLE        reduce using rule 12 (varOrVal -> VAL .)
    NUMBER          reduce using rule 12 (varOrVal -> VAL .)
    OPERATOR        reduce using rule 12 (varOrVal -> VAL .)
    SMARTCAST       reduce using rule 12 (varOrVal -> VAL .)
    THIS            reduce using rule 12 (varOrVal -> VAL .)
    TRUE            reduce using rule 12 (varOrVal -> VAL .)
    VAL             reduce using rule 12 (varOrVal -> VAL .)
    VAR             reduce using rule 12 (varOrVal -> VAL .)
    WHEN            reduce using rule 12 (varOrVal -> VAL .)
    LONG            reduce using rule 12 (varOrVal -> VAL .)
    ARRAY           reduce using rule 12 (varOrVal -> VAL .)
    ATRIBUICAO      reduce using rule 288 (simpleIdentifier -> VAL .)
    INCREMENTO      reduce using rule 288 (simpleIdentifier -> VAL .)
    DECREMENTO      reduce using rule 288 (simpleIdentifier -> VAL .)
    LCCT            reduce using rule 288 (simpleIdentifier -> VAL .)
    COLONCOLON      reduce using rule 288 (simpleIdentifier -> VAL .)
    PONTO           reduce using rule 288 (simpleIdentifier -> VAL .)
    RCHAVE          reduce using rule 288 (simpleIdentifier -> VAL .)
    AS              reduce using rule 288 (simpleIdentifier -> VAL .)
    MAISIGUAL       reduce using rule 288 (simpleIdentifier -> VAL .)
    MENOSIGUAL      reduce using rule 288 (simpleIdentifier -> VAL .)
    MULTIGUAL       reduce using rule 288 (simpleIdentifier -> VAL .)
    DIVIGUAL        reduce using rule 288 (simpleIdentifier -> VAL .)
    MODIGUAL        reduce using rule 288 (simpleIdentifier -> VAL .)
    MULT            reduce using rule 288 (simpleIdentifier -> VAL .)
    DIVIDE          reduce using rule 288 (simpleIdentifier -> VAL .)
    MOD             reduce using rule 288 (simpleIdentifier -> VAL .)
    PLUS            reduce using rule 288 (simpleIdentifier -> VAL .)
    MINUS           reduce using rule 288 (simpleIdentifier -> VAL .)
    PONTOPONTO      reduce using rule 288 (simpleIdentifier -> VAL .)
    ELVIS           reduce using rule 288 (simpleIdentifier -> VAL .)
    IN              reduce using rule 288 (simpleIdentifier -> VAL .)
    NOT_IN          reduce using rule 288 (simpleIdentifier -> VAL .)
    IS              reduce using rule 288 (simpleIdentifier -> VAL .)
    NOT_IS          reduce using rule 288 (simpleIdentifier -> VAL .)
    MAIOR           reduce using rule 288 (simpleIdentifier -> VAL .)
    MENORIGUAL      reduce using rule 288 (simpleIdentifier -> VAL .)
    MAIORIGUAL      reduce using rule 288 (simpleIdentifier -> VAL .)
    DIFERENTE       reduce using rule 288 (simpleIdentifier -> VAL .)
    IDENTIDADE      reduce using rule 288 (simpleIdentifier -> VAL .)
    IGUALDADE       reduce using rule 288 (simpleIdentifier -> VAL .)
    SEMIDENTIDADE   reduce using rule 288 (simpleIdentifier -> VAL .)
    AND             reduce using rule 288 (simpleIdentifier -> VAL .)
    OR              reduce using rule 288 (simpleIdentifier -> VAL .)
    FUN             reduce using rule 288 (simpleIdentifier -> VAL .)
    FOR             reduce using rule 288 (simpleIdentifier -> VAL .)
    WHILE           reduce using rule 288 (simpleIdentifier -> VAL .)
    DO              reduce using rule 288 (simpleIdentifier -> VAL .)
    LITERAL_STRING  reduce using rule 288 (simpleIdentifier -> VAL .)
    IF              reduce using rule 288 (simpleIdentifier -> VAL .)
    RETURN          reduce using rule 288 (simpleIdentifier -> VAL .)
    RETURN_AT       reduce using rule 288 (simpleIdentifier -> VAL .)
    CONTINUE        reduce using rule 288 (simpleIdentifier -> VAL .)
    CONTINUE_AT     reduce using rule 288 (simpleIdentifier -> VAL .)
    BREAK           reduce using rule 288 (simpleIdentifier -> VAL .)
    BREAK_AT        reduce using rule 288 (simpleIdentifier -> VAL .)
    NOT             reduce using rule 288 (simpleIdentifier -> VAL .)
    SUSPEND         reduce using rule 288 (simpleIdentifier -> VAL .)
    DOISP           reduce using rule 288 (simpleIdentifier -> VAL .)
    COMMA           reduce using rule 288 (simpleIdentifier -> VAL .)
    SETA            reduce using rule 288 (simpleIdentifier -> VAL .)
    LCHAVE          reduce using rule 288 (simpleIdentifier -> VAL .)
    RPAREN          reduce using rule 288 (simpleIdentifier -> VAL .)
    RCCT            reduce using rule 288 (simpleIdentifier -> VAL .)
    PV              reduce using rule 288 (simpleIdentifier -> VAL .)
    ELSE            reduce using rule 288 (simpleIdentifier -> VAL .)

  ! MENOR           [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! LPAREN          [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! ID              [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! CROSSINLINE     [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! IMPORT          [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! INIT            [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! NOINLINE        [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! OUT             [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! VARARG          [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! WHERE           [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! OBJECT          [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! CONST           [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! CONSTRUCTOR     [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! EOF             [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! FALSE           [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! FUNCTION        [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! NULL            [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! NULLABLE        [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! NUMBER          [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! OPERATOR        [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! SMARTCAST       [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! THIS            [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! TRUE            [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! VAL             [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! VAR             [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! WHEN            [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! LONG            [ reduce using rule 288 (simpleIdentifier -> VAL .) ]
  ! ARRAY           [ reduce using rule 288 (simpleIdentifier -> VAL .) ]


state 83

    (131) postfixUnaryExpression -> primaryExpression .
    (132) postfixUnaryExpression -> primaryExpression . postfixUnaryExpressionRecursive
    (129) postfixUnaryExpressionRecursive -> . postfixUnarySuffix
    (130) postfixUnaryExpressionRecursive -> . postfixUnarySuffix postfixUnaryExpressionRecursive
    (133) postfixUnarySuffix -> . postfixUnaryOperator
    (134) postfixUnarySuffix -> . typeArguments
    (135) postfixUnarySuffix -> . callSuffix
    (136) postfixUnarySuffix -> . indexingSuffix
    (137) postfixUnarySuffix -> . navigationSuffix
    (262) postfixUnaryOperator -> . INCREMENTO
    (263) postfixUnaryOperator -> . DECREMENTO
    (161) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (162) typeArguments -> . MENOR MAIOR
    (154) callSuffix -> . optionalTypeArguments optionalValueArguments annotatedLambda
    (155) callSuffix -> . optionalTypeArguments optionalValueArguments
    (148) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (149) indexingSuffix -> . LCCT RCCT
    (152) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (153) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (156) optionalTypeArguments -> . typeArguments
    (157) optionalTypeArguments -> .
    (264) memberAccessOperator -> . safeNav
    (265) memberAccessOperator -> . COLONCOLON
    (266) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for AS resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ID resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IN resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IS resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for AND resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OR resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for FUN resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DO resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IF resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PV resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 131 (postfixUnaryExpression -> primaryExpression .)
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    LPAREN          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    RCHAVE          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    AS              reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    MAISIGUAL       reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    MENOSIGUAL      reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    MULTIGUAL       reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    DIVIGUAL        reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    MODIGUAL        reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    MULT            reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    DIVIDE          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    MOD             reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    PLUS            reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    MINUS           reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    PONTOPONTO      reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    ID              reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    CROSSINLINE     reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    IMPORT          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    INIT            reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    NOINLINE        reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    OUT             reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    VARARG          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    WHERE           reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    OBJECT          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    CONST           reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    CONSTRUCTOR     reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    EOF             reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    FALSE           reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    FUNCTION        reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    NULL            reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    NULLABLE        reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    NUMBER          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    OPERATOR        reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    SMARTCAST       reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    THIS            reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    TRUE            reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    VAL             reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    VAR             reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    WHEN            reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    LONG            reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    ARRAY           reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    ELVIS           reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    IN              reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    NOT_IN          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    IS              reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    NOT_IS          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    MAIOR           reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    MENORIGUAL      reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    MAIORIGUAL      reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    DIFERENTE       reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    IDENTIDADE      reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    IGUALDADE       reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    SEMIDENTIDADE   reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    AND             reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    OR              reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    FUN             reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    FOR             reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    WHILE           reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    DO              reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    LITERAL_STRING  reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    IF              reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    RETURN          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    RETURN_AT       reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE        reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE_AT     reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    BREAK           reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    BREAK_AT        reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    NOT             reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    SUSPEND         reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    COMMA           reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    RPAREN          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    LCHAVE          reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    RCCT            reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    PV              reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    ELSE            reduce using rule 131 (postfixUnaryExpression -> primaryExpression .)
    INCREMENTO      shift and go to state 192
    DECREMENTO      shift and go to state 193
    MENOR           shift and go to state 167
    LCCT            shift and go to state 168
    COLONCOLON      shift and go to state 171
    PONTO           shift and go to state 172

  ! INCREMENTO      [ reduce using rule 131 (postfixUnaryExpression -> primaryExpression .) ]
  ! DECREMENTO      [ reduce using rule 131 (postfixUnaryExpression -> primaryExpression .) ]
  ! MENOR           [ reduce using rule 131 (postfixUnaryExpression -> primaryExpression .) ]
  ! LCCT            [ reduce using rule 131 (postfixUnaryExpression -> primaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 131 (postfixUnaryExpression -> primaryExpression .) ]
  ! PONTO           [ reduce using rule 131 (postfixUnaryExpression -> primaryExpression .) ]
  ! LPAREN          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! RCHAVE          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! INCREMENTO      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! DECREMENTO      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MENOR           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! LCCT            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! COLONCOLON      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! PONTO           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! AS              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MAISIGUAL       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MENOSIGUAL      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MULTIGUAL       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! DIVIGUAL        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MODIGUAL        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MULT            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! DIVIDE          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MOD             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! PLUS            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MINUS           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! PONTOPONTO      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! ID              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! CROSSINLINE     [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IMPORT          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! INIT            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NOINLINE        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! OUT             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! VARARG          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! WHERE           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! OBJECT          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! CONST           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! EOF             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! FALSE           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! FUNCTION        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NULL            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NULLABLE        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NUMBER          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! OPERATOR        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! SMARTCAST       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! THIS            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! TRUE            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! VAL             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! VAR             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! WHEN            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! LONG            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! ARRAY           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! ELVIS           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IN              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NOT_IN          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IS              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NOT_IS          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MAIOR           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MENORIGUAL      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MAIORIGUAL      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! DIFERENTE       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IDENTIDADE      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IGUALDADE       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! AND             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! OR              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! FUN             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! FOR             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! WHILE           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! DO              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! LITERAL_STRING  [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IF              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! RETURN          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! RETURN_AT       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! CONTINUE        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! CONTINUE_AT     [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! BREAK           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! BREAK_AT        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NOT             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! SUSPEND         [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! COMMA           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! RPAREN          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! LCHAVE          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! RCCT            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! PV              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! ELSE            [ reduce using rule 157 (optionalTypeArguments -> .) ]

    postfixUnaryExpressionRecursive shift and go to state 185
    postfixUnarySuffix             shift and go to state 186
    postfixUnaryOperator           shift and go to state 187
    typeArguments                  shift and go to state 188
    callSuffix                     shift and go to state 189
    indexingSuffix                 shift and go to state 190
    navigationSuffix               shift and go to state 191
    optionalTypeArguments          shift and go to state 194
    memberAccessOperator           shift and go to state 169
    safeNav                        shift and go to state 170

state 84

    (122) prefixUnaryExpression -> prefixUnaryExpressionRecursive . postfixUnaryExpression
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (47) typeModifier -> . SUSPEND
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT

    LITERAL_STRING  shift and go to state 87
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114

    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 195
    primaryExpression              shift and go to state 83
    parenthesizedExpression        shift and go to state 86
    simpleIdentifier               shift and go to state 134
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    disjunction                    shift and go to state 70
    typeModifier                   shift and go to state 116
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    unaryPrefix                    shift and go to state 93
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107

state 85

    (96) conjunction -> equality .
    (97) conjunction -> equality . AND conjunction

  ! shift/reduce conflict for AND resolved as shift
    INCREMENTO      reduce using rule 96 (conjunction -> equality .)
    DECREMENTO      reduce using rule 96 (conjunction -> equality .)
    MENOR           reduce using rule 96 (conjunction -> equality .)
    LCCT            reduce using rule 96 (conjunction -> equality .)
    COLONCOLON      reduce using rule 96 (conjunction -> equality .)
    PONTO           reduce using rule 96 (conjunction -> equality .)
    LPAREN          reduce using rule 96 (conjunction -> equality .)
    RCHAVE          reduce using rule 96 (conjunction -> equality .)
    AS              reduce using rule 96 (conjunction -> equality .)
    MAISIGUAL       reduce using rule 96 (conjunction -> equality .)
    MENOSIGUAL      reduce using rule 96 (conjunction -> equality .)
    MULTIGUAL       reduce using rule 96 (conjunction -> equality .)
    DIVIGUAL        reduce using rule 96 (conjunction -> equality .)
    MODIGUAL        reduce using rule 96 (conjunction -> equality .)
    MULT            reduce using rule 96 (conjunction -> equality .)
    DIVIDE          reduce using rule 96 (conjunction -> equality .)
    MOD             reduce using rule 96 (conjunction -> equality .)
    PLUS            reduce using rule 96 (conjunction -> equality .)
    MINUS           reduce using rule 96 (conjunction -> equality .)
    PONTOPONTO      reduce using rule 96 (conjunction -> equality .)
    ID              reduce using rule 96 (conjunction -> equality .)
    CROSSINLINE     reduce using rule 96 (conjunction -> equality .)
    IMPORT          reduce using rule 96 (conjunction -> equality .)
    INIT            reduce using rule 96 (conjunction -> equality .)
    NOINLINE        reduce using rule 96 (conjunction -> equality .)
    OUT             reduce using rule 96 (conjunction -> equality .)
    VARARG          reduce using rule 96 (conjunction -> equality .)
    WHERE           reduce using rule 96 (conjunction -> equality .)
    OBJECT          reduce using rule 96 (conjunction -> equality .)
    CONST           reduce using rule 96 (conjunction -> equality .)
    CONSTRUCTOR     reduce using rule 96 (conjunction -> equality .)
    EOF             reduce using rule 96 (conjunction -> equality .)
    FALSE           reduce using rule 96 (conjunction -> equality .)
    FUNCTION        reduce using rule 96 (conjunction -> equality .)
    NULL            reduce using rule 96 (conjunction -> equality .)
    NULLABLE        reduce using rule 96 (conjunction -> equality .)
    NUMBER          reduce using rule 96 (conjunction -> equality .)
    OPERATOR        reduce using rule 96 (conjunction -> equality .)
    SMARTCAST       reduce using rule 96 (conjunction -> equality .)
    THIS            reduce using rule 96 (conjunction -> equality .)
    TRUE            reduce using rule 96 (conjunction -> equality .)
    VAL             reduce using rule 96 (conjunction -> equality .)
    VAR             reduce using rule 96 (conjunction -> equality .)
    WHEN            reduce using rule 96 (conjunction -> equality .)
    LONG            reduce using rule 96 (conjunction -> equality .)
    ARRAY           reduce using rule 96 (conjunction -> equality .)
    ELVIS           reduce using rule 96 (conjunction -> equality .)
    IN              reduce using rule 96 (conjunction -> equality .)
    NOT_IN          reduce using rule 96 (conjunction -> equality .)
    IS              reduce using rule 96 (conjunction -> equality .)
    NOT_IS          reduce using rule 96 (conjunction -> equality .)
    MAIOR           reduce using rule 96 (conjunction -> equality .)
    MENORIGUAL      reduce using rule 96 (conjunction -> equality .)
    MAIORIGUAL      reduce using rule 96 (conjunction -> equality .)
    DIFERENTE       reduce using rule 96 (conjunction -> equality .)
    IDENTIDADE      reduce using rule 96 (conjunction -> equality .)
    IGUALDADE       reduce using rule 96 (conjunction -> equality .)
    SEMIDENTIDADE   reduce using rule 96 (conjunction -> equality .)
    OR              reduce using rule 96 (conjunction -> equality .)
    FUN             reduce using rule 96 (conjunction -> equality .)
    FOR             reduce using rule 96 (conjunction -> equality .)
    WHILE           reduce using rule 96 (conjunction -> equality .)
    DO              reduce using rule 96 (conjunction -> equality .)
    LITERAL_STRING  reduce using rule 96 (conjunction -> equality .)
    IF              reduce using rule 96 (conjunction -> equality .)
    RETURN          reduce using rule 96 (conjunction -> equality .)
    RETURN_AT       reduce using rule 96 (conjunction -> equality .)
    CONTINUE        reduce using rule 96 (conjunction -> equality .)
    CONTINUE_AT     reduce using rule 96 (conjunction -> equality .)
    BREAK           reduce using rule 96 (conjunction -> equality .)
    BREAK_AT        reduce using rule 96 (conjunction -> equality .)
    NOT             reduce using rule 96 (conjunction -> equality .)
    SUSPEND         reduce using rule 96 (conjunction -> equality .)
    COMMA           reduce using rule 96 (conjunction -> equality .)
    RPAREN          reduce using rule 96 (conjunction -> equality .)
    LCHAVE          reduce using rule 96 (conjunction -> equality .)
    RCCT            reduce using rule 96 (conjunction -> equality .)
    PV              reduce using rule 96 (conjunction -> equality .)
    ELSE            reduce using rule 96 (conjunction -> equality .)
    AND             shift and go to state 197

  ! AND             [ reduce using rule 96 (conjunction -> equality .) ]


state 86

    (172) primaryExpression -> parenthesizedExpression .

    INCREMENTO      reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    DECREMENTO      reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MENOR           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    LCCT            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    COLONCOLON      reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    PONTO           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    LPAREN          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    RCHAVE          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    AS              reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MAISIGUAL       reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MENOSIGUAL      reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MULTIGUAL       reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    DIVIGUAL        reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MODIGUAL        reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MULT            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    DIVIDE          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MOD             reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    PLUS            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MINUS           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    PONTOPONTO      reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    ID              reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    CROSSINLINE     reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    IMPORT          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    INIT            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    NOINLINE        reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    OUT             reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    VARARG          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    WHERE           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    OBJECT          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    CONST           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    CONSTRUCTOR     reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    EOF             reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    FALSE           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    FUNCTION        reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    NULL            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    NULLABLE        reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    NUMBER          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    OPERATOR        reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    SMARTCAST       reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    THIS            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    TRUE            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    VAL             reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    VAR             reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    WHEN            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    LONG            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    ARRAY           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    ELVIS           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    IN              reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    NOT_IN          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    IS              reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    NOT_IS          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MAIOR           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MENORIGUAL      reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    MAIORIGUAL      reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    DIFERENTE       reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    IDENTIDADE      reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    IGUALDADE       reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    SEMIDENTIDADE   reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    AND             reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    OR              reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    FUN             reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    FOR             reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    WHILE           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    DO              reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    LITERAL_STRING  reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    IF              reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    RETURN          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    RETURN_AT       reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    CONTINUE        reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    CONTINUE_AT     reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    BREAK           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    BREAK_AT        reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    NOT             reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    SUSPEND         reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    COMMA           reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    RPAREN          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    LCHAVE          reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    RCCT            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    PV              reduce using rule 172 (primaryExpression -> parenthesizedExpression .)
    ELSE            reduce using rule 172 (primaryExpression -> parenthesizedExpression .)


state 87

    (174) primaryExpression -> LITERAL_STRING .

    INCREMENTO      reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    DECREMENTO      reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MENOR           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    LCCT            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    COLONCOLON      reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    PONTO           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    LPAREN          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    RCHAVE          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    AS              reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MAISIGUAL       reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MENOSIGUAL      reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MULTIGUAL       reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    DIVIGUAL        reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MODIGUAL        reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MULT            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    DIVIDE          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MOD             reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    PLUS            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MINUS           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    PONTOPONTO      reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    ID              reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    CROSSINLINE     reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    IMPORT          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    INIT            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    NOINLINE        reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    OUT             reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    VARARG          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    WHERE           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    OBJECT          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    CONST           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    CONSTRUCTOR     reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    EOF             reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    FALSE           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    FUNCTION        reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    NULL            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    NULLABLE        reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    NUMBER          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    OPERATOR        reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    SMARTCAST       reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    THIS            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    TRUE            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    VAL             reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    VAR             reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    WHEN            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    LONG            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    ARRAY           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    ELVIS           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    IN              reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    NOT_IN          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    IS              reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    NOT_IS          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MAIOR           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MENORIGUAL      reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    MAIORIGUAL      reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    DIFERENTE       reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    IDENTIDADE      reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    IGUALDADE       reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    SEMIDENTIDADE   reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    AND             reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    OR              reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    FUN             reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    FOR             reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    WHILE           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    DO              reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    LITERAL_STRING  reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    IF              reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    RETURN          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    RETURN_AT       reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    CONTINUE        reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    CONTINUE_AT     reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    BREAK           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    BREAK_AT        reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    NOT             reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    SUSPEND         reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    COMMA           reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    RPAREN          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    LCHAVE          reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    RCCT            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    PV              reduce using rule 174 (primaryExpression -> LITERAL_STRING .)
    ELSE            reduce using rule 174 (primaryExpression -> LITERAL_STRING .)


state 88

    (175) primaryExpression -> callableReference .

    INCREMENTO      reduce using rule 175 (primaryExpression -> callableReference .)
    DECREMENTO      reduce using rule 175 (primaryExpression -> callableReference .)
    MENOR           reduce using rule 175 (primaryExpression -> callableReference .)
    LCCT            reduce using rule 175 (primaryExpression -> callableReference .)
    COLONCOLON      reduce using rule 175 (primaryExpression -> callableReference .)
    PONTO           reduce using rule 175 (primaryExpression -> callableReference .)
    LPAREN          reduce using rule 175 (primaryExpression -> callableReference .)
    RCHAVE          reduce using rule 175 (primaryExpression -> callableReference .)
    AS              reduce using rule 175 (primaryExpression -> callableReference .)
    MAISIGUAL       reduce using rule 175 (primaryExpression -> callableReference .)
    MENOSIGUAL      reduce using rule 175 (primaryExpression -> callableReference .)
    MULTIGUAL       reduce using rule 175 (primaryExpression -> callableReference .)
    DIVIGUAL        reduce using rule 175 (primaryExpression -> callableReference .)
    MODIGUAL        reduce using rule 175 (primaryExpression -> callableReference .)
    MULT            reduce using rule 175 (primaryExpression -> callableReference .)
    DIVIDE          reduce using rule 175 (primaryExpression -> callableReference .)
    MOD             reduce using rule 175 (primaryExpression -> callableReference .)
    PLUS            reduce using rule 175 (primaryExpression -> callableReference .)
    MINUS           reduce using rule 175 (primaryExpression -> callableReference .)
    PONTOPONTO      reduce using rule 175 (primaryExpression -> callableReference .)
    ID              reduce using rule 175 (primaryExpression -> callableReference .)
    CROSSINLINE     reduce using rule 175 (primaryExpression -> callableReference .)
    IMPORT          reduce using rule 175 (primaryExpression -> callableReference .)
    INIT            reduce using rule 175 (primaryExpression -> callableReference .)
    NOINLINE        reduce using rule 175 (primaryExpression -> callableReference .)
    OUT             reduce using rule 175 (primaryExpression -> callableReference .)
    VARARG          reduce using rule 175 (primaryExpression -> callableReference .)
    WHERE           reduce using rule 175 (primaryExpression -> callableReference .)
    OBJECT          reduce using rule 175 (primaryExpression -> callableReference .)
    CONST           reduce using rule 175 (primaryExpression -> callableReference .)
    CONSTRUCTOR     reduce using rule 175 (primaryExpression -> callableReference .)
    EOF             reduce using rule 175 (primaryExpression -> callableReference .)
    FALSE           reduce using rule 175 (primaryExpression -> callableReference .)
    FUNCTION        reduce using rule 175 (primaryExpression -> callableReference .)
    NULL            reduce using rule 175 (primaryExpression -> callableReference .)
    NULLABLE        reduce using rule 175 (primaryExpression -> callableReference .)
    NUMBER          reduce using rule 175 (primaryExpression -> callableReference .)
    OPERATOR        reduce using rule 175 (primaryExpression -> callableReference .)
    SMARTCAST       reduce using rule 175 (primaryExpression -> callableReference .)
    THIS            reduce using rule 175 (primaryExpression -> callableReference .)
    TRUE            reduce using rule 175 (primaryExpression -> callableReference .)
    VAL             reduce using rule 175 (primaryExpression -> callableReference .)
    VAR             reduce using rule 175 (primaryExpression -> callableReference .)
    WHEN            reduce using rule 175 (primaryExpression -> callableReference .)
    LONG            reduce using rule 175 (primaryExpression -> callableReference .)
    ARRAY           reduce using rule 175 (primaryExpression -> callableReference .)
    ELVIS           reduce using rule 175 (primaryExpression -> callableReference .)
    IN              reduce using rule 175 (primaryExpression -> callableReference .)
    NOT_IN          reduce using rule 175 (primaryExpression -> callableReference .)
    IS              reduce using rule 175 (primaryExpression -> callableReference .)
    NOT_IS          reduce using rule 175 (primaryExpression -> callableReference .)
    MAIOR           reduce using rule 175 (primaryExpression -> callableReference .)
    MENORIGUAL      reduce using rule 175 (primaryExpression -> callableReference .)
    MAIORIGUAL      reduce using rule 175 (primaryExpression -> callableReference .)
    DIFERENTE       reduce using rule 175 (primaryExpression -> callableReference .)
    IDENTIDADE      reduce using rule 175 (primaryExpression -> callableReference .)
    IGUALDADE       reduce using rule 175 (primaryExpression -> callableReference .)
    SEMIDENTIDADE   reduce using rule 175 (primaryExpression -> callableReference .)
    AND             reduce using rule 175 (primaryExpression -> callableReference .)
    OR              reduce using rule 175 (primaryExpression -> callableReference .)
    FUN             reduce using rule 175 (primaryExpression -> callableReference .)
    FOR             reduce using rule 175 (primaryExpression -> callableReference .)
    WHILE           reduce using rule 175 (primaryExpression -> callableReference .)
    DO              reduce using rule 175 (primaryExpression -> callableReference .)
    LITERAL_STRING  reduce using rule 175 (primaryExpression -> callableReference .)
    IF              reduce using rule 175 (primaryExpression -> callableReference .)
    RETURN          reduce using rule 175 (primaryExpression -> callableReference .)
    RETURN_AT       reduce using rule 175 (primaryExpression -> callableReference .)
    CONTINUE        reduce using rule 175 (primaryExpression -> callableReference .)
    CONTINUE_AT     reduce using rule 175 (primaryExpression -> callableReference .)
    BREAK           reduce using rule 175 (primaryExpression -> callableReference .)
    BREAK_AT        reduce using rule 175 (primaryExpression -> callableReference .)
    NOT             reduce using rule 175 (primaryExpression -> callableReference .)
    SUSPEND         reduce using rule 175 (primaryExpression -> callableReference .)
    COMMA           reduce using rule 175 (primaryExpression -> callableReference .)
    RPAREN          reduce using rule 175 (primaryExpression -> callableReference .)
    LCHAVE          reduce using rule 175 (primaryExpression -> callableReference .)
    RCCT            reduce using rule 175 (primaryExpression -> callableReference .)
    PV              reduce using rule 175 (primaryExpression -> callableReference .)
    ELSE            reduce using rule 175 (primaryExpression -> callableReference .)


state 89

    (176) primaryExpression -> functionLiteral .

    INCREMENTO      reduce using rule 176 (primaryExpression -> functionLiteral .)
    DECREMENTO      reduce using rule 176 (primaryExpression -> functionLiteral .)
    MENOR           reduce using rule 176 (primaryExpression -> functionLiteral .)
    LCCT            reduce using rule 176 (primaryExpression -> functionLiteral .)
    COLONCOLON      reduce using rule 176 (primaryExpression -> functionLiteral .)
    PONTO           reduce using rule 176 (primaryExpression -> functionLiteral .)
    LPAREN          reduce using rule 176 (primaryExpression -> functionLiteral .)
    RCHAVE          reduce using rule 176 (primaryExpression -> functionLiteral .)
    AS              reduce using rule 176 (primaryExpression -> functionLiteral .)
    MAISIGUAL       reduce using rule 176 (primaryExpression -> functionLiteral .)
    MENOSIGUAL      reduce using rule 176 (primaryExpression -> functionLiteral .)
    MULTIGUAL       reduce using rule 176 (primaryExpression -> functionLiteral .)
    DIVIGUAL        reduce using rule 176 (primaryExpression -> functionLiteral .)
    MODIGUAL        reduce using rule 176 (primaryExpression -> functionLiteral .)
    MULT            reduce using rule 176 (primaryExpression -> functionLiteral .)
    DIVIDE          reduce using rule 176 (primaryExpression -> functionLiteral .)
    MOD             reduce using rule 176 (primaryExpression -> functionLiteral .)
    PLUS            reduce using rule 176 (primaryExpression -> functionLiteral .)
    MINUS           reduce using rule 176 (primaryExpression -> functionLiteral .)
    PONTOPONTO      reduce using rule 176 (primaryExpression -> functionLiteral .)
    ID              reduce using rule 176 (primaryExpression -> functionLiteral .)
    CROSSINLINE     reduce using rule 176 (primaryExpression -> functionLiteral .)
    IMPORT          reduce using rule 176 (primaryExpression -> functionLiteral .)
    INIT            reduce using rule 176 (primaryExpression -> functionLiteral .)
    NOINLINE        reduce using rule 176 (primaryExpression -> functionLiteral .)
    OUT             reduce using rule 176 (primaryExpression -> functionLiteral .)
    VARARG          reduce using rule 176 (primaryExpression -> functionLiteral .)
    WHERE           reduce using rule 176 (primaryExpression -> functionLiteral .)
    OBJECT          reduce using rule 176 (primaryExpression -> functionLiteral .)
    CONST           reduce using rule 176 (primaryExpression -> functionLiteral .)
    CONSTRUCTOR     reduce using rule 176 (primaryExpression -> functionLiteral .)
    EOF             reduce using rule 176 (primaryExpression -> functionLiteral .)
    FALSE           reduce using rule 176 (primaryExpression -> functionLiteral .)
    FUNCTION        reduce using rule 176 (primaryExpression -> functionLiteral .)
    NULL            reduce using rule 176 (primaryExpression -> functionLiteral .)
    NULLABLE        reduce using rule 176 (primaryExpression -> functionLiteral .)
    NUMBER          reduce using rule 176 (primaryExpression -> functionLiteral .)
    OPERATOR        reduce using rule 176 (primaryExpression -> functionLiteral .)
    SMARTCAST       reduce using rule 176 (primaryExpression -> functionLiteral .)
    THIS            reduce using rule 176 (primaryExpression -> functionLiteral .)
    TRUE            reduce using rule 176 (primaryExpression -> functionLiteral .)
    VAL             reduce using rule 176 (primaryExpression -> functionLiteral .)
    VAR             reduce using rule 176 (primaryExpression -> functionLiteral .)
    WHEN            reduce using rule 176 (primaryExpression -> functionLiteral .)
    LONG            reduce using rule 176 (primaryExpression -> functionLiteral .)
    ARRAY           reduce using rule 176 (primaryExpression -> functionLiteral .)
    ELVIS           reduce using rule 176 (primaryExpression -> functionLiteral .)
    IN              reduce using rule 176 (primaryExpression -> functionLiteral .)
    NOT_IN          reduce using rule 176 (primaryExpression -> functionLiteral .)
    IS              reduce using rule 176 (primaryExpression -> functionLiteral .)
    NOT_IS          reduce using rule 176 (primaryExpression -> functionLiteral .)
    MAIOR           reduce using rule 176 (primaryExpression -> functionLiteral .)
    MENORIGUAL      reduce using rule 176 (primaryExpression -> functionLiteral .)
    MAIORIGUAL      reduce using rule 176 (primaryExpression -> functionLiteral .)
    DIFERENTE       reduce using rule 176 (primaryExpression -> functionLiteral .)
    IDENTIDADE      reduce using rule 176 (primaryExpression -> functionLiteral .)
    IGUALDADE       reduce using rule 176 (primaryExpression -> functionLiteral .)
    SEMIDENTIDADE   reduce using rule 176 (primaryExpression -> functionLiteral .)
    AND             reduce using rule 176 (primaryExpression -> functionLiteral .)
    OR              reduce using rule 176 (primaryExpression -> functionLiteral .)
    FUN             reduce using rule 176 (primaryExpression -> functionLiteral .)
    FOR             reduce using rule 176 (primaryExpression -> functionLiteral .)
    WHILE           reduce using rule 176 (primaryExpression -> functionLiteral .)
    DO              reduce using rule 176 (primaryExpression -> functionLiteral .)
    LITERAL_STRING  reduce using rule 176 (primaryExpression -> functionLiteral .)
    IF              reduce using rule 176 (primaryExpression -> functionLiteral .)
    RETURN          reduce using rule 176 (primaryExpression -> functionLiteral .)
    RETURN_AT       reduce using rule 176 (primaryExpression -> functionLiteral .)
    CONTINUE        reduce using rule 176 (primaryExpression -> functionLiteral .)
    CONTINUE_AT     reduce using rule 176 (primaryExpression -> functionLiteral .)
    BREAK           reduce using rule 176 (primaryExpression -> functionLiteral .)
    BREAK_AT        reduce using rule 176 (primaryExpression -> functionLiteral .)
    NOT             reduce using rule 176 (primaryExpression -> functionLiteral .)
    SUSPEND         reduce using rule 176 (primaryExpression -> functionLiteral .)
    COMMA           reduce using rule 176 (primaryExpression -> functionLiteral .)
    RPAREN          reduce using rule 176 (primaryExpression -> functionLiteral .)
    LCHAVE          reduce using rule 176 (primaryExpression -> functionLiteral .)
    RCCT            reduce using rule 176 (primaryExpression -> functionLiteral .)
    PV              reduce using rule 176 (primaryExpression -> functionLiteral .)
    ELSE            reduce using rule 176 (primaryExpression -> functionLiteral .)


state 90

    (177) primaryExpression -> collectionLiteral .

    INCREMENTO      reduce using rule 177 (primaryExpression -> collectionLiteral .)
    DECREMENTO      reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MENOR           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    LCCT            reduce using rule 177 (primaryExpression -> collectionLiteral .)
    COLONCOLON      reduce using rule 177 (primaryExpression -> collectionLiteral .)
    PONTO           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    LPAREN          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    RCHAVE          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    AS              reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MAISIGUAL       reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MENOSIGUAL      reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MULTIGUAL       reduce using rule 177 (primaryExpression -> collectionLiteral .)
    DIVIGUAL        reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MODIGUAL        reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MULT            reduce using rule 177 (primaryExpression -> collectionLiteral .)
    DIVIDE          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MOD             reduce using rule 177 (primaryExpression -> collectionLiteral .)
    PLUS            reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MINUS           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    PONTOPONTO      reduce using rule 177 (primaryExpression -> collectionLiteral .)
    ID              reduce using rule 177 (primaryExpression -> collectionLiteral .)
    CROSSINLINE     reduce using rule 177 (primaryExpression -> collectionLiteral .)
    IMPORT          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    INIT            reduce using rule 177 (primaryExpression -> collectionLiteral .)
    NOINLINE        reduce using rule 177 (primaryExpression -> collectionLiteral .)
    OUT             reduce using rule 177 (primaryExpression -> collectionLiteral .)
    VARARG          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    WHERE           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    OBJECT          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    CONST           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    CONSTRUCTOR     reduce using rule 177 (primaryExpression -> collectionLiteral .)
    EOF             reduce using rule 177 (primaryExpression -> collectionLiteral .)
    FALSE           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    FUNCTION        reduce using rule 177 (primaryExpression -> collectionLiteral .)
    NULL            reduce using rule 177 (primaryExpression -> collectionLiteral .)
    NULLABLE        reduce using rule 177 (primaryExpression -> collectionLiteral .)
    NUMBER          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    OPERATOR        reduce using rule 177 (primaryExpression -> collectionLiteral .)
    SMARTCAST       reduce using rule 177 (primaryExpression -> collectionLiteral .)
    THIS            reduce using rule 177 (primaryExpression -> collectionLiteral .)
    TRUE            reduce using rule 177 (primaryExpression -> collectionLiteral .)
    VAL             reduce using rule 177 (primaryExpression -> collectionLiteral .)
    VAR             reduce using rule 177 (primaryExpression -> collectionLiteral .)
    WHEN            reduce using rule 177 (primaryExpression -> collectionLiteral .)
    LONG            reduce using rule 177 (primaryExpression -> collectionLiteral .)
    ARRAY           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    ELVIS           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    IN              reduce using rule 177 (primaryExpression -> collectionLiteral .)
    NOT_IN          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    IS              reduce using rule 177 (primaryExpression -> collectionLiteral .)
    NOT_IS          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MAIOR           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MENORIGUAL      reduce using rule 177 (primaryExpression -> collectionLiteral .)
    MAIORIGUAL      reduce using rule 177 (primaryExpression -> collectionLiteral .)
    DIFERENTE       reduce using rule 177 (primaryExpression -> collectionLiteral .)
    IDENTIDADE      reduce using rule 177 (primaryExpression -> collectionLiteral .)
    IGUALDADE       reduce using rule 177 (primaryExpression -> collectionLiteral .)
    SEMIDENTIDADE   reduce using rule 177 (primaryExpression -> collectionLiteral .)
    AND             reduce using rule 177 (primaryExpression -> collectionLiteral .)
    OR              reduce using rule 177 (primaryExpression -> collectionLiteral .)
    FUN             reduce using rule 177 (primaryExpression -> collectionLiteral .)
    FOR             reduce using rule 177 (primaryExpression -> collectionLiteral .)
    WHILE           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    DO              reduce using rule 177 (primaryExpression -> collectionLiteral .)
    LITERAL_STRING  reduce using rule 177 (primaryExpression -> collectionLiteral .)
    IF              reduce using rule 177 (primaryExpression -> collectionLiteral .)
    RETURN          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    RETURN_AT       reduce using rule 177 (primaryExpression -> collectionLiteral .)
    CONTINUE        reduce using rule 177 (primaryExpression -> collectionLiteral .)
    CONTINUE_AT     reduce using rule 177 (primaryExpression -> collectionLiteral .)
    BREAK           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    BREAK_AT        reduce using rule 177 (primaryExpression -> collectionLiteral .)
    NOT             reduce using rule 177 (primaryExpression -> collectionLiteral .)
    SUSPEND         reduce using rule 177 (primaryExpression -> collectionLiteral .)
    COMMA           reduce using rule 177 (primaryExpression -> collectionLiteral .)
    RPAREN          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    LCHAVE          reduce using rule 177 (primaryExpression -> collectionLiteral .)
    RCCT            reduce using rule 177 (primaryExpression -> collectionLiteral .)
    PV              reduce using rule 177 (primaryExpression -> collectionLiteral .)
    ELSE            reduce using rule 177 (primaryExpression -> collectionLiteral .)


state 91

    (178) primaryExpression -> ifExpression .

    INCREMENTO      reduce using rule 178 (primaryExpression -> ifExpression .)
    DECREMENTO      reduce using rule 178 (primaryExpression -> ifExpression .)
    MENOR           reduce using rule 178 (primaryExpression -> ifExpression .)
    LCCT            reduce using rule 178 (primaryExpression -> ifExpression .)
    COLONCOLON      reduce using rule 178 (primaryExpression -> ifExpression .)
    PONTO           reduce using rule 178 (primaryExpression -> ifExpression .)
    LPAREN          reduce using rule 178 (primaryExpression -> ifExpression .)
    RCHAVE          reduce using rule 178 (primaryExpression -> ifExpression .)
    AS              reduce using rule 178 (primaryExpression -> ifExpression .)
    MAISIGUAL       reduce using rule 178 (primaryExpression -> ifExpression .)
    MENOSIGUAL      reduce using rule 178 (primaryExpression -> ifExpression .)
    MULTIGUAL       reduce using rule 178 (primaryExpression -> ifExpression .)
    DIVIGUAL        reduce using rule 178 (primaryExpression -> ifExpression .)
    MODIGUAL        reduce using rule 178 (primaryExpression -> ifExpression .)
    MULT            reduce using rule 178 (primaryExpression -> ifExpression .)
    DIVIDE          reduce using rule 178 (primaryExpression -> ifExpression .)
    MOD             reduce using rule 178 (primaryExpression -> ifExpression .)
    PLUS            reduce using rule 178 (primaryExpression -> ifExpression .)
    MINUS           reduce using rule 178 (primaryExpression -> ifExpression .)
    PONTOPONTO      reduce using rule 178 (primaryExpression -> ifExpression .)
    ID              reduce using rule 178 (primaryExpression -> ifExpression .)
    CROSSINLINE     reduce using rule 178 (primaryExpression -> ifExpression .)
    IMPORT          reduce using rule 178 (primaryExpression -> ifExpression .)
    INIT            reduce using rule 178 (primaryExpression -> ifExpression .)
    NOINLINE        reduce using rule 178 (primaryExpression -> ifExpression .)
    OUT             reduce using rule 178 (primaryExpression -> ifExpression .)
    VARARG          reduce using rule 178 (primaryExpression -> ifExpression .)
    WHERE           reduce using rule 178 (primaryExpression -> ifExpression .)
    OBJECT          reduce using rule 178 (primaryExpression -> ifExpression .)
    CONST           reduce using rule 178 (primaryExpression -> ifExpression .)
    CONSTRUCTOR     reduce using rule 178 (primaryExpression -> ifExpression .)
    EOF             reduce using rule 178 (primaryExpression -> ifExpression .)
    FALSE           reduce using rule 178 (primaryExpression -> ifExpression .)
    FUNCTION        reduce using rule 178 (primaryExpression -> ifExpression .)
    NULL            reduce using rule 178 (primaryExpression -> ifExpression .)
    NULLABLE        reduce using rule 178 (primaryExpression -> ifExpression .)
    NUMBER          reduce using rule 178 (primaryExpression -> ifExpression .)
    OPERATOR        reduce using rule 178 (primaryExpression -> ifExpression .)
    SMARTCAST       reduce using rule 178 (primaryExpression -> ifExpression .)
    THIS            reduce using rule 178 (primaryExpression -> ifExpression .)
    TRUE            reduce using rule 178 (primaryExpression -> ifExpression .)
    VAL             reduce using rule 178 (primaryExpression -> ifExpression .)
    VAR             reduce using rule 178 (primaryExpression -> ifExpression .)
    WHEN            reduce using rule 178 (primaryExpression -> ifExpression .)
    LONG            reduce using rule 178 (primaryExpression -> ifExpression .)
    ARRAY           reduce using rule 178 (primaryExpression -> ifExpression .)
    ELVIS           reduce using rule 178 (primaryExpression -> ifExpression .)
    IN              reduce using rule 178 (primaryExpression -> ifExpression .)
    NOT_IN          reduce using rule 178 (primaryExpression -> ifExpression .)
    IS              reduce using rule 178 (primaryExpression -> ifExpression .)
    NOT_IS          reduce using rule 178 (primaryExpression -> ifExpression .)
    MAIOR           reduce using rule 178 (primaryExpression -> ifExpression .)
    MENORIGUAL      reduce using rule 178 (primaryExpression -> ifExpression .)
    MAIORIGUAL      reduce using rule 178 (primaryExpression -> ifExpression .)
    DIFERENTE       reduce using rule 178 (primaryExpression -> ifExpression .)
    IDENTIDADE      reduce using rule 178 (primaryExpression -> ifExpression .)
    IGUALDADE       reduce using rule 178 (primaryExpression -> ifExpression .)
    SEMIDENTIDADE   reduce using rule 178 (primaryExpression -> ifExpression .)
    AND             reduce using rule 178 (primaryExpression -> ifExpression .)
    OR              reduce using rule 178 (primaryExpression -> ifExpression .)
    FUN             reduce using rule 178 (primaryExpression -> ifExpression .)
    FOR             reduce using rule 178 (primaryExpression -> ifExpression .)
    WHILE           reduce using rule 178 (primaryExpression -> ifExpression .)
    DO              reduce using rule 178 (primaryExpression -> ifExpression .)
    LITERAL_STRING  reduce using rule 178 (primaryExpression -> ifExpression .)
    IF              reduce using rule 178 (primaryExpression -> ifExpression .)
    RETURN          reduce using rule 178 (primaryExpression -> ifExpression .)
    RETURN_AT       reduce using rule 178 (primaryExpression -> ifExpression .)
    CONTINUE        reduce using rule 178 (primaryExpression -> ifExpression .)
    CONTINUE_AT     reduce using rule 178 (primaryExpression -> ifExpression .)
    BREAK           reduce using rule 178 (primaryExpression -> ifExpression .)
    BREAK_AT        reduce using rule 178 (primaryExpression -> ifExpression .)
    NOT             reduce using rule 178 (primaryExpression -> ifExpression .)
    SUSPEND         reduce using rule 178 (primaryExpression -> ifExpression .)
    COMMA           reduce using rule 178 (primaryExpression -> ifExpression .)
    RPAREN          reduce using rule 178 (primaryExpression -> ifExpression .)
    LCHAVE          reduce using rule 178 (primaryExpression -> ifExpression .)
    RCCT            reduce using rule 178 (primaryExpression -> ifExpression .)
    PV              reduce using rule 178 (primaryExpression -> ifExpression .)
    ELSE            reduce using rule 178 (primaryExpression -> ifExpression .)


state 92

    (179) primaryExpression -> jumpExpression .

    INCREMENTO      reduce using rule 179 (primaryExpression -> jumpExpression .)
    DECREMENTO      reduce using rule 179 (primaryExpression -> jumpExpression .)
    MENOR           reduce using rule 179 (primaryExpression -> jumpExpression .)
    LCCT            reduce using rule 179 (primaryExpression -> jumpExpression .)
    COLONCOLON      reduce using rule 179 (primaryExpression -> jumpExpression .)
    PONTO           reduce using rule 179 (primaryExpression -> jumpExpression .)
    LPAREN          reduce using rule 179 (primaryExpression -> jumpExpression .)
    RCHAVE          reduce using rule 179 (primaryExpression -> jumpExpression .)
    AS              reduce using rule 179 (primaryExpression -> jumpExpression .)
    MAISIGUAL       reduce using rule 179 (primaryExpression -> jumpExpression .)
    MENOSIGUAL      reduce using rule 179 (primaryExpression -> jumpExpression .)
    MULTIGUAL       reduce using rule 179 (primaryExpression -> jumpExpression .)
    DIVIGUAL        reduce using rule 179 (primaryExpression -> jumpExpression .)
    MODIGUAL        reduce using rule 179 (primaryExpression -> jumpExpression .)
    MULT            reduce using rule 179 (primaryExpression -> jumpExpression .)
    DIVIDE          reduce using rule 179 (primaryExpression -> jumpExpression .)
    MOD             reduce using rule 179 (primaryExpression -> jumpExpression .)
    PLUS            reduce using rule 179 (primaryExpression -> jumpExpression .)
    MINUS           reduce using rule 179 (primaryExpression -> jumpExpression .)
    PONTOPONTO      reduce using rule 179 (primaryExpression -> jumpExpression .)
    ID              reduce using rule 179 (primaryExpression -> jumpExpression .)
    CROSSINLINE     reduce using rule 179 (primaryExpression -> jumpExpression .)
    IMPORT          reduce using rule 179 (primaryExpression -> jumpExpression .)
    INIT            reduce using rule 179 (primaryExpression -> jumpExpression .)
    NOINLINE        reduce using rule 179 (primaryExpression -> jumpExpression .)
    OUT             reduce using rule 179 (primaryExpression -> jumpExpression .)
    VARARG          reduce using rule 179 (primaryExpression -> jumpExpression .)
    WHERE           reduce using rule 179 (primaryExpression -> jumpExpression .)
    OBJECT          reduce using rule 179 (primaryExpression -> jumpExpression .)
    CONST           reduce using rule 179 (primaryExpression -> jumpExpression .)
    CONSTRUCTOR     reduce using rule 179 (primaryExpression -> jumpExpression .)
    EOF             reduce using rule 179 (primaryExpression -> jumpExpression .)
    FALSE           reduce using rule 179 (primaryExpression -> jumpExpression .)
    FUNCTION        reduce using rule 179 (primaryExpression -> jumpExpression .)
    NULL            reduce using rule 179 (primaryExpression -> jumpExpression .)
    NULLABLE        reduce using rule 179 (primaryExpression -> jumpExpression .)
    NUMBER          reduce using rule 179 (primaryExpression -> jumpExpression .)
    OPERATOR        reduce using rule 179 (primaryExpression -> jumpExpression .)
    SMARTCAST       reduce using rule 179 (primaryExpression -> jumpExpression .)
    THIS            reduce using rule 179 (primaryExpression -> jumpExpression .)
    TRUE            reduce using rule 179 (primaryExpression -> jumpExpression .)
    VAL             reduce using rule 179 (primaryExpression -> jumpExpression .)
    VAR             reduce using rule 179 (primaryExpression -> jumpExpression .)
    WHEN            reduce using rule 179 (primaryExpression -> jumpExpression .)
    LONG            reduce using rule 179 (primaryExpression -> jumpExpression .)
    ARRAY           reduce using rule 179 (primaryExpression -> jumpExpression .)
    ELVIS           reduce using rule 179 (primaryExpression -> jumpExpression .)
    IN              reduce using rule 179 (primaryExpression -> jumpExpression .)
    NOT_IN          reduce using rule 179 (primaryExpression -> jumpExpression .)
    IS              reduce using rule 179 (primaryExpression -> jumpExpression .)
    NOT_IS          reduce using rule 179 (primaryExpression -> jumpExpression .)
    MAIOR           reduce using rule 179 (primaryExpression -> jumpExpression .)
    MENORIGUAL      reduce using rule 179 (primaryExpression -> jumpExpression .)
    MAIORIGUAL      reduce using rule 179 (primaryExpression -> jumpExpression .)
    DIFERENTE       reduce using rule 179 (primaryExpression -> jumpExpression .)
    IDENTIDADE      reduce using rule 179 (primaryExpression -> jumpExpression .)
    IGUALDADE       reduce using rule 179 (primaryExpression -> jumpExpression .)
    SEMIDENTIDADE   reduce using rule 179 (primaryExpression -> jumpExpression .)
    AND             reduce using rule 179 (primaryExpression -> jumpExpression .)
    OR              reduce using rule 179 (primaryExpression -> jumpExpression .)
    FUN             reduce using rule 179 (primaryExpression -> jumpExpression .)
    FOR             reduce using rule 179 (primaryExpression -> jumpExpression .)
    WHILE           reduce using rule 179 (primaryExpression -> jumpExpression .)
    DO              reduce using rule 179 (primaryExpression -> jumpExpression .)
    LITERAL_STRING  reduce using rule 179 (primaryExpression -> jumpExpression .)
    IF              reduce using rule 179 (primaryExpression -> jumpExpression .)
    RETURN          reduce using rule 179 (primaryExpression -> jumpExpression .)
    RETURN_AT       reduce using rule 179 (primaryExpression -> jumpExpression .)
    CONTINUE        reduce using rule 179 (primaryExpression -> jumpExpression .)
    CONTINUE_AT     reduce using rule 179 (primaryExpression -> jumpExpression .)
    BREAK           reduce using rule 179 (primaryExpression -> jumpExpression .)
    BREAK_AT        reduce using rule 179 (primaryExpression -> jumpExpression .)
    NOT             reduce using rule 179 (primaryExpression -> jumpExpression .)
    SUSPEND         reduce using rule 179 (primaryExpression -> jumpExpression .)
    COMMA           reduce using rule 179 (primaryExpression -> jumpExpression .)
    RPAREN          reduce using rule 179 (primaryExpression -> jumpExpression .)
    LCHAVE          reduce using rule 179 (primaryExpression -> jumpExpression .)
    RCCT            reduce using rule 179 (primaryExpression -> jumpExpression .)
    PV              reduce using rule 179 (primaryExpression -> jumpExpression .)
    ELSE            reduce using rule 179 (primaryExpression -> jumpExpression .)


state 93

    (124) prefixUnaryExpressionRecursive -> unaryPrefix .
    (125) prefixUnaryExpressionRecursive -> unaryPrefix . prefixUnaryExpressionRecursive
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    LITERAL_STRING  reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    LPAREN          reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    LCCT            reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    IF              reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    RETURN          reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    RETURN_AT       reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    CONTINUE        reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    CONTINUE_AT     reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    BREAK           reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    BREAK_AT        reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    RCHAVE          reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    FUN             reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    SUSPEND         reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    COLONCOLON      reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

  ! ID              [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! CROSSINLINE     [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! IMPORT          [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! INIT            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NOINLINE        [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! OUT             [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! VARARG          [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! WHERE           [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! OBJECT          [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! CONST           [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! CONSTRUCTOR     [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! EOF             [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! FALSE           [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! FUNCTION        [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NULL            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NULLABLE        [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NUMBER          [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! OPERATOR        [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! SMARTCAST       [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! THIS            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! TRUE            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! VAL             [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! VAR             [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! WHEN            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! LONG            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! ARRAY           [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! INCREMENTO      [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! DECREMENTO      [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! MINUS           [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! PLUS            [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NOT             [ reduce using rule 124 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]

    unaryPrefix                    shift and go to state 93
    prefixUnaryExpressionRecursive shift and go to state 198
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    simpleIdentifier               shift and go to state 199

state 94

    (98) equality -> comparison .
    (99) equality -> comparison . equalityOperator equality
    (238) equalityOperator -> . DIFERENTE
    (239) equalityOperator -> . IDENTIDADE
    (240) equalityOperator -> . IGUALDADE
    (241) equalityOperator -> . SEMIDENTIDADE

  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for IDENTIDADE resolved as shift
  ! shift/reduce conflict for IGUALDADE resolved as shift
  ! shift/reduce conflict for SEMIDENTIDADE resolved as shift
    INCREMENTO      reduce using rule 98 (equality -> comparison .)
    DECREMENTO      reduce using rule 98 (equality -> comparison .)
    MENOR           reduce using rule 98 (equality -> comparison .)
    LCCT            reduce using rule 98 (equality -> comparison .)
    COLONCOLON      reduce using rule 98 (equality -> comparison .)
    PONTO           reduce using rule 98 (equality -> comparison .)
    LPAREN          reduce using rule 98 (equality -> comparison .)
    RCHAVE          reduce using rule 98 (equality -> comparison .)
    AS              reduce using rule 98 (equality -> comparison .)
    MAISIGUAL       reduce using rule 98 (equality -> comparison .)
    MENOSIGUAL      reduce using rule 98 (equality -> comparison .)
    MULTIGUAL       reduce using rule 98 (equality -> comparison .)
    DIVIGUAL        reduce using rule 98 (equality -> comparison .)
    MODIGUAL        reduce using rule 98 (equality -> comparison .)
    MULT            reduce using rule 98 (equality -> comparison .)
    DIVIDE          reduce using rule 98 (equality -> comparison .)
    MOD             reduce using rule 98 (equality -> comparison .)
    PLUS            reduce using rule 98 (equality -> comparison .)
    MINUS           reduce using rule 98 (equality -> comparison .)
    PONTOPONTO      reduce using rule 98 (equality -> comparison .)
    ID              reduce using rule 98 (equality -> comparison .)
    CROSSINLINE     reduce using rule 98 (equality -> comparison .)
    IMPORT          reduce using rule 98 (equality -> comparison .)
    INIT            reduce using rule 98 (equality -> comparison .)
    NOINLINE        reduce using rule 98 (equality -> comparison .)
    OUT             reduce using rule 98 (equality -> comparison .)
    VARARG          reduce using rule 98 (equality -> comparison .)
    WHERE           reduce using rule 98 (equality -> comparison .)
    OBJECT          reduce using rule 98 (equality -> comparison .)
    CONST           reduce using rule 98 (equality -> comparison .)
    CONSTRUCTOR     reduce using rule 98 (equality -> comparison .)
    EOF             reduce using rule 98 (equality -> comparison .)
    FALSE           reduce using rule 98 (equality -> comparison .)
    FUNCTION        reduce using rule 98 (equality -> comparison .)
    NULL            reduce using rule 98 (equality -> comparison .)
    NULLABLE        reduce using rule 98 (equality -> comparison .)
    NUMBER          reduce using rule 98 (equality -> comparison .)
    OPERATOR        reduce using rule 98 (equality -> comparison .)
    SMARTCAST       reduce using rule 98 (equality -> comparison .)
    THIS            reduce using rule 98 (equality -> comparison .)
    TRUE            reduce using rule 98 (equality -> comparison .)
    VAL             reduce using rule 98 (equality -> comparison .)
    VAR             reduce using rule 98 (equality -> comparison .)
    WHEN            reduce using rule 98 (equality -> comparison .)
    LONG            reduce using rule 98 (equality -> comparison .)
    ARRAY           reduce using rule 98 (equality -> comparison .)
    ELVIS           reduce using rule 98 (equality -> comparison .)
    IN              reduce using rule 98 (equality -> comparison .)
    NOT_IN          reduce using rule 98 (equality -> comparison .)
    IS              reduce using rule 98 (equality -> comparison .)
    NOT_IS          reduce using rule 98 (equality -> comparison .)
    MAIOR           reduce using rule 98 (equality -> comparison .)
    MENORIGUAL      reduce using rule 98 (equality -> comparison .)
    MAIORIGUAL      reduce using rule 98 (equality -> comparison .)
    AND             reduce using rule 98 (equality -> comparison .)
    OR              reduce using rule 98 (equality -> comparison .)
    FUN             reduce using rule 98 (equality -> comparison .)
    FOR             reduce using rule 98 (equality -> comparison .)
    WHILE           reduce using rule 98 (equality -> comparison .)
    DO              reduce using rule 98 (equality -> comparison .)
    LITERAL_STRING  reduce using rule 98 (equality -> comparison .)
    IF              reduce using rule 98 (equality -> comparison .)
    RETURN          reduce using rule 98 (equality -> comparison .)
    RETURN_AT       reduce using rule 98 (equality -> comparison .)
    CONTINUE        reduce using rule 98 (equality -> comparison .)
    CONTINUE_AT     reduce using rule 98 (equality -> comparison .)
    BREAK           reduce using rule 98 (equality -> comparison .)
    BREAK_AT        reduce using rule 98 (equality -> comparison .)
    NOT             reduce using rule 98 (equality -> comparison .)
    SUSPEND         reduce using rule 98 (equality -> comparison .)
    COMMA           reduce using rule 98 (equality -> comparison .)
    RPAREN          reduce using rule 98 (equality -> comparison .)
    LCHAVE          reduce using rule 98 (equality -> comparison .)
    RCCT            reduce using rule 98 (equality -> comparison .)
    PV              reduce using rule 98 (equality -> comparison .)
    ELSE            reduce using rule 98 (equality -> comparison .)
    DIFERENTE       shift and go to state 201
    IDENTIDADE      shift and go to state 202
    IGUALDADE       shift and go to state 203
    SEMIDENTIDADE   shift and go to state 204

  ! DIFERENTE       [ reduce using rule 98 (equality -> comparison .) ]
  ! IDENTIDADE      [ reduce using rule 98 (equality -> comparison .) ]
  ! IGUALDADE       [ reduce using rule 98 (equality -> comparison .) ]
  ! SEMIDENTIDADE   [ reduce using rule 98 (equality -> comparison .) ]

    equalityOperator               shift and go to state 200

state 95

    (228) callableReference -> optionalReceiverType . COLONCOLON simpleIdentifierOrClass

    COLONCOLON      shift and go to state 205


state 96

    (210) functionLiteral -> lambdaLiteral .

    INCREMENTO      reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    DECREMENTO      reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MENOR           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    LCCT            reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    COLONCOLON      reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    PONTO           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    LPAREN          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    RCHAVE          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    AS              reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MAISIGUAL       reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MENOSIGUAL      reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MODIGUAL        reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MULT            reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    DIVIDE          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MOD             reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    PLUS            reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MINUS           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    ID              reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    IMPORT          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    INIT            reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    NOINLINE        reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    OUT             reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    VARARG          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    WHERE           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    OBJECT          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    CONST           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    CONSTRUCTOR     reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    EOF             reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    FALSE           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    FUNCTION        reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    NULL            reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    NULLABLE        reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    NUMBER          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    OPERATOR        reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    SMARTCAST       reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    THIS            reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    TRUE            reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    VAL             reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    VAR             reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    WHEN            reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    LONG            reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    ARRAY           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    ELVIS           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    IN              reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    NOT_IN          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    IS              reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    NOT_IS          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MAIOR           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    DIFERENTE       reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    IGUALDADE       reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    AND             reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    OR              reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    FUN             reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    FOR             reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    WHILE           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    DO              reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    IF              reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    RETURN          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    RETURN_AT       reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    CONTINUE        reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    BREAK           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    BREAK_AT        reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    NOT             reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    SUSPEND         reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    COMMA           reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    RPAREN          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    LCHAVE          reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    RCCT            reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    PV              reduce using rule 210 (functionLiteral -> lambdaLiteral .)
    ELSE            reduce using rule 210 (functionLiteral -> lambdaLiteral .)


state 97

    (211) functionLiteral -> anonymousFunction .

    INCREMENTO      reduce using rule 211 (functionLiteral -> anonymousFunction .)
    DECREMENTO      reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MENOR           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    LCCT            reduce using rule 211 (functionLiteral -> anonymousFunction .)
    COLONCOLON      reduce using rule 211 (functionLiteral -> anonymousFunction .)
    PONTO           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    LPAREN          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    RCHAVE          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    AS              reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MAISIGUAL       reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MENOSIGUAL      reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MULTIGUAL       reduce using rule 211 (functionLiteral -> anonymousFunction .)
    DIVIGUAL        reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MODIGUAL        reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MULT            reduce using rule 211 (functionLiteral -> anonymousFunction .)
    DIVIDE          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MOD             reduce using rule 211 (functionLiteral -> anonymousFunction .)
    PLUS            reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MINUS           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    PONTOPONTO      reduce using rule 211 (functionLiteral -> anonymousFunction .)
    ID              reduce using rule 211 (functionLiteral -> anonymousFunction .)
    CROSSINLINE     reduce using rule 211 (functionLiteral -> anonymousFunction .)
    IMPORT          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    INIT            reduce using rule 211 (functionLiteral -> anonymousFunction .)
    NOINLINE        reduce using rule 211 (functionLiteral -> anonymousFunction .)
    OUT             reduce using rule 211 (functionLiteral -> anonymousFunction .)
    VARARG          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    WHERE           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    OBJECT          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    CONST           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    CONSTRUCTOR     reduce using rule 211 (functionLiteral -> anonymousFunction .)
    EOF             reduce using rule 211 (functionLiteral -> anonymousFunction .)
    FALSE           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    FUNCTION        reduce using rule 211 (functionLiteral -> anonymousFunction .)
    NULL            reduce using rule 211 (functionLiteral -> anonymousFunction .)
    NULLABLE        reduce using rule 211 (functionLiteral -> anonymousFunction .)
    NUMBER          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    OPERATOR        reduce using rule 211 (functionLiteral -> anonymousFunction .)
    SMARTCAST       reduce using rule 211 (functionLiteral -> anonymousFunction .)
    THIS            reduce using rule 211 (functionLiteral -> anonymousFunction .)
    TRUE            reduce using rule 211 (functionLiteral -> anonymousFunction .)
    VAL             reduce using rule 211 (functionLiteral -> anonymousFunction .)
    VAR             reduce using rule 211 (functionLiteral -> anonymousFunction .)
    WHEN            reduce using rule 211 (functionLiteral -> anonymousFunction .)
    LONG            reduce using rule 211 (functionLiteral -> anonymousFunction .)
    ARRAY           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    ELVIS           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    IN              reduce using rule 211 (functionLiteral -> anonymousFunction .)
    NOT_IN          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    IS              reduce using rule 211 (functionLiteral -> anonymousFunction .)
    NOT_IS          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MAIOR           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MENORIGUAL      reduce using rule 211 (functionLiteral -> anonymousFunction .)
    MAIORIGUAL      reduce using rule 211 (functionLiteral -> anonymousFunction .)
    DIFERENTE       reduce using rule 211 (functionLiteral -> anonymousFunction .)
    IDENTIDADE      reduce using rule 211 (functionLiteral -> anonymousFunction .)
    IGUALDADE       reduce using rule 211 (functionLiteral -> anonymousFunction .)
    SEMIDENTIDADE   reduce using rule 211 (functionLiteral -> anonymousFunction .)
    AND             reduce using rule 211 (functionLiteral -> anonymousFunction .)
    OR              reduce using rule 211 (functionLiteral -> anonymousFunction .)
    FUN             reduce using rule 211 (functionLiteral -> anonymousFunction .)
    FOR             reduce using rule 211 (functionLiteral -> anonymousFunction .)
    WHILE           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    DO              reduce using rule 211 (functionLiteral -> anonymousFunction .)
    LITERAL_STRING  reduce using rule 211 (functionLiteral -> anonymousFunction .)
    IF              reduce using rule 211 (functionLiteral -> anonymousFunction .)
    RETURN          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    RETURN_AT       reduce using rule 211 (functionLiteral -> anonymousFunction .)
    CONTINUE        reduce using rule 211 (functionLiteral -> anonymousFunction .)
    CONTINUE_AT     reduce using rule 211 (functionLiteral -> anonymousFunction .)
    BREAK           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    BREAK_AT        reduce using rule 211 (functionLiteral -> anonymousFunction .)
    NOT             reduce using rule 211 (functionLiteral -> anonymousFunction .)
    SUSPEND         reduce using rule 211 (functionLiteral -> anonymousFunction .)
    COMMA           reduce using rule 211 (functionLiteral -> anonymousFunction .)
    RPAREN          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    LCHAVE          reduce using rule 211 (functionLiteral -> anonymousFunction .)
    RCCT            reduce using rule 211 (functionLiteral -> anonymousFunction .)
    PV              reduce using rule 211 (functionLiteral -> anonymousFunction .)
    ELSE            reduce using rule 211 (functionLiteral -> anonymousFunction .)


state 98

    (181) collectionLiteral -> LCCT . collectionLiteralRecursive RCCT
    (182) collectionLiteral -> LCCT . RCCT
    (183) collectionLiteralRecursive -> . expression
    (184) collectionLiteralRecursive -> . expression COMMA collectionLiteralRecursive
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    RCCT            shift and go to state 207
    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    collectionLiteralRecursive     shift and go to state 206
    expression                     shift and go to state 208
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 99

    (213) ifExpression -> IF . LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> IF . LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV

    LPAREN          shift and go to state 209


state 100

    (221) jumpExpression -> RETURN . expression
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 210
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 101

    (222) jumpExpression -> RETURN_AT . expression
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 211
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 102

    (224) jumpExpression -> CONTINUE .

    INCREMENTO      reduce using rule 224 (jumpExpression -> CONTINUE .)
    DECREMENTO      reduce using rule 224 (jumpExpression -> CONTINUE .)
    MENOR           reduce using rule 224 (jumpExpression -> CONTINUE .)
    LCCT            reduce using rule 224 (jumpExpression -> CONTINUE .)
    COLONCOLON      reduce using rule 224 (jumpExpression -> CONTINUE .)
    PONTO           reduce using rule 224 (jumpExpression -> CONTINUE .)
    LPAREN          reduce using rule 224 (jumpExpression -> CONTINUE .)
    RCHAVE          reduce using rule 224 (jumpExpression -> CONTINUE .)
    AS              reduce using rule 224 (jumpExpression -> CONTINUE .)
    MAISIGUAL       reduce using rule 224 (jumpExpression -> CONTINUE .)
    MENOSIGUAL      reduce using rule 224 (jumpExpression -> CONTINUE .)
    MULTIGUAL       reduce using rule 224 (jumpExpression -> CONTINUE .)
    DIVIGUAL        reduce using rule 224 (jumpExpression -> CONTINUE .)
    MODIGUAL        reduce using rule 224 (jumpExpression -> CONTINUE .)
    MULT            reduce using rule 224 (jumpExpression -> CONTINUE .)
    DIVIDE          reduce using rule 224 (jumpExpression -> CONTINUE .)
    MOD             reduce using rule 224 (jumpExpression -> CONTINUE .)
    PLUS            reduce using rule 224 (jumpExpression -> CONTINUE .)
    MINUS           reduce using rule 224 (jumpExpression -> CONTINUE .)
    PONTOPONTO      reduce using rule 224 (jumpExpression -> CONTINUE .)
    ID              reduce using rule 224 (jumpExpression -> CONTINUE .)
    CROSSINLINE     reduce using rule 224 (jumpExpression -> CONTINUE .)
    IMPORT          reduce using rule 224 (jumpExpression -> CONTINUE .)
    INIT            reduce using rule 224 (jumpExpression -> CONTINUE .)
    NOINLINE        reduce using rule 224 (jumpExpression -> CONTINUE .)
    OUT             reduce using rule 224 (jumpExpression -> CONTINUE .)
    VARARG          reduce using rule 224 (jumpExpression -> CONTINUE .)
    WHERE           reduce using rule 224 (jumpExpression -> CONTINUE .)
    OBJECT          reduce using rule 224 (jumpExpression -> CONTINUE .)
    CONST           reduce using rule 224 (jumpExpression -> CONTINUE .)
    CONSTRUCTOR     reduce using rule 224 (jumpExpression -> CONTINUE .)
    EOF             reduce using rule 224 (jumpExpression -> CONTINUE .)
    FALSE           reduce using rule 224 (jumpExpression -> CONTINUE .)
    FUNCTION        reduce using rule 224 (jumpExpression -> CONTINUE .)
    NULL            reduce using rule 224 (jumpExpression -> CONTINUE .)
    NULLABLE        reduce using rule 224 (jumpExpression -> CONTINUE .)
    NUMBER          reduce using rule 224 (jumpExpression -> CONTINUE .)
    OPERATOR        reduce using rule 224 (jumpExpression -> CONTINUE .)
    SMARTCAST       reduce using rule 224 (jumpExpression -> CONTINUE .)
    THIS            reduce using rule 224 (jumpExpression -> CONTINUE .)
    TRUE            reduce using rule 224 (jumpExpression -> CONTINUE .)
    VAL             reduce using rule 224 (jumpExpression -> CONTINUE .)
    VAR             reduce using rule 224 (jumpExpression -> CONTINUE .)
    WHEN            reduce using rule 224 (jumpExpression -> CONTINUE .)
    LONG            reduce using rule 224 (jumpExpression -> CONTINUE .)
    ARRAY           reduce using rule 224 (jumpExpression -> CONTINUE .)
    ELVIS           reduce using rule 224 (jumpExpression -> CONTINUE .)
    IN              reduce using rule 224 (jumpExpression -> CONTINUE .)
    NOT_IN          reduce using rule 224 (jumpExpression -> CONTINUE .)
    IS              reduce using rule 224 (jumpExpression -> CONTINUE .)
    NOT_IS          reduce using rule 224 (jumpExpression -> CONTINUE .)
    MAIOR           reduce using rule 224 (jumpExpression -> CONTINUE .)
    MENORIGUAL      reduce using rule 224 (jumpExpression -> CONTINUE .)
    MAIORIGUAL      reduce using rule 224 (jumpExpression -> CONTINUE .)
    DIFERENTE       reduce using rule 224 (jumpExpression -> CONTINUE .)
    IDENTIDADE      reduce using rule 224 (jumpExpression -> CONTINUE .)
    IGUALDADE       reduce using rule 224 (jumpExpression -> CONTINUE .)
    SEMIDENTIDADE   reduce using rule 224 (jumpExpression -> CONTINUE .)
    AND             reduce using rule 224 (jumpExpression -> CONTINUE .)
    OR              reduce using rule 224 (jumpExpression -> CONTINUE .)
    FUN             reduce using rule 224 (jumpExpression -> CONTINUE .)
    FOR             reduce using rule 224 (jumpExpression -> CONTINUE .)
    WHILE           reduce using rule 224 (jumpExpression -> CONTINUE .)
    DO              reduce using rule 224 (jumpExpression -> CONTINUE .)
    LITERAL_STRING  reduce using rule 224 (jumpExpression -> CONTINUE .)
    IF              reduce using rule 224 (jumpExpression -> CONTINUE .)
    RETURN          reduce using rule 224 (jumpExpression -> CONTINUE .)
    RETURN_AT       reduce using rule 224 (jumpExpression -> CONTINUE .)
    CONTINUE        reduce using rule 224 (jumpExpression -> CONTINUE .)
    CONTINUE_AT     reduce using rule 224 (jumpExpression -> CONTINUE .)
    BREAK           reduce using rule 224 (jumpExpression -> CONTINUE .)
    BREAK_AT        reduce using rule 224 (jumpExpression -> CONTINUE .)
    NOT             reduce using rule 224 (jumpExpression -> CONTINUE .)
    SUSPEND         reduce using rule 224 (jumpExpression -> CONTINUE .)
    COMMA           reduce using rule 224 (jumpExpression -> CONTINUE .)
    RPAREN          reduce using rule 224 (jumpExpression -> CONTINUE .)
    LCHAVE          reduce using rule 224 (jumpExpression -> CONTINUE .)
    RCCT            reduce using rule 224 (jumpExpression -> CONTINUE .)
    PV              reduce using rule 224 (jumpExpression -> CONTINUE .)
    ELSE            reduce using rule 224 (jumpExpression -> CONTINUE .)


state 103

    (225) jumpExpression -> CONTINUE_AT .

    INCREMENTO      reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    DECREMENTO      reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MENOR           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    LCCT            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    COLONCOLON      reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    PONTO           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    LPAREN          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    RCHAVE          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    AS              reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MAISIGUAL       reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MENOSIGUAL      reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MULTIGUAL       reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    DIVIGUAL        reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MODIGUAL        reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MULT            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    DIVIDE          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MOD             reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    PLUS            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MINUS           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    PONTOPONTO      reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    ID              reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    CROSSINLINE     reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    IMPORT          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    INIT            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    NOINLINE        reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    OUT             reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    VARARG          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    WHERE           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    OBJECT          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    CONST           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    CONSTRUCTOR     reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    EOF             reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    FALSE           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    FUNCTION        reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    NULL            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    NULLABLE        reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    NUMBER          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    OPERATOR        reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    SMARTCAST       reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    THIS            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    TRUE            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    VAL             reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    VAR             reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    WHEN            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    LONG            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    ARRAY           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    ELVIS           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    IN              reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    NOT_IN          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    IS              reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    NOT_IS          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MAIOR           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MENORIGUAL      reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    MAIORIGUAL      reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    DIFERENTE       reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    IDENTIDADE      reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    IGUALDADE       reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    SEMIDENTIDADE   reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    AND             reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    OR              reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    FUN             reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    FOR             reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    WHILE           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    DO              reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    LITERAL_STRING  reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    IF              reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    RETURN          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    RETURN_AT       reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    CONTINUE        reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    CONTINUE_AT     reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    BREAK           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    BREAK_AT        reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    NOT             reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    SUSPEND         reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    COMMA           reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    RPAREN          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    LCHAVE          reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    RCCT            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    PV              reduce using rule 225 (jumpExpression -> CONTINUE_AT .)
    ELSE            reduce using rule 225 (jumpExpression -> CONTINUE_AT .)


state 104

    (226) jumpExpression -> BREAK .

    INCREMENTO      reduce using rule 226 (jumpExpression -> BREAK .)
    DECREMENTO      reduce using rule 226 (jumpExpression -> BREAK .)
    MENOR           reduce using rule 226 (jumpExpression -> BREAK .)
    LCCT            reduce using rule 226 (jumpExpression -> BREAK .)
    COLONCOLON      reduce using rule 226 (jumpExpression -> BREAK .)
    PONTO           reduce using rule 226 (jumpExpression -> BREAK .)
    LPAREN          reduce using rule 226 (jumpExpression -> BREAK .)
    RCHAVE          reduce using rule 226 (jumpExpression -> BREAK .)
    AS              reduce using rule 226 (jumpExpression -> BREAK .)
    MAISIGUAL       reduce using rule 226 (jumpExpression -> BREAK .)
    MENOSIGUAL      reduce using rule 226 (jumpExpression -> BREAK .)
    MULTIGUAL       reduce using rule 226 (jumpExpression -> BREAK .)
    DIVIGUAL        reduce using rule 226 (jumpExpression -> BREAK .)
    MODIGUAL        reduce using rule 226 (jumpExpression -> BREAK .)
    MULT            reduce using rule 226 (jumpExpression -> BREAK .)
    DIVIDE          reduce using rule 226 (jumpExpression -> BREAK .)
    MOD             reduce using rule 226 (jumpExpression -> BREAK .)
    PLUS            reduce using rule 226 (jumpExpression -> BREAK .)
    MINUS           reduce using rule 226 (jumpExpression -> BREAK .)
    PONTOPONTO      reduce using rule 226 (jumpExpression -> BREAK .)
    ID              reduce using rule 226 (jumpExpression -> BREAK .)
    CROSSINLINE     reduce using rule 226 (jumpExpression -> BREAK .)
    IMPORT          reduce using rule 226 (jumpExpression -> BREAK .)
    INIT            reduce using rule 226 (jumpExpression -> BREAK .)
    NOINLINE        reduce using rule 226 (jumpExpression -> BREAK .)
    OUT             reduce using rule 226 (jumpExpression -> BREAK .)
    VARARG          reduce using rule 226 (jumpExpression -> BREAK .)
    WHERE           reduce using rule 226 (jumpExpression -> BREAK .)
    OBJECT          reduce using rule 226 (jumpExpression -> BREAK .)
    CONST           reduce using rule 226 (jumpExpression -> BREAK .)
    CONSTRUCTOR     reduce using rule 226 (jumpExpression -> BREAK .)
    EOF             reduce using rule 226 (jumpExpression -> BREAK .)
    FALSE           reduce using rule 226 (jumpExpression -> BREAK .)
    FUNCTION        reduce using rule 226 (jumpExpression -> BREAK .)
    NULL            reduce using rule 226 (jumpExpression -> BREAK .)
    NULLABLE        reduce using rule 226 (jumpExpression -> BREAK .)
    NUMBER          reduce using rule 226 (jumpExpression -> BREAK .)
    OPERATOR        reduce using rule 226 (jumpExpression -> BREAK .)
    SMARTCAST       reduce using rule 226 (jumpExpression -> BREAK .)
    THIS            reduce using rule 226 (jumpExpression -> BREAK .)
    TRUE            reduce using rule 226 (jumpExpression -> BREAK .)
    VAL             reduce using rule 226 (jumpExpression -> BREAK .)
    VAR             reduce using rule 226 (jumpExpression -> BREAK .)
    WHEN            reduce using rule 226 (jumpExpression -> BREAK .)
    LONG            reduce using rule 226 (jumpExpression -> BREAK .)
    ARRAY           reduce using rule 226 (jumpExpression -> BREAK .)
    ELVIS           reduce using rule 226 (jumpExpression -> BREAK .)
    IN              reduce using rule 226 (jumpExpression -> BREAK .)
    NOT_IN          reduce using rule 226 (jumpExpression -> BREAK .)
    IS              reduce using rule 226 (jumpExpression -> BREAK .)
    NOT_IS          reduce using rule 226 (jumpExpression -> BREAK .)
    MAIOR           reduce using rule 226 (jumpExpression -> BREAK .)
    MENORIGUAL      reduce using rule 226 (jumpExpression -> BREAK .)
    MAIORIGUAL      reduce using rule 226 (jumpExpression -> BREAK .)
    DIFERENTE       reduce using rule 226 (jumpExpression -> BREAK .)
    IDENTIDADE      reduce using rule 226 (jumpExpression -> BREAK .)
    IGUALDADE       reduce using rule 226 (jumpExpression -> BREAK .)
    SEMIDENTIDADE   reduce using rule 226 (jumpExpression -> BREAK .)
    AND             reduce using rule 226 (jumpExpression -> BREAK .)
    OR              reduce using rule 226 (jumpExpression -> BREAK .)
    FUN             reduce using rule 226 (jumpExpression -> BREAK .)
    FOR             reduce using rule 226 (jumpExpression -> BREAK .)
    WHILE           reduce using rule 226 (jumpExpression -> BREAK .)
    DO              reduce using rule 226 (jumpExpression -> BREAK .)
    LITERAL_STRING  reduce using rule 226 (jumpExpression -> BREAK .)
    IF              reduce using rule 226 (jumpExpression -> BREAK .)
    RETURN          reduce using rule 226 (jumpExpression -> BREAK .)
    RETURN_AT       reduce using rule 226 (jumpExpression -> BREAK .)
    CONTINUE        reduce using rule 226 (jumpExpression -> BREAK .)
    CONTINUE_AT     reduce using rule 226 (jumpExpression -> BREAK .)
    BREAK           reduce using rule 226 (jumpExpression -> BREAK .)
    BREAK_AT        reduce using rule 226 (jumpExpression -> BREAK .)
    NOT             reduce using rule 226 (jumpExpression -> BREAK .)
    SUSPEND         reduce using rule 226 (jumpExpression -> BREAK .)
    COMMA           reduce using rule 226 (jumpExpression -> BREAK .)
    RPAREN          reduce using rule 226 (jumpExpression -> BREAK .)
    LCHAVE          reduce using rule 226 (jumpExpression -> BREAK .)
    RCCT            reduce using rule 226 (jumpExpression -> BREAK .)
    PV              reduce using rule 226 (jumpExpression -> BREAK .)
    ELSE            reduce using rule 226 (jumpExpression -> BREAK .)


state 105

    (227) jumpExpression -> BREAK_AT .

    INCREMENTO      reduce using rule 227 (jumpExpression -> BREAK_AT .)
    DECREMENTO      reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MENOR           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    LCCT            reduce using rule 227 (jumpExpression -> BREAK_AT .)
    COLONCOLON      reduce using rule 227 (jumpExpression -> BREAK_AT .)
    PONTO           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    LPAREN          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    RCHAVE          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    AS              reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MAISIGUAL       reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MENOSIGUAL      reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MULTIGUAL       reduce using rule 227 (jumpExpression -> BREAK_AT .)
    DIVIGUAL        reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MODIGUAL        reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MULT            reduce using rule 227 (jumpExpression -> BREAK_AT .)
    DIVIDE          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MOD             reduce using rule 227 (jumpExpression -> BREAK_AT .)
    PLUS            reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MINUS           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    PONTOPONTO      reduce using rule 227 (jumpExpression -> BREAK_AT .)
    ID              reduce using rule 227 (jumpExpression -> BREAK_AT .)
    CROSSINLINE     reduce using rule 227 (jumpExpression -> BREAK_AT .)
    IMPORT          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    INIT            reduce using rule 227 (jumpExpression -> BREAK_AT .)
    NOINLINE        reduce using rule 227 (jumpExpression -> BREAK_AT .)
    OUT             reduce using rule 227 (jumpExpression -> BREAK_AT .)
    VARARG          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    WHERE           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    OBJECT          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    CONST           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    CONSTRUCTOR     reduce using rule 227 (jumpExpression -> BREAK_AT .)
    EOF             reduce using rule 227 (jumpExpression -> BREAK_AT .)
    FALSE           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    FUNCTION        reduce using rule 227 (jumpExpression -> BREAK_AT .)
    NULL            reduce using rule 227 (jumpExpression -> BREAK_AT .)
    NULLABLE        reduce using rule 227 (jumpExpression -> BREAK_AT .)
    NUMBER          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    OPERATOR        reduce using rule 227 (jumpExpression -> BREAK_AT .)
    SMARTCAST       reduce using rule 227 (jumpExpression -> BREAK_AT .)
    THIS            reduce using rule 227 (jumpExpression -> BREAK_AT .)
    TRUE            reduce using rule 227 (jumpExpression -> BREAK_AT .)
    VAL             reduce using rule 227 (jumpExpression -> BREAK_AT .)
    VAR             reduce using rule 227 (jumpExpression -> BREAK_AT .)
    WHEN            reduce using rule 227 (jumpExpression -> BREAK_AT .)
    LONG            reduce using rule 227 (jumpExpression -> BREAK_AT .)
    ARRAY           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    ELVIS           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    IN              reduce using rule 227 (jumpExpression -> BREAK_AT .)
    NOT_IN          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    IS              reduce using rule 227 (jumpExpression -> BREAK_AT .)
    NOT_IS          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MAIOR           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MENORIGUAL      reduce using rule 227 (jumpExpression -> BREAK_AT .)
    MAIORIGUAL      reduce using rule 227 (jumpExpression -> BREAK_AT .)
    DIFERENTE       reduce using rule 227 (jumpExpression -> BREAK_AT .)
    IDENTIDADE      reduce using rule 227 (jumpExpression -> BREAK_AT .)
    IGUALDADE       reduce using rule 227 (jumpExpression -> BREAK_AT .)
    SEMIDENTIDADE   reduce using rule 227 (jumpExpression -> BREAK_AT .)
    AND             reduce using rule 227 (jumpExpression -> BREAK_AT .)
    OR              reduce using rule 227 (jumpExpression -> BREAK_AT .)
    FUN             reduce using rule 227 (jumpExpression -> BREAK_AT .)
    FOR             reduce using rule 227 (jumpExpression -> BREAK_AT .)
    WHILE           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    DO              reduce using rule 227 (jumpExpression -> BREAK_AT .)
    LITERAL_STRING  reduce using rule 227 (jumpExpression -> BREAK_AT .)
    IF              reduce using rule 227 (jumpExpression -> BREAK_AT .)
    RETURN          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    RETURN_AT       reduce using rule 227 (jumpExpression -> BREAK_AT .)
    CONTINUE        reduce using rule 227 (jumpExpression -> BREAK_AT .)
    CONTINUE_AT     reduce using rule 227 (jumpExpression -> BREAK_AT .)
    BREAK           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    BREAK_AT        reduce using rule 227 (jumpExpression -> BREAK_AT .)
    NOT             reduce using rule 227 (jumpExpression -> BREAK_AT .)
    SUSPEND         reduce using rule 227 (jumpExpression -> BREAK_AT .)
    COMMA           reduce using rule 227 (jumpExpression -> BREAK_AT .)
    RPAREN          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    LCHAVE          reduce using rule 227 (jumpExpression -> BREAK_AT .)
    RCCT            reduce using rule 227 (jumpExpression -> BREAK_AT .)
    PV              reduce using rule 227 (jumpExpression -> BREAK_AT .)
    ELSE            reduce using rule 227 (jumpExpression -> BREAK_AT .)


state 106

    (126) unaryPrefix -> label .

    INCREMENTO      reduce using rule 126 (unaryPrefix -> label .)
    DECREMENTO      reduce using rule 126 (unaryPrefix -> label .)
    MINUS           reduce using rule 126 (unaryPrefix -> label .)
    PLUS            reduce using rule 126 (unaryPrefix -> label .)
    NOT             reduce using rule 126 (unaryPrefix -> label .)
    ID              reduce using rule 126 (unaryPrefix -> label .)
    CROSSINLINE     reduce using rule 126 (unaryPrefix -> label .)
    IMPORT          reduce using rule 126 (unaryPrefix -> label .)
    INIT            reduce using rule 126 (unaryPrefix -> label .)
    NOINLINE        reduce using rule 126 (unaryPrefix -> label .)
    OUT             reduce using rule 126 (unaryPrefix -> label .)
    VARARG          reduce using rule 126 (unaryPrefix -> label .)
    WHERE           reduce using rule 126 (unaryPrefix -> label .)
    OBJECT          reduce using rule 126 (unaryPrefix -> label .)
    CONST           reduce using rule 126 (unaryPrefix -> label .)
    CONSTRUCTOR     reduce using rule 126 (unaryPrefix -> label .)
    EOF             reduce using rule 126 (unaryPrefix -> label .)
    FALSE           reduce using rule 126 (unaryPrefix -> label .)
    FUNCTION        reduce using rule 126 (unaryPrefix -> label .)
    NULL            reduce using rule 126 (unaryPrefix -> label .)
    NULLABLE        reduce using rule 126 (unaryPrefix -> label .)
    NUMBER          reduce using rule 126 (unaryPrefix -> label .)
    OPERATOR        reduce using rule 126 (unaryPrefix -> label .)
    SMARTCAST       reduce using rule 126 (unaryPrefix -> label .)
    THIS            reduce using rule 126 (unaryPrefix -> label .)
    TRUE            reduce using rule 126 (unaryPrefix -> label .)
    VAL             reduce using rule 126 (unaryPrefix -> label .)
    VAR             reduce using rule 126 (unaryPrefix -> label .)
    WHEN            reduce using rule 126 (unaryPrefix -> label .)
    LONG            reduce using rule 126 (unaryPrefix -> label .)
    ARRAY           reduce using rule 126 (unaryPrefix -> label .)
    LITERAL_STRING  reduce using rule 126 (unaryPrefix -> label .)
    LPAREN          reduce using rule 126 (unaryPrefix -> label .)
    LCCT            reduce using rule 126 (unaryPrefix -> label .)
    IF              reduce using rule 126 (unaryPrefix -> label .)
    RETURN          reduce using rule 126 (unaryPrefix -> label .)
    RETURN_AT       reduce using rule 126 (unaryPrefix -> label .)
    CONTINUE        reduce using rule 126 (unaryPrefix -> label .)
    CONTINUE_AT     reduce using rule 126 (unaryPrefix -> label .)
    BREAK           reduce using rule 126 (unaryPrefix -> label .)
    BREAK_AT        reduce using rule 126 (unaryPrefix -> label .)
    RCHAVE          reduce using rule 126 (unaryPrefix -> label .)
    FUN             reduce using rule 126 (unaryPrefix -> label .)
    SUSPEND         reduce using rule 126 (unaryPrefix -> label .)
    COLONCOLON      reduce using rule 126 (unaryPrefix -> label .)


state 107

    (127) unaryPrefix -> prefixUnaryOperator .

    INCREMENTO      reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    DECREMENTO      reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    MINUS           reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    PLUS            reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    NOT             reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    ID              reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    CROSSINLINE     reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    IMPORT          reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    INIT            reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    NOINLINE        reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    OUT             reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    VARARG          reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    WHERE           reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    OBJECT          reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    CONST           reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    CONSTRUCTOR     reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    EOF             reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    FALSE           reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    FUNCTION        reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    NULL            reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    NULLABLE        reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    NUMBER          reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    OPERATOR        reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    SMARTCAST       reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    THIS            reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    TRUE            reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    VAL             reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    VAR             reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    WHEN            reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    LONG            reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    ARRAY           reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    LITERAL_STRING  reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    LPAREN          reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    LCCT            reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    IF              reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    RETURN          reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    RETURN_AT       reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE        reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE_AT     reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    BREAK           reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    BREAK_AT        reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    RCHAVE          reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    FUN             reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    SUSPEND         reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)
    COLONCOLON      reduce using rule 127 (unaryPrefix -> prefixUnaryOperator .)


state 108

    (100) comparison -> infixOperation .
    (101) comparison -> infixOperation . comparisonOperator infixOperation
    (242) comparisonOperator -> . MENOR
    (243) comparisonOperator -> . MAIOR
    (244) comparisonOperator -> . MENORIGUAL
    (245) comparisonOperator -> . MAIORIGUAL

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
    INCREMENTO      reduce using rule 100 (comparison -> infixOperation .)
    DECREMENTO      reduce using rule 100 (comparison -> infixOperation .)
    LCCT            reduce using rule 100 (comparison -> infixOperation .)
    COLONCOLON      reduce using rule 100 (comparison -> infixOperation .)
    PONTO           reduce using rule 100 (comparison -> infixOperation .)
    LPAREN          reduce using rule 100 (comparison -> infixOperation .)
    RCHAVE          reduce using rule 100 (comparison -> infixOperation .)
    AS              reduce using rule 100 (comparison -> infixOperation .)
    MAISIGUAL       reduce using rule 100 (comparison -> infixOperation .)
    MENOSIGUAL      reduce using rule 100 (comparison -> infixOperation .)
    MULTIGUAL       reduce using rule 100 (comparison -> infixOperation .)
    DIVIGUAL        reduce using rule 100 (comparison -> infixOperation .)
    MODIGUAL        reduce using rule 100 (comparison -> infixOperation .)
    MULT            reduce using rule 100 (comparison -> infixOperation .)
    DIVIDE          reduce using rule 100 (comparison -> infixOperation .)
    MOD             reduce using rule 100 (comparison -> infixOperation .)
    PLUS            reduce using rule 100 (comparison -> infixOperation .)
    MINUS           reduce using rule 100 (comparison -> infixOperation .)
    PONTOPONTO      reduce using rule 100 (comparison -> infixOperation .)
    ID              reduce using rule 100 (comparison -> infixOperation .)
    CROSSINLINE     reduce using rule 100 (comparison -> infixOperation .)
    IMPORT          reduce using rule 100 (comparison -> infixOperation .)
    INIT            reduce using rule 100 (comparison -> infixOperation .)
    NOINLINE        reduce using rule 100 (comparison -> infixOperation .)
    OUT             reduce using rule 100 (comparison -> infixOperation .)
    VARARG          reduce using rule 100 (comparison -> infixOperation .)
    WHERE           reduce using rule 100 (comparison -> infixOperation .)
    OBJECT          reduce using rule 100 (comparison -> infixOperation .)
    CONST           reduce using rule 100 (comparison -> infixOperation .)
    CONSTRUCTOR     reduce using rule 100 (comparison -> infixOperation .)
    EOF             reduce using rule 100 (comparison -> infixOperation .)
    FALSE           reduce using rule 100 (comparison -> infixOperation .)
    FUNCTION        reduce using rule 100 (comparison -> infixOperation .)
    NULL            reduce using rule 100 (comparison -> infixOperation .)
    NULLABLE        reduce using rule 100 (comparison -> infixOperation .)
    NUMBER          reduce using rule 100 (comparison -> infixOperation .)
    OPERATOR        reduce using rule 100 (comparison -> infixOperation .)
    SMARTCAST       reduce using rule 100 (comparison -> infixOperation .)
    THIS            reduce using rule 100 (comparison -> infixOperation .)
    TRUE            reduce using rule 100 (comparison -> infixOperation .)
    VAL             reduce using rule 100 (comparison -> infixOperation .)
    VAR             reduce using rule 100 (comparison -> infixOperation .)
    WHEN            reduce using rule 100 (comparison -> infixOperation .)
    LONG            reduce using rule 100 (comparison -> infixOperation .)
    ARRAY           reduce using rule 100 (comparison -> infixOperation .)
    ELVIS           reduce using rule 100 (comparison -> infixOperation .)
    IN              reduce using rule 100 (comparison -> infixOperation .)
    NOT_IN          reduce using rule 100 (comparison -> infixOperation .)
    IS              reduce using rule 100 (comparison -> infixOperation .)
    NOT_IS          reduce using rule 100 (comparison -> infixOperation .)
    DIFERENTE       reduce using rule 100 (comparison -> infixOperation .)
    IDENTIDADE      reduce using rule 100 (comparison -> infixOperation .)
    IGUALDADE       reduce using rule 100 (comparison -> infixOperation .)
    SEMIDENTIDADE   reduce using rule 100 (comparison -> infixOperation .)
    AND             reduce using rule 100 (comparison -> infixOperation .)
    OR              reduce using rule 100 (comparison -> infixOperation .)
    FUN             reduce using rule 100 (comparison -> infixOperation .)
    FOR             reduce using rule 100 (comparison -> infixOperation .)
    WHILE           reduce using rule 100 (comparison -> infixOperation .)
    DO              reduce using rule 100 (comparison -> infixOperation .)
    LITERAL_STRING  reduce using rule 100 (comparison -> infixOperation .)
    IF              reduce using rule 100 (comparison -> infixOperation .)
    RETURN          reduce using rule 100 (comparison -> infixOperation .)
    RETURN_AT       reduce using rule 100 (comparison -> infixOperation .)
    CONTINUE        reduce using rule 100 (comparison -> infixOperation .)
    CONTINUE_AT     reduce using rule 100 (comparison -> infixOperation .)
    BREAK           reduce using rule 100 (comparison -> infixOperation .)
    BREAK_AT        reduce using rule 100 (comparison -> infixOperation .)
    NOT             reduce using rule 100 (comparison -> infixOperation .)
    SUSPEND         reduce using rule 100 (comparison -> infixOperation .)
    COMMA           reduce using rule 100 (comparison -> infixOperation .)
    RPAREN          reduce using rule 100 (comparison -> infixOperation .)
    LCHAVE          reduce using rule 100 (comparison -> infixOperation .)
    RCCT            reduce using rule 100 (comparison -> infixOperation .)
    PV              reduce using rule 100 (comparison -> infixOperation .)
    ELSE            reduce using rule 100 (comparison -> infixOperation .)
    MENOR           shift and go to state 213
    MAIOR           shift and go to state 214
    MENORIGUAL      shift and go to state 215
    MAIORIGUAL      shift and go to state 216

  ! MENOR           [ reduce using rule 100 (comparison -> infixOperation .) ]
  ! MAIOR           [ reduce using rule 100 (comparison -> infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 100 (comparison -> infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 100 (comparison -> infixOperation .) ]

    comparisonOperator             shift and go to state 212

state 109

    (229) optionalReceiverType -> receiverType .

    COLONCOLON      reduce using rule 229 (optionalReceiverType -> receiverType .)


state 110

    (257) prefixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    OBJECT          reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    CONST           reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    CONSTRUCTOR     reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    EOF             reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    FALSE           reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    FUNCTION        reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    NULL            reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    NULLABLE        reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    OPERATOR        reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    SMARTCAST       reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    THIS            reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    TRUE            reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    VAL             reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    VAR             reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    WHEN            reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    LONG            reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    ARRAY           reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 257 (prefixUnaryOperator -> INCREMENTO .)


state 111

    (258) prefixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    OBJECT          reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    CONST           reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    CONSTRUCTOR     reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    EOF             reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    FALSE           reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    FUNCTION        reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    NULL            reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    NULLABLE        reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    OPERATOR        reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    SMARTCAST       reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    THIS            reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    TRUE            reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    VAL             reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    VAR             reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    WHEN            reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    LONG            reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    ARRAY           reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 258 (prefixUnaryOperator -> DECREMENTO .)


state 112

    (259) prefixUnaryOperator -> MINUS .

    INCREMENTO      reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    DECREMENTO      reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    MINUS           reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    PLUS            reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    NOT             reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    ID              reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    CROSSINLINE     reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    IMPORT          reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    INIT            reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    NOINLINE        reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    OUT             reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    VARARG          reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    WHERE           reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    OBJECT          reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    CONST           reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    CONSTRUCTOR     reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    EOF             reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    FALSE           reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    FUNCTION        reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    NULL            reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    NULLABLE        reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    NUMBER          reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    OPERATOR        reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    SMARTCAST       reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    THIS            reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    TRUE            reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    VAL             reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    VAR             reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    WHEN            reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    LONG            reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    ARRAY           reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    LITERAL_STRING  reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    LPAREN          reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    LCCT            reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    IF              reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    RETURN          reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    RETURN_AT       reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    CONTINUE        reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    BREAK           reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    BREAK_AT        reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    RCHAVE          reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    FUN             reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    SUSPEND         reduce using rule 259 (prefixUnaryOperator -> MINUS .)
    COLONCOLON      reduce using rule 259 (prefixUnaryOperator -> MINUS .)


state 113

    (260) prefixUnaryOperator -> PLUS .

    INCREMENTO      reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    DECREMENTO      reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    MINUS           reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    PLUS            reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    NOT             reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    ID              reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    CROSSINLINE     reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    IMPORT          reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    INIT            reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    NOINLINE        reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    OUT             reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    VARARG          reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    WHERE           reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    OBJECT          reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    CONST           reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    CONSTRUCTOR     reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    EOF             reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    FALSE           reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    FUNCTION        reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    NULL            reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    NULLABLE        reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    NUMBER          reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    OPERATOR        reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    SMARTCAST       reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    THIS            reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    TRUE            reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    VAL             reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    VAR             reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    WHEN            reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    LONG            reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    ARRAY           reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    LITERAL_STRING  reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    LPAREN          reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    LCCT            reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    IF              reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    RETURN          reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    RETURN_AT       reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    CONTINUE        reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    BREAK           reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    BREAK_AT        reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    RCHAVE          reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    FUN             reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    SUSPEND         reduce using rule 260 (prefixUnaryOperator -> PLUS .)
    COLONCOLON      reduce using rule 260 (prefixUnaryOperator -> PLUS .)


state 114

    (261) prefixUnaryOperator -> NOT .

    INCREMENTO      reduce using rule 261 (prefixUnaryOperator -> NOT .)
    DECREMENTO      reduce using rule 261 (prefixUnaryOperator -> NOT .)
    MINUS           reduce using rule 261 (prefixUnaryOperator -> NOT .)
    PLUS            reduce using rule 261 (prefixUnaryOperator -> NOT .)
    NOT             reduce using rule 261 (prefixUnaryOperator -> NOT .)
    ID              reduce using rule 261 (prefixUnaryOperator -> NOT .)
    CROSSINLINE     reduce using rule 261 (prefixUnaryOperator -> NOT .)
    IMPORT          reduce using rule 261 (prefixUnaryOperator -> NOT .)
    INIT            reduce using rule 261 (prefixUnaryOperator -> NOT .)
    NOINLINE        reduce using rule 261 (prefixUnaryOperator -> NOT .)
    OUT             reduce using rule 261 (prefixUnaryOperator -> NOT .)
    VARARG          reduce using rule 261 (prefixUnaryOperator -> NOT .)
    WHERE           reduce using rule 261 (prefixUnaryOperator -> NOT .)
    OBJECT          reduce using rule 261 (prefixUnaryOperator -> NOT .)
    CONST           reduce using rule 261 (prefixUnaryOperator -> NOT .)
    CONSTRUCTOR     reduce using rule 261 (prefixUnaryOperator -> NOT .)
    EOF             reduce using rule 261 (prefixUnaryOperator -> NOT .)
    FALSE           reduce using rule 261 (prefixUnaryOperator -> NOT .)
    FUNCTION        reduce using rule 261 (prefixUnaryOperator -> NOT .)
    NULL            reduce using rule 261 (prefixUnaryOperator -> NOT .)
    NULLABLE        reduce using rule 261 (prefixUnaryOperator -> NOT .)
    NUMBER          reduce using rule 261 (prefixUnaryOperator -> NOT .)
    OPERATOR        reduce using rule 261 (prefixUnaryOperator -> NOT .)
    SMARTCAST       reduce using rule 261 (prefixUnaryOperator -> NOT .)
    THIS            reduce using rule 261 (prefixUnaryOperator -> NOT .)
    TRUE            reduce using rule 261 (prefixUnaryOperator -> NOT .)
    VAL             reduce using rule 261 (prefixUnaryOperator -> NOT .)
    VAR             reduce using rule 261 (prefixUnaryOperator -> NOT .)
    WHEN            reduce using rule 261 (prefixUnaryOperator -> NOT .)
    LONG            reduce using rule 261 (prefixUnaryOperator -> NOT .)
    ARRAY           reduce using rule 261 (prefixUnaryOperator -> NOT .)
    LITERAL_STRING  reduce using rule 261 (prefixUnaryOperator -> NOT .)
    LPAREN          reduce using rule 261 (prefixUnaryOperator -> NOT .)
    LCCT            reduce using rule 261 (prefixUnaryOperator -> NOT .)
    IF              reduce using rule 261 (prefixUnaryOperator -> NOT .)
    RETURN          reduce using rule 261 (prefixUnaryOperator -> NOT .)
    RETURN_AT       reduce using rule 261 (prefixUnaryOperator -> NOT .)
    CONTINUE        reduce using rule 261 (prefixUnaryOperator -> NOT .)
    CONTINUE_AT     reduce using rule 261 (prefixUnaryOperator -> NOT .)
    BREAK           reduce using rule 261 (prefixUnaryOperator -> NOT .)
    BREAK_AT        reduce using rule 261 (prefixUnaryOperator -> NOT .)
    RCHAVE          reduce using rule 261 (prefixUnaryOperator -> NOT .)
    FUN             reduce using rule 261 (prefixUnaryOperator -> NOT .)
    SUSPEND         reduce using rule 261 (prefixUnaryOperator -> NOT .)
    COLONCOLON      reduce using rule 261 (prefixUnaryOperator -> NOT .)


state 115

    (102) infixOperation -> elvisExpression . infixOperationRecursive
    (103) infixOperation -> elvisExpression .
    (104) infixOperationRecursive -> . inOrIs elvisOrType
    (105) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (106) inOrIs -> . inOperator
    (107) inOrIs -> . isOperator
    (246) inOperator -> . IN
    (247) inOperator -> . NOT_IN
    (248) isOperator -> . IS
    (249) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    INCREMENTO      reduce using rule 103 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 103 (infixOperation -> elvisExpression .)
    MENOR           reduce using rule 103 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 103 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 103 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 103 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 103 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 103 (infixOperation -> elvisExpression .)
    AS              reduce using rule 103 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 103 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 103 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 103 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 103 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 103 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 103 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 103 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 103 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 103 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 103 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 103 (infixOperation -> elvisExpression .)
    ID              reduce using rule 103 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 103 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 103 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 103 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 103 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 103 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 103 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 103 (infixOperation -> elvisExpression .)
    OBJECT          reduce using rule 103 (infixOperation -> elvisExpression .)
    CONST           reduce using rule 103 (infixOperation -> elvisExpression .)
    CONSTRUCTOR     reduce using rule 103 (infixOperation -> elvisExpression .)
    EOF             reduce using rule 103 (infixOperation -> elvisExpression .)
    FALSE           reduce using rule 103 (infixOperation -> elvisExpression .)
    FUNCTION        reduce using rule 103 (infixOperation -> elvisExpression .)
    NULL            reduce using rule 103 (infixOperation -> elvisExpression .)
    NULLABLE        reduce using rule 103 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 103 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 103 (infixOperation -> elvisExpression .)
    SMARTCAST       reduce using rule 103 (infixOperation -> elvisExpression .)
    THIS            reduce using rule 103 (infixOperation -> elvisExpression .)
    TRUE            reduce using rule 103 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 103 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 103 (infixOperation -> elvisExpression .)
    WHEN            reduce using rule 103 (infixOperation -> elvisExpression .)
    LONG            reduce using rule 103 (infixOperation -> elvisExpression .)
    ARRAY           reduce using rule 103 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 103 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 103 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 103 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 103 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 103 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 103 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 103 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 103 (infixOperation -> elvisExpression .)
    AND             reduce using rule 103 (infixOperation -> elvisExpression .)
    OR              reduce using rule 103 (infixOperation -> elvisExpression .)
    FUN             reduce using rule 103 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 103 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 103 (infixOperation -> elvisExpression .)
    DO              reduce using rule 103 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 103 (infixOperation -> elvisExpression .)
    IF              reduce using rule 103 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 103 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 103 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 103 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 103 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 103 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 103 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 103 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 103 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 103 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 103 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 103 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 103 (infixOperation -> elvisExpression .)
    PV              reduce using rule 103 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 103 (infixOperation -> elvisExpression .)
    IN              shift and go to state 221
    NOT_IN          shift and go to state 222
    IS              shift and go to state 223
    NOT_IS          shift and go to state 224

  ! IN              [ reduce using rule 103 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 103 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 103 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 103 (infixOperation -> elvisExpression .) ]

    infixOperationRecursive        shift and go to state 217
    inOrIs                         shift and go to state 218
    inOperator                     shift and go to state 219
    isOperator                     shift and go to state 220

state 116

    (68) receiverType -> typeModifier . parenthesizedType
    (67) parenthesizedType -> . LPAREN type RPAREN

    LPAREN          shift and go to state 226

    parenthesizedType              shift and go to state 225

state 117

    (110) elvisExpression -> infixFunctionCall .
    (111) elvisExpression -> infixFunctionCall . ELVIS elvisExpression

  ! shift/reduce conflict for ELVIS resolved as shift
    INCREMENTO      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    DECREMENTO      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MENOR           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    LCCT            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    COLONCOLON      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    PONTO           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    LPAREN          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    RCHAVE          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    AS              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MAISIGUAL       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MENOSIGUAL      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MULTIGUAL       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    DIVIGUAL        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MODIGUAL        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MULT            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    DIVIDE          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MOD             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    PLUS            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MINUS           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    PONTOPONTO      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    ID              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    CROSSINLINE     reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IMPORT          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    INIT            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NOINLINE        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    OUT             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    VARARG          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    WHERE           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    OBJECT          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    CONST           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    CONSTRUCTOR     reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    EOF             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    FALSE           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    FUNCTION        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NULL            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NULLABLE        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NUMBER          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    OPERATOR        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    SMARTCAST       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    THIS            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    TRUE            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    VAL             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    VAR             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    WHEN            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    LONG            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    ARRAY           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IN              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NOT_IN          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IS              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NOT_IS          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MAIOR           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MENORIGUAL      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MAIORIGUAL      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    DIFERENTE       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IDENTIDADE      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IGUALDADE       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    AND             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    OR              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    FUN             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    FOR             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    WHILE           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    DO              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    LITERAL_STRING  reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IF              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    RETURN          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    RETURN_AT       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    CONTINUE        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    CONTINUE_AT     reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    BREAK           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    BREAK_AT        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NOT             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    SUSPEND         reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    COMMA           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    RPAREN          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    LCHAVE          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    RCCT            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    PV              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    ELSE            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    ELVIS           shift and go to state 227

  ! ELVIS           [ reduce using rule 110 (elvisExpression -> infixFunctionCall .) ]


state 118

    (112) infixFunctionCall -> rangeExpression .
    (113) infixFunctionCall -> rangeExpression . simpleIdentifier infixFunctionCall
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    INCREMENTO      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    DECREMENTO      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MENOR           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    LCCT            reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    COLONCOLON      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    PONTO           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    LPAREN          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    RCHAVE          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    AS              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MAISIGUAL       reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MENOSIGUAL      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MULTIGUAL       reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    DIVIGUAL        reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MODIGUAL        reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MULT            reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    DIVIDE          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MOD             reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    PLUS            reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MINUS           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    PONTOPONTO      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    ELVIS           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    IN              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    NOT_IN          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    IS              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    NOT_IS          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MAIOR           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MENORIGUAL      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MAIORIGUAL      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    DIFERENTE       reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    IDENTIDADE      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    IGUALDADE       reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    SEMIDENTIDADE   reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    AND             reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    OR              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    FUN             reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    FOR             reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    WHILE           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    DO              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    LITERAL_STRING  reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    IF              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    RETURN          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    RETURN_AT       reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    CONTINUE        reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    CONTINUE_AT     reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    BREAK           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    BREAK_AT        reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    NOT             reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    SUSPEND         reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    COMMA           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    RPAREN          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    LCHAVE          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    RCCT            reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    PV              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    ELSE            reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

  ! ID              [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! IMPORT          [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! INIT            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! OUT             [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! VARARG          [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! WHERE           [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! OBJECT          [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! CONST           [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! EOF             [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! FALSE           [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! FUNCTION        [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! NULL            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! NULLABLE        [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! NUMBER          [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! SMARTCAST       [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! THIS            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! TRUE            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! VAL             [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! VAR             [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! WHEN            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! LONG            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! ARRAY           [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]

    simpleIdentifier               shift and go to state 228

state 119

    (114) rangeExpression -> additiveExpression .
    (115) rangeExpression -> additiveExpression . PONTOPONTO rangeExpression

  ! shift/reduce conflict for PONTOPONTO resolved as shift
    INCREMENTO      reduce using rule 114 (rangeExpression -> additiveExpression .)
    DECREMENTO      reduce using rule 114 (rangeExpression -> additiveExpression .)
    MENOR           reduce using rule 114 (rangeExpression -> additiveExpression .)
    LCCT            reduce using rule 114 (rangeExpression -> additiveExpression .)
    COLONCOLON      reduce using rule 114 (rangeExpression -> additiveExpression .)
    PONTO           reduce using rule 114 (rangeExpression -> additiveExpression .)
    LPAREN          reduce using rule 114 (rangeExpression -> additiveExpression .)
    RCHAVE          reduce using rule 114 (rangeExpression -> additiveExpression .)
    AS              reduce using rule 114 (rangeExpression -> additiveExpression .)
    MAISIGUAL       reduce using rule 114 (rangeExpression -> additiveExpression .)
    MENOSIGUAL      reduce using rule 114 (rangeExpression -> additiveExpression .)
    MULTIGUAL       reduce using rule 114 (rangeExpression -> additiveExpression .)
    DIVIGUAL        reduce using rule 114 (rangeExpression -> additiveExpression .)
    MODIGUAL        reduce using rule 114 (rangeExpression -> additiveExpression .)
    MULT            reduce using rule 114 (rangeExpression -> additiveExpression .)
    DIVIDE          reduce using rule 114 (rangeExpression -> additiveExpression .)
    MOD             reduce using rule 114 (rangeExpression -> additiveExpression .)
    PLUS            reduce using rule 114 (rangeExpression -> additiveExpression .)
    MINUS           reduce using rule 114 (rangeExpression -> additiveExpression .)
    ID              reduce using rule 114 (rangeExpression -> additiveExpression .)
    CROSSINLINE     reduce using rule 114 (rangeExpression -> additiveExpression .)
    IMPORT          reduce using rule 114 (rangeExpression -> additiveExpression .)
    INIT            reduce using rule 114 (rangeExpression -> additiveExpression .)
    NOINLINE        reduce using rule 114 (rangeExpression -> additiveExpression .)
    OUT             reduce using rule 114 (rangeExpression -> additiveExpression .)
    VARARG          reduce using rule 114 (rangeExpression -> additiveExpression .)
    WHERE           reduce using rule 114 (rangeExpression -> additiveExpression .)
    OBJECT          reduce using rule 114 (rangeExpression -> additiveExpression .)
    CONST           reduce using rule 114 (rangeExpression -> additiveExpression .)
    CONSTRUCTOR     reduce using rule 114 (rangeExpression -> additiveExpression .)
    EOF             reduce using rule 114 (rangeExpression -> additiveExpression .)
    FALSE           reduce using rule 114 (rangeExpression -> additiveExpression .)
    FUNCTION        reduce using rule 114 (rangeExpression -> additiveExpression .)
    NULL            reduce using rule 114 (rangeExpression -> additiveExpression .)
    NULLABLE        reduce using rule 114 (rangeExpression -> additiveExpression .)
    NUMBER          reduce using rule 114 (rangeExpression -> additiveExpression .)
    OPERATOR        reduce using rule 114 (rangeExpression -> additiveExpression .)
    SMARTCAST       reduce using rule 114 (rangeExpression -> additiveExpression .)
    THIS            reduce using rule 114 (rangeExpression -> additiveExpression .)
    TRUE            reduce using rule 114 (rangeExpression -> additiveExpression .)
    VAL             reduce using rule 114 (rangeExpression -> additiveExpression .)
    VAR             reduce using rule 114 (rangeExpression -> additiveExpression .)
    WHEN            reduce using rule 114 (rangeExpression -> additiveExpression .)
    LONG            reduce using rule 114 (rangeExpression -> additiveExpression .)
    ARRAY           reduce using rule 114 (rangeExpression -> additiveExpression .)
    ELVIS           reduce using rule 114 (rangeExpression -> additiveExpression .)
    IN              reduce using rule 114 (rangeExpression -> additiveExpression .)
    NOT_IN          reduce using rule 114 (rangeExpression -> additiveExpression .)
    IS              reduce using rule 114 (rangeExpression -> additiveExpression .)
    NOT_IS          reduce using rule 114 (rangeExpression -> additiveExpression .)
    MAIOR           reduce using rule 114 (rangeExpression -> additiveExpression .)
    MENORIGUAL      reduce using rule 114 (rangeExpression -> additiveExpression .)
    MAIORIGUAL      reduce using rule 114 (rangeExpression -> additiveExpression .)
    DIFERENTE       reduce using rule 114 (rangeExpression -> additiveExpression .)
    IDENTIDADE      reduce using rule 114 (rangeExpression -> additiveExpression .)
    IGUALDADE       reduce using rule 114 (rangeExpression -> additiveExpression .)
    SEMIDENTIDADE   reduce using rule 114 (rangeExpression -> additiveExpression .)
    AND             reduce using rule 114 (rangeExpression -> additiveExpression .)
    OR              reduce using rule 114 (rangeExpression -> additiveExpression .)
    FUN             reduce using rule 114 (rangeExpression -> additiveExpression .)
    FOR             reduce using rule 114 (rangeExpression -> additiveExpression .)
    WHILE           reduce using rule 114 (rangeExpression -> additiveExpression .)
    DO              reduce using rule 114 (rangeExpression -> additiveExpression .)
    LITERAL_STRING  reduce using rule 114 (rangeExpression -> additiveExpression .)
    IF              reduce using rule 114 (rangeExpression -> additiveExpression .)
    RETURN          reduce using rule 114 (rangeExpression -> additiveExpression .)
    RETURN_AT       reduce using rule 114 (rangeExpression -> additiveExpression .)
    CONTINUE        reduce using rule 114 (rangeExpression -> additiveExpression .)
    CONTINUE_AT     reduce using rule 114 (rangeExpression -> additiveExpression .)
    BREAK           reduce using rule 114 (rangeExpression -> additiveExpression .)
    BREAK_AT        reduce using rule 114 (rangeExpression -> additiveExpression .)
    NOT             reduce using rule 114 (rangeExpression -> additiveExpression .)
    SUSPEND         reduce using rule 114 (rangeExpression -> additiveExpression .)
    COMMA           reduce using rule 114 (rangeExpression -> additiveExpression .)
    RPAREN          reduce using rule 114 (rangeExpression -> additiveExpression .)
    LCHAVE          reduce using rule 114 (rangeExpression -> additiveExpression .)
    RCCT            reduce using rule 114 (rangeExpression -> additiveExpression .)
    PV              reduce using rule 114 (rangeExpression -> additiveExpression .)
    ELSE            reduce using rule 114 (rangeExpression -> additiveExpression .)
    PONTOPONTO      shift and go to state 229

  ! PONTOPONTO      [ reduce using rule 114 (rangeExpression -> additiveExpression .) ]


state 120

    (116) additiveExpression -> multiplicativeExpression .
    (117) additiveExpression -> multiplicativeExpression . additiveOperator additiveExpression
    (250) additiveOperator -> . PLUS
    (251) additiveOperator -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    INCREMENTO      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    DECREMENTO      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MENOR           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    LCCT            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    COLONCOLON      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    PONTO           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    LPAREN          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    RCHAVE          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    AS              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MAISIGUAL       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MENOSIGUAL      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MULTIGUAL       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    DIVIGUAL        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MODIGUAL        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MULT            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    DIVIDE          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MOD             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    PONTOPONTO      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    ID              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    CROSSINLINE     reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IMPORT          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    INIT            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NOINLINE        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    OUT             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    VARARG          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    WHERE           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    OBJECT          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    CONST           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    CONSTRUCTOR     reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    EOF             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    FALSE           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    FUNCTION        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NULL            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NULLABLE        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NUMBER          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    OPERATOR        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    SMARTCAST       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    THIS            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    TRUE            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    VAL             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    VAR             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    WHEN            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    LONG            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    ARRAY           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    ELVIS           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IN              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NOT_IN          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IS              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NOT_IS          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MAIOR           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MENORIGUAL      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    DIFERENTE       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IDENTIDADE      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IGUALDADE       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    FUN             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    FOR             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    WHILE           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    DO              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IF              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    RETURN          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    RETURN_AT       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    CONTINUE        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    BREAK           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    BREAK_AT        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NOT             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    SUSPEND         reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    COMMA           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    LCHAVE          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    RCCT            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    PV              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    ELSE            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    PLUS            shift and go to state 231
    MINUS           shift and go to state 232

  ! PLUS            [ reduce using rule 116 (additiveExpression -> multiplicativeExpression .) ]
  ! MINUS           [ reduce using rule 116 (additiveExpression -> multiplicativeExpression .) ]

    additiveOperator               shift and go to state 230

state 121

    (118) multiplicativeExpression -> asExpression .
    (119) multiplicativeExpression -> asExpression . multiplicativeOperator multiplicativeExpression
    (252) multiplicativeOperator -> . MULT
    (253) multiplicativeOperator -> . DIVIDE
    (254) multiplicativeOperator -> . MOD

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    INCREMENTO      reduce using rule 118 (multiplicativeExpression -> asExpression .)
    DECREMENTO      reduce using rule 118 (multiplicativeExpression -> asExpression .)
    MENOR           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    LCCT            reduce using rule 118 (multiplicativeExpression -> asExpression .)
    COLONCOLON      reduce using rule 118 (multiplicativeExpression -> asExpression .)
    PONTO           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    LPAREN          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    RCHAVE          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    AS              reduce using rule 118 (multiplicativeExpression -> asExpression .)
    MAISIGUAL       reduce using rule 118 (multiplicativeExpression -> asExpression .)
    MENOSIGUAL      reduce using rule 118 (multiplicativeExpression -> asExpression .)
    MULTIGUAL       reduce using rule 118 (multiplicativeExpression -> asExpression .)
    DIVIGUAL        reduce using rule 118 (multiplicativeExpression -> asExpression .)
    MODIGUAL        reduce using rule 118 (multiplicativeExpression -> asExpression .)
    PLUS            reduce using rule 118 (multiplicativeExpression -> asExpression .)
    MINUS           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    PONTOPONTO      reduce using rule 118 (multiplicativeExpression -> asExpression .)
    ID              reduce using rule 118 (multiplicativeExpression -> asExpression .)
    CROSSINLINE     reduce using rule 118 (multiplicativeExpression -> asExpression .)
    IMPORT          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    INIT            reduce using rule 118 (multiplicativeExpression -> asExpression .)
    NOINLINE        reduce using rule 118 (multiplicativeExpression -> asExpression .)
    OUT             reduce using rule 118 (multiplicativeExpression -> asExpression .)
    VARARG          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    WHERE           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    OBJECT          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    CONST           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    CONSTRUCTOR     reduce using rule 118 (multiplicativeExpression -> asExpression .)
    EOF             reduce using rule 118 (multiplicativeExpression -> asExpression .)
    FALSE           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    FUNCTION        reduce using rule 118 (multiplicativeExpression -> asExpression .)
    NULL            reduce using rule 118 (multiplicativeExpression -> asExpression .)
    NULLABLE        reduce using rule 118 (multiplicativeExpression -> asExpression .)
    NUMBER          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    OPERATOR        reduce using rule 118 (multiplicativeExpression -> asExpression .)
    SMARTCAST       reduce using rule 118 (multiplicativeExpression -> asExpression .)
    THIS            reduce using rule 118 (multiplicativeExpression -> asExpression .)
    TRUE            reduce using rule 118 (multiplicativeExpression -> asExpression .)
    VAL             reduce using rule 118 (multiplicativeExpression -> asExpression .)
    VAR             reduce using rule 118 (multiplicativeExpression -> asExpression .)
    WHEN            reduce using rule 118 (multiplicativeExpression -> asExpression .)
    LONG            reduce using rule 118 (multiplicativeExpression -> asExpression .)
    ARRAY           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    ELVIS           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    IN              reduce using rule 118 (multiplicativeExpression -> asExpression .)
    NOT_IN          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    IS              reduce using rule 118 (multiplicativeExpression -> asExpression .)
    NOT_IS          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    MAIOR           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    MENORIGUAL      reduce using rule 118 (multiplicativeExpression -> asExpression .)
    MAIORIGUAL      reduce using rule 118 (multiplicativeExpression -> asExpression .)
    DIFERENTE       reduce using rule 118 (multiplicativeExpression -> asExpression .)
    IDENTIDADE      reduce using rule 118 (multiplicativeExpression -> asExpression .)
    IGUALDADE       reduce using rule 118 (multiplicativeExpression -> asExpression .)
    SEMIDENTIDADE   reduce using rule 118 (multiplicativeExpression -> asExpression .)
    AND             reduce using rule 118 (multiplicativeExpression -> asExpression .)
    OR              reduce using rule 118 (multiplicativeExpression -> asExpression .)
    FUN             reduce using rule 118 (multiplicativeExpression -> asExpression .)
    FOR             reduce using rule 118 (multiplicativeExpression -> asExpression .)
    WHILE           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    DO              reduce using rule 118 (multiplicativeExpression -> asExpression .)
    LITERAL_STRING  reduce using rule 118 (multiplicativeExpression -> asExpression .)
    IF              reduce using rule 118 (multiplicativeExpression -> asExpression .)
    RETURN          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    RETURN_AT       reduce using rule 118 (multiplicativeExpression -> asExpression .)
    CONTINUE        reduce using rule 118 (multiplicativeExpression -> asExpression .)
    CONTINUE_AT     reduce using rule 118 (multiplicativeExpression -> asExpression .)
    BREAK           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    BREAK_AT        reduce using rule 118 (multiplicativeExpression -> asExpression .)
    NOT             reduce using rule 118 (multiplicativeExpression -> asExpression .)
    SUSPEND         reduce using rule 118 (multiplicativeExpression -> asExpression .)
    COMMA           reduce using rule 118 (multiplicativeExpression -> asExpression .)
    RPAREN          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    LCHAVE          reduce using rule 118 (multiplicativeExpression -> asExpression .)
    RCCT            reduce using rule 118 (multiplicativeExpression -> asExpression .)
    PV              reduce using rule 118 (multiplicativeExpression -> asExpression .)
    ELSE            reduce using rule 118 (multiplicativeExpression -> asExpression .)
    MULT            shift and go to state 234
    DIVIDE          shift and go to state 235
    MOD             shift and go to state 236

  ! MULT            [ reduce using rule 118 (multiplicativeExpression -> asExpression .) ]
  ! DIVIDE          [ reduce using rule 118 (multiplicativeExpression -> asExpression .) ]
  ! MOD             [ reduce using rule 118 (multiplicativeExpression -> asExpression .) ]

    multiplicativeOperator         shift and go to state 233

state 122

    (39) type -> optionalTypeModifiers optype .

    LCHAVE          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    FUN             reduce using rule 39 (type -> optionalTypeModifiers optype .)
    $end            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    FOR             reduce using rule 39 (type -> optionalTypeModifiers optype .)
    WHILE           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    DO              reduce using rule 39 (type -> optionalTypeModifiers optype .)
    VAR             reduce using rule 39 (type -> optionalTypeModifiers optype .)
    VAL             reduce using rule 39 (type -> optionalTypeModifiers optype .)
    ID              reduce using rule 39 (type -> optionalTypeModifiers optype .)
    CROSSINLINE     reduce using rule 39 (type -> optionalTypeModifiers optype .)
    IMPORT          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    INIT            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    NOINLINE        reduce using rule 39 (type -> optionalTypeModifiers optype .)
    OUT             reduce using rule 39 (type -> optionalTypeModifiers optype .)
    VARARG          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    WHERE           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    OBJECT          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    CONST           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    CONSTRUCTOR     reduce using rule 39 (type -> optionalTypeModifiers optype .)
    EOF             reduce using rule 39 (type -> optionalTypeModifiers optype .)
    FALSE           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    FUNCTION        reduce using rule 39 (type -> optionalTypeModifiers optype .)
    NULL            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    NULLABLE        reduce using rule 39 (type -> optionalTypeModifiers optype .)
    NUMBER          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    OPERATOR        reduce using rule 39 (type -> optionalTypeModifiers optype .)
    SMARTCAST       reduce using rule 39 (type -> optionalTypeModifiers optype .)
    THIS            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    TRUE            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    WHEN            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    LONG            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    ARRAY           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    LPAREN          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    LITERAL_STRING  reduce using rule 39 (type -> optionalTypeModifiers optype .)
    LCCT            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    IF              reduce using rule 39 (type -> optionalTypeModifiers optype .)
    RETURN          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    RETURN_AT       reduce using rule 39 (type -> optionalTypeModifiers optype .)
    CONTINUE        reduce using rule 39 (type -> optionalTypeModifiers optype .)
    CONTINUE_AT     reduce using rule 39 (type -> optionalTypeModifiers optype .)
    BREAK           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    BREAK_AT        reduce using rule 39 (type -> optionalTypeModifiers optype .)
    RCHAVE          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    INCREMENTO      reduce using rule 39 (type -> optionalTypeModifiers optype .)
    DECREMENTO      reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MINUS           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    PLUS            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    NOT             reduce using rule 39 (type -> optionalTypeModifiers optype .)
    SUSPEND         reduce using rule 39 (type -> optionalTypeModifiers optype .)
    COLONCOLON      reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MENOR           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    PONTO           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    AS              reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MAISIGUAL       reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MENOSIGUAL      reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MULTIGUAL       reduce using rule 39 (type -> optionalTypeModifiers optype .)
    DIVIGUAL        reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MODIGUAL        reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MULT            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    DIVIDE          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MOD             reduce using rule 39 (type -> optionalTypeModifiers optype .)
    PONTOPONTO      reduce using rule 39 (type -> optionalTypeModifiers optype .)
    ELVIS           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    IN              reduce using rule 39 (type -> optionalTypeModifiers optype .)
    NOT_IN          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    IS              reduce using rule 39 (type -> optionalTypeModifiers optype .)
    NOT_IS          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MAIOR           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MENORIGUAL      reduce using rule 39 (type -> optionalTypeModifiers optype .)
    MAIORIGUAL      reduce using rule 39 (type -> optionalTypeModifiers optype .)
    DIFERENTE       reduce using rule 39 (type -> optionalTypeModifiers optype .)
    IDENTIDADE      reduce using rule 39 (type -> optionalTypeModifiers optype .)
    IGUALDADE       reduce using rule 39 (type -> optionalTypeModifiers optype .)
    SEMIDENTIDADE   reduce using rule 39 (type -> optionalTypeModifiers optype .)
    AND             reduce using rule 39 (type -> optionalTypeModifiers optype .)
    OR              reduce using rule 39 (type -> optionalTypeModifiers optype .)
    COMMA           reduce using rule 39 (type -> optionalTypeModifiers optype .)
    RPAREN          reduce using rule 39 (type -> optionalTypeModifiers optype .)
    RCCT            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    PV              reduce using rule 39 (type -> optionalTypeModifiers optype .)
    ELSE            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    SETA            reduce using rule 39 (type -> optionalTypeModifiers optype .)
    ATRIBUICAO      reduce using rule 39 (type -> optionalTypeModifiers optype .)


state 123

    (42) optype -> parenthesizedType .

    LCHAVE          reduce using rule 42 (optype -> parenthesizedType .)
    FUN             reduce using rule 42 (optype -> parenthesizedType .)
    $end            reduce using rule 42 (optype -> parenthesizedType .)
    FOR             reduce using rule 42 (optype -> parenthesizedType .)
    WHILE           reduce using rule 42 (optype -> parenthesizedType .)
    DO              reduce using rule 42 (optype -> parenthesizedType .)
    VAR             reduce using rule 42 (optype -> parenthesizedType .)
    VAL             reduce using rule 42 (optype -> parenthesizedType .)
    ID              reduce using rule 42 (optype -> parenthesizedType .)
    CROSSINLINE     reduce using rule 42 (optype -> parenthesizedType .)
    IMPORT          reduce using rule 42 (optype -> parenthesizedType .)
    INIT            reduce using rule 42 (optype -> parenthesizedType .)
    NOINLINE        reduce using rule 42 (optype -> parenthesizedType .)
    OUT             reduce using rule 42 (optype -> parenthesizedType .)
    VARARG          reduce using rule 42 (optype -> parenthesizedType .)
    WHERE           reduce using rule 42 (optype -> parenthesizedType .)
    OBJECT          reduce using rule 42 (optype -> parenthesizedType .)
    CONST           reduce using rule 42 (optype -> parenthesizedType .)
    CONSTRUCTOR     reduce using rule 42 (optype -> parenthesizedType .)
    EOF             reduce using rule 42 (optype -> parenthesizedType .)
    FALSE           reduce using rule 42 (optype -> parenthesizedType .)
    FUNCTION        reduce using rule 42 (optype -> parenthesizedType .)
    NULL            reduce using rule 42 (optype -> parenthesizedType .)
    NULLABLE        reduce using rule 42 (optype -> parenthesizedType .)
    NUMBER          reduce using rule 42 (optype -> parenthesizedType .)
    OPERATOR        reduce using rule 42 (optype -> parenthesizedType .)
    SMARTCAST       reduce using rule 42 (optype -> parenthesizedType .)
    THIS            reduce using rule 42 (optype -> parenthesizedType .)
    TRUE            reduce using rule 42 (optype -> parenthesizedType .)
    WHEN            reduce using rule 42 (optype -> parenthesizedType .)
    LONG            reduce using rule 42 (optype -> parenthesizedType .)
    ARRAY           reduce using rule 42 (optype -> parenthesizedType .)
    LPAREN          reduce using rule 42 (optype -> parenthesizedType .)
    LITERAL_STRING  reduce using rule 42 (optype -> parenthesizedType .)
    LCCT            reduce using rule 42 (optype -> parenthesizedType .)
    IF              reduce using rule 42 (optype -> parenthesizedType .)
    RETURN          reduce using rule 42 (optype -> parenthesizedType .)
    RETURN_AT       reduce using rule 42 (optype -> parenthesizedType .)
    CONTINUE        reduce using rule 42 (optype -> parenthesizedType .)
    CONTINUE_AT     reduce using rule 42 (optype -> parenthesizedType .)
    BREAK           reduce using rule 42 (optype -> parenthesizedType .)
    BREAK_AT        reduce using rule 42 (optype -> parenthesizedType .)
    RCHAVE          reduce using rule 42 (optype -> parenthesizedType .)
    INCREMENTO      reduce using rule 42 (optype -> parenthesizedType .)
    DECREMENTO      reduce using rule 42 (optype -> parenthesizedType .)
    MINUS           reduce using rule 42 (optype -> parenthesizedType .)
    PLUS            reduce using rule 42 (optype -> parenthesizedType .)
    NOT             reduce using rule 42 (optype -> parenthesizedType .)
    SUSPEND         reduce using rule 42 (optype -> parenthesizedType .)
    COLONCOLON      reduce using rule 42 (optype -> parenthesizedType .)
    MENOR           reduce using rule 42 (optype -> parenthesizedType .)
    PONTO           reduce using rule 42 (optype -> parenthesizedType .)
    AS              reduce using rule 42 (optype -> parenthesizedType .)
    MAISIGUAL       reduce using rule 42 (optype -> parenthesizedType .)
    MENOSIGUAL      reduce using rule 42 (optype -> parenthesizedType .)
    MULTIGUAL       reduce using rule 42 (optype -> parenthesizedType .)
    DIVIGUAL        reduce using rule 42 (optype -> parenthesizedType .)
    MODIGUAL        reduce using rule 42 (optype -> parenthesizedType .)
    MULT            reduce using rule 42 (optype -> parenthesizedType .)
    DIVIDE          reduce using rule 42 (optype -> parenthesizedType .)
    MOD             reduce using rule 42 (optype -> parenthesizedType .)
    PONTOPONTO      reduce using rule 42 (optype -> parenthesizedType .)
    ELVIS           reduce using rule 42 (optype -> parenthesizedType .)
    IN              reduce using rule 42 (optype -> parenthesizedType .)
    NOT_IN          reduce using rule 42 (optype -> parenthesizedType .)
    IS              reduce using rule 42 (optype -> parenthesizedType .)
    NOT_IS          reduce using rule 42 (optype -> parenthesizedType .)
    MAIOR           reduce using rule 42 (optype -> parenthesizedType .)
    MENORIGUAL      reduce using rule 42 (optype -> parenthesizedType .)
    MAIORIGUAL      reduce using rule 42 (optype -> parenthesizedType .)
    DIFERENTE       reduce using rule 42 (optype -> parenthesizedType .)
    IDENTIDADE      reduce using rule 42 (optype -> parenthesizedType .)
    IGUALDADE       reduce using rule 42 (optype -> parenthesizedType .)
    SEMIDENTIDADE   reduce using rule 42 (optype -> parenthesizedType .)
    AND             reduce using rule 42 (optype -> parenthesizedType .)
    OR              reduce using rule 42 (optype -> parenthesizedType .)
    COMMA           reduce using rule 42 (optype -> parenthesizedType .)
    RPAREN          reduce using rule 42 (optype -> parenthesizedType .)
    RCCT            reduce using rule 42 (optype -> parenthesizedType .)
    PV              reduce using rule 42 (optype -> parenthesizedType .)
    ELSE            reduce using rule 42 (optype -> parenthesizedType .)
    SETA            reduce using rule 42 (optype -> parenthesizedType .)
    ATRIBUICAO      reduce using rule 42 (optype -> parenthesizedType .)


state 124

    (43) optype -> functionType .

    LCHAVE          reduce using rule 43 (optype -> functionType .)
    FUN             reduce using rule 43 (optype -> functionType .)
    $end            reduce using rule 43 (optype -> functionType .)
    FOR             reduce using rule 43 (optype -> functionType .)
    WHILE           reduce using rule 43 (optype -> functionType .)
    DO              reduce using rule 43 (optype -> functionType .)
    VAR             reduce using rule 43 (optype -> functionType .)
    VAL             reduce using rule 43 (optype -> functionType .)
    ID              reduce using rule 43 (optype -> functionType .)
    CROSSINLINE     reduce using rule 43 (optype -> functionType .)
    IMPORT          reduce using rule 43 (optype -> functionType .)
    INIT            reduce using rule 43 (optype -> functionType .)
    NOINLINE        reduce using rule 43 (optype -> functionType .)
    OUT             reduce using rule 43 (optype -> functionType .)
    VARARG          reduce using rule 43 (optype -> functionType .)
    WHERE           reduce using rule 43 (optype -> functionType .)
    OBJECT          reduce using rule 43 (optype -> functionType .)
    CONST           reduce using rule 43 (optype -> functionType .)
    CONSTRUCTOR     reduce using rule 43 (optype -> functionType .)
    EOF             reduce using rule 43 (optype -> functionType .)
    FALSE           reduce using rule 43 (optype -> functionType .)
    FUNCTION        reduce using rule 43 (optype -> functionType .)
    NULL            reduce using rule 43 (optype -> functionType .)
    NULLABLE        reduce using rule 43 (optype -> functionType .)
    NUMBER          reduce using rule 43 (optype -> functionType .)
    OPERATOR        reduce using rule 43 (optype -> functionType .)
    SMARTCAST       reduce using rule 43 (optype -> functionType .)
    THIS            reduce using rule 43 (optype -> functionType .)
    TRUE            reduce using rule 43 (optype -> functionType .)
    WHEN            reduce using rule 43 (optype -> functionType .)
    LONG            reduce using rule 43 (optype -> functionType .)
    ARRAY           reduce using rule 43 (optype -> functionType .)
    LPAREN          reduce using rule 43 (optype -> functionType .)
    LITERAL_STRING  reduce using rule 43 (optype -> functionType .)
    LCCT            reduce using rule 43 (optype -> functionType .)
    IF              reduce using rule 43 (optype -> functionType .)
    RETURN          reduce using rule 43 (optype -> functionType .)
    RETURN_AT       reduce using rule 43 (optype -> functionType .)
    CONTINUE        reduce using rule 43 (optype -> functionType .)
    CONTINUE_AT     reduce using rule 43 (optype -> functionType .)
    BREAK           reduce using rule 43 (optype -> functionType .)
    BREAK_AT        reduce using rule 43 (optype -> functionType .)
    RCHAVE          reduce using rule 43 (optype -> functionType .)
    INCREMENTO      reduce using rule 43 (optype -> functionType .)
    DECREMENTO      reduce using rule 43 (optype -> functionType .)
    MINUS           reduce using rule 43 (optype -> functionType .)
    PLUS            reduce using rule 43 (optype -> functionType .)
    NOT             reduce using rule 43 (optype -> functionType .)
    SUSPEND         reduce using rule 43 (optype -> functionType .)
    COLONCOLON      reduce using rule 43 (optype -> functionType .)
    MENOR           reduce using rule 43 (optype -> functionType .)
    PONTO           reduce using rule 43 (optype -> functionType .)
    AS              reduce using rule 43 (optype -> functionType .)
    MAISIGUAL       reduce using rule 43 (optype -> functionType .)
    MENOSIGUAL      reduce using rule 43 (optype -> functionType .)
    MULTIGUAL       reduce using rule 43 (optype -> functionType .)
    DIVIGUAL        reduce using rule 43 (optype -> functionType .)
    MODIGUAL        reduce using rule 43 (optype -> functionType .)
    MULT            reduce using rule 43 (optype -> functionType .)
    DIVIDE          reduce using rule 43 (optype -> functionType .)
    MOD             reduce using rule 43 (optype -> functionType .)
    PONTOPONTO      reduce using rule 43 (optype -> functionType .)
    ELVIS           reduce using rule 43 (optype -> functionType .)
    IN              reduce using rule 43 (optype -> functionType .)
    NOT_IN          reduce using rule 43 (optype -> functionType .)
    IS              reduce using rule 43 (optype -> functionType .)
    NOT_IS          reduce using rule 43 (optype -> functionType .)
    MAIOR           reduce using rule 43 (optype -> functionType .)
    MENORIGUAL      reduce using rule 43 (optype -> functionType .)
    MAIORIGUAL      reduce using rule 43 (optype -> functionType .)
    DIFERENTE       reduce using rule 43 (optype -> functionType .)
    IDENTIDADE      reduce using rule 43 (optype -> functionType .)
    IGUALDADE       reduce using rule 43 (optype -> functionType .)
    SEMIDENTIDADE   reduce using rule 43 (optype -> functionType .)
    AND             reduce using rule 43 (optype -> functionType .)
    OR              reduce using rule 43 (optype -> functionType .)
    COMMA           reduce using rule 43 (optype -> functionType .)
    RPAREN          reduce using rule 43 (optype -> functionType .)
    RCCT            reduce using rule 43 (optype -> functionType .)
    PV              reduce using rule 43 (optype -> functionType .)
    ELSE            reduce using rule 43 (optype -> functionType .)
    SETA            reduce using rule 43 (optype -> functionType .)
    ATRIBUICAO      reduce using rule 43 (optype -> functionType .)


state 125

    (44) optype -> userType .

    LCHAVE          reduce using rule 44 (optype -> userType .)
    FUN             reduce using rule 44 (optype -> userType .)
    $end            reduce using rule 44 (optype -> userType .)
    FOR             reduce using rule 44 (optype -> userType .)
    WHILE           reduce using rule 44 (optype -> userType .)
    DO              reduce using rule 44 (optype -> userType .)
    VAR             reduce using rule 44 (optype -> userType .)
    VAL             reduce using rule 44 (optype -> userType .)
    ID              reduce using rule 44 (optype -> userType .)
    CROSSINLINE     reduce using rule 44 (optype -> userType .)
    IMPORT          reduce using rule 44 (optype -> userType .)
    INIT            reduce using rule 44 (optype -> userType .)
    NOINLINE        reduce using rule 44 (optype -> userType .)
    OUT             reduce using rule 44 (optype -> userType .)
    VARARG          reduce using rule 44 (optype -> userType .)
    WHERE           reduce using rule 44 (optype -> userType .)
    OBJECT          reduce using rule 44 (optype -> userType .)
    CONST           reduce using rule 44 (optype -> userType .)
    CONSTRUCTOR     reduce using rule 44 (optype -> userType .)
    EOF             reduce using rule 44 (optype -> userType .)
    FALSE           reduce using rule 44 (optype -> userType .)
    FUNCTION        reduce using rule 44 (optype -> userType .)
    NULL            reduce using rule 44 (optype -> userType .)
    NULLABLE        reduce using rule 44 (optype -> userType .)
    NUMBER          reduce using rule 44 (optype -> userType .)
    OPERATOR        reduce using rule 44 (optype -> userType .)
    SMARTCAST       reduce using rule 44 (optype -> userType .)
    THIS            reduce using rule 44 (optype -> userType .)
    TRUE            reduce using rule 44 (optype -> userType .)
    WHEN            reduce using rule 44 (optype -> userType .)
    LONG            reduce using rule 44 (optype -> userType .)
    ARRAY           reduce using rule 44 (optype -> userType .)
    LPAREN          reduce using rule 44 (optype -> userType .)
    LITERAL_STRING  reduce using rule 44 (optype -> userType .)
    LCCT            reduce using rule 44 (optype -> userType .)
    IF              reduce using rule 44 (optype -> userType .)
    RETURN          reduce using rule 44 (optype -> userType .)
    RETURN_AT       reduce using rule 44 (optype -> userType .)
    CONTINUE        reduce using rule 44 (optype -> userType .)
    CONTINUE_AT     reduce using rule 44 (optype -> userType .)
    BREAK           reduce using rule 44 (optype -> userType .)
    BREAK_AT        reduce using rule 44 (optype -> userType .)
    RCHAVE          reduce using rule 44 (optype -> userType .)
    INCREMENTO      reduce using rule 44 (optype -> userType .)
    DECREMENTO      reduce using rule 44 (optype -> userType .)
    MINUS           reduce using rule 44 (optype -> userType .)
    PLUS            reduce using rule 44 (optype -> userType .)
    NOT             reduce using rule 44 (optype -> userType .)
    SUSPEND         reduce using rule 44 (optype -> userType .)
    COLONCOLON      reduce using rule 44 (optype -> userType .)
    MENOR           reduce using rule 44 (optype -> userType .)
    PONTO           reduce using rule 44 (optype -> userType .)
    AS              reduce using rule 44 (optype -> userType .)
    MAISIGUAL       reduce using rule 44 (optype -> userType .)
    MENOSIGUAL      reduce using rule 44 (optype -> userType .)
    MULTIGUAL       reduce using rule 44 (optype -> userType .)
    DIVIGUAL        reduce using rule 44 (optype -> userType .)
    MODIGUAL        reduce using rule 44 (optype -> userType .)
    MULT            reduce using rule 44 (optype -> userType .)
    DIVIDE          reduce using rule 44 (optype -> userType .)
    MOD             reduce using rule 44 (optype -> userType .)
    PONTOPONTO      reduce using rule 44 (optype -> userType .)
    ELVIS           reduce using rule 44 (optype -> userType .)
    IN              reduce using rule 44 (optype -> userType .)
    NOT_IN          reduce using rule 44 (optype -> userType .)
    IS              reduce using rule 44 (optype -> userType .)
    NOT_IS          reduce using rule 44 (optype -> userType .)
    MAIOR           reduce using rule 44 (optype -> userType .)
    MENORIGUAL      reduce using rule 44 (optype -> userType .)
    MAIORIGUAL      reduce using rule 44 (optype -> userType .)
    DIFERENTE       reduce using rule 44 (optype -> userType .)
    IDENTIDADE      reduce using rule 44 (optype -> userType .)
    IGUALDADE       reduce using rule 44 (optype -> userType .)
    SEMIDENTIDADE   reduce using rule 44 (optype -> userType .)
    AND             reduce using rule 44 (optype -> userType .)
    OR              reduce using rule 44 (optype -> userType .)
    COMMA           reduce using rule 44 (optype -> userType .)
    RPAREN          reduce using rule 44 (optype -> userType .)
    RCCT            reduce using rule 44 (optype -> userType .)
    PV              reduce using rule 44 (optype -> userType .)
    ELSE            reduce using rule 44 (optype -> userType .)
    SETA            reduce using rule 44 (optype -> userType .)
    ATRIBUICAO      reduce using rule 44 (optype -> userType .)


state 126

    (67) parenthesizedType -> LPAREN . type RPAREN
    (60) functionTypeParameters -> LPAREN . optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (39) type -> . optionalTypeModifiers optype
    (61) optionalParameterOrType -> . parameter
    (62) optionalParameterOrType -> . type
    (63) optionalParameterOrType -> .
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (38) parameter -> . simpleIdentifier DOISP type
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COMMA           reduce using rule 63 (optionalParameterOrType -> .)
    RPAREN          reduce using rule 63 (optionalParameterOrType -> .)
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! ID              [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CROSSINLINE     [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! IMPORT          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! INIT            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VARARG          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! WHERE           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OBJECT          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CONST           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! EOF             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! FALSE           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! FUNCTION        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NULL            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NULLABLE        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NUMBER          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OPERATOR        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! SMARTCAST       [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! THIS            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! TRUE            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VAL             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VAR             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! WHEN            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! LONG            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! ARRAY           [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 237
    optionalParameterOrType        shift and go to state 238
    optionalTypeModifiers          shift and go to state 45
    parameter                      shift and go to state 239
    typeModifiers                  shift and go to state 46
    simpleIdentifier               shift and go to state 40
    typeModifier                   shift and go to state 47

state 127

    (58) functionType -> receiverType . PONTO functionTypeParameters SETA type

    PONTO           shift and go to state 240


state 128

    (59) functionType -> functionTypeParameters . SETA type

    SETA            shift and go to state 241


state 129

    (51) userType -> simpleUserType .

    LCHAVE          reduce using rule 51 (userType -> simpleUserType .)
    FUN             reduce using rule 51 (userType -> simpleUserType .)
    $end            reduce using rule 51 (userType -> simpleUserType .)
    FOR             reduce using rule 51 (userType -> simpleUserType .)
    WHILE           reduce using rule 51 (userType -> simpleUserType .)
    DO              reduce using rule 51 (userType -> simpleUserType .)
    VAR             reduce using rule 51 (userType -> simpleUserType .)
    VAL             reduce using rule 51 (userType -> simpleUserType .)
    ID              reduce using rule 51 (userType -> simpleUserType .)
    CROSSINLINE     reduce using rule 51 (userType -> simpleUserType .)
    IMPORT          reduce using rule 51 (userType -> simpleUserType .)
    INIT            reduce using rule 51 (userType -> simpleUserType .)
    NOINLINE        reduce using rule 51 (userType -> simpleUserType .)
    OUT             reduce using rule 51 (userType -> simpleUserType .)
    VARARG          reduce using rule 51 (userType -> simpleUserType .)
    WHERE           reduce using rule 51 (userType -> simpleUserType .)
    OBJECT          reduce using rule 51 (userType -> simpleUserType .)
    CONST           reduce using rule 51 (userType -> simpleUserType .)
    CONSTRUCTOR     reduce using rule 51 (userType -> simpleUserType .)
    EOF             reduce using rule 51 (userType -> simpleUserType .)
    FALSE           reduce using rule 51 (userType -> simpleUserType .)
    FUNCTION        reduce using rule 51 (userType -> simpleUserType .)
    NULL            reduce using rule 51 (userType -> simpleUserType .)
    NULLABLE        reduce using rule 51 (userType -> simpleUserType .)
    NUMBER          reduce using rule 51 (userType -> simpleUserType .)
    OPERATOR        reduce using rule 51 (userType -> simpleUserType .)
    SMARTCAST       reduce using rule 51 (userType -> simpleUserType .)
    THIS            reduce using rule 51 (userType -> simpleUserType .)
    TRUE            reduce using rule 51 (userType -> simpleUserType .)
    WHEN            reduce using rule 51 (userType -> simpleUserType .)
    LONG            reduce using rule 51 (userType -> simpleUserType .)
    ARRAY           reduce using rule 51 (userType -> simpleUserType .)
    LPAREN          reduce using rule 51 (userType -> simpleUserType .)
    LITERAL_STRING  reduce using rule 51 (userType -> simpleUserType .)
    LCCT            reduce using rule 51 (userType -> simpleUserType .)
    IF              reduce using rule 51 (userType -> simpleUserType .)
    RETURN          reduce using rule 51 (userType -> simpleUserType .)
    RETURN_AT       reduce using rule 51 (userType -> simpleUserType .)
    CONTINUE        reduce using rule 51 (userType -> simpleUserType .)
    CONTINUE_AT     reduce using rule 51 (userType -> simpleUserType .)
    BREAK           reduce using rule 51 (userType -> simpleUserType .)
    BREAK_AT        reduce using rule 51 (userType -> simpleUserType .)
    RCHAVE          reduce using rule 51 (userType -> simpleUserType .)
    INCREMENTO      reduce using rule 51 (userType -> simpleUserType .)
    DECREMENTO      reduce using rule 51 (userType -> simpleUserType .)
    MINUS           reduce using rule 51 (userType -> simpleUserType .)
    PLUS            reduce using rule 51 (userType -> simpleUserType .)
    NOT             reduce using rule 51 (userType -> simpleUserType .)
    SUSPEND         reduce using rule 51 (userType -> simpleUserType .)
    COLONCOLON      reduce using rule 51 (userType -> simpleUserType .)
    MENOR           reduce using rule 51 (userType -> simpleUserType .)
    PONTO           reduce using rule 51 (userType -> simpleUserType .)
    AS              reduce using rule 51 (userType -> simpleUserType .)
    MAISIGUAL       reduce using rule 51 (userType -> simpleUserType .)
    MENOSIGUAL      reduce using rule 51 (userType -> simpleUserType .)
    MULTIGUAL       reduce using rule 51 (userType -> simpleUserType .)
    DIVIGUAL        reduce using rule 51 (userType -> simpleUserType .)
    MODIGUAL        reduce using rule 51 (userType -> simpleUserType .)
    MULT            reduce using rule 51 (userType -> simpleUserType .)
    DIVIDE          reduce using rule 51 (userType -> simpleUserType .)
    MOD             reduce using rule 51 (userType -> simpleUserType .)
    PONTOPONTO      reduce using rule 51 (userType -> simpleUserType .)
    ELVIS           reduce using rule 51 (userType -> simpleUserType .)
    IN              reduce using rule 51 (userType -> simpleUserType .)
    NOT_IN          reduce using rule 51 (userType -> simpleUserType .)
    IS              reduce using rule 51 (userType -> simpleUserType .)
    NOT_IS          reduce using rule 51 (userType -> simpleUserType .)
    MAIOR           reduce using rule 51 (userType -> simpleUserType .)
    MENORIGUAL      reduce using rule 51 (userType -> simpleUserType .)
    MAIORIGUAL      reduce using rule 51 (userType -> simpleUserType .)
    DIFERENTE       reduce using rule 51 (userType -> simpleUserType .)
    IDENTIDADE      reduce using rule 51 (userType -> simpleUserType .)
    IGUALDADE       reduce using rule 51 (userType -> simpleUserType .)
    SEMIDENTIDADE   reduce using rule 51 (userType -> simpleUserType .)
    AND             reduce using rule 51 (userType -> simpleUserType .)
    OR              reduce using rule 51 (userType -> simpleUserType .)
    COMMA           reduce using rule 51 (userType -> simpleUserType .)
    RPAREN          reduce using rule 51 (userType -> simpleUserType .)
    RCCT            reduce using rule 51 (userType -> simpleUserType .)
    PV              reduce using rule 51 (userType -> simpleUserType .)
    ELSE            reduce using rule 51 (userType -> simpleUserType .)
    SETA            reduce using rule 51 (userType -> simpleUserType .)
    ATRIBUICAO      reduce using rule 51 (userType -> simpleUserType .)


state 130

    (52) simpleUserType -> simpleIdentifier . typeArguments
    (53) simpleUserType -> simpleIdentifier .
    (161) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (162) typeArguments -> . MENOR MAIOR

  ! shift/reduce conflict for MENOR resolved as shift
    LCHAVE          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    FUN             reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    $end            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    FOR             reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    WHILE           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    DO              reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    VAR             reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    VAL             reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    ID              reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    IMPORT          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    INIT            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    NOINLINE        reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    OUT             reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    VARARG          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    WHERE           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    OBJECT          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    CONST           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    EOF             reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    FALSE           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    FUNCTION        reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    NULL            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    NULLABLE        reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    NUMBER          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    OPERATOR        reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    SMARTCAST       reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    THIS            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    TRUE            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    WHEN            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    LONG            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    ARRAY           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    LPAREN          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    LCCT            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    IF              reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    RETURN          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    RETURN_AT       reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    CONTINUE        reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    BREAK           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    BREAK_AT        reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    RCHAVE          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    INCREMENTO      reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    DECREMENTO      reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MINUS           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    PLUS            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    NOT             reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    SUSPEND         reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    COLONCOLON      reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    PONTO           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    AS              reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MODIGUAL        reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MULT            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    DIVIDE          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MOD             reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    ELVIS           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    IN              reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    NOT_IN          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    IS              reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    NOT_IS          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MAIOR           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    DIFERENTE       reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    IGUALDADE       reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    AND             reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    OR              reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    RPAREN          reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    RCCT            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    PV              reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    ELSE            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    SETA            reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 53 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 167

  ! MENOR           [ reduce using rule 53 (simpleUserType -> simpleIdentifier .) ]

    typeArguments                  shift and go to state 242

state 131

    (46) typeModifiers -> typeModifier typeModifiers .

    LPAREN          reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    SUSPEND         reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    ID              reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    CROSSINLINE     reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    IMPORT          reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    INIT            reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    NOINLINE        reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    OUT             reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    VARARG          reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    WHERE           reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    OBJECT          reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    CONST           reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    CONSTRUCTOR     reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    EOF             reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    FALSE           reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    FUNCTION        reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    NULL            reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    NULLABLE        reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    NUMBER          reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    OPERATOR        reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    SMARTCAST       reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    THIS            reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    TRUE            reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    VAL             reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    VAR             reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    WHEN            reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    LONG            reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)
    ARRAY           reduce using rule 46 (typeModifiers -> typeModifier typeModifiers .)


state 132

    (29) functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive .

    RPAREN          reduce using rule 29 (functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive .)


state 133

    (30) functionValueParameter -> parameter ATRIBUICAO expression .
    (223) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 30 (functionValueParameter -> parameter ATRIBUICAO expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 30 (functionValueParameter -> parameter ATRIBUICAO expression .)
    COMMA           reduce using rule 30 (functionValueParameter -> parameter ATRIBUICAO expression .)
    RPAREN          reduce using rule 30 (functionValueParameter -> parameter ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 134

    (173) primaryExpression -> simpleIdentifier .
    (128) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 128 (label -> simpleIdentifier .)
    MENOR           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    MINUS           reduce using rule 128 (label -> simpleIdentifier .)
    PLUS            reduce using rule 128 (label -> simpleIdentifier .)
    NOT             reduce using rule 128 (label -> simpleIdentifier .)
    ID              reduce using rule 128 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 128 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 128 (label -> simpleIdentifier .)
    INIT            reduce using rule 128 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 128 (label -> simpleIdentifier .)
    OUT             reduce using rule 128 (label -> simpleIdentifier .)
    VARARG          reduce using rule 128 (label -> simpleIdentifier .)
    WHERE           reduce using rule 128 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 128 (label -> simpleIdentifier .)
    CONST           reduce using rule 128 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 128 (label -> simpleIdentifier .)
    EOF             reduce using rule 128 (label -> simpleIdentifier .)
    FALSE           reduce using rule 128 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 128 (label -> simpleIdentifier .)
    NULL            reduce using rule 128 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 128 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 128 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 128 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 128 (label -> simpleIdentifier .)
    THIS            reduce using rule 128 (label -> simpleIdentifier .)
    TRUE            reduce using rule 128 (label -> simpleIdentifier .)
    VAL             reduce using rule 128 (label -> simpleIdentifier .)
    VAR             reduce using rule 128 (label -> simpleIdentifier .)
    WHEN            reduce using rule 128 (label -> simpleIdentifier .)
    LONG            reduce using rule 128 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 128 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 128 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 128 (label -> simpleIdentifier .)
    LCCT            reduce using rule 128 (label -> simpleIdentifier .)
    IF              reduce using rule 128 (label -> simpleIdentifier .)
    RETURN          reduce using rule 128 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 128 (label -> simpleIdentifier .)
    BREAK           reduce using rule 128 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 128 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 128 (label -> simpleIdentifier .)
    FUN             reduce using rule 128 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 128 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 128 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]


state 135

    (120) asExpression -> prefixUnaryExpression .
    (121) asExpression -> prefixUnaryExpression . asOperator type
    (255) asOperator -> . AS
    (256) asOperator -> . AS asOperator

  ! shift/reduce conflict for AS resolved as shift
    INCREMENTO      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    DECREMENTO      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MENOR           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    LCCT            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    COLONCOLON      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    PONTO           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    LPAREN          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    RCHAVE          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MULT            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    DIVIDE          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MOD             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    PLUS            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MINUS           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    PONTOPONTO      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    ID              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    CROSSINLINE     reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IMPORT          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    INIT            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NOINLINE        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    OUT             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    VARARG          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    WHERE           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    OBJECT          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    CONST           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    EOF             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    FALSE           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    FUNCTION        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NULL            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NULLABLE        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NUMBER          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    OPERATOR        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    SMARTCAST       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    THIS            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    TRUE            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    VAL             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    VAR             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    WHEN            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    LONG            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    ARRAY           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    ELVIS           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IN              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NOT_IN          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IS              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NOT_IS          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MAIOR           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MENORIGUAL      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MAIORIGUAL      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    DIFERENTE       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IDENTIDADE      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IGUALDADE       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    AND             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    OR              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    RPAREN          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    FUN             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    FOR             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    WHILE           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    DO              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    LITERAL_STRING  reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    IF              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    RETURN          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    RETURN_AT       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    CONTINUE        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    CONTINUE_AT     reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    BREAK           reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    BREAK_AT        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    NOT             reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    SUSPEND         reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    LCHAVE          reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MAISIGUAL       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MENOSIGUAL      reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MULTIGUAL       reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    DIVIGUAL        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    MODIGUAL        reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    RCCT            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    PV              reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    ELSE            reduce using rule 120 (asExpression -> prefixUnaryExpression .)
    AS              shift and go to state 174

  ! AS              [ reduce using rule 120 (asExpression -> prefixUnaryExpression .) ]

    asOperator                     shift and go to state 173

state 136

    (123) prefixUnaryExpression -> postfixUnaryExpression .

    INCREMENTO      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    DECREMENTO      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOR           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCCT            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    COLONCOLON      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTO           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    LPAREN          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCHAVE          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    AS              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULT            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIDE          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MOD             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    PLUS            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MINUS           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    ID              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IMPORT          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    INIT            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOINLINE        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    OUT             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    VARARG          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHERE           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    OBJECT          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONST           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    EOF             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    FALSE           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUNCTION        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULL            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NULLABLE        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NUMBER          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    OPERATOR        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    SMARTCAST       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    THIS            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    TRUE            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAL             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAR             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHEN            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    LONG            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    ARRAY           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELVIS           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IN              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IN          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IS              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IS          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIOR           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIFERENTE       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IGUALDADE       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    AND             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    OR              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    COMMA           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    RPAREN          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCCT            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUN             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    FOR             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHILE           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    DO              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    IF              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN_AT       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK           reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK_AT        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT             reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    SUSPEND         reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCHAVE          reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    MODIGUAL        reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    PV              reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELSE            reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .)


state 137

    (180) parenthesizedExpression -> LPAREN . expression RPAREN
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 178
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 138

    (209) anonymousFunction -> FUN . optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (203) optionalTypePonto -> . type PONTO
    (204) optionalTypePonto -> .
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! reduce/reduce conflict for LPAREN resolved using rule 41 (optionalTypeModifiers -> .)
  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! LPAREN          [ reduce using rule 204 (optionalTypePonto -> .) ]
  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    optionalTypePonto              shift and go to state 151
    type                           shift and go to state 152
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 139

    (38) parameter -> simpleIdentifier DOISP type .

    ATRIBUICAO      reduce using rule 38 (parameter -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 38 (parameter -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 38 (parameter -> simpleIdentifier DOISP type .)


state 140

    (78) block -> LCHAVE statements RCHAVE .

    FUN             reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    $end            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    FOR             reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    WHILE           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    DO              reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    VAR             reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    VAL             reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    ID              reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    CROSSINLINE     reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    IMPORT          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    INIT            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    NOINLINE        reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    OUT             reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    VARARG          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    WHERE           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    OBJECT          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    CONST           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    CONSTRUCTOR     reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    EOF             reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    FALSE           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    FUNCTION        reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    NULL            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    NULLABLE        reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    NUMBER          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    OPERATOR        reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    SMARTCAST       reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    THIS            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    TRUE            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    WHEN            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    LONG            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    ARRAY           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    LPAREN          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    LITERAL_STRING  reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    LCCT            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    IF              reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    RETURN          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    RETURN_AT       reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    CONTINUE        reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    CONTINUE_AT     reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    BREAK           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    BREAK_AT        reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    RCHAVE          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    INCREMENTO      reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    DECREMENTO      reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MINUS           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    PLUS            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    NOT             reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    SUSPEND         reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    COLONCOLON      reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    LCHAVE          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MENOR           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    PONTO           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    AS              reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MAISIGUAL       reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MENOSIGUAL      reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MULTIGUAL       reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    DIVIGUAL        reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MODIGUAL        reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MULT            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    DIVIDE          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MOD             reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    PONTOPONTO      reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    ELVIS           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    IN              reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    NOT_IN          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    IS              reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    NOT_IS          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MAIOR           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MENORIGUAL      reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    MAIORIGUAL      reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    DIFERENTE       reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    IDENTIDADE      reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    IGUALDADE       reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    SEMIDENTIDADE   reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    AND             reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    OR              reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    COMMA           reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    RPAREN          reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    RCCT            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    PV              reduce using rule 78 (block -> LCHAVE statements RCHAVE .)
    ELSE            reduce using rule 78 (block -> LCHAVE statements RCHAVE .)


state 141

    (195) lambdaLiteral -> RCHAVE optionsLambdaLiteral . LCHAVE

    LCHAVE          shift and go to state 243


state 142

    (196) optionsLambdaLiteral -> statements .

    LCHAVE          reduce using rule 196 (optionsLambdaLiteral -> statements .)


state 143

    (197) optionsLambdaLiteral -> lambdaParameters . SETA statements

    SETA            shift and go to state 244


state 144

    (198) optionsLambdaLiteral -> SETA . statements
    (69) statements -> . statement
    (70) statements -> . statement statements
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

    FUN             shift and go to state 62
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

    statements                     shift and go to state 245
    statement                      shift and go to state 56
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    expression                     shift and go to state 60
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 145

    (199) lambdaParameters -> lambdaParameter .
    (200) lambdaParameters -> lambdaParameter . COMMA lambdaParameters

    SETA            reduce using rule 199 (lambdaParameters -> lambdaParameter .)
    COMMA           shift and go to state 246


state 146

    (201) lambdaParameter -> variableDeclaration .

    COMMA           reduce using rule 201 (lambdaParameter -> variableDeclaration .)
    SETA            reduce using rule 201 (lambdaParameter -> variableDeclaration .)


state 147

    (202) lambdaParameter -> multiVariableDeclaration . optionalType
    (4) optionalType -> . DOISP type
    (5) optionalType -> .

    DOISP           shift and go to state 35
    COMMA           reduce using rule 5 (optionalType -> .)
    SETA            reduce using rule 5 (optionalType -> .)

    optionalType                   shift and go to state 247

state 148

    (32) variableDeclaration -> simpleIdentifier . DOISP type
    (33) variableDeclaration -> simpleIdentifier .
    (139) directlyAssignableExpression -> simpleIdentifier .
    (173) primaryExpression -> simpleIdentifier .
    (128) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 128 (label -> simpleIdentifier .)
    DOISP           shift and go to state 248
    COMMA           reduce using rule 33 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 33 (variableDeclaration -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 139 (directlyAssignableExpression -> simpleIdentifier .)
    MENOR           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    MINUS           reduce using rule 128 (label -> simpleIdentifier .)
    PLUS            reduce using rule 128 (label -> simpleIdentifier .)
    NOT             reduce using rule 128 (label -> simpleIdentifier .)
    ID              reduce using rule 128 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 128 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 128 (label -> simpleIdentifier .)
    INIT            reduce using rule 128 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 128 (label -> simpleIdentifier .)
    OUT             reduce using rule 128 (label -> simpleIdentifier .)
    VARARG          reduce using rule 128 (label -> simpleIdentifier .)
    WHERE           reduce using rule 128 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 128 (label -> simpleIdentifier .)
    CONST           reduce using rule 128 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 128 (label -> simpleIdentifier .)
    EOF             reduce using rule 128 (label -> simpleIdentifier .)
    FALSE           reduce using rule 128 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 128 (label -> simpleIdentifier .)
    NULL            reduce using rule 128 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 128 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 128 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 128 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 128 (label -> simpleIdentifier .)
    THIS            reduce using rule 128 (label -> simpleIdentifier .)
    TRUE            reduce using rule 128 (label -> simpleIdentifier .)
    VAL             reduce using rule 128 (label -> simpleIdentifier .)
    VAR             reduce using rule 128 (label -> simpleIdentifier .)
    WHEN            reduce using rule 128 (label -> simpleIdentifier .)
    LONG            reduce using rule 128 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 128 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 128 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 128 (label -> simpleIdentifier .)
    LCCT            reduce using rule 128 (label -> simpleIdentifier .)
    IF              reduce using rule 128 (label -> simpleIdentifier .)
    RETURN          reduce using rule 128 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 128 (label -> simpleIdentifier .)
    BREAK           reduce using rule 128 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 128 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 128 (label -> simpleIdentifier .)
    FUN             reduce using rule 128 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 128 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 128 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]


state 149

    (34) multiVariableDeclaration -> LPAREN . multiVariableDeclarationRecursive RPAREN
    (35) multiVariableDeclaration -> LPAREN . RPAREN
    (141) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (144) parenthesizedAssignableExpression -> LPAREN . assignableExpression RPAREN
    (180) parenthesizedExpression -> LPAREN . expression RPAREN
    (36) multiVariableDeclarationRecursive -> . variableDeclaration
    (37) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (93) expression -> . disjunction
    (32) variableDeclaration -> . simpleIdentifier DOISP type
    (33) variableDeclaration -> . simpleIdentifier
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (68) receiverType -> . typeModifier parenthesizedType
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (47) typeModifier -> . SUSPEND
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

    RPAREN          shift and go to state 250
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

    multiVariableDeclarationRecursive shift and go to state 249
    directlyAssignableExpression   shift and go to state 176
    assignableExpression           shift and go to state 177
    expression                     shift and go to state 178
    variableDeclaration            shift and go to state 251
    postfixUnaryExpression         shift and go to state 72
    simpleIdentifier               shift and go to state 252
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    disjunction                    shift and go to state 70
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    conjunction                    shift and go to state 80
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    equality                       shift and go to state 85
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    comparison                     shift and go to state 94
    receiverType                   shift and go to state 109
    infixOperation                 shift and go to state 108
    typeModifier                   shift and go to state 116
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 150

    (70) statements -> statement statements .

    RCHAVE          reduce using rule 70 (statements -> statement statements .)
    LCHAVE          reduce using rule 70 (statements -> statement statements .)


state 151

    (209) anonymousFunction -> FUN optionalTypePonto . parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (185) parametersWithOptionalType -> . LPAREN parametersWithOptionalTypeRecursive RPAREN
    (186) parametersWithOptionalType -> . LPAREN RPAREN

    LPAREN          shift and go to state 254

    parametersWithOptionalType     shift and go to state 253

state 152

    (203) optionalTypePonto -> type . PONTO

    PONTO           shift and go to state 255


state 153

    (91) assignment -> directlyAssignableExpression ATRIBUICAO . expression
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 256
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 154

    (92) assignment -> assignableExpression assignmentAndOperator . expression
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 257
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 155

    (233) assignmentAndOperator -> MAISIGUAL .

    LITERAL_STRING  reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    INCREMENTO      reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    DECREMENTO      reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    MINUS           reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    PLUS            reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    NOT             reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    LPAREN          reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    ID              reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    CROSSINLINE     reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    IMPORT          reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    INIT            reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    NOINLINE        reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    OUT             reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    VARARG          reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    WHERE           reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    OBJECT          reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    CONST           reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    CONSTRUCTOR     reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    EOF             reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    FALSE           reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    FUNCTION        reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    NULL            reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    NULLABLE        reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    NUMBER          reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    OPERATOR        reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    SMARTCAST       reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    THIS            reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    TRUE            reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    VAL             reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    VAR             reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    WHEN            reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    LONG            reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    ARRAY           reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    LCCT            reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    IF              reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    RETURN          reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    RETURN_AT       reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    CONTINUE        reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    CONTINUE_AT     reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    BREAK           reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    BREAK_AT        reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    RCHAVE          reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    FUN             reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    SUSPEND         reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)
    COLONCOLON      reduce using rule 233 (assignmentAndOperator -> MAISIGUAL .)


state 156

    (234) assignmentAndOperator -> MENOSIGUAL .

    LITERAL_STRING  reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    INCREMENTO      reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    DECREMENTO      reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    MINUS           reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    PLUS            reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    NOT             reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    LPAREN          reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    ID              reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    CROSSINLINE     reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    IMPORT          reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    INIT            reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    NOINLINE        reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    OUT             reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    VARARG          reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    WHERE           reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    OBJECT          reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    CONST           reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    CONSTRUCTOR     reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    EOF             reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    FALSE           reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    FUNCTION        reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    NULL            reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    NULLABLE        reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    NUMBER          reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    OPERATOR        reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    SMARTCAST       reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    THIS            reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    TRUE            reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    VAL             reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    VAR             reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    WHEN            reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    LONG            reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    ARRAY           reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    LCCT            reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    IF              reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    RETURN          reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    RETURN_AT       reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    CONTINUE        reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    CONTINUE_AT     reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    BREAK           reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    BREAK_AT        reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    RCHAVE          reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    FUN             reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    SUSPEND         reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)
    COLONCOLON      reduce using rule 234 (assignmentAndOperator -> MENOSIGUAL .)


state 157

    (235) assignmentAndOperator -> MULTIGUAL .

    LITERAL_STRING  reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    INCREMENTO      reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    DECREMENTO      reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    MINUS           reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    PLUS            reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    NOT             reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    LPAREN          reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    ID              reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    CROSSINLINE     reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    IMPORT          reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    INIT            reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    NOINLINE        reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    OUT             reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    VARARG          reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    WHERE           reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    OBJECT          reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    CONST           reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    CONSTRUCTOR     reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    EOF             reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    FALSE           reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    FUNCTION        reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    NULL            reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    NULLABLE        reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    NUMBER          reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    OPERATOR        reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    SMARTCAST       reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    THIS            reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    TRUE            reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    VAL             reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    VAR             reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    WHEN            reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    LONG            reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    ARRAY           reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    LCCT            reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    IF              reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    RETURN          reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    RETURN_AT       reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE        reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE_AT     reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    BREAK           reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    BREAK_AT        reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    RCHAVE          reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    FUN             reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    SUSPEND         reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)
    COLONCOLON      reduce using rule 235 (assignmentAndOperator -> MULTIGUAL .)


state 158

    (236) assignmentAndOperator -> DIVIGUAL .

    LITERAL_STRING  reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    INCREMENTO      reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    DECREMENTO      reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    MINUS           reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    PLUS            reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    NOT             reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    LPAREN          reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    ID              reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    CROSSINLINE     reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    IMPORT          reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    INIT            reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    NOINLINE        reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    OUT             reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    VARARG          reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    WHERE           reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    OBJECT          reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    CONST           reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    CONSTRUCTOR     reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    EOF             reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    FALSE           reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    FUNCTION        reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    NULL            reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    NULLABLE        reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    NUMBER          reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    OPERATOR        reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    SMARTCAST       reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    THIS            reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    TRUE            reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    VAL             reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    VAR             reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    WHEN            reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    LONG            reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    ARRAY           reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    LCCT            reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    IF              reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    RETURN          reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    RETURN_AT       reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE        reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE_AT     reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    BREAK           reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    BREAK_AT        reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    RCHAVE          reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    FUN             reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    SUSPEND         reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)
    COLONCOLON      reduce using rule 236 (assignmentAndOperator -> DIVIGUAL .)


state 159

    (237) assignmentAndOperator -> MODIGUAL .

    LITERAL_STRING  reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    INCREMENTO      reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    DECREMENTO      reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    MINUS           reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    PLUS            reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    NOT             reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    LPAREN          reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    ID              reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    CROSSINLINE     reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    IMPORT          reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    INIT            reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    NOINLINE        reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    OUT             reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    VARARG          reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    WHERE           reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    OBJECT          reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    CONST           reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    CONSTRUCTOR     reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    EOF             reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    FALSE           reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    FUNCTION        reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    NULL            reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    NULLABLE        reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    NUMBER          reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    OPERATOR        reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    SMARTCAST       reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    THIS            reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    TRUE            reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    VAL             reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    VAR             reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    WHEN            reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    LONG            reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    ARRAY           reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    LCCT            reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    IF              reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    RETURN          reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    RETURN_AT       reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE        reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE_AT     reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    BREAK           reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    BREAK_AT        reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    RCHAVE          reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    FUN             reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    SUSPEND         reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)
    COLONCOLON      reduce using rule 237 (assignmentAndOperator -> MODIGUAL .)


state 160

    (10) propertyDeclaration -> varOrVal optionalTypeParameters . genericVariableDeclaration ATRIBUICAO expression optionalPv
    (15) genericVariableDeclaration -> . multiVariableDeclaration
    (16) genericVariableDeclaration -> . variableDeclaration
    (34) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (35) multiVariableDeclaration -> . LPAREN RPAREN
    (32) variableDeclaration -> . simpleIdentifier DOISP type
    (33) variableDeclaration -> . simpleIdentifier
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    LPAREN          shift and go to state 261
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    genericVariableDeclaration     shift and go to state 258
    multiVariableDeclaration       shift and go to state 259
    variableDeclaration            shift and go to state 260
    simpleIdentifier               shift and go to state 262

state 161

    (13) optionalTypeParameters -> typeParameters .

    LPAREN          reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    ID              reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    CROSSINLINE     reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    IMPORT          reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    INIT            reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    NOINLINE        reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    OUT             reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    VARARG          reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    WHERE           reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    OBJECT          reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    CONST           reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    CONSTRUCTOR     reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    EOF             reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    FALSE           reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    FUNCTION        reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    NULL            reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    NULLABLE        reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    NUMBER          reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    OPERATOR        reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    SMARTCAST       reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    THIS            reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    TRUE            reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    VAL             reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    VAR             reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    WHEN            reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    LONG            reduce using rule 13 (optionalTypeParameters -> typeParameters .)
    ARRAY           reduce using rule 13 (optionalTypeParameters -> typeParameters .)


state 162

    (17) typeParameters -> MENOR . typeParameter typeParametersRecursive optionalCOMMA MAIOR
    (22) typeParameter -> . simpleIdentifier
    (23) typeParameter -> . simpleIdentifier DOISP type
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    typeParameter                  shift and go to state 263
    simpleIdentifier               shift and go to state 264

state 163

    (138) directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .

    ATRIBUICAO      reduce using rule 138 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)
    RPAREN          reduce using rule 138 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)


state 164

    (145) assignableSuffix -> typeArguments .

    ATRIBUICAO      reduce using rule 145 (assignableSuffix -> typeArguments .)
    RPAREN          reduce using rule 145 (assignableSuffix -> typeArguments .)


state 165

    (146) assignableSuffix -> indexingSuffix .

    ATRIBUICAO      reduce using rule 146 (assignableSuffix -> indexingSuffix .)
    RPAREN          reduce using rule 146 (assignableSuffix -> indexingSuffix .)


state 166

    (147) assignableSuffix -> navigationSuffix .

    ATRIBUICAO      reduce using rule 147 (assignableSuffix -> navigationSuffix .)
    RPAREN          reduce using rule 147 (assignableSuffix -> navigationSuffix .)


state 167

    (161) typeArguments -> MENOR . typeArgumentsRecursive MAIOR
    (162) typeArguments -> MENOR . MAIOR
    (163) typeArgumentsRecursive -> . typeProjection
    (164) typeArgumentsRecursive -> . typeProjection COMMA typeArgumentsRecursive
    (54) typeProjection -> . typeProjectionModifiers type
    (55) typeProjection -> . type
    (56) typeProjectionModifiers -> . typeProjection
    (57) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (39) type -> . optionalTypeModifiers optype
    (48) typeProjectionModifier -> . varianceModifier
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (49) varianceModifier -> . IN
    (50) varianceModifier -> . OUT
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    MAIOR           shift and go to state 266
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    IN              shift and go to state 272
    OUT             shift and go to state 273
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    typeArgumentsRecursive         shift and go to state 265
    typeProjection                 shift and go to state 267
    typeProjectionModifiers        shift and go to state 268
    type                           shift and go to state 269
    typeProjectionModifier         shift and go to state 270
    optionalTypeModifiers          shift and go to state 45
    varianceModifier               shift and go to state 271
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 168

    (148) indexingSuffix -> LCCT . indexingSuffixRecursive RCCT
    (149) indexingSuffix -> LCCT . RCCT
    (150) indexingSuffixRecursive -> . expression
    (151) indexingSuffixRecursive -> . expression COMMA indexingSuffixRecursive
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    RCCT            shift and go to state 275
    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    indexingSuffixRecursive        shift and go to state 274
    expression                     shift and go to state 276
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 169

    (152) navigationSuffix -> memberAccessOperator . simpleIdentifier CLASS
    (153) navigationSuffix -> memberAccessOperator . parenthesizedExpression CLASS
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (180) parenthesizedExpression -> . LPAREN expression RPAREN

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 137

    simpleIdentifier               shift and go to state 277
    parenthesizedExpression        shift and go to state 278

state 170

    (264) memberAccessOperator -> safeNav .

    ID              reduce using rule 264 (memberAccessOperator -> safeNav .)
    CROSSINLINE     reduce using rule 264 (memberAccessOperator -> safeNav .)
    IMPORT          reduce using rule 264 (memberAccessOperator -> safeNav .)
    INIT            reduce using rule 264 (memberAccessOperator -> safeNav .)
    NOINLINE        reduce using rule 264 (memberAccessOperator -> safeNav .)
    OUT             reduce using rule 264 (memberAccessOperator -> safeNav .)
    VARARG          reduce using rule 264 (memberAccessOperator -> safeNav .)
    WHERE           reduce using rule 264 (memberAccessOperator -> safeNav .)
    OBJECT          reduce using rule 264 (memberAccessOperator -> safeNav .)
    CONST           reduce using rule 264 (memberAccessOperator -> safeNav .)
    CONSTRUCTOR     reduce using rule 264 (memberAccessOperator -> safeNav .)
    EOF             reduce using rule 264 (memberAccessOperator -> safeNav .)
    FALSE           reduce using rule 264 (memberAccessOperator -> safeNav .)
    FUNCTION        reduce using rule 264 (memberAccessOperator -> safeNav .)
    NULL            reduce using rule 264 (memberAccessOperator -> safeNav .)
    NULLABLE        reduce using rule 264 (memberAccessOperator -> safeNav .)
    NUMBER          reduce using rule 264 (memberAccessOperator -> safeNav .)
    OPERATOR        reduce using rule 264 (memberAccessOperator -> safeNav .)
    SMARTCAST       reduce using rule 264 (memberAccessOperator -> safeNav .)
    THIS            reduce using rule 264 (memberAccessOperator -> safeNav .)
    TRUE            reduce using rule 264 (memberAccessOperator -> safeNav .)
    VAL             reduce using rule 264 (memberAccessOperator -> safeNav .)
    VAR             reduce using rule 264 (memberAccessOperator -> safeNav .)
    WHEN            reduce using rule 264 (memberAccessOperator -> safeNav .)
    LONG            reduce using rule 264 (memberAccessOperator -> safeNav .)
    ARRAY           reduce using rule 264 (memberAccessOperator -> safeNav .)
    LPAREN          reduce using rule 264 (memberAccessOperator -> safeNav .)


state 171

    (265) memberAccessOperator -> COLONCOLON .

    ID              reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    CROSSINLINE     reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    IMPORT          reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    INIT            reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    NOINLINE        reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    OUT             reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    VARARG          reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    WHERE           reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    OBJECT          reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    CONST           reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    CONSTRUCTOR     reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    EOF             reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    FALSE           reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    FUNCTION        reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    NULL            reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    NULLABLE        reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    NUMBER          reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    OPERATOR        reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    SMARTCAST       reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    THIS            reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    TRUE            reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    VAL             reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    VAR             reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    WHEN            reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    LONG            reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    ARRAY           reduce using rule 265 (memberAccessOperator -> COLONCOLON .)
    LPAREN          reduce using rule 265 (memberAccessOperator -> COLONCOLON .)


state 172

    (266) safeNav -> PONTO .

    ID              reduce using rule 266 (safeNav -> PONTO .)
    CROSSINLINE     reduce using rule 266 (safeNav -> PONTO .)
    IMPORT          reduce using rule 266 (safeNav -> PONTO .)
    INIT            reduce using rule 266 (safeNav -> PONTO .)
    NOINLINE        reduce using rule 266 (safeNav -> PONTO .)
    OUT             reduce using rule 266 (safeNav -> PONTO .)
    VARARG          reduce using rule 266 (safeNav -> PONTO .)
    WHERE           reduce using rule 266 (safeNav -> PONTO .)
    OBJECT          reduce using rule 266 (safeNav -> PONTO .)
    CONST           reduce using rule 266 (safeNav -> PONTO .)
    CONSTRUCTOR     reduce using rule 266 (safeNav -> PONTO .)
    EOF             reduce using rule 266 (safeNav -> PONTO .)
    FALSE           reduce using rule 266 (safeNav -> PONTO .)
    FUNCTION        reduce using rule 266 (safeNav -> PONTO .)
    NULL            reduce using rule 266 (safeNav -> PONTO .)
    NULLABLE        reduce using rule 266 (safeNav -> PONTO .)
    NUMBER          reduce using rule 266 (safeNav -> PONTO .)
    OPERATOR        reduce using rule 266 (safeNav -> PONTO .)
    SMARTCAST       reduce using rule 266 (safeNav -> PONTO .)
    THIS            reduce using rule 266 (safeNav -> PONTO .)
    TRUE            reduce using rule 266 (safeNav -> PONTO .)
    VAL             reduce using rule 266 (safeNav -> PONTO .)
    VAR             reduce using rule 266 (safeNav -> PONTO .)
    WHEN            reduce using rule 266 (safeNav -> PONTO .)
    LONG            reduce using rule 266 (safeNav -> PONTO .)
    ARRAY           reduce using rule 266 (safeNav -> PONTO .)
    LPAREN          reduce using rule 266 (safeNav -> PONTO .)


state 173

    (121) asExpression -> prefixUnaryExpression asOperator . type
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 279
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 174

    (255) asOperator -> AS .
    (256) asOperator -> AS . asOperator
    (255) asOperator -> . AS
    (256) asOperator -> . AS asOperator

    SUSPEND         reduce using rule 255 (asOperator -> AS .)
    LPAREN          reduce using rule 255 (asOperator -> AS .)
    ID              reduce using rule 255 (asOperator -> AS .)
    CROSSINLINE     reduce using rule 255 (asOperator -> AS .)
    IMPORT          reduce using rule 255 (asOperator -> AS .)
    INIT            reduce using rule 255 (asOperator -> AS .)
    NOINLINE        reduce using rule 255 (asOperator -> AS .)
    OUT             reduce using rule 255 (asOperator -> AS .)
    VARARG          reduce using rule 255 (asOperator -> AS .)
    WHERE           reduce using rule 255 (asOperator -> AS .)
    OBJECT          reduce using rule 255 (asOperator -> AS .)
    CONST           reduce using rule 255 (asOperator -> AS .)
    CONSTRUCTOR     reduce using rule 255 (asOperator -> AS .)
    EOF             reduce using rule 255 (asOperator -> AS .)
    FALSE           reduce using rule 255 (asOperator -> AS .)
    FUNCTION        reduce using rule 255 (asOperator -> AS .)
    NULL            reduce using rule 255 (asOperator -> AS .)
    NULLABLE        reduce using rule 255 (asOperator -> AS .)
    NUMBER          reduce using rule 255 (asOperator -> AS .)
    OPERATOR        reduce using rule 255 (asOperator -> AS .)
    SMARTCAST       reduce using rule 255 (asOperator -> AS .)
    THIS            reduce using rule 255 (asOperator -> AS .)
    TRUE            reduce using rule 255 (asOperator -> AS .)
    VAL             reduce using rule 255 (asOperator -> AS .)
    VAR             reduce using rule 255 (asOperator -> AS .)
    WHEN            reduce using rule 255 (asOperator -> AS .)
    LONG            reduce using rule 255 (asOperator -> AS .)
    ARRAY           reduce using rule 255 (asOperator -> AS .)
    AS              shift and go to state 174

    asOperator                     shift and go to state 280

state 175

    (83) forStatement_MD -> FOR LPAREN . multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> FOR LPAREN . multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> FOR LPAREN . variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> FOR LPAREN . variableDeclaration IN expression RPAREN
    (34) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (35) multiVariableDeclaration -> . LPAREN RPAREN
    (32) variableDeclaration -> . simpleIdentifier DOISP type
    (33) variableDeclaration -> . simpleIdentifier
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    LPAREN          shift and go to state 261
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    multiVariableDeclaration       shift and go to state 281
    variableDeclaration            shift and go to state 282
    simpleIdentifier               shift and go to state 262

state 176

    (141) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression . RPAREN

    RPAREN          shift and go to state 283


state 177

    (144) parenthesizedAssignableExpression -> LPAREN assignableExpression . RPAREN

    RPAREN          shift and go to state 284


state 178

    (180) parenthesizedExpression -> LPAREN expression . RPAREN
    (223) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 285
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 179

    (87) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (88) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 286
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 180

    (89) doWhileStatement -> DO controlStructureBody . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 287


state 181

    (90) doWhileStatement -> DO WHILE . LPAREN expression RPAREN
    (87) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 288


state 182

    (76) controlStructureBody -> block .

    WHILE           reduce using rule 76 (controlStructureBody -> block .)
    FUN             reduce using rule 76 (controlStructureBody -> block .)
    FOR             reduce using rule 76 (controlStructureBody -> block .)
    DO              reduce using rule 76 (controlStructureBody -> block .)
    VAR             reduce using rule 76 (controlStructureBody -> block .)
    VAL             reduce using rule 76 (controlStructureBody -> block .)
    ID              reduce using rule 76 (controlStructureBody -> block .)
    CROSSINLINE     reduce using rule 76 (controlStructureBody -> block .)
    IMPORT          reduce using rule 76 (controlStructureBody -> block .)
    INIT            reduce using rule 76 (controlStructureBody -> block .)
    NOINLINE        reduce using rule 76 (controlStructureBody -> block .)
    OUT             reduce using rule 76 (controlStructureBody -> block .)
    VARARG          reduce using rule 76 (controlStructureBody -> block .)
    WHERE           reduce using rule 76 (controlStructureBody -> block .)
    OBJECT          reduce using rule 76 (controlStructureBody -> block .)
    CONST           reduce using rule 76 (controlStructureBody -> block .)
    CONSTRUCTOR     reduce using rule 76 (controlStructureBody -> block .)
    EOF             reduce using rule 76 (controlStructureBody -> block .)
    FALSE           reduce using rule 76 (controlStructureBody -> block .)
    FUNCTION        reduce using rule 76 (controlStructureBody -> block .)
    NULL            reduce using rule 76 (controlStructureBody -> block .)
    NULLABLE        reduce using rule 76 (controlStructureBody -> block .)
    NUMBER          reduce using rule 76 (controlStructureBody -> block .)
    OPERATOR        reduce using rule 76 (controlStructureBody -> block .)
    SMARTCAST       reduce using rule 76 (controlStructureBody -> block .)
    THIS            reduce using rule 76 (controlStructureBody -> block .)
    TRUE            reduce using rule 76 (controlStructureBody -> block .)
    WHEN            reduce using rule 76 (controlStructureBody -> block .)
    LONG            reduce using rule 76 (controlStructureBody -> block .)
    ARRAY           reduce using rule 76 (controlStructureBody -> block .)
    LPAREN          reduce using rule 76 (controlStructureBody -> block .)
    LITERAL_STRING  reduce using rule 76 (controlStructureBody -> block .)
    LCCT            reduce using rule 76 (controlStructureBody -> block .)
    IF              reduce using rule 76 (controlStructureBody -> block .)
    RETURN          reduce using rule 76 (controlStructureBody -> block .)
    RETURN_AT       reduce using rule 76 (controlStructureBody -> block .)
    CONTINUE        reduce using rule 76 (controlStructureBody -> block .)
    CONTINUE_AT     reduce using rule 76 (controlStructureBody -> block .)
    BREAK           reduce using rule 76 (controlStructureBody -> block .)
    BREAK_AT        reduce using rule 76 (controlStructureBody -> block .)
    RCHAVE          reduce using rule 76 (controlStructureBody -> block .)
    INCREMENTO      reduce using rule 76 (controlStructureBody -> block .)
    DECREMENTO      reduce using rule 76 (controlStructureBody -> block .)
    MINUS           reduce using rule 76 (controlStructureBody -> block .)
    PLUS            reduce using rule 76 (controlStructureBody -> block .)
    NOT             reduce using rule 76 (controlStructureBody -> block .)
    SUSPEND         reduce using rule 76 (controlStructureBody -> block .)
    COLONCOLON      reduce using rule 76 (controlStructureBody -> block .)
    LCHAVE          reduce using rule 76 (controlStructureBody -> block .)
    MENOR           reduce using rule 76 (controlStructureBody -> block .)
    PONTO           reduce using rule 76 (controlStructureBody -> block .)
    AS              reduce using rule 76 (controlStructureBody -> block .)
    MAISIGUAL       reduce using rule 76 (controlStructureBody -> block .)
    MENOSIGUAL      reduce using rule 76 (controlStructureBody -> block .)
    MULTIGUAL       reduce using rule 76 (controlStructureBody -> block .)
    DIVIGUAL        reduce using rule 76 (controlStructureBody -> block .)
    MODIGUAL        reduce using rule 76 (controlStructureBody -> block .)
    MULT            reduce using rule 76 (controlStructureBody -> block .)
    DIVIDE          reduce using rule 76 (controlStructureBody -> block .)
    MOD             reduce using rule 76 (controlStructureBody -> block .)
    PONTOPONTO      reduce using rule 76 (controlStructureBody -> block .)
    ELVIS           reduce using rule 76 (controlStructureBody -> block .)
    IN              reduce using rule 76 (controlStructureBody -> block .)
    NOT_IN          reduce using rule 76 (controlStructureBody -> block .)
    IS              reduce using rule 76 (controlStructureBody -> block .)
    NOT_IS          reduce using rule 76 (controlStructureBody -> block .)
    MAIOR           reduce using rule 76 (controlStructureBody -> block .)
    MENORIGUAL      reduce using rule 76 (controlStructureBody -> block .)
    MAIORIGUAL      reduce using rule 76 (controlStructureBody -> block .)
    DIFERENTE       reduce using rule 76 (controlStructureBody -> block .)
    IDENTIDADE      reduce using rule 76 (controlStructureBody -> block .)
    IGUALDADE       reduce using rule 76 (controlStructureBody -> block .)
    SEMIDENTIDADE   reduce using rule 76 (controlStructureBody -> block .)
    AND             reduce using rule 76 (controlStructureBody -> block .)
    OR              reduce using rule 76 (controlStructureBody -> block .)
    COMMA           reduce using rule 76 (controlStructureBody -> block .)
    RPAREN          reduce using rule 76 (controlStructureBody -> block .)
    RCCT            reduce using rule 76 (controlStructureBody -> block .)
    PV              reduce using rule 76 (controlStructureBody -> block .)
    ELSE            reduce using rule 76 (controlStructureBody -> block .)


state 183

    (77) controlStructureBody -> statement .

    WHILE           reduce using rule 77 (controlStructureBody -> statement .)
    FUN             reduce using rule 77 (controlStructureBody -> statement .)
    FOR             reduce using rule 77 (controlStructureBody -> statement .)
    DO              reduce using rule 77 (controlStructureBody -> statement .)
    VAR             reduce using rule 77 (controlStructureBody -> statement .)
    VAL             reduce using rule 77 (controlStructureBody -> statement .)
    ID              reduce using rule 77 (controlStructureBody -> statement .)
    CROSSINLINE     reduce using rule 77 (controlStructureBody -> statement .)
    IMPORT          reduce using rule 77 (controlStructureBody -> statement .)
    INIT            reduce using rule 77 (controlStructureBody -> statement .)
    NOINLINE        reduce using rule 77 (controlStructureBody -> statement .)
    OUT             reduce using rule 77 (controlStructureBody -> statement .)
    VARARG          reduce using rule 77 (controlStructureBody -> statement .)
    WHERE           reduce using rule 77 (controlStructureBody -> statement .)
    OBJECT          reduce using rule 77 (controlStructureBody -> statement .)
    CONST           reduce using rule 77 (controlStructureBody -> statement .)
    CONSTRUCTOR     reduce using rule 77 (controlStructureBody -> statement .)
    EOF             reduce using rule 77 (controlStructureBody -> statement .)
    FALSE           reduce using rule 77 (controlStructureBody -> statement .)
    FUNCTION        reduce using rule 77 (controlStructureBody -> statement .)
    NULL            reduce using rule 77 (controlStructureBody -> statement .)
    NULLABLE        reduce using rule 77 (controlStructureBody -> statement .)
    NUMBER          reduce using rule 77 (controlStructureBody -> statement .)
    OPERATOR        reduce using rule 77 (controlStructureBody -> statement .)
    SMARTCAST       reduce using rule 77 (controlStructureBody -> statement .)
    THIS            reduce using rule 77 (controlStructureBody -> statement .)
    TRUE            reduce using rule 77 (controlStructureBody -> statement .)
    WHEN            reduce using rule 77 (controlStructureBody -> statement .)
    LONG            reduce using rule 77 (controlStructureBody -> statement .)
    ARRAY           reduce using rule 77 (controlStructureBody -> statement .)
    LPAREN          reduce using rule 77 (controlStructureBody -> statement .)
    LITERAL_STRING  reduce using rule 77 (controlStructureBody -> statement .)
    LCCT            reduce using rule 77 (controlStructureBody -> statement .)
    IF              reduce using rule 77 (controlStructureBody -> statement .)
    RETURN          reduce using rule 77 (controlStructureBody -> statement .)
    RETURN_AT       reduce using rule 77 (controlStructureBody -> statement .)
    CONTINUE        reduce using rule 77 (controlStructureBody -> statement .)
    CONTINUE_AT     reduce using rule 77 (controlStructureBody -> statement .)
    BREAK           reduce using rule 77 (controlStructureBody -> statement .)
    BREAK_AT        reduce using rule 77 (controlStructureBody -> statement .)
    RCHAVE          reduce using rule 77 (controlStructureBody -> statement .)
    INCREMENTO      reduce using rule 77 (controlStructureBody -> statement .)
    DECREMENTO      reduce using rule 77 (controlStructureBody -> statement .)
    MINUS           reduce using rule 77 (controlStructureBody -> statement .)
    PLUS            reduce using rule 77 (controlStructureBody -> statement .)
    NOT             reduce using rule 77 (controlStructureBody -> statement .)
    SUSPEND         reduce using rule 77 (controlStructureBody -> statement .)
    COLONCOLON      reduce using rule 77 (controlStructureBody -> statement .)
    LCHAVE          reduce using rule 77 (controlStructureBody -> statement .)
    MENOR           reduce using rule 77 (controlStructureBody -> statement .)
    PONTO           reduce using rule 77 (controlStructureBody -> statement .)
    AS              reduce using rule 77 (controlStructureBody -> statement .)
    MAISIGUAL       reduce using rule 77 (controlStructureBody -> statement .)
    MENOSIGUAL      reduce using rule 77 (controlStructureBody -> statement .)
    MULTIGUAL       reduce using rule 77 (controlStructureBody -> statement .)
    DIVIGUAL        reduce using rule 77 (controlStructureBody -> statement .)
    MODIGUAL        reduce using rule 77 (controlStructureBody -> statement .)
    MULT            reduce using rule 77 (controlStructureBody -> statement .)
    DIVIDE          reduce using rule 77 (controlStructureBody -> statement .)
    MOD             reduce using rule 77 (controlStructureBody -> statement .)
    PONTOPONTO      reduce using rule 77 (controlStructureBody -> statement .)
    ELVIS           reduce using rule 77 (controlStructureBody -> statement .)
    IN              reduce using rule 77 (controlStructureBody -> statement .)
    NOT_IN          reduce using rule 77 (controlStructureBody -> statement .)
    IS              reduce using rule 77 (controlStructureBody -> statement .)
    NOT_IS          reduce using rule 77 (controlStructureBody -> statement .)
    MAIOR           reduce using rule 77 (controlStructureBody -> statement .)
    MENORIGUAL      reduce using rule 77 (controlStructureBody -> statement .)
    MAIORIGUAL      reduce using rule 77 (controlStructureBody -> statement .)
    DIFERENTE       reduce using rule 77 (controlStructureBody -> statement .)
    IDENTIDADE      reduce using rule 77 (controlStructureBody -> statement .)
    IGUALDADE       reduce using rule 77 (controlStructureBody -> statement .)
    SEMIDENTIDADE   reduce using rule 77 (controlStructureBody -> statement .)
    AND             reduce using rule 77 (controlStructureBody -> statement .)
    OR              reduce using rule 77 (controlStructureBody -> statement .)
    COMMA           reduce using rule 77 (controlStructureBody -> statement .)
    RPAREN          reduce using rule 77 (controlStructureBody -> statement .)
    RCCT            reduce using rule 77 (controlStructureBody -> statement .)
    PV              reduce using rule 77 (controlStructureBody -> statement .)
    ELSE            reduce using rule 77 (controlStructureBody -> statement .)


state 184

    (95) disjunction -> conjunction OR . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    conjunction                    shift and go to state 80
    disjunction                    shift and go to state 289
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 185

    (132) postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .

    INCREMENTO      reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DECREMENTO      reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENOR           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LCCT            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PONTO           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RCHAVE          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    AS              reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAISIGUAL       reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENOSIGUAL      reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MULTIGUAL       reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIVIGUAL        reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MODIGUAL        reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MULT            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIVIDE          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MOD             reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PLUS            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MINUS           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PONTOPONTO      reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ID              reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    INIT            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OUT             reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VARARG          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    WHERE           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OBJECT          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONST           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONSTRUCTOR     reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    EOF             reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FALSE           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FUNCTION        reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NULL            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NULLABLE        reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    SMARTCAST       reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    THIS            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    TRUE            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VAL             reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VAR             reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    WHEN            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LONG            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ARRAY           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ELVIS           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IN              reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT_IN          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IS              reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT_IS          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAIOR           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENORIGUAL      reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAIORIGUAL      reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIFERENTE       reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IDENTIDADE      reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IGUALDADE       reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    SEMIDENTIDADE   reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    AND             reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OR              reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FUN             reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FOR             reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    WHILE           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DO              reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LITERAL_STRING  reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IF              reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RETURN          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    BREAK           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT             reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    COMMA           reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RPAREN          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LCHAVE          reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RCCT            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PV              reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ELSE            reduce using rule 132 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)


state 186

    (129) postfixUnaryExpressionRecursive -> postfixUnarySuffix .
    (130) postfixUnaryExpressionRecursive -> postfixUnarySuffix . postfixUnaryExpressionRecursive
    (129) postfixUnaryExpressionRecursive -> . postfixUnarySuffix
    (130) postfixUnaryExpressionRecursive -> . postfixUnarySuffix postfixUnaryExpressionRecursive
    (133) postfixUnarySuffix -> . postfixUnaryOperator
    (134) postfixUnarySuffix -> . typeArguments
    (135) postfixUnarySuffix -> . callSuffix
    (136) postfixUnarySuffix -> . indexingSuffix
    (137) postfixUnarySuffix -> . navigationSuffix
    (262) postfixUnaryOperator -> . INCREMENTO
    (263) postfixUnaryOperator -> . DECREMENTO
    (161) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (162) typeArguments -> . MENOR MAIOR
    (154) callSuffix -> . optionalTypeArguments optionalValueArguments annotatedLambda
    (155) callSuffix -> . optionalTypeArguments optionalValueArguments
    (148) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (149) indexingSuffix -> . LCCT RCCT
    (152) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (153) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (156) optionalTypeArguments -> . typeArguments
    (157) optionalTypeArguments -> .
    (264) memberAccessOperator -> . safeNav
    (265) memberAccessOperator -> . COLONCOLON
    (266) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PONTO resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for AS resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MULT resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MOD resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PLUS resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MINUS resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ID resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IMPORT resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for INIT resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OUT resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for VARARG resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for WHERE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OBJECT resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CONST resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for EOF resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for FALSE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NULL resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NUMBER resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for THIS resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for TRUE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for VAL resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for VAR resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for WHEN resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for LONG resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ARRAY resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ELVIS resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IN resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IS resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MAIOR resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for AND resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OR resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for FUN resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for FOR resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for WHILE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DO resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IF resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RETURN resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for BREAK resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOT resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for COMMA resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RPAREN resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RCCT resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PV resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ELSE resolved using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    LPAREN          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RCHAVE          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    AS              reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAISIGUAL       reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MENOSIGUAL      reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MULTIGUAL       reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIVIGUAL        reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MODIGUAL        reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MULT            reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIVIDE          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MOD             reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PLUS            reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MINUS           reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PONTOPONTO      reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ID              reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CROSSINLINE     reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IMPORT          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    INIT            reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOINLINE        reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OUT             reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VARARG          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    WHERE           reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OBJECT          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONST           reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONSTRUCTOR     reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    EOF             reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FALSE           reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FUNCTION        reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NULL            reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NULLABLE        reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NUMBER          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OPERATOR        reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    SMARTCAST       reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    THIS            reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    TRUE            reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VAL             reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VAR             reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    WHEN            reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    LONG            reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ARRAY           reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ELVIS           reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IN              reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT_IN          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IS              reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT_IS          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAIOR           reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MENORIGUAL      reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAIORIGUAL      reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIFERENTE       reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IDENTIDADE      reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IGUALDADE       reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    SEMIDENTIDADE   reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    AND             reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OR              reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FUN             reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FOR             reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    WHILE           reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DO              reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    LITERAL_STRING  reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IF              reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RETURN          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RETURN_AT       reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONTINUE        reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONTINUE_AT     reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    BREAK           reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    BREAK_AT        reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT             reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    SUSPEND         reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    COMMA           reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RPAREN          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    LCHAVE          reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RCCT            reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PV              reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ELSE            reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    INCREMENTO      shift and go to state 192
    DECREMENTO      shift and go to state 193
    MENOR           shift and go to state 167
    LCCT            shift and go to state 168
    COLONCOLON      shift and go to state 171
    PONTO           shift and go to state 172

  ! INCREMENTO      [ reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! DECREMENTO      [ reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! MENOR           [ reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! LCCT            [ reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! COLONCOLON      [ reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! PONTO           [ reduce using rule 129 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! LPAREN          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! RCHAVE          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! INCREMENTO      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! DECREMENTO      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MENOR           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! LCCT            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! COLONCOLON      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! PONTO           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! AS              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MAISIGUAL       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MENOSIGUAL      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MULTIGUAL       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! DIVIGUAL        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MODIGUAL        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MULT            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! DIVIDE          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MOD             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! PLUS            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MINUS           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! PONTOPONTO      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! ID              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! CROSSINLINE     [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IMPORT          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! INIT            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NOINLINE        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! OUT             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! VARARG          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! WHERE           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! OBJECT          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! CONST           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! EOF             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! FALSE           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! FUNCTION        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NULL            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NULLABLE        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NUMBER          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! OPERATOR        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! SMARTCAST       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! THIS            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! TRUE            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! VAL             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! VAR             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! WHEN            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! LONG            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! ARRAY           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! ELVIS           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IN              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NOT_IN          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IS              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NOT_IS          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MAIOR           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MENORIGUAL      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! MAIORIGUAL      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! DIFERENTE       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IDENTIDADE      [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IGUALDADE       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! AND             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! OR              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! FUN             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! FOR             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! WHILE           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! DO              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! LITERAL_STRING  [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! IF              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! RETURN          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! RETURN_AT       [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! CONTINUE        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! CONTINUE_AT     [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! BREAK           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! BREAK_AT        [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! NOT             [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! SUSPEND         [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! COMMA           [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! RPAREN          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! LCHAVE          [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! RCCT            [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! PV              [ reduce using rule 157 (optionalTypeArguments -> .) ]
  ! ELSE            [ reduce using rule 157 (optionalTypeArguments -> .) ]

    postfixUnarySuffix             shift and go to state 186
    postfixUnaryExpressionRecursive shift and go to state 290
    postfixUnaryOperator           shift and go to state 187
    typeArguments                  shift and go to state 188
    callSuffix                     shift and go to state 189
    indexingSuffix                 shift and go to state 190
    navigationSuffix               shift and go to state 191
    optionalTypeArguments          shift and go to state 194
    memberAccessOperator           shift and go to state 169
    safeNav                        shift and go to state 170

state 187

    (133) postfixUnarySuffix -> postfixUnaryOperator .

    INCREMENTO      reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    DECREMENTO      reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOR           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCCT            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    COLONCOLON      reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTO           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    LPAREN          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCHAVE          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    AS              reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAISIGUAL       reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOSIGUAL      reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULTIGUAL       reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIGUAL        reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MODIGUAL        reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULT            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIDE          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MOD             reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    PLUS            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MINUS           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTOPONTO      reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    ID              reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    CROSSINLINE     reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    IMPORT          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    INIT            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOINLINE        reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    OUT             reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    VARARG          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHERE           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    OBJECT          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONST           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONSTRUCTOR     reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    EOF             reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    FALSE           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    FUNCTION        reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    NULL            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    NULLABLE        reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    NUMBER          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    OPERATOR        reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    SMARTCAST       reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    THIS            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    TRUE            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    VAL             reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    VAR             reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHEN            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    LONG            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    ARRAY           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELVIS           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    IN              reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IN          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    IS              reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IS          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIOR           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENORIGUAL      reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIORIGUAL      reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIFERENTE       reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    IDENTIDADE      reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    IGUALDADE       reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    SEMIDENTIDADE   reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    AND             reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    OR              reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    FUN             reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    FOR             reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHILE           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    DO              reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    LITERAL_STRING  reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    IF              reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN_AT       reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE        reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE_AT     reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK_AT        reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT             reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    SUSPEND         reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    COMMA           reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    RPAREN          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCHAVE          reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCCT            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    PV              reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELSE            reduce using rule 133 (postfixUnarySuffix -> postfixUnaryOperator .)


state 188

    (134) postfixUnarySuffix -> typeArguments .
    (156) optionalTypeArguments -> typeArguments .

  ! reduce/reduce conflict for LPAREN resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MENOR resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LCCT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PONTO resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for AS resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MULT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MOD resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PLUS resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MINUS resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ID resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IMPORT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for INIT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OUT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for VARARG resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for WHERE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OBJECT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CONST resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for EOF resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for FALSE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NULL resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NUMBER resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for THIS resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for TRUE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for VAL resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for VAR resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for WHEN resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LONG resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ARRAY resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ELVIS resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IN resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IS resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MAIOR resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for AND resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OR resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for FUN resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for FOR resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for WHILE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DO resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IF resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RETURN resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for BREAK resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for COMMA resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RPAREN resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RCCT resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PV resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ELSE resolved using rule 134 (postfixUnarySuffix -> typeArguments .)
    INCREMENTO      reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    DECREMENTO      reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MENOR           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    LCCT            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    COLONCOLON      reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    PONTO           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    LPAREN          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    RCHAVE          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    AS              reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MAISIGUAL       reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MENOSIGUAL      reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MULTIGUAL       reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    DIVIGUAL        reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MODIGUAL        reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MULT            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    DIVIDE          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MOD             reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    PLUS            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MINUS           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    PONTOPONTO      reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    ID              reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    CROSSINLINE     reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    IMPORT          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    INIT            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    NOINLINE        reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    OUT             reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    VARARG          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    WHERE           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    OBJECT          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    CONST           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    CONSTRUCTOR     reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    EOF             reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    FALSE           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    FUNCTION        reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    NULL            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    NULLABLE        reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    NUMBER          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    OPERATOR        reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    SMARTCAST       reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    THIS            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    TRUE            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    VAL             reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    VAR             reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    WHEN            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    LONG            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    ARRAY           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    ELVIS           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    IN              reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    NOT_IN          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    IS              reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    NOT_IS          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MAIOR           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MENORIGUAL      reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    MAIORIGUAL      reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    DIFERENTE       reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    IDENTIDADE      reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    IGUALDADE       reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    SEMIDENTIDADE   reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    AND             reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    OR              reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    FUN             reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    FOR             reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    WHILE           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    DO              reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    LITERAL_STRING  reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    IF              reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    RETURN          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    RETURN_AT       reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    CONTINUE        reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    CONTINUE_AT     reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    BREAK           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    BREAK_AT        reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    NOT             reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    SUSPEND         reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    COMMA           reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    RPAREN          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    LCHAVE          reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    RCCT            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    PV              reduce using rule 134 (postfixUnarySuffix -> typeArguments .)
    ELSE            reduce using rule 134 (postfixUnarySuffix -> typeArguments .)

  ! LPAREN          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! RCHAVE          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! INCREMENTO      [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! DECREMENTO      [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MENOR           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! LCCT            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! COLONCOLON      [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! PONTO           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! AS              [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MAISIGUAL       [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MENOSIGUAL      [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MULTIGUAL       [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! DIVIGUAL        [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MODIGUAL        [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MULT            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! DIVIDE          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MOD             [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! PLUS            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MINUS           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! PONTOPONTO      [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! ID              [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! CROSSINLINE     [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! IMPORT          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! INIT            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! NOINLINE        [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! OUT             [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! VARARG          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! WHERE           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! OBJECT          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! CONST           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! CONSTRUCTOR     [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! EOF             [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! FALSE           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! FUNCTION        [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! NULL            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! NULLABLE        [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! NUMBER          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! OPERATOR        [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! SMARTCAST       [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! THIS            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! TRUE            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! VAL             [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! VAR             [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! WHEN            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! LONG            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! ARRAY           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! ELVIS           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! IN              [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! NOT_IN          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! IS              [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! NOT_IS          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MAIOR           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MENORIGUAL      [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! MAIORIGUAL      [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! DIFERENTE       [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! IDENTIDADE      [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! IGUALDADE       [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! SEMIDENTIDADE   [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! AND             [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! OR              [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! FUN             [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! FOR             [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! WHILE           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! DO              [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! LITERAL_STRING  [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! IF              [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! RETURN          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! RETURN_AT       [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! CONTINUE        [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! CONTINUE_AT     [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! BREAK           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! BREAK_AT        [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! NOT             [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! SUSPEND         [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! COMMA           [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! RPAREN          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! LCHAVE          [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! RCCT            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! PV              [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]
  ! ELSE            [ reduce using rule 156 (optionalTypeArguments -> typeArguments .) ]


state 189

    (135) postfixUnarySuffix -> callSuffix .

    INCREMENTO      reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    DECREMENTO      reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MENOR           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    LCCT            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    COLONCOLON      reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    PONTO           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    LPAREN          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    RCHAVE          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    AS              reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MAISIGUAL       reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MENOSIGUAL      reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MULTIGUAL       reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    DIVIGUAL        reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MODIGUAL        reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MULT            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    DIVIDE          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MOD             reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    PLUS            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MINUS           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    PONTOPONTO      reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    ID              reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    CROSSINLINE     reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    IMPORT          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    INIT            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    NOINLINE        reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    OUT             reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    VARARG          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    WHERE           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    OBJECT          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    CONST           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    CONSTRUCTOR     reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    EOF             reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    FALSE           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    FUNCTION        reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    NULL            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    NULLABLE        reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    NUMBER          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    OPERATOR        reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    SMARTCAST       reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    THIS            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    TRUE            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    VAL             reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    VAR             reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    WHEN            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    LONG            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    ARRAY           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    ELVIS           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    IN              reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    NOT_IN          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    IS              reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    NOT_IS          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MAIOR           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MENORIGUAL      reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    MAIORIGUAL      reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    DIFERENTE       reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    IDENTIDADE      reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    IGUALDADE       reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    SEMIDENTIDADE   reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    AND             reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    OR              reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    FUN             reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    FOR             reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    WHILE           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    DO              reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    LITERAL_STRING  reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    IF              reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    RETURN          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    RETURN_AT       reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    CONTINUE        reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    CONTINUE_AT     reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    BREAK           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    BREAK_AT        reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    NOT             reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    SUSPEND         reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    COMMA           reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    RPAREN          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    LCHAVE          reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    RCCT            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    PV              reduce using rule 135 (postfixUnarySuffix -> callSuffix .)
    ELSE            reduce using rule 135 (postfixUnarySuffix -> callSuffix .)


state 190

    (136) postfixUnarySuffix -> indexingSuffix .

    INCREMENTO      reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    DECREMENTO      reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MENOR           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    LCCT            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    COLONCOLON      reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    PONTO           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    LPAREN          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    RCHAVE          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    AS              reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MAISIGUAL       reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MENOSIGUAL      reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MULTIGUAL       reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    DIVIGUAL        reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MODIGUAL        reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MULT            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    DIVIDE          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MOD             reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    PLUS            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MINUS           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    PONTOPONTO      reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    ID              reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    CROSSINLINE     reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    IMPORT          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    INIT            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    NOINLINE        reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    OUT             reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    VARARG          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    WHERE           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    OBJECT          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    CONST           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    CONSTRUCTOR     reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    EOF             reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    FALSE           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    FUNCTION        reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    NULL            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    NULLABLE        reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    NUMBER          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    OPERATOR        reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    SMARTCAST       reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    THIS            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    TRUE            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    VAL             reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    VAR             reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    WHEN            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    LONG            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    ARRAY           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    ELVIS           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    IN              reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IN          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    IS              reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IS          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MAIOR           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MENORIGUAL      reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    MAIORIGUAL      reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    DIFERENTE       reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    IDENTIDADE      reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    IGUALDADE       reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    SEMIDENTIDADE   reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    AND             reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    OR              reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    FUN             reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    FOR             reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    WHILE           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    DO              reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    LITERAL_STRING  reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    IF              reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    RETURN          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    RETURN_AT       reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE        reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE_AT     reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    BREAK           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    BREAK_AT        reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    NOT             reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    SUSPEND         reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    COMMA           reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    RPAREN          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    LCHAVE          reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    RCCT            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    PV              reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)
    ELSE            reduce using rule 136 (postfixUnarySuffix -> indexingSuffix .)


state 191

    (137) postfixUnarySuffix -> navigationSuffix .

    INCREMENTO      reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    DECREMENTO      reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MENOR           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    LCCT            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    COLONCOLON      reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    PONTO           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    LPAREN          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    RCHAVE          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    AS              reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MAISIGUAL       reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MENOSIGUAL      reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MULTIGUAL       reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    DIVIGUAL        reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MODIGUAL        reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MULT            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    DIVIDE          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MOD             reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    PLUS            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MINUS           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    PONTOPONTO      reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    ID              reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    CROSSINLINE     reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    IMPORT          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    INIT            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    NOINLINE        reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    OUT             reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    VARARG          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    WHERE           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    OBJECT          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    CONST           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    CONSTRUCTOR     reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    EOF             reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    FALSE           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    FUNCTION        reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    NULL            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    NULLABLE        reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    NUMBER          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    OPERATOR        reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    SMARTCAST       reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    THIS            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    TRUE            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    VAL             reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    VAR             reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    WHEN            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    LONG            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    ARRAY           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    ELVIS           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    IN              reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IN          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    IS              reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IS          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MAIOR           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MENORIGUAL      reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    MAIORIGUAL      reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    DIFERENTE       reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    IDENTIDADE      reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    IGUALDADE       reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    SEMIDENTIDADE   reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    AND             reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    OR              reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    FUN             reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    FOR             reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    WHILE           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    DO              reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    LITERAL_STRING  reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    IF              reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    RETURN          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    RETURN_AT       reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE        reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE_AT     reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    BREAK           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    BREAK_AT        reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    NOT             reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    SUSPEND         reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    COMMA           reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    RPAREN          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    LCHAVE          reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    RCCT            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    PV              reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)
    ELSE            reduce using rule 137 (postfixUnarySuffix -> navigationSuffix .)


state 192

    (262) postfixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MENOR           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    PONTO           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    AS              reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MAISIGUAL       reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MENOSIGUAL      reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MULTIGUAL       reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    DIVIGUAL        reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MODIGUAL        reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MULT            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    DIVIDE          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MOD             reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    PONTOPONTO      reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    OBJECT          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    CONST           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    CONSTRUCTOR     reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    EOF             reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    FALSE           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    FUNCTION        reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    NULL            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    NULLABLE        reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    OPERATOR        reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    SMARTCAST       reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    THIS            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    TRUE            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    VAL             reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    VAR             reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    WHEN            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    LONG            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    ARRAY           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    ELVIS           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    IN              reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IN          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    IS              reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IS          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MAIOR           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MENORIGUAL      reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    MAIORIGUAL      reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    DIFERENTE       reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    IDENTIDADE      reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    IGUALDADE       reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    SEMIDENTIDADE   reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    AND             reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    OR              reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    FOR             reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    WHILE           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    DO              reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    COMMA           reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    RPAREN          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    LCHAVE          reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    RCCT            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    PV              reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)
    ELSE            reduce using rule 262 (postfixUnaryOperator -> INCREMENTO .)


state 193

    (263) postfixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MENOR           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    PONTO           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    AS              reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MAISIGUAL       reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MENOSIGUAL      reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MULTIGUAL       reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    DIVIGUAL        reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MODIGUAL        reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MULT            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    DIVIDE          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MOD             reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    PONTOPONTO      reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    OBJECT          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    CONST           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    CONSTRUCTOR     reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    EOF             reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    FALSE           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    FUNCTION        reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    NULL            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    NULLABLE        reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    OPERATOR        reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    SMARTCAST       reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    THIS            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    TRUE            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    VAL             reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    VAR             reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    WHEN            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    LONG            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    ARRAY           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    ELVIS           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    IN              reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IN          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    IS              reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IS          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MAIOR           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MENORIGUAL      reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    MAIORIGUAL      reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    DIFERENTE       reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    IDENTIDADE      reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    IGUALDADE       reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    SEMIDENTIDADE   reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    AND             reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    OR              reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    FOR             reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    WHILE           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    DO              reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    COMMA           reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    RPAREN          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    LCHAVE          reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    RCCT            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    PV              reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)
    ELSE            reduce using rule 263 (postfixUnaryOperator -> DECREMENTO .)


state 194

    (154) callSuffix -> optionalTypeArguments . optionalValueArguments annotatedLambda
    (155) callSuffix -> optionalTypeArguments . optionalValueArguments
    (158) optionalValueArguments -> . valueArguments
    (159) optionalValueArguments -> .
    (167) valueArguments -> . LPAREN RPAREN
    (168) valueArguments -> . LPAREN valueArgumentsRecursive RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    RCHAVE          reduce using rule 159 (optionalValueArguments -> .)
    INCREMENTO      reduce using rule 159 (optionalValueArguments -> .)
    DECREMENTO      reduce using rule 159 (optionalValueArguments -> .)
    MENOR           reduce using rule 159 (optionalValueArguments -> .)
    LCCT            reduce using rule 159 (optionalValueArguments -> .)
    COLONCOLON      reduce using rule 159 (optionalValueArguments -> .)
    PONTO           reduce using rule 159 (optionalValueArguments -> .)
    AS              reduce using rule 159 (optionalValueArguments -> .)
    MAISIGUAL       reduce using rule 159 (optionalValueArguments -> .)
    MENOSIGUAL      reduce using rule 159 (optionalValueArguments -> .)
    MULTIGUAL       reduce using rule 159 (optionalValueArguments -> .)
    DIVIGUAL        reduce using rule 159 (optionalValueArguments -> .)
    MODIGUAL        reduce using rule 159 (optionalValueArguments -> .)
    MULT            reduce using rule 159 (optionalValueArguments -> .)
    DIVIDE          reduce using rule 159 (optionalValueArguments -> .)
    MOD             reduce using rule 159 (optionalValueArguments -> .)
    PLUS            reduce using rule 159 (optionalValueArguments -> .)
    MINUS           reduce using rule 159 (optionalValueArguments -> .)
    PONTOPONTO      reduce using rule 159 (optionalValueArguments -> .)
    ID              reduce using rule 159 (optionalValueArguments -> .)
    CROSSINLINE     reduce using rule 159 (optionalValueArguments -> .)
    IMPORT          reduce using rule 159 (optionalValueArguments -> .)
    INIT            reduce using rule 159 (optionalValueArguments -> .)
    NOINLINE        reduce using rule 159 (optionalValueArguments -> .)
    OUT             reduce using rule 159 (optionalValueArguments -> .)
    VARARG          reduce using rule 159 (optionalValueArguments -> .)
    WHERE           reduce using rule 159 (optionalValueArguments -> .)
    OBJECT          reduce using rule 159 (optionalValueArguments -> .)
    CONST           reduce using rule 159 (optionalValueArguments -> .)
    CONSTRUCTOR     reduce using rule 159 (optionalValueArguments -> .)
    EOF             reduce using rule 159 (optionalValueArguments -> .)
    FALSE           reduce using rule 159 (optionalValueArguments -> .)
    FUNCTION        reduce using rule 159 (optionalValueArguments -> .)
    NULL            reduce using rule 159 (optionalValueArguments -> .)
    NULLABLE        reduce using rule 159 (optionalValueArguments -> .)
    NUMBER          reduce using rule 159 (optionalValueArguments -> .)
    OPERATOR        reduce using rule 159 (optionalValueArguments -> .)
    SMARTCAST       reduce using rule 159 (optionalValueArguments -> .)
    THIS            reduce using rule 159 (optionalValueArguments -> .)
    TRUE            reduce using rule 159 (optionalValueArguments -> .)
    VAL             reduce using rule 159 (optionalValueArguments -> .)
    VAR             reduce using rule 159 (optionalValueArguments -> .)
    WHEN            reduce using rule 159 (optionalValueArguments -> .)
    LONG            reduce using rule 159 (optionalValueArguments -> .)
    ARRAY           reduce using rule 159 (optionalValueArguments -> .)
    ELVIS           reduce using rule 159 (optionalValueArguments -> .)
    IN              reduce using rule 159 (optionalValueArguments -> .)
    NOT_IN          reduce using rule 159 (optionalValueArguments -> .)
    IS              reduce using rule 159 (optionalValueArguments -> .)
    NOT_IS          reduce using rule 159 (optionalValueArguments -> .)
    MAIOR           reduce using rule 159 (optionalValueArguments -> .)
    MENORIGUAL      reduce using rule 159 (optionalValueArguments -> .)
    MAIORIGUAL      reduce using rule 159 (optionalValueArguments -> .)
    DIFERENTE       reduce using rule 159 (optionalValueArguments -> .)
    IDENTIDADE      reduce using rule 159 (optionalValueArguments -> .)
    IGUALDADE       reduce using rule 159 (optionalValueArguments -> .)
    SEMIDENTIDADE   reduce using rule 159 (optionalValueArguments -> .)
    AND             reduce using rule 159 (optionalValueArguments -> .)
    OR              reduce using rule 159 (optionalValueArguments -> .)
    FUN             reduce using rule 159 (optionalValueArguments -> .)
    FOR             reduce using rule 159 (optionalValueArguments -> .)
    WHILE           reduce using rule 159 (optionalValueArguments -> .)
    DO              reduce using rule 159 (optionalValueArguments -> .)
    LITERAL_STRING  reduce using rule 159 (optionalValueArguments -> .)
    IF              reduce using rule 159 (optionalValueArguments -> .)
    RETURN          reduce using rule 159 (optionalValueArguments -> .)
    RETURN_AT       reduce using rule 159 (optionalValueArguments -> .)
    CONTINUE        reduce using rule 159 (optionalValueArguments -> .)
    CONTINUE_AT     reduce using rule 159 (optionalValueArguments -> .)
    BREAK           reduce using rule 159 (optionalValueArguments -> .)
    BREAK_AT        reduce using rule 159 (optionalValueArguments -> .)
    NOT             reduce using rule 159 (optionalValueArguments -> .)
    SUSPEND         reduce using rule 159 (optionalValueArguments -> .)
    COMMA           reduce using rule 159 (optionalValueArguments -> .)
    RPAREN          reduce using rule 159 (optionalValueArguments -> .)
    LCHAVE          reduce using rule 159 (optionalValueArguments -> .)
    RCCT            reduce using rule 159 (optionalValueArguments -> .)
    PV              reduce using rule 159 (optionalValueArguments -> .)
    ELSE            reduce using rule 159 (optionalValueArguments -> .)
    LPAREN          shift and go to state 293

  ! LPAREN          [ reduce using rule 159 (optionalValueArguments -> .) ]

    optionalValueArguments         shift and go to state 291
    valueArguments                 shift and go to state 292

state 195

    (122) prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .
    (123) prefixUnaryExpression -> postfixUnaryExpression .

  ! reduce/reduce conflict for FUN resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for DO resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for ID resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IF resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for AS resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IN resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IS resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for AND resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for OR resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for PV resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    INCREMENTO      reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DECREMENTO      reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENOR           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LCCT            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    COLONCOLON      reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PONTO           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LPAREN          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RCHAVE          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    AS              reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MODIGUAL        reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MULT            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIVIDE          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MOD             reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PLUS            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MINUS           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ID              reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IMPORT          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    INIT            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOINLINE        reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OUT             reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VARARG          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    WHERE           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OBJECT          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONST           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONSTRUCTOR     reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    EOF             reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FALSE           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FUNCTION        reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NULL            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NULLABLE        reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NUMBER          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OPERATOR        reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    SMARTCAST       reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    THIS            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    TRUE            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VAL             reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VAR             reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    WHEN            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LONG            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ARRAY           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ELVIS           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IN              reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT_IN          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IS              reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT_IS          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAIOR           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIFERENTE       reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IGUALDADE       reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    AND             reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OR              reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FUN             reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FOR             reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    WHILE           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DO              reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IF              reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RETURN          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RETURN_AT       reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONTINUE        reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    BREAK           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    BREAK_AT        reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT             reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    SUSPEND         reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    COMMA           reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RPAREN          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LCHAVE          reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RCCT            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PV              reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ELSE            reduce using rule 122 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)

  ! FUN             [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! FOR             [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! WHILE           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DO              [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! VAR             [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! VAL             [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ID              [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CROSSINLINE     [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IMPORT          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! INIT            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOINLINE        [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OUT             [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! VARARG          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! WHERE           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OBJECT          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONST           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! EOF             [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! FALSE           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! FUNCTION        [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NULL            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NULLABLE        [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NUMBER          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OPERATOR        [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! SMARTCAST       [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! THIS            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! TRUE            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! WHEN            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LONG            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ARRAY           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LPAREN          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCCT            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IF              [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RETURN          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RETURN_AT       [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONTINUE        [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! BREAK           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! BREAK_AT        [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RCHAVE          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! INCREMENTO      [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DECREMENTO      [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MINUS           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PLUS            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOT             [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! SUSPEND         [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCHAVE          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MENOR           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTO           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! AS              [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MAISIGUAL       [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MULTIGUAL       [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DIVIGUAL        [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MODIGUAL        [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MULT            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DIVIDE          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MOD             [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTOPONTO      [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ELVIS           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IN              [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOT_IN          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IS              [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! NOT_IS          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MAIOR           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MENORIGUAL      [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! DIFERENTE       [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IDENTIDADE      [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! IGUALDADE       [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! AND             [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! OR              [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COMMA           [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RPAREN          [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! RCCT            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PV              [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! ELSE            [ reduce using rule 123 (prefixUnaryExpression -> postfixUnaryExpression .) ]


state 196

    (223) jumpExpression -> expression .

    FUN             reduce using rule 223 (jumpExpression -> expression .)
    FOR             reduce using rule 223 (jumpExpression -> expression .)
    WHILE           reduce using rule 223 (jumpExpression -> expression .)
    DO              reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    LITERAL_STRING  reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    IF              reduce using rule 223 (jumpExpression -> expression .)
    RETURN          reduce using rule 223 (jumpExpression -> expression .)
    RETURN_AT       reduce using rule 223 (jumpExpression -> expression .)
    CONTINUE        reduce using rule 223 (jumpExpression -> expression .)
    CONTINUE_AT     reduce using rule 223 (jumpExpression -> expression .)
    BREAK           reduce using rule 223 (jumpExpression -> expression .)
    BREAK_AT        reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    NOT             reduce using rule 223 (jumpExpression -> expression .)
    SUSPEND         reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    LCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MAISIGUAL       reduce using rule 223 (jumpExpression -> expression .)
    MENOSIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MULTIGUAL       reduce using rule 223 (jumpExpression -> expression .)
    DIVIGUAL        reduce using rule 223 (jumpExpression -> expression .)
    MODIGUAL        reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)
    COMMA           reduce using rule 223 (jumpExpression -> expression .)
    RPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCCT            reduce using rule 223 (jumpExpression -> expression .)
    PV              reduce using rule 223 (jumpExpression -> expression .)
    ELSE            reduce using rule 223 (jumpExpression -> expression .)


state 197

    (97) conjunction -> equality AND . conjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    equality                       shift and go to state 85
    conjunction                    shift and go to state 294
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    disjunction                    shift and go to state 70
    typeModifier                   shift and go to state 116

state 198

    (125) prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .

    LITERAL_STRING  reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    ID              reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    INIT            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    OUT             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    VARARG          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    WHERE           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    OBJECT          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONST           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONSTRUCTOR     reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    EOF             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    FALSE           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    FUNCTION        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NULL            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NULLABLE        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    SMARTCAST       reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    THIS            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    TRUE            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    VAL             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    VAR             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    WHEN            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LONG            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    ARRAY           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LCCT            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    IF              reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    RETURN          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    BREAK           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    RCHAVE          reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    FUN             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    INCREMENTO      reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    DECREMENTO      reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    MINUS           reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    PLUS            reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NOT             reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 125 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)


state 199

    (128) label -> simpleIdentifier .

    INCREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    MINUS           reduce using rule 128 (label -> simpleIdentifier .)
    PLUS            reduce using rule 128 (label -> simpleIdentifier .)
    NOT             reduce using rule 128 (label -> simpleIdentifier .)
    ID              reduce using rule 128 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 128 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 128 (label -> simpleIdentifier .)
    INIT            reduce using rule 128 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 128 (label -> simpleIdentifier .)
    OUT             reduce using rule 128 (label -> simpleIdentifier .)
    VARARG          reduce using rule 128 (label -> simpleIdentifier .)
    WHERE           reduce using rule 128 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 128 (label -> simpleIdentifier .)
    CONST           reduce using rule 128 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 128 (label -> simpleIdentifier .)
    EOF             reduce using rule 128 (label -> simpleIdentifier .)
    FALSE           reduce using rule 128 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 128 (label -> simpleIdentifier .)
    NULL            reduce using rule 128 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 128 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 128 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 128 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 128 (label -> simpleIdentifier .)
    THIS            reduce using rule 128 (label -> simpleIdentifier .)
    TRUE            reduce using rule 128 (label -> simpleIdentifier .)
    VAL             reduce using rule 128 (label -> simpleIdentifier .)
    VAR             reduce using rule 128 (label -> simpleIdentifier .)
    WHEN            reduce using rule 128 (label -> simpleIdentifier .)
    LONG            reduce using rule 128 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 128 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 128 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 128 (label -> simpleIdentifier .)
    LCCT            reduce using rule 128 (label -> simpleIdentifier .)
    IF              reduce using rule 128 (label -> simpleIdentifier .)
    RETURN          reduce using rule 128 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 128 (label -> simpleIdentifier .)
    BREAK           reduce using rule 128 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 128 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 128 (label -> simpleIdentifier .)
    FUN             reduce using rule 128 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 128 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 128 (label -> simpleIdentifier .)


state 200

    (99) equality -> comparison equalityOperator . equality
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (47) typeModifier -> . SUSPEND
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    comparison                     shift and go to state 94
    equality                       shift and go to state 295
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    disjunction                    shift and go to state 70
    typeModifier                   shift and go to state 116
    conjunction                    shift and go to state 80

state 201

    (238) equalityOperator -> DIFERENTE .

    LITERAL_STRING  reduce using rule 238 (equalityOperator -> DIFERENTE .)
    INCREMENTO      reduce using rule 238 (equalityOperator -> DIFERENTE .)
    DECREMENTO      reduce using rule 238 (equalityOperator -> DIFERENTE .)
    MINUS           reduce using rule 238 (equalityOperator -> DIFERENTE .)
    PLUS            reduce using rule 238 (equalityOperator -> DIFERENTE .)
    NOT             reduce using rule 238 (equalityOperator -> DIFERENTE .)
    LPAREN          reduce using rule 238 (equalityOperator -> DIFERENTE .)
    ID              reduce using rule 238 (equalityOperator -> DIFERENTE .)
    CROSSINLINE     reduce using rule 238 (equalityOperator -> DIFERENTE .)
    IMPORT          reduce using rule 238 (equalityOperator -> DIFERENTE .)
    INIT            reduce using rule 238 (equalityOperator -> DIFERENTE .)
    NOINLINE        reduce using rule 238 (equalityOperator -> DIFERENTE .)
    OUT             reduce using rule 238 (equalityOperator -> DIFERENTE .)
    VARARG          reduce using rule 238 (equalityOperator -> DIFERENTE .)
    WHERE           reduce using rule 238 (equalityOperator -> DIFERENTE .)
    OBJECT          reduce using rule 238 (equalityOperator -> DIFERENTE .)
    CONST           reduce using rule 238 (equalityOperator -> DIFERENTE .)
    CONSTRUCTOR     reduce using rule 238 (equalityOperator -> DIFERENTE .)
    EOF             reduce using rule 238 (equalityOperator -> DIFERENTE .)
    FALSE           reduce using rule 238 (equalityOperator -> DIFERENTE .)
    FUNCTION        reduce using rule 238 (equalityOperator -> DIFERENTE .)
    NULL            reduce using rule 238 (equalityOperator -> DIFERENTE .)
    NULLABLE        reduce using rule 238 (equalityOperator -> DIFERENTE .)
    NUMBER          reduce using rule 238 (equalityOperator -> DIFERENTE .)
    OPERATOR        reduce using rule 238 (equalityOperator -> DIFERENTE .)
    SMARTCAST       reduce using rule 238 (equalityOperator -> DIFERENTE .)
    THIS            reduce using rule 238 (equalityOperator -> DIFERENTE .)
    TRUE            reduce using rule 238 (equalityOperator -> DIFERENTE .)
    VAL             reduce using rule 238 (equalityOperator -> DIFERENTE .)
    VAR             reduce using rule 238 (equalityOperator -> DIFERENTE .)
    WHEN            reduce using rule 238 (equalityOperator -> DIFERENTE .)
    LONG            reduce using rule 238 (equalityOperator -> DIFERENTE .)
    ARRAY           reduce using rule 238 (equalityOperator -> DIFERENTE .)
    LCCT            reduce using rule 238 (equalityOperator -> DIFERENTE .)
    IF              reduce using rule 238 (equalityOperator -> DIFERENTE .)
    RETURN          reduce using rule 238 (equalityOperator -> DIFERENTE .)
    RETURN_AT       reduce using rule 238 (equalityOperator -> DIFERENTE .)
    CONTINUE        reduce using rule 238 (equalityOperator -> DIFERENTE .)
    CONTINUE_AT     reduce using rule 238 (equalityOperator -> DIFERENTE .)
    BREAK           reduce using rule 238 (equalityOperator -> DIFERENTE .)
    BREAK_AT        reduce using rule 238 (equalityOperator -> DIFERENTE .)
    RCHAVE          reduce using rule 238 (equalityOperator -> DIFERENTE .)
    FUN             reduce using rule 238 (equalityOperator -> DIFERENTE .)
    SUSPEND         reduce using rule 238 (equalityOperator -> DIFERENTE .)
    COLONCOLON      reduce using rule 238 (equalityOperator -> DIFERENTE .)


state 202

    (239) equalityOperator -> IDENTIDADE .

    LITERAL_STRING  reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    INCREMENTO      reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    DECREMENTO      reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    MINUS           reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    PLUS            reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    NOT             reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    LPAREN          reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    ID              reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    CROSSINLINE     reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    IMPORT          reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    INIT            reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    NOINLINE        reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    OUT             reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    VARARG          reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    WHERE           reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    OBJECT          reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    CONST           reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    CONSTRUCTOR     reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    EOF             reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    FALSE           reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    FUNCTION        reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    NULL            reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    NULLABLE        reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    NUMBER          reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    OPERATOR        reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    SMARTCAST       reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    THIS            reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    TRUE            reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    VAL             reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    VAR             reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    WHEN            reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    LONG            reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    ARRAY           reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    LCCT            reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    IF              reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    RETURN          reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    RETURN_AT       reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    CONTINUE        reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    CONTINUE_AT     reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    BREAK           reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    BREAK_AT        reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    RCHAVE          reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    FUN             reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    SUSPEND         reduce using rule 239 (equalityOperator -> IDENTIDADE .)
    COLONCOLON      reduce using rule 239 (equalityOperator -> IDENTIDADE .)


state 203

    (240) equalityOperator -> IGUALDADE .

    LITERAL_STRING  reduce using rule 240 (equalityOperator -> IGUALDADE .)
    INCREMENTO      reduce using rule 240 (equalityOperator -> IGUALDADE .)
    DECREMENTO      reduce using rule 240 (equalityOperator -> IGUALDADE .)
    MINUS           reduce using rule 240 (equalityOperator -> IGUALDADE .)
    PLUS            reduce using rule 240 (equalityOperator -> IGUALDADE .)
    NOT             reduce using rule 240 (equalityOperator -> IGUALDADE .)
    LPAREN          reduce using rule 240 (equalityOperator -> IGUALDADE .)
    ID              reduce using rule 240 (equalityOperator -> IGUALDADE .)
    CROSSINLINE     reduce using rule 240 (equalityOperator -> IGUALDADE .)
    IMPORT          reduce using rule 240 (equalityOperator -> IGUALDADE .)
    INIT            reduce using rule 240 (equalityOperator -> IGUALDADE .)
    NOINLINE        reduce using rule 240 (equalityOperator -> IGUALDADE .)
    OUT             reduce using rule 240 (equalityOperator -> IGUALDADE .)
    VARARG          reduce using rule 240 (equalityOperator -> IGUALDADE .)
    WHERE           reduce using rule 240 (equalityOperator -> IGUALDADE .)
    OBJECT          reduce using rule 240 (equalityOperator -> IGUALDADE .)
    CONST           reduce using rule 240 (equalityOperator -> IGUALDADE .)
    CONSTRUCTOR     reduce using rule 240 (equalityOperator -> IGUALDADE .)
    EOF             reduce using rule 240 (equalityOperator -> IGUALDADE .)
    FALSE           reduce using rule 240 (equalityOperator -> IGUALDADE .)
    FUNCTION        reduce using rule 240 (equalityOperator -> IGUALDADE .)
    NULL            reduce using rule 240 (equalityOperator -> IGUALDADE .)
    NULLABLE        reduce using rule 240 (equalityOperator -> IGUALDADE .)
    NUMBER          reduce using rule 240 (equalityOperator -> IGUALDADE .)
    OPERATOR        reduce using rule 240 (equalityOperator -> IGUALDADE .)
    SMARTCAST       reduce using rule 240 (equalityOperator -> IGUALDADE .)
    THIS            reduce using rule 240 (equalityOperator -> IGUALDADE .)
    TRUE            reduce using rule 240 (equalityOperator -> IGUALDADE .)
    VAL             reduce using rule 240 (equalityOperator -> IGUALDADE .)
    VAR             reduce using rule 240 (equalityOperator -> IGUALDADE .)
    WHEN            reduce using rule 240 (equalityOperator -> IGUALDADE .)
    LONG            reduce using rule 240 (equalityOperator -> IGUALDADE .)
    ARRAY           reduce using rule 240 (equalityOperator -> IGUALDADE .)
    LCCT            reduce using rule 240 (equalityOperator -> IGUALDADE .)
    IF              reduce using rule 240 (equalityOperator -> IGUALDADE .)
    RETURN          reduce using rule 240 (equalityOperator -> IGUALDADE .)
    RETURN_AT       reduce using rule 240 (equalityOperator -> IGUALDADE .)
    CONTINUE        reduce using rule 240 (equalityOperator -> IGUALDADE .)
    CONTINUE_AT     reduce using rule 240 (equalityOperator -> IGUALDADE .)
    BREAK           reduce using rule 240 (equalityOperator -> IGUALDADE .)
    BREAK_AT        reduce using rule 240 (equalityOperator -> IGUALDADE .)
    RCHAVE          reduce using rule 240 (equalityOperator -> IGUALDADE .)
    FUN             reduce using rule 240 (equalityOperator -> IGUALDADE .)
    SUSPEND         reduce using rule 240 (equalityOperator -> IGUALDADE .)
    COLONCOLON      reduce using rule 240 (equalityOperator -> IGUALDADE .)


state 204

    (241) equalityOperator -> SEMIDENTIDADE .

    LITERAL_STRING  reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    INCREMENTO      reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    DECREMENTO      reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    MINUS           reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    PLUS            reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    NOT             reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    LPAREN          reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    ID              reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    CROSSINLINE     reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    IMPORT          reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    INIT            reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    NOINLINE        reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    OUT             reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    VARARG          reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    WHERE           reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    OBJECT          reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    CONST           reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    CONSTRUCTOR     reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    EOF             reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    FALSE           reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    FUNCTION        reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    NULL            reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    NULLABLE        reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    NUMBER          reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    OPERATOR        reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    SMARTCAST       reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    THIS            reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    TRUE            reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    VAL             reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    VAR             reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    WHEN            reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    LONG            reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    ARRAY           reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    LCCT            reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    IF              reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    RETURN          reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    RETURN_AT       reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE        reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE_AT     reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    BREAK           reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    BREAK_AT        reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    RCHAVE          reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    FUN             reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    SUSPEND         reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)
    COLONCOLON      reduce using rule 241 (equalityOperator -> SEMIDENTIDADE .)


state 205

    (228) callableReference -> optionalReceiverType COLONCOLON . simpleIdentifierOrClass
    (231) simpleIdentifierOrClass -> . simpleIdentifier
    (232) simpleIdentifierOrClass -> . CLASS
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    CLASS           shift and go to state 298
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    simpleIdentifierOrClass        shift and go to state 296
    simpleIdentifier               shift and go to state 297

state 206

    (181) collectionLiteral -> LCCT collectionLiteralRecursive . RCCT

    RCCT            shift and go to state 299


state 207

    (182) collectionLiteral -> LCCT RCCT .

    INCREMENTO      reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    DECREMENTO      reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MENOR           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    LCCT            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    COLONCOLON      reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    PONTO           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    LPAREN          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    RCHAVE          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    AS              reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MAISIGUAL       reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MENOSIGUAL      reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MODIGUAL        reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MULT            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    DIVIDE          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MOD             reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    PLUS            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MINUS           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    ID              reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    IMPORT          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    INIT            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    NOINLINE        reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    OUT             reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    VARARG          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    WHERE           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    OBJECT          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    CONST           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    CONSTRUCTOR     reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    EOF             reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    FALSE           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    FUNCTION        reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    NULL            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    NULLABLE        reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    NUMBER          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    OPERATOR        reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    SMARTCAST       reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    THIS            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    TRUE            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    VAL             reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    VAR             reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    WHEN            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    LONG            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    ARRAY           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    ELVIS           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    IN              reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    NOT_IN          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    IS              reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    NOT_IS          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MAIOR           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    DIFERENTE       reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    IGUALDADE       reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    AND             reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    OR              reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    FUN             reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    FOR             reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    WHILE           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    DO              reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    IF              reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    RETURN          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    RETURN_AT       reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    CONTINUE        reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    BREAK           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    BREAK_AT        reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    NOT             reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    SUSPEND         reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    COMMA           reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    RPAREN          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    LCHAVE          reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    RCCT            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    PV              reduce using rule 182 (collectionLiteral -> LCCT RCCT .)
    ELSE            reduce using rule 182 (collectionLiteral -> LCCT RCCT .)


state 208

    (183) collectionLiteralRecursive -> expression .
    (184) collectionLiteralRecursive -> expression . COMMA collectionLiteralRecursive
    (223) jumpExpression -> expression .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RCCT resolved using rule 183 (collectionLiteralRecursive -> expression .)
    RCCT            reduce using rule 183 (collectionLiteralRecursive -> expression .)
    COMMA           shift and go to state 300
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]


state 209

    (213) ifExpression -> IF LPAREN . expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> IF LPAREN . expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 301
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 210

    (221) jumpExpression -> RETURN expression .
    (223) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for FOR resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DO resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for VAR resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for VAL resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ID resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for INIT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OUT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONST resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for EOF resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NULL resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for THIS resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LONG resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IF resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for AS resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MULT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MOD resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IN resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IS resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for AND resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for OR resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for PV resolved using rule 221 (jumpExpression -> RETURN expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 221 (jumpExpression -> RETURN expression .)
    INCREMENTO      reduce using rule 221 (jumpExpression -> RETURN expression .)
    DECREMENTO      reduce using rule 221 (jumpExpression -> RETURN expression .)
    MENOR           reduce using rule 221 (jumpExpression -> RETURN expression .)
    LCCT            reduce using rule 221 (jumpExpression -> RETURN expression .)
    COLONCOLON      reduce using rule 221 (jumpExpression -> RETURN expression .)
    PONTO           reduce using rule 221 (jumpExpression -> RETURN expression .)
    LPAREN          reduce using rule 221 (jumpExpression -> RETURN expression .)
    RCHAVE          reduce using rule 221 (jumpExpression -> RETURN expression .)
    AS              reduce using rule 221 (jumpExpression -> RETURN expression .)
    MAISIGUAL       reduce using rule 221 (jumpExpression -> RETURN expression .)
    MENOSIGUAL      reduce using rule 221 (jumpExpression -> RETURN expression .)
    MULTIGUAL       reduce using rule 221 (jumpExpression -> RETURN expression .)
    DIVIGUAL        reduce using rule 221 (jumpExpression -> RETURN expression .)
    MODIGUAL        reduce using rule 221 (jumpExpression -> RETURN expression .)
    MULT            reduce using rule 221 (jumpExpression -> RETURN expression .)
    DIVIDE          reduce using rule 221 (jumpExpression -> RETURN expression .)
    MOD             reduce using rule 221 (jumpExpression -> RETURN expression .)
    PLUS            reduce using rule 221 (jumpExpression -> RETURN expression .)
    MINUS           reduce using rule 221 (jumpExpression -> RETURN expression .)
    PONTOPONTO      reduce using rule 221 (jumpExpression -> RETURN expression .)
    ID              reduce using rule 221 (jumpExpression -> RETURN expression .)
    CROSSINLINE     reduce using rule 221 (jumpExpression -> RETURN expression .)
    IMPORT          reduce using rule 221 (jumpExpression -> RETURN expression .)
    INIT            reduce using rule 221 (jumpExpression -> RETURN expression .)
    NOINLINE        reduce using rule 221 (jumpExpression -> RETURN expression .)
    OUT             reduce using rule 221 (jumpExpression -> RETURN expression .)
    VARARG          reduce using rule 221 (jumpExpression -> RETURN expression .)
    WHERE           reduce using rule 221 (jumpExpression -> RETURN expression .)
    OBJECT          reduce using rule 221 (jumpExpression -> RETURN expression .)
    CONST           reduce using rule 221 (jumpExpression -> RETURN expression .)
    CONSTRUCTOR     reduce using rule 221 (jumpExpression -> RETURN expression .)
    EOF             reduce using rule 221 (jumpExpression -> RETURN expression .)
    FALSE           reduce using rule 221 (jumpExpression -> RETURN expression .)
    FUNCTION        reduce using rule 221 (jumpExpression -> RETURN expression .)
    NULL            reduce using rule 221 (jumpExpression -> RETURN expression .)
    NULLABLE        reduce using rule 221 (jumpExpression -> RETURN expression .)
    NUMBER          reduce using rule 221 (jumpExpression -> RETURN expression .)
    OPERATOR        reduce using rule 221 (jumpExpression -> RETURN expression .)
    SMARTCAST       reduce using rule 221 (jumpExpression -> RETURN expression .)
    THIS            reduce using rule 221 (jumpExpression -> RETURN expression .)
    TRUE            reduce using rule 221 (jumpExpression -> RETURN expression .)
    VAL             reduce using rule 221 (jumpExpression -> RETURN expression .)
    VAR             reduce using rule 221 (jumpExpression -> RETURN expression .)
    WHEN            reduce using rule 221 (jumpExpression -> RETURN expression .)
    LONG            reduce using rule 221 (jumpExpression -> RETURN expression .)
    ARRAY           reduce using rule 221 (jumpExpression -> RETURN expression .)
    ELVIS           reduce using rule 221 (jumpExpression -> RETURN expression .)
    IN              reduce using rule 221 (jumpExpression -> RETURN expression .)
    NOT_IN          reduce using rule 221 (jumpExpression -> RETURN expression .)
    IS              reduce using rule 221 (jumpExpression -> RETURN expression .)
    NOT_IS          reduce using rule 221 (jumpExpression -> RETURN expression .)
    MAIOR           reduce using rule 221 (jumpExpression -> RETURN expression .)
    MENORIGUAL      reduce using rule 221 (jumpExpression -> RETURN expression .)
    MAIORIGUAL      reduce using rule 221 (jumpExpression -> RETURN expression .)
    DIFERENTE       reduce using rule 221 (jumpExpression -> RETURN expression .)
    IDENTIDADE      reduce using rule 221 (jumpExpression -> RETURN expression .)
    IGUALDADE       reduce using rule 221 (jumpExpression -> RETURN expression .)
    SEMIDENTIDADE   reduce using rule 221 (jumpExpression -> RETURN expression .)
    AND             reduce using rule 221 (jumpExpression -> RETURN expression .)
    OR              reduce using rule 221 (jumpExpression -> RETURN expression .)
    FUN             reduce using rule 221 (jumpExpression -> RETURN expression .)
    FOR             reduce using rule 221 (jumpExpression -> RETURN expression .)
    WHILE           reduce using rule 221 (jumpExpression -> RETURN expression .)
    DO              reduce using rule 221 (jumpExpression -> RETURN expression .)
    LITERAL_STRING  reduce using rule 221 (jumpExpression -> RETURN expression .)
    IF              reduce using rule 221 (jumpExpression -> RETURN expression .)
    RETURN          reduce using rule 221 (jumpExpression -> RETURN expression .)
    RETURN_AT       reduce using rule 221 (jumpExpression -> RETURN expression .)
    CONTINUE        reduce using rule 221 (jumpExpression -> RETURN expression .)
    CONTINUE_AT     reduce using rule 221 (jumpExpression -> RETURN expression .)
    BREAK           reduce using rule 221 (jumpExpression -> RETURN expression .)
    BREAK_AT        reduce using rule 221 (jumpExpression -> RETURN expression .)
    NOT             reduce using rule 221 (jumpExpression -> RETURN expression .)
    SUSPEND         reduce using rule 221 (jumpExpression -> RETURN expression .)
    COMMA           reduce using rule 221 (jumpExpression -> RETURN expression .)
    RPAREN          reduce using rule 221 (jumpExpression -> RETURN expression .)
    LCHAVE          reduce using rule 221 (jumpExpression -> RETURN expression .)
    RCCT            reduce using rule 221 (jumpExpression -> RETURN expression .)
    PV              reduce using rule 221 (jumpExpression -> RETURN expression .)
    ELSE            reduce using rule 221 (jumpExpression -> RETURN expression .)

  ! FUN             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 223 (jumpExpression -> expression .) ]


state 211

    (222) jumpExpression -> RETURN_AT expression .
    (223) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for FOR resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DO resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for VAR resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for VAL resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ID resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for INIT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OUT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONST resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for EOF resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NULL resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for THIS resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LONG resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IF resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for AS resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MULT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MOD resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IN resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IS resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for AND resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for OR resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for PV resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 222 (jumpExpression -> RETURN_AT expression .)
    INCREMENTO      reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    DECREMENTO      reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MENOR           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    LCCT            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    COLONCOLON      reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    PONTO           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    LPAREN          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    RCHAVE          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    AS              reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MAISIGUAL       reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MENOSIGUAL      reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MULTIGUAL       reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    DIVIGUAL        reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MODIGUAL        reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MULT            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    DIVIDE          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MOD             reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    PLUS            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MINUS           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    PONTOPONTO      reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    ID              reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    CROSSINLINE     reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    IMPORT          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    INIT            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    NOINLINE        reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    OUT             reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    VARARG          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    WHERE           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    OBJECT          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    CONST           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    CONSTRUCTOR     reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    EOF             reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    FALSE           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    FUNCTION        reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    NULL            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    NULLABLE        reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    NUMBER          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    OPERATOR        reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    SMARTCAST       reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    THIS            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    TRUE            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    VAL             reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    VAR             reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    WHEN            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    LONG            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    ARRAY           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    ELVIS           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    IN              reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    NOT_IN          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    IS              reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    NOT_IS          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MAIOR           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MENORIGUAL      reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    MAIORIGUAL      reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    DIFERENTE       reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    IDENTIDADE      reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    IGUALDADE       reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    SEMIDENTIDADE   reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    AND             reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    OR              reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    FUN             reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    FOR             reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    WHILE           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    DO              reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    LITERAL_STRING  reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    IF              reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    RETURN          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    RETURN_AT       reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    CONTINUE        reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    CONTINUE_AT     reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    BREAK           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    BREAK_AT        reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    NOT             reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    SUSPEND         reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    COMMA           reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    RPAREN          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    LCHAVE          reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    RCCT            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    PV              reduce using rule 222 (jumpExpression -> RETURN_AT expression .)
    ELSE            reduce using rule 222 (jumpExpression -> RETURN_AT expression .)

  ! FUN             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 223 (jumpExpression -> expression .) ]


state 212

    (101) comparison -> infixOperation comparisonOperator . infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (47) typeModifier -> . SUSPEND
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    infixOperation                 shift and go to state 302
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    disjunction                    shift and go to state 70
    typeModifier                   shift and go to state 116
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94

state 213

    (242) comparisonOperator -> MENOR .

    LITERAL_STRING  reduce using rule 242 (comparisonOperator -> MENOR .)
    INCREMENTO      reduce using rule 242 (comparisonOperator -> MENOR .)
    DECREMENTO      reduce using rule 242 (comparisonOperator -> MENOR .)
    MINUS           reduce using rule 242 (comparisonOperator -> MENOR .)
    PLUS            reduce using rule 242 (comparisonOperator -> MENOR .)
    NOT             reduce using rule 242 (comparisonOperator -> MENOR .)
    LPAREN          reduce using rule 242 (comparisonOperator -> MENOR .)
    ID              reduce using rule 242 (comparisonOperator -> MENOR .)
    CROSSINLINE     reduce using rule 242 (comparisonOperator -> MENOR .)
    IMPORT          reduce using rule 242 (comparisonOperator -> MENOR .)
    INIT            reduce using rule 242 (comparisonOperator -> MENOR .)
    NOINLINE        reduce using rule 242 (comparisonOperator -> MENOR .)
    OUT             reduce using rule 242 (comparisonOperator -> MENOR .)
    VARARG          reduce using rule 242 (comparisonOperator -> MENOR .)
    WHERE           reduce using rule 242 (comparisonOperator -> MENOR .)
    OBJECT          reduce using rule 242 (comparisonOperator -> MENOR .)
    CONST           reduce using rule 242 (comparisonOperator -> MENOR .)
    CONSTRUCTOR     reduce using rule 242 (comparisonOperator -> MENOR .)
    EOF             reduce using rule 242 (comparisonOperator -> MENOR .)
    FALSE           reduce using rule 242 (comparisonOperator -> MENOR .)
    FUNCTION        reduce using rule 242 (comparisonOperator -> MENOR .)
    NULL            reduce using rule 242 (comparisonOperator -> MENOR .)
    NULLABLE        reduce using rule 242 (comparisonOperator -> MENOR .)
    NUMBER          reduce using rule 242 (comparisonOperator -> MENOR .)
    OPERATOR        reduce using rule 242 (comparisonOperator -> MENOR .)
    SMARTCAST       reduce using rule 242 (comparisonOperator -> MENOR .)
    THIS            reduce using rule 242 (comparisonOperator -> MENOR .)
    TRUE            reduce using rule 242 (comparisonOperator -> MENOR .)
    VAL             reduce using rule 242 (comparisonOperator -> MENOR .)
    VAR             reduce using rule 242 (comparisonOperator -> MENOR .)
    WHEN            reduce using rule 242 (comparisonOperator -> MENOR .)
    LONG            reduce using rule 242 (comparisonOperator -> MENOR .)
    ARRAY           reduce using rule 242 (comparisonOperator -> MENOR .)
    LCCT            reduce using rule 242 (comparisonOperator -> MENOR .)
    IF              reduce using rule 242 (comparisonOperator -> MENOR .)
    RETURN          reduce using rule 242 (comparisonOperator -> MENOR .)
    RETURN_AT       reduce using rule 242 (comparisonOperator -> MENOR .)
    CONTINUE        reduce using rule 242 (comparisonOperator -> MENOR .)
    CONTINUE_AT     reduce using rule 242 (comparisonOperator -> MENOR .)
    BREAK           reduce using rule 242 (comparisonOperator -> MENOR .)
    BREAK_AT        reduce using rule 242 (comparisonOperator -> MENOR .)
    RCHAVE          reduce using rule 242 (comparisonOperator -> MENOR .)
    FUN             reduce using rule 242 (comparisonOperator -> MENOR .)
    SUSPEND         reduce using rule 242 (comparisonOperator -> MENOR .)
    COLONCOLON      reduce using rule 242 (comparisonOperator -> MENOR .)


state 214

    (243) comparisonOperator -> MAIOR .

    LITERAL_STRING  reduce using rule 243 (comparisonOperator -> MAIOR .)
    INCREMENTO      reduce using rule 243 (comparisonOperator -> MAIOR .)
    DECREMENTO      reduce using rule 243 (comparisonOperator -> MAIOR .)
    MINUS           reduce using rule 243 (comparisonOperator -> MAIOR .)
    PLUS            reduce using rule 243 (comparisonOperator -> MAIOR .)
    NOT             reduce using rule 243 (comparisonOperator -> MAIOR .)
    LPAREN          reduce using rule 243 (comparisonOperator -> MAIOR .)
    ID              reduce using rule 243 (comparisonOperator -> MAIOR .)
    CROSSINLINE     reduce using rule 243 (comparisonOperator -> MAIOR .)
    IMPORT          reduce using rule 243 (comparisonOperator -> MAIOR .)
    INIT            reduce using rule 243 (comparisonOperator -> MAIOR .)
    NOINLINE        reduce using rule 243 (comparisonOperator -> MAIOR .)
    OUT             reduce using rule 243 (comparisonOperator -> MAIOR .)
    VARARG          reduce using rule 243 (comparisonOperator -> MAIOR .)
    WHERE           reduce using rule 243 (comparisonOperator -> MAIOR .)
    OBJECT          reduce using rule 243 (comparisonOperator -> MAIOR .)
    CONST           reduce using rule 243 (comparisonOperator -> MAIOR .)
    CONSTRUCTOR     reduce using rule 243 (comparisonOperator -> MAIOR .)
    EOF             reduce using rule 243 (comparisonOperator -> MAIOR .)
    FALSE           reduce using rule 243 (comparisonOperator -> MAIOR .)
    FUNCTION        reduce using rule 243 (comparisonOperator -> MAIOR .)
    NULL            reduce using rule 243 (comparisonOperator -> MAIOR .)
    NULLABLE        reduce using rule 243 (comparisonOperator -> MAIOR .)
    NUMBER          reduce using rule 243 (comparisonOperator -> MAIOR .)
    OPERATOR        reduce using rule 243 (comparisonOperator -> MAIOR .)
    SMARTCAST       reduce using rule 243 (comparisonOperator -> MAIOR .)
    THIS            reduce using rule 243 (comparisonOperator -> MAIOR .)
    TRUE            reduce using rule 243 (comparisonOperator -> MAIOR .)
    VAL             reduce using rule 243 (comparisonOperator -> MAIOR .)
    VAR             reduce using rule 243 (comparisonOperator -> MAIOR .)
    WHEN            reduce using rule 243 (comparisonOperator -> MAIOR .)
    LONG            reduce using rule 243 (comparisonOperator -> MAIOR .)
    ARRAY           reduce using rule 243 (comparisonOperator -> MAIOR .)
    LCCT            reduce using rule 243 (comparisonOperator -> MAIOR .)
    IF              reduce using rule 243 (comparisonOperator -> MAIOR .)
    RETURN          reduce using rule 243 (comparisonOperator -> MAIOR .)
    RETURN_AT       reduce using rule 243 (comparisonOperator -> MAIOR .)
    CONTINUE        reduce using rule 243 (comparisonOperator -> MAIOR .)
    CONTINUE_AT     reduce using rule 243 (comparisonOperator -> MAIOR .)
    BREAK           reduce using rule 243 (comparisonOperator -> MAIOR .)
    BREAK_AT        reduce using rule 243 (comparisonOperator -> MAIOR .)
    RCHAVE          reduce using rule 243 (comparisonOperator -> MAIOR .)
    FUN             reduce using rule 243 (comparisonOperator -> MAIOR .)
    SUSPEND         reduce using rule 243 (comparisonOperator -> MAIOR .)
    COLONCOLON      reduce using rule 243 (comparisonOperator -> MAIOR .)


state 215

    (244) comparisonOperator -> MENORIGUAL .

    LITERAL_STRING  reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    INCREMENTO      reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    DECREMENTO      reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    MINUS           reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    PLUS            reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    NOT             reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    LPAREN          reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    ID              reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    CROSSINLINE     reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    IMPORT          reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    INIT            reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    NOINLINE        reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    OUT             reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    VARARG          reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    WHERE           reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    OBJECT          reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    CONST           reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    CONSTRUCTOR     reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    EOF             reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    FALSE           reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    FUNCTION        reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    NULL            reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    NULLABLE        reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    NUMBER          reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    OPERATOR        reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    SMARTCAST       reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    THIS            reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    TRUE            reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    VAL             reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    VAR             reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    WHEN            reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    LONG            reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    ARRAY           reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    LCCT            reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    IF              reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    RETURN          reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    RETURN_AT       reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    CONTINUE        reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    CONTINUE_AT     reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    BREAK           reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    BREAK_AT        reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    RCHAVE          reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    FUN             reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    SUSPEND         reduce using rule 244 (comparisonOperator -> MENORIGUAL .)
    COLONCOLON      reduce using rule 244 (comparisonOperator -> MENORIGUAL .)


state 216

    (245) comparisonOperator -> MAIORIGUAL .

    LITERAL_STRING  reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    INCREMENTO      reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    DECREMENTO      reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    MINUS           reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    PLUS            reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    NOT             reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    LPAREN          reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    ID              reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    CROSSINLINE     reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    IMPORT          reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    INIT            reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    NOINLINE        reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    OUT             reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    VARARG          reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    WHERE           reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    OBJECT          reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    CONST           reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    CONSTRUCTOR     reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    EOF             reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    FALSE           reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    FUNCTION        reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    NULL            reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    NULLABLE        reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    NUMBER          reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    OPERATOR        reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    SMARTCAST       reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    THIS            reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    TRUE            reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    VAL             reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    VAR             reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    WHEN            reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    LONG            reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    ARRAY           reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    LCCT            reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    IF              reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    RETURN          reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    RETURN_AT       reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE        reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE_AT     reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    BREAK           reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    BREAK_AT        reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    RCHAVE          reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    FUN             reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    SUSPEND         reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)
    COLONCOLON      reduce using rule 245 (comparisonOperator -> MAIORIGUAL .)


state 217

    (102) infixOperation -> elvisExpression infixOperationRecursive .

    INCREMENTO      reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    DECREMENTO      reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENOR           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    LCCT            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    COLONCOLON      reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    PONTO           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    LPAREN          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    RCHAVE          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    AS              reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAISIGUAL       reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENOSIGUAL      reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MULTIGUAL       reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIVIGUAL        reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MODIGUAL        reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MULT            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIVIDE          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MOD             reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    PLUS            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MINUS           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    PONTOPONTO      reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    ID              reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    CROSSINLINE     reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    IMPORT          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    INIT            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOINLINE        reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    OUT             reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    VARARG          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    WHERE           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    OBJECT          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONST           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONSTRUCTOR     reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    EOF             reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    FALSE           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    FUNCTION        reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    NULL            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    NULLABLE        reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    NUMBER          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    OPERATOR        reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    SMARTCAST       reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    THIS            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    TRUE            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    VAL             reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    VAR             reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    WHEN            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    LONG            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    ARRAY           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    ELVIS           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    IN              reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT_IN          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    IS              reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT_IS          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAIOR           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENORIGUAL      reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAIORIGUAL      reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIFERENTE       reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    IDENTIDADE      reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    IGUALDADE       reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    SEMIDENTIDADE   reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    AND             reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    OR              reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    FUN             reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    FOR             reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    WHILE           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    DO              reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    LITERAL_STRING  reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    IF              reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    RETURN          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    RETURN_AT       reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONTINUE        reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONTINUE_AT     reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    BREAK           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    BREAK_AT        reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT             reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    SUSPEND         reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    COMMA           reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    RPAREN          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    LCHAVE          reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    RCCT            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    PV              reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)
    ELSE            reduce using rule 102 (infixOperation -> elvisExpression infixOperationRecursive .)


state 218

    (104) infixOperationRecursive -> inOrIs . elvisOrType
    (105) infixOperationRecursive -> inOrIs . elvisOrType infixOperationRecursive
    (108) elvisOrType -> . elvisExpression
    (109) elvisOrType -> . type
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (39) type -> . optionalTypeModifiers optype
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (47) typeModifier -> . SUSPEND
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression

  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    SUSPEND         shift and go to state 48
    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138

  ! LPAREN          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! ID              [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CROSSINLINE     [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! IMPORT          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! INIT            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VARARG          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! WHERE           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OBJECT          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CONST           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! EOF             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! FALSE           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! FUNCTION        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NULL            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NULLABLE        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NUMBER          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OPERATOR        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! SMARTCAST       [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! THIS            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! TRUE            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VAL             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VAR             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! WHEN            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! LONG            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! ARRAY           [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    elvisOrType                    shift and go to state 303
    elvisExpression                shift and go to state 304
    type                           shift and go to state 305
    infixFunctionCall              shift and go to state 117
    optionalTypeModifiers          shift and go to state 45
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    typeModifiers                  shift and go to state 46
    additiveExpression             shift and go to state 119
    typeModifier                   shift and go to state 306
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108

state 219

    (106) inOrIs -> inOperator .

    SUSPEND         reduce using rule 106 (inOrIs -> inOperator .)
    LITERAL_STRING  reduce using rule 106 (inOrIs -> inOperator .)
    INCREMENTO      reduce using rule 106 (inOrIs -> inOperator .)
    DECREMENTO      reduce using rule 106 (inOrIs -> inOperator .)
    MINUS           reduce using rule 106 (inOrIs -> inOperator .)
    PLUS            reduce using rule 106 (inOrIs -> inOperator .)
    NOT             reduce using rule 106 (inOrIs -> inOperator .)
    LPAREN          reduce using rule 106 (inOrIs -> inOperator .)
    ID              reduce using rule 106 (inOrIs -> inOperator .)
    CROSSINLINE     reduce using rule 106 (inOrIs -> inOperator .)
    IMPORT          reduce using rule 106 (inOrIs -> inOperator .)
    INIT            reduce using rule 106 (inOrIs -> inOperator .)
    NOINLINE        reduce using rule 106 (inOrIs -> inOperator .)
    OUT             reduce using rule 106 (inOrIs -> inOperator .)
    VARARG          reduce using rule 106 (inOrIs -> inOperator .)
    WHERE           reduce using rule 106 (inOrIs -> inOperator .)
    OBJECT          reduce using rule 106 (inOrIs -> inOperator .)
    CONST           reduce using rule 106 (inOrIs -> inOperator .)
    CONSTRUCTOR     reduce using rule 106 (inOrIs -> inOperator .)
    EOF             reduce using rule 106 (inOrIs -> inOperator .)
    FALSE           reduce using rule 106 (inOrIs -> inOperator .)
    FUNCTION        reduce using rule 106 (inOrIs -> inOperator .)
    NULL            reduce using rule 106 (inOrIs -> inOperator .)
    NULLABLE        reduce using rule 106 (inOrIs -> inOperator .)
    NUMBER          reduce using rule 106 (inOrIs -> inOperator .)
    OPERATOR        reduce using rule 106 (inOrIs -> inOperator .)
    SMARTCAST       reduce using rule 106 (inOrIs -> inOperator .)
    THIS            reduce using rule 106 (inOrIs -> inOperator .)
    TRUE            reduce using rule 106 (inOrIs -> inOperator .)
    VAL             reduce using rule 106 (inOrIs -> inOperator .)
    VAR             reduce using rule 106 (inOrIs -> inOperator .)
    WHEN            reduce using rule 106 (inOrIs -> inOperator .)
    LONG            reduce using rule 106 (inOrIs -> inOperator .)
    ARRAY           reduce using rule 106 (inOrIs -> inOperator .)
    LCCT            reduce using rule 106 (inOrIs -> inOperator .)
    IF              reduce using rule 106 (inOrIs -> inOperator .)
    RETURN          reduce using rule 106 (inOrIs -> inOperator .)
    RETURN_AT       reduce using rule 106 (inOrIs -> inOperator .)
    CONTINUE        reduce using rule 106 (inOrIs -> inOperator .)
    CONTINUE_AT     reduce using rule 106 (inOrIs -> inOperator .)
    BREAK           reduce using rule 106 (inOrIs -> inOperator .)
    BREAK_AT        reduce using rule 106 (inOrIs -> inOperator .)
    RCHAVE          reduce using rule 106 (inOrIs -> inOperator .)
    FUN             reduce using rule 106 (inOrIs -> inOperator .)
    COLONCOLON      reduce using rule 106 (inOrIs -> inOperator .)


state 220

    (107) inOrIs -> isOperator .

    SUSPEND         reduce using rule 107 (inOrIs -> isOperator .)
    LITERAL_STRING  reduce using rule 107 (inOrIs -> isOperator .)
    INCREMENTO      reduce using rule 107 (inOrIs -> isOperator .)
    DECREMENTO      reduce using rule 107 (inOrIs -> isOperator .)
    MINUS           reduce using rule 107 (inOrIs -> isOperator .)
    PLUS            reduce using rule 107 (inOrIs -> isOperator .)
    NOT             reduce using rule 107 (inOrIs -> isOperator .)
    LPAREN          reduce using rule 107 (inOrIs -> isOperator .)
    ID              reduce using rule 107 (inOrIs -> isOperator .)
    CROSSINLINE     reduce using rule 107 (inOrIs -> isOperator .)
    IMPORT          reduce using rule 107 (inOrIs -> isOperator .)
    INIT            reduce using rule 107 (inOrIs -> isOperator .)
    NOINLINE        reduce using rule 107 (inOrIs -> isOperator .)
    OUT             reduce using rule 107 (inOrIs -> isOperator .)
    VARARG          reduce using rule 107 (inOrIs -> isOperator .)
    WHERE           reduce using rule 107 (inOrIs -> isOperator .)
    OBJECT          reduce using rule 107 (inOrIs -> isOperator .)
    CONST           reduce using rule 107 (inOrIs -> isOperator .)
    CONSTRUCTOR     reduce using rule 107 (inOrIs -> isOperator .)
    EOF             reduce using rule 107 (inOrIs -> isOperator .)
    FALSE           reduce using rule 107 (inOrIs -> isOperator .)
    FUNCTION        reduce using rule 107 (inOrIs -> isOperator .)
    NULL            reduce using rule 107 (inOrIs -> isOperator .)
    NULLABLE        reduce using rule 107 (inOrIs -> isOperator .)
    NUMBER          reduce using rule 107 (inOrIs -> isOperator .)
    OPERATOR        reduce using rule 107 (inOrIs -> isOperator .)
    SMARTCAST       reduce using rule 107 (inOrIs -> isOperator .)
    THIS            reduce using rule 107 (inOrIs -> isOperator .)
    TRUE            reduce using rule 107 (inOrIs -> isOperator .)
    VAL             reduce using rule 107 (inOrIs -> isOperator .)
    VAR             reduce using rule 107 (inOrIs -> isOperator .)
    WHEN            reduce using rule 107 (inOrIs -> isOperator .)
    LONG            reduce using rule 107 (inOrIs -> isOperator .)
    ARRAY           reduce using rule 107 (inOrIs -> isOperator .)
    LCCT            reduce using rule 107 (inOrIs -> isOperator .)
    IF              reduce using rule 107 (inOrIs -> isOperator .)
    RETURN          reduce using rule 107 (inOrIs -> isOperator .)
    RETURN_AT       reduce using rule 107 (inOrIs -> isOperator .)
    CONTINUE        reduce using rule 107 (inOrIs -> isOperator .)
    CONTINUE_AT     reduce using rule 107 (inOrIs -> isOperator .)
    BREAK           reduce using rule 107 (inOrIs -> isOperator .)
    BREAK_AT        reduce using rule 107 (inOrIs -> isOperator .)
    RCHAVE          reduce using rule 107 (inOrIs -> isOperator .)
    FUN             reduce using rule 107 (inOrIs -> isOperator .)
    COLONCOLON      reduce using rule 107 (inOrIs -> isOperator .)


state 221

    (246) inOperator -> IN .

    SUSPEND         reduce using rule 246 (inOperator -> IN .)
    LITERAL_STRING  reduce using rule 246 (inOperator -> IN .)
    INCREMENTO      reduce using rule 246 (inOperator -> IN .)
    DECREMENTO      reduce using rule 246 (inOperator -> IN .)
    MINUS           reduce using rule 246 (inOperator -> IN .)
    PLUS            reduce using rule 246 (inOperator -> IN .)
    NOT             reduce using rule 246 (inOperator -> IN .)
    LPAREN          reduce using rule 246 (inOperator -> IN .)
    ID              reduce using rule 246 (inOperator -> IN .)
    CROSSINLINE     reduce using rule 246 (inOperator -> IN .)
    IMPORT          reduce using rule 246 (inOperator -> IN .)
    INIT            reduce using rule 246 (inOperator -> IN .)
    NOINLINE        reduce using rule 246 (inOperator -> IN .)
    OUT             reduce using rule 246 (inOperator -> IN .)
    VARARG          reduce using rule 246 (inOperator -> IN .)
    WHERE           reduce using rule 246 (inOperator -> IN .)
    OBJECT          reduce using rule 246 (inOperator -> IN .)
    CONST           reduce using rule 246 (inOperator -> IN .)
    CONSTRUCTOR     reduce using rule 246 (inOperator -> IN .)
    EOF             reduce using rule 246 (inOperator -> IN .)
    FALSE           reduce using rule 246 (inOperator -> IN .)
    FUNCTION        reduce using rule 246 (inOperator -> IN .)
    NULL            reduce using rule 246 (inOperator -> IN .)
    NULLABLE        reduce using rule 246 (inOperator -> IN .)
    NUMBER          reduce using rule 246 (inOperator -> IN .)
    OPERATOR        reduce using rule 246 (inOperator -> IN .)
    SMARTCAST       reduce using rule 246 (inOperator -> IN .)
    THIS            reduce using rule 246 (inOperator -> IN .)
    TRUE            reduce using rule 246 (inOperator -> IN .)
    VAL             reduce using rule 246 (inOperator -> IN .)
    VAR             reduce using rule 246 (inOperator -> IN .)
    WHEN            reduce using rule 246 (inOperator -> IN .)
    LONG            reduce using rule 246 (inOperator -> IN .)
    ARRAY           reduce using rule 246 (inOperator -> IN .)
    LCCT            reduce using rule 246 (inOperator -> IN .)
    IF              reduce using rule 246 (inOperator -> IN .)
    RETURN          reduce using rule 246 (inOperator -> IN .)
    RETURN_AT       reduce using rule 246 (inOperator -> IN .)
    CONTINUE        reduce using rule 246 (inOperator -> IN .)
    CONTINUE_AT     reduce using rule 246 (inOperator -> IN .)
    BREAK           reduce using rule 246 (inOperator -> IN .)
    BREAK_AT        reduce using rule 246 (inOperator -> IN .)
    RCHAVE          reduce using rule 246 (inOperator -> IN .)
    FUN             reduce using rule 246 (inOperator -> IN .)
    COLONCOLON      reduce using rule 246 (inOperator -> IN .)


state 222

    (247) inOperator -> NOT_IN .

    SUSPEND         reduce using rule 247 (inOperator -> NOT_IN .)
    LITERAL_STRING  reduce using rule 247 (inOperator -> NOT_IN .)
    INCREMENTO      reduce using rule 247 (inOperator -> NOT_IN .)
    DECREMENTO      reduce using rule 247 (inOperator -> NOT_IN .)
    MINUS           reduce using rule 247 (inOperator -> NOT_IN .)
    PLUS            reduce using rule 247 (inOperator -> NOT_IN .)
    NOT             reduce using rule 247 (inOperator -> NOT_IN .)
    LPAREN          reduce using rule 247 (inOperator -> NOT_IN .)
    ID              reduce using rule 247 (inOperator -> NOT_IN .)
    CROSSINLINE     reduce using rule 247 (inOperator -> NOT_IN .)
    IMPORT          reduce using rule 247 (inOperator -> NOT_IN .)
    INIT            reduce using rule 247 (inOperator -> NOT_IN .)
    NOINLINE        reduce using rule 247 (inOperator -> NOT_IN .)
    OUT             reduce using rule 247 (inOperator -> NOT_IN .)
    VARARG          reduce using rule 247 (inOperator -> NOT_IN .)
    WHERE           reduce using rule 247 (inOperator -> NOT_IN .)
    OBJECT          reduce using rule 247 (inOperator -> NOT_IN .)
    CONST           reduce using rule 247 (inOperator -> NOT_IN .)
    CONSTRUCTOR     reduce using rule 247 (inOperator -> NOT_IN .)
    EOF             reduce using rule 247 (inOperator -> NOT_IN .)
    FALSE           reduce using rule 247 (inOperator -> NOT_IN .)
    FUNCTION        reduce using rule 247 (inOperator -> NOT_IN .)
    NULL            reduce using rule 247 (inOperator -> NOT_IN .)
    NULLABLE        reduce using rule 247 (inOperator -> NOT_IN .)
    NUMBER          reduce using rule 247 (inOperator -> NOT_IN .)
    OPERATOR        reduce using rule 247 (inOperator -> NOT_IN .)
    SMARTCAST       reduce using rule 247 (inOperator -> NOT_IN .)
    THIS            reduce using rule 247 (inOperator -> NOT_IN .)
    TRUE            reduce using rule 247 (inOperator -> NOT_IN .)
    VAL             reduce using rule 247 (inOperator -> NOT_IN .)
    VAR             reduce using rule 247 (inOperator -> NOT_IN .)
    WHEN            reduce using rule 247 (inOperator -> NOT_IN .)
    LONG            reduce using rule 247 (inOperator -> NOT_IN .)
    ARRAY           reduce using rule 247 (inOperator -> NOT_IN .)
    LCCT            reduce using rule 247 (inOperator -> NOT_IN .)
    IF              reduce using rule 247 (inOperator -> NOT_IN .)
    RETURN          reduce using rule 247 (inOperator -> NOT_IN .)
    RETURN_AT       reduce using rule 247 (inOperator -> NOT_IN .)
    CONTINUE        reduce using rule 247 (inOperator -> NOT_IN .)
    CONTINUE_AT     reduce using rule 247 (inOperator -> NOT_IN .)
    BREAK           reduce using rule 247 (inOperator -> NOT_IN .)
    BREAK_AT        reduce using rule 247 (inOperator -> NOT_IN .)
    RCHAVE          reduce using rule 247 (inOperator -> NOT_IN .)
    FUN             reduce using rule 247 (inOperator -> NOT_IN .)
    COLONCOLON      reduce using rule 247 (inOperator -> NOT_IN .)


state 223

    (248) isOperator -> IS .

    SUSPEND         reduce using rule 248 (isOperator -> IS .)
    LITERAL_STRING  reduce using rule 248 (isOperator -> IS .)
    INCREMENTO      reduce using rule 248 (isOperator -> IS .)
    DECREMENTO      reduce using rule 248 (isOperator -> IS .)
    MINUS           reduce using rule 248 (isOperator -> IS .)
    PLUS            reduce using rule 248 (isOperator -> IS .)
    NOT             reduce using rule 248 (isOperator -> IS .)
    LPAREN          reduce using rule 248 (isOperator -> IS .)
    ID              reduce using rule 248 (isOperator -> IS .)
    CROSSINLINE     reduce using rule 248 (isOperator -> IS .)
    IMPORT          reduce using rule 248 (isOperator -> IS .)
    INIT            reduce using rule 248 (isOperator -> IS .)
    NOINLINE        reduce using rule 248 (isOperator -> IS .)
    OUT             reduce using rule 248 (isOperator -> IS .)
    VARARG          reduce using rule 248 (isOperator -> IS .)
    WHERE           reduce using rule 248 (isOperator -> IS .)
    OBJECT          reduce using rule 248 (isOperator -> IS .)
    CONST           reduce using rule 248 (isOperator -> IS .)
    CONSTRUCTOR     reduce using rule 248 (isOperator -> IS .)
    EOF             reduce using rule 248 (isOperator -> IS .)
    FALSE           reduce using rule 248 (isOperator -> IS .)
    FUNCTION        reduce using rule 248 (isOperator -> IS .)
    NULL            reduce using rule 248 (isOperator -> IS .)
    NULLABLE        reduce using rule 248 (isOperator -> IS .)
    NUMBER          reduce using rule 248 (isOperator -> IS .)
    OPERATOR        reduce using rule 248 (isOperator -> IS .)
    SMARTCAST       reduce using rule 248 (isOperator -> IS .)
    THIS            reduce using rule 248 (isOperator -> IS .)
    TRUE            reduce using rule 248 (isOperator -> IS .)
    VAL             reduce using rule 248 (isOperator -> IS .)
    VAR             reduce using rule 248 (isOperator -> IS .)
    WHEN            reduce using rule 248 (isOperator -> IS .)
    LONG            reduce using rule 248 (isOperator -> IS .)
    ARRAY           reduce using rule 248 (isOperator -> IS .)
    LCCT            reduce using rule 248 (isOperator -> IS .)
    IF              reduce using rule 248 (isOperator -> IS .)
    RETURN          reduce using rule 248 (isOperator -> IS .)
    RETURN_AT       reduce using rule 248 (isOperator -> IS .)
    CONTINUE        reduce using rule 248 (isOperator -> IS .)
    CONTINUE_AT     reduce using rule 248 (isOperator -> IS .)
    BREAK           reduce using rule 248 (isOperator -> IS .)
    BREAK_AT        reduce using rule 248 (isOperator -> IS .)
    RCHAVE          reduce using rule 248 (isOperator -> IS .)
    FUN             reduce using rule 248 (isOperator -> IS .)
    COLONCOLON      reduce using rule 248 (isOperator -> IS .)


state 224

    (249) isOperator -> NOT_IS .

    SUSPEND         reduce using rule 249 (isOperator -> NOT_IS .)
    LITERAL_STRING  reduce using rule 249 (isOperator -> NOT_IS .)
    INCREMENTO      reduce using rule 249 (isOperator -> NOT_IS .)
    DECREMENTO      reduce using rule 249 (isOperator -> NOT_IS .)
    MINUS           reduce using rule 249 (isOperator -> NOT_IS .)
    PLUS            reduce using rule 249 (isOperator -> NOT_IS .)
    NOT             reduce using rule 249 (isOperator -> NOT_IS .)
    LPAREN          reduce using rule 249 (isOperator -> NOT_IS .)
    ID              reduce using rule 249 (isOperator -> NOT_IS .)
    CROSSINLINE     reduce using rule 249 (isOperator -> NOT_IS .)
    IMPORT          reduce using rule 249 (isOperator -> NOT_IS .)
    INIT            reduce using rule 249 (isOperator -> NOT_IS .)
    NOINLINE        reduce using rule 249 (isOperator -> NOT_IS .)
    OUT             reduce using rule 249 (isOperator -> NOT_IS .)
    VARARG          reduce using rule 249 (isOperator -> NOT_IS .)
    WHERE           reduce using rule 249 (isOperator -> NOT_IS .)
    OBJECT          reduce using rule 249 (isOperator -> NOT_IS .)
    CONST           reduce using rule 249 (isOperator -> NOT_IS .)
    CONSTRUCTOR     reduce using rule 249 (isOperator -> NOT_IS .)
    EOF             reduce using rule 249 (isOperator -> NOT_IS .)
    FALSE           reduce using rule 249 (isOperator -> NOT_IS .)
    FUNCTION        reduce using rule 249 (isOperator -> NOT_IS .)
    NULL            reduce using rule 249 (isOperator -> NOT_IS .)
    NULLABLE        reduce using rule 249 (isOperator -> NOT_IS .)
    NUMBER          reduce using rule 249 (isOperator -> NOT_IS .)
    OPERATOR        reduce using rule 249 (isOperator -> NOT_IS .)
    SMARTCAST       reduce using rule 249 (isOperator -> NOT_IS .)
    THIS            reduce using rule 249 (isOperator -> NOT_IS .)
    TRUE            reduce using rule 249 (isOperator -> NOT_IS .)
    VAL             reduce using rule 249 (isOperator -> NOT_IS .)
    VAR             reduce using rule 249 (isOperator -> NOT_IS .)
    WHEN            reduce using rule 249 (isOperator -> NOT_IS .)
    LONG            reduce using rule 249 (isOperator -> NOT_IS .)
    ARRAY           reduce using rule 249 (isOperator -> NOT_IS .)
    LCCT            reduce using rule 249 (isOperator -> NOT_IS .)
    IF              reduce using rule 249 (isOperator -> NOT_IS .)
    RETURN          reduce using rule 249 (isOperator -> NOT_IS .)
    RETURN_AT       reduce using rule 249 (isOperator -> NOT_IS .)
    CONTINUE        reduce using rule 249 (isOperator -> NOT_IS .)
    CONTINUE_AT     reduce using rule 249 (isOperator -> NOT_IS .)
    BREAK           reduce using rule 249 (isOperator -> NOT_IS .)
    BREAK_AT        reduce using rule 249 (isOperator -> NOT_IS .)
    RCHAVE          reduce using rule 249 (isOperator -> NOT_IS .)
    FUN             reduce using rule 249 (isOperator -> NOT_IS .)
    COLONCOLON      reduce using rule 249 (isOperator -> NOT_IS .)


state 225

    (68) receiverType -> typeModifier parenthesizedType .

    COLONCOLON      reduce using rule 68 (receiverType -> typeModifier parenthesizedType .)
    PONTO           reduce using rule 68 (receiverType -> typeModifier parenthesizedType .)


state 226

    (67) parenthesizedType -> LPAREN . type RPAREN
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 307
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 227

    (111) elvisExpression -> infixFunctionCall ELVIS . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (47) typeModifier -> . SUSPEND
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    infixFunctionCall              shift and go to state 117
    elvisExpression                shift and go to state 308
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    disjunction                    shift and go to state 70
    typeModifier                   shift and go to state 116
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108

state 228

    (113) infixFunctionCall -> rangeExpression simpleIdentifier . infixFunctionCall
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (47) typeModifier -> . SUSPEND
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    infixFunctionCall              shift and go to state 309
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    disjunction                    shift and go to state 70
    typeModifier                   shift and go to state 116
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115

state 229

    (115) rangeExpression -> additiveExpression PONTOPONTO . rangeExpression
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (47) typeModifier -> . SUSPEND
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    additiveExpression             shift and go to state 119
    rangeExpression                shift and go to state 310
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    simpleIdentifier               shift and go to state 134
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    disjunction                    shift and go to state 70
    typeModifier                   shift and go to state 116
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117

state 230

    (117) additiveExpression -> multiplicativeExpression additiveOperator . additiveExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (47) typeModifier -> . SUSPEND
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    multiplicativeExpression       shift and go to state 120
    additiveExpression             shift and go to state 311
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    simpleIdentifier               shift and go to state 134
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    disjunction                    shift and go to state 70
    typeModifier                   shift and go to state 116
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118

state 231

    (250) additiveOperator -> PLUS .

    LITERAL_STRING  reduce using rule 250 (additiveOperator -> PLUS .)
    INCREMENTO      reduce using rule 250 (additiveOperator -> PLUS .)
    DECREMENTO      reduce using rule 250 (additiveOperator -> PLUS .)
    MINUS           reduce using rule 250 (additiveOperator -> PLUS .)
    PLUS            reduce using rule 250 (additiveOperator -> PLUS .)
    NOT             reduce using rule 250 (additiveOperator -> PLUS .)
    LPAREN          reduce using rule 250 (additiveOperator -> PLUS .)
    ID              reduce using rule 250 (additiveOperator -> PLUS .)
    CROSSINLINE     reduce using rule 250 (additiveOperator -> PLUS .)
    IMPORT          reduce using rule 250 (additiveOperator -> PLUS .)
    INIT            reduce using rule 250 (additiveOperator -> PLUS .)
    NOINLINE        reduce using rule 250 (additiveOperator -> PLUS .)
    OUT             reduce using rule 250 (additiveOperator -> PLUS .)
    VARARG          reduce using rule 250 (additiveOperator -> PLUS .)
    WHERE           reduce using rule 250 (additiveOperator -> PLUS .)
    OBJECT          reduce using rule 250 (additiveOperator -> PLUS .)
    CONST           reduce using rule 250 (additiveOperator -> PLUS .)
    CONSTRUCTOR     reduce using rule 250 (additiveOperator -> PLUS .)
    EOF             reduce using rule 250 (additiveOperator -> PLUS .)
    FALSE           reduce using rule 250 (additiveOperator -> PLUS .)
    FUNCTION        reduce using rule 250 (additiveOperator -> PLUS .)
    NULL            reduce using rule 250 (additiveOperator -> PLUS .)
    NULLABLE        reduce using rule 250 (additiveOperator -> PLUS .)
    NUMBER          reduce using rule 250 (additiveOperator -> PLUS .)
    OPERATOR        reduce using rule 250 (additiveOperator -> PLUS .)
    SMARTCAST       reduce using rule 250 (additiveOperator -> PLUS .)
    THIS            reduce using rule 250 (additiveOperator -> PLUS .)
    TRUE            reduce using rule 250 (additiveOperator -> PLUS .)
    VAL             reduce using rule 250 (additiveOperator -> PLUS .)
    VAR             reduce using rule 250 (additiveOperator -> PLUS .)
    WHEN            reduce using rule 250 (additiveOperator -> PLUS .)
    LONG            reduce using rule 250 (additiveOperator -> PLUS .)
    ARRAY           reduce using rule 250 (additiveOperator -> PLUS .)
    LCCT            reduce using rule 250 (additiveOperator -> PLUS .)
    IF              reduce using rule 250 (additiveOperator -> PLUS .)
    RETURN          reduce using rule 250 (additiveOperator -> PLUS .)
    RETURN_AT       reduce using rule 250 (additiveOperator -> PLUS .)
    CONTINUE        reduce using rule 250 (additiveOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 250 (additiveOperator -> PLUS .)
    BREAK           reduce using rule 250 (additiveOperator -> PLUS .)
    BREAK_AT        reduce using rule 250 (additiveOperator -> PLUS .)
    RCHAVE          reduce using rule 250 (additiveOperator -> PLUS .)
    FUN             reduce using rule 250 (additiveOperator -> PLUS .)
    SUSPEND         reduce using rule 250 (additiveOperator -> PLUS .)
    COLONCOLON      reduce using rule 250 (additiveOperator -> PLUS .)


state 232

    (251) additiveOperator -> MINUS .

    LITERAL_STRING  reduce using rule 251 (additiveOperator -> MINUS .)
    INCREMENTO      reduce using rule 251 (additiveOperator -> MINUS .)
    DECREMENTO      reduce using rule 251 (additiveOperator -> MINUS .)
    MINUS           reduce using rule 251 (additiveOperator -> MINUS .)
    PLUS            reduce using rule 251 (additiveOperator -> MINUS .)
    NOT             reduce using rule 251 (additiveOperator -> MINUS .)
    LPAREN          reduce using rule 251 (additiveOperator -> MINUS .)
    ID              reduce using rule 251 (additiveOperator -> MINUS .)
    CROSSINLINE     reduce using rule 251 (additiveOperator -> MINUS .)
    IMPORT          reduce using rule 251 (additiveOperator -> MINUS .)
    INIT            reduce using rule 251 (additiveOperator -> MINUS .)
    NOINLINE        reduce using rule 251 (additiveOperator -> MINUS .)
    OUT             reduce using rule 251 (additiveOperator -> MINUS .)
    VARARG          reduce using rule 251 (additiveOperator -> MINUS .)
    WHERE           reduce using rule 251 (additiveOperator -> MINUS .)
    OBJECT          reduce using rule 251 (additiveOperator -> MINUS .)
    CONST           reduce using rule 251 (additiveOperator -> MINUS .)
    CONSTRUCTOR     reduce using rule 251 (additiveOperator -> MINUS .)
    EOF             reduce using rule 251 (additiveOperator -> MINUS .)
    FALSE           reduce using rule 251 (additiveOperator -> MINUS .)
    FUNCTION        reduce using rule 251 (additiveOperator -> MINUS .)
    NULL            reduce using rule 251 (additiveOperator -> MINUS .)
    NULLABLE        reduce using rule 251 (additiveOperator -> MINUS .)
    NUMBER          reduce using rule 251 (additiveOperator -> MINUS .)
    OPERATOR        reduce using rule 251 (additiveOperator -> MINUS .)
    SMARTCAST       reduce using rule 251 (additiveOperator -> MINUS .)
    THIS            reduce using rule 251 (additiveOperator -> MINUS .)
    TRUE            reduce using rule 251 (additiveOperator -> MINUS .)
    VAL             reduce using rule 251 (additiveOperator -> MINUS .)
    VAR             reduce using rule 251 (additiveOperator -> MINUS .)
    WHEN            reduce using rule 251 (additiveOperator -> MINUS .)
    LONG            reduce using rule 251 (additiveOperator -> MINUS .)
    ARRAY           reduce using rule 251 (additiveOperator -> MINUS .)
    LCCT            reduce using rule 251 (additiveOperator -> MINUS .)
    IF              reduce using rule 251 (additiveOperator -> MINUS .)
    RETURN          reduce using rule 251 (additiveOperator -> MINUS .)
    RETURN_AT       reduce using rule 251 (additiveOperator -> MINUS .)
    CONTINUE        reduce using rule 251 (additiveOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 251 (additiveOperator -> MINUS .)
    BREAK           reduce using rule 251 (additiveOperator -> MINUS .)
    BREAK_AT        reduce using rule 251 (additiveOperator -> MINUS .)
    RCHAVE          reduce using rule 251 (additiveOperator -> MINUS .)
    FUN             reduce using rule 251 (additiveOperator -> MINUS .)
    SUSPEND         reduce using rule 251 (additiveOperator -> MINUS .)
    COLONCOLON      reduce using rule 251 (additiveOperator -> MINUS .)


state 233

    (119) multiplicativeExpression -> asExpression multiplicativeOperator . multiplicativeExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (93) expression -> . disjunction
    (68) receiverType -> . typeModifier parenthesizedType
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (47) typeModifier -> . SUSPEND
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    asExpression                   shift and go to state 121
    multiplicativeExpression       shift and go to state 312
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    simpleIdentifier               shift and go to state 134
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    expression                     shift and go to state 196
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    disjunction                    shift and go to state 70
    typeModifier                   shift and go to state 116
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119

state 234

    (252) multiplicativeOperator -> MULT .

    LITERAL_STRING  reduce using rule 252 (multiplicativeOperator -> MULT .)
    INCREMENTO      reduce using rule 252 (multiplicativeOperator -> MULT .)
    DECREMENTO      reduce using rule 252 (multiplicativeOperator -> MULT .)
    MINUS           reduce using rule 252 (multiplicativeOperator -> MULT .)
    PLUS            reduce using rule 252 (multiplicativeOperator -> MULT .)
    NOT             reduce using rule 252 (multiplicativeOperator -> MULT .)
    LPAREN          reduce using rule 252 (multiplicativeOperator -> MULT .)
    ID              reduce using rule 252 (multiplicativeOperator -> MULT .)
    CROSSINLINE     reduce using rule 252 (multiplicativeOperator -> MULT .)
    IMPORT          reduce using rule 252 (multiplicativeOperator -> MULT .)
    INIT            reduce using rule 252 (multiplicativeOperator -> MULT .)
    NOINLINE        reduce using rule 252 (multiplicativeOperator -> MULT .)
    OUT             reduce using rule 252 (multiplicativeOperator -> MULT .)
    VARARG          reduce using rule 252 (multiplicativeOperator -> MULT .)
    WHERE           reduce using rule 252 (multiplicativeOperator -> MULT .)
    OBJECT          reduce using rule 252 (multiplicativeOperator -> MULT .)
    CONST           reduce using rule 252 (multiplicativeOperator -> MULT .)
    CONSTRUCTOR     reduce using rule 252 (multiplicativeOperator -> MULT .)
    EOF             reduce using rule 252 (multiplicativeOperator -> MULT .)
    FALSE           reduce using rule 252 (multiplicativeOperator -> MULT .)
    FUNCTION        reduce using rule 252 (multiplicativeOperator -> MULT .)
    NULL            reduce using rule 252 (multiplicativeOperator -> MULT .)
    NULLABLE        reduce using rule 252 (multiplicativeOperator -> MULT .)
    NUMBER          reduce using rule 252 (multiplicativeOperator -> MULT .)
    OPERATOR        reduce using rule 252 (multiplicativeOperator -> MULT .)
    SMARTCAST       reduce using rule 252 (multiplicativeOperator -> MULT .)
    THIS            reduce using rule 252 (multiplicativeOperator -> MULT .)
    TRUE            reduce using rule 252 (multiplicativeOperator -> MULT .)
    VAL             reduce using rule 252 (multiplicativeOperator -> MULT .)
    VAR             reduce using rule 252 (multiplicativeOperator -> MULT .)
    WHEN            reduce using rule 252 (multiplicativeOperator -> MULT .)
    LONG            reduce using rule 252 (multiplicativeOperator -> MULT .)
    ARRAY           reduce using rule 252 (multiplicativeOperator -> MULT .)
    LCCT            reduce using rule 252 (multiplicativeOperator -> MULT .)
    IF              reduce using rule 252 (multiplicativeOperator -> MULT .)
    RETURN          reduce using rule 252 (multiplicativeOperator -> MULT .)
    RETURN_AT       reduce using rule 252 (multiplicativeOperator -> MULT .)
    CONTINUE        reduce using rule 252 (multiplicativeOperator -> MULT .)
    CONTINUE_AT     reduce using rule 252 (multiplicativeOperator -> MULT .)
    BREAK           reduce using rule 252 (multiplicativeOperator -> MULT .)
    BREAK_AT        reduce using rule 252 (multiplicativeOperator -> MULT .)
    RCHAVE          reduce using rule 252 (multiplicativeOperator -> MULT .)
    FUN             reduce using rule 252 (multiplicativeOperator -> MULT .)
    SUSPEND         reduce using rule 252 (multiplicativeOperator -> MULT .)
    COLONCOLON      reduce using rule 252 (multiplicativeOperator -> MULT .)


state 235

    (253) multiplicativeOperator -> DIVIDE .

    LITERAL_STRING  reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    INCREMENTO      reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    DECREMENTO      reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    MINUS           reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    PLUS            reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    NOT             reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    LPAREN          reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    ID              reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    CROSSINLINE     reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    IMPORT          reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    INIT            reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    NOINLINE        reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    OUT             reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    VARARG          reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    WHERE           reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    OBJECT          reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    CONST           reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    CONSTRUCTOR     reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    EOF             reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    FALSE           reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    FUNCTION        reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    NULL            reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    NULLABLE        reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    NUMBER          reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    OPERATOR        reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    SMARTCAST       reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    THIS            reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    TRUE            reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    VAL             reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    VAR             reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    WHEN            reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    LONG            reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    ARRAY           reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    LCCT            reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    IF              reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    RETURN          reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    RETURN_AT       reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    CONTINUE        reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    CONTINUE_AT     reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    BREAK           reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    BREAK_AT        reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    RCHAVE          reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    FUN             reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    SUSPEND         reduce using rule 253 (multiplicativeOperator -> DIVIDE .)
    COLONCOLON      reduce using rule 253 (multiplicativeOperator -> DIVIDE .)


state 236

    (254) multiplicativeOperator -> MOD .

    LITERAL_STRING  reduce using rule 254 (multiplicativeOperator -> MOD .)
    INCREMENTO      reduce using rule 254 (multiplicativeOperator -> MOD .)
    DECREMENTO      reduce using rule 254 (multiplicativeOperator -> MOD .)
    MINUS           reduce using rule 254 (multiplicativeOperator -> MOD .)
    PLUS            reduce using rule 254 (multiplicativeOperator -> MOD .)
    NOT             reduce using rule 254 (multiplicativeOperator -> MOD .)
    LPAREN          reduce using rule 254 (multiplicativeOperator -> MOD .)
    ID              reduce using rule 254 (multiplicativeOperator -> MOD .)
    CROSSINLINE     reduce using rule 254 (multiplicativeOperator -> MOD .)
    IMPORT          reduce using rule 254 (multiplicativeOperator -> MOD .)
    INIT            reduce using rule 254 (multiplicativeOperator -> MOD .)
    NOINLINE        reduce using rule 254 (multiplicativeOperator -> MOD .)
    OUT             reduce using rule 254 (multiplicativeOperator -> MOD .)
    VARARG          reduce using rule 254 (multiplicativeOperator -> MOD .)
    WHERE           reduce using rule 254 (multiplicativeOperator -> MOD .)
    OBJECT          reduce using rule 254 (multiplicativeOperator -> MOD .)
    CONST           reduce using rule 254 (multiplicativeOperator -> MOD .)
    CONSTRUCTOR     reduce using rule 254 (multiplicativeOperator -> MOD .)
    EOF             reduce using rule 254 (multiplicativeOperator -> MOD .)
    FALSE           reduce using rule 254 (multiplicativeOperator -> MOD .)
    FUNCTION        reduce using rule 254 (multiplicativeOperator -> MOD .)
    NULL            reduce using rule 254 (multiplicativeOperator -> MOD .)
    NULLABLE        reduce using rule 254 (multiplicativeOperator -> MOD .)
    NUMBER          reduce using rule 254 (multiplicativeOperator -> MOD .)
    OPERATOR        reduce using rule 254 (multiplicativeOperator -> MOD .)
    SMARTCAST       reduce using rule 254 (multiplicativeOperator -> MOD .)
    THIS            reduce using rule 254 (multiplicativeOperator -> MOD .)
    TRUE            reduce using rule 254 (multiplicativeOperator -> MOD .)
    VAL             reduce using rule 254 (multiplicativeOperator -> MOD .)
    VAR             reduce using rule 254 (multiplicativeOperator -> MOD .)
    WHEN            reduce using rule 254 (multiplicativeOperator -> MOD .)
    LONG            reduce using rule 254 (multiplicativeOperator -> MOD .)
    ARRAY           reduce using rule 254 (multiplicativeOperator -> MOD .)
    LCCT            reduce using rule 254 (multiplicativeOperator -> MOD .)
    IF              reduce using rule 254 (multiplicativeOperator -> MOD .)
    RETURN          reduce using rule 254 (multiplicativeOperator -> MOD .)
    RETURN_AT       reduce using rule 254 (multiplicativeOperator -> MOD .)
    CONTINUE        reduce using rule 254 (multiplicativeOperator -> MOD .)
    CONTINUE_AT     reduce using rule 254 (multiplicativeOperator -> MOD .)
    BREAK           reduce using rule 254 (multiplicativeOperator -> MOD .)
    BREAK_AT        reduce using rule 254 (multiplicativeOperator -> MOD .)
    RCHAVE          reduce using rule 254 (multiplicativeOperator -> MOD .)
    FUN             reduce using rule 254 (multiplicativeOperator -> MOD .)
    SUSPEND         reduce using rule 254 (multiplicativeOperator -> MOD .)
    COLONCOLON      reduce using rule 254 (multiplicativeOperator -> MOD .)


state 237

    (67) parenthesizedType -> LPAREN type . RPAREN
    (62) optionalParameterOrType -> type .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 313
    COMMA           reduce using rule 62 (optionalParameterOrType -> type .)

  ! RPAREN          [ reduce using rule 62 (optionalParameterOrType -> type .) ]


state 238

    (60) functionTypeParameters -> LPAREN optionalParameterOrType . parameterOrTypeRecursive optionalCOMMA RPAREN
    (64) parameterOrTypeRecursive -> . COMMA optionalParameterOrType
    (65) parameterOrTypeRecursive -> . COMMA optionalParameterOrType parameterOrTypeRecursive
    (66) parameterOrTypeRecursive -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 315
    RPAREN          reduce using rule 66 (parameterOrTypeRecursive -> .)

  ! COMMA           [ reduce using rule 66 (parameterOrTypeRecursive -> .) ]

    parameterOrTypeRecursive       shift and go to state 314

state 239

    (61) optionalParameterOrType -> parameter .

    COMMA           reduce using rule 61 (optionalParameterOrType -> parameter .)
    RPAREN          reduce using rule 61 (optionalParameterOrType -> parameter .)


state 240

    (58) functionType -> receiverType PONTO . functionTypeParameters SETA type
    (60) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN

    LPAREN          shift and go to state 317

    functionTypeParameters         shift and go to state 316

state 241

    (59) functionType -> functionTypeParameters SETA . type
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 318
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 242

    (52) simpleUserType -> simpleIdentifier typeArguments .

    LCHAVE          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    FUN             reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    $end            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    FOR             reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    WHILE           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    DO              reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    VAR             reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    VAL             reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    ID              reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    CROSSINLINE     reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    IMPORT          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    INIT            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    NOINLINE        reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    OUT             reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    VARARG          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    WHERE           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    OBJECT          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    CONST           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    CONSTRUCTOR     reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    EOF             reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    FALSE           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    FUNCTION        reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    NULL            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    NULLABLE        reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    NUMBER          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    OPERATOR        reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    SMARTCAST       reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    THIS            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    TRUE            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    WHEN            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    LONG            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    ARRAY           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    LPAREN          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    LITERAL_STRING  reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    LCCT            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    IF              reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN_AT       reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE        reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE_AT     reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK_AT        reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    RCHAVE          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    INCREMENTO      reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    DECREMENTO      reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MINUS           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    PLUS            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT             reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    SUSPEND         reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    COLONCOLON      reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOR           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTO           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    AS              reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MAISIGUAL       reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOSIGUAL      reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MULTIGUAL       reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIGUAL        reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MODIGUAL        reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MULT            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIDE          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MOD             reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTOPONTO      reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    ELVIS           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    IN              reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IN          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    IS              reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IS          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIOR           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MENORIGUAL      reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIORIGUAL      reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    DIFERENTE       reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    IDENTIDADE      reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    IGUALDADE       reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    SEMIDENTIDADE   reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    AND             reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    OR              reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    COMMA           reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    RPAREN          reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    RCCT            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    PV              reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    ELSE            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    SETA            reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)
    ATRIBUICAO      reduce using rule 52 (simpleUserType -> simpleIdentifier typeArguments .)


state 243

    (195) lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .

    INCREMENTO      reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    DECREMENTO      reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MENOR           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    LCCT            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    COLONCOLON      reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    PONTO           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    LPAREN          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    RCHAVE          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    AS              reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MAISIGUAL       reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MENOSIGUAL      reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MULTIGUAL       reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    DIVIGUAL        reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MODIGUAL        reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MULT            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    DIVIDE          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MOD             reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    PLUS            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MINUS           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    PONTOPONTO      reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    ID              reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    CROSSINLINE     reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IMPORT          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    INIT            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NOINLINE        reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    OUT             reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    VARARG          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    WHERE           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    OBJECT          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    CONST           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    CONSTRUCTOR     reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    EOF             reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    FALSE           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    FUNCTION        reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NULL            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NULLABLE        reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NUMBER          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    OPERATOR        reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    SMARTCAST       reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    THIS            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    TRUE            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    VAL             reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    VAR             reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    WHEN            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    LONG            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    ARRAY           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    ELVIS           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IN              reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NOT_IN          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IS              reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NOT_IS          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MAIOR           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MENORIGUAL      reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    MAIORIGUAL      reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    DIFERENTE       reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IDENTIDADE      reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IGUALDADE       reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    SEMIDENTIDADE   reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    AND             reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    OR              reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    FUN             reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    FOR             reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    WHILE           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    DO              reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    LITERAL_STRING  reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    IF              reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    RETURN          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    RETURN_AT       reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    CONTINUE        reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    CONTINUE_AT     reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    BREAK           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    BREAK_AT        reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    NOT             reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    SUSPEND         reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    COMMA           reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    RPAREN          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    LCHAVE          reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    RCCT            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    PV              reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)
    ELSE            reduce using rule 195 (lambdaLiteral -> RCHAVE optionsLambdaLiteral LCHAVE .)


state 244

    (197) optionsLambdaLiteral -> lambdaParameters SETA . statements
    (69) statements -> . statement
    (70) statements -> . statement statements
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

    FUN             shift and go to state 62
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

    statements                     shift and go to state 319
    statement                      shift and go to state 56
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    expression                     shift and go to state 60
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 245

    (198) optionsLambdaLiteral -> SETA statements .

    LCHAVE          reduce using rule 198 (optionsLambdaLiteral -> SETA statements .)


state 246

    (200) lambdaParameters -> lambdaParameter COMMA . lambdaParameters
    (199) lambdaParameters -> . lambdaParameter
    (200) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (201) lambdaParameter -> . variableDeclaration
    (202) lambdaParameter -> . multiVariableDeclaration optionalType
    (32) variableDeclaration -> . simpleIdentifier DOISP type
    (33) variableDeclaration -> . simpleIdentifier
    (34) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (35) multiVariableDeclaration -> . LPAREN RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    LPAREN          shift and go to state 261
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    lambdaParameter                shift and go to state 145
    lambdaParameters               shift and go to state 320
    variableDeclaration            shift and go to state 146
    multiVariableDeclaration       shift and go to state 147
    simpleIdentifier               shift and go to state 262

state 247

    (202) lambdaParameter -> multiVariableDeclaration optionalType .

    COMMA           reduce using rule 202 (lambdaParameter -> multiVariableDeclaration optionalType .)
    SETA            reduce using rule 202 (lambdaParameter -> multiVariableDeclaration optionalType .)


state 248

    (32) variableDeclaration -> simpleIdentifier DOISP . type
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 321
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 249

    (34) multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive . RPAREN

    RPAREN          shift and go to state 322


state 250

    (35) multiVariableDeclaration -> LPAREN RPAREN .

    DOISP           reduce using rule 35 (multiVariableDeclaration -> LPAREN RPAREN .)
    COMMA           reduce using rule 35 (multiVariableDeclaration -> LPAREN RPAREN .)
    SETA            reduce using rule 35 (multiVariableDeclaration -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 35 (multiVariableDeclaration -> LPAREN RPAREN .)
    IN              reduce using rule 35 (multiVariableDeclaration -> LPAREN RPAREN .)


state 251

    (36) multiVariableDeclarationRecursive -> variableDeclaration .
    (37) multiVariableDeclarationRecursive -> variableDeclaration . COMMA multiVariableDeclarationRecursive

    RPAREN          reduce using rule 36 (multiVariableDeclarationRecursive -> variableDeclaration .)
    COMMA           shift and go to state 323


state 252

    (139) directlyAssignableExpression -> simpleIdentifier .
    (32) variableDeclaration -> simpleIdentifier . DOISP type
    (33) variableDeclaration -> simpleIdentifier .
    (173) primaryExpression -> simpleIdentifier .
    (128) label -> simpleIdentifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 33 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 33 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 128 (label -> simpleIdentifier .)
    DOISP           shift and go to state 248
    COMMA           reduce using rule 33 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 33 (variableDeclaration -> simpleIdentifier .)
    MENOR           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    MINUS           reduce using rule 128 (label -> simpleIdentifier .)
    PLUS            reduce using rule 128 (label -> simpleIdentifier .)
    NOT             reduce using rule 128 (label -> simpleIdentifier .)
    ID              reduce using rule 128 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 128 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 128 (label -> simpleIdentifier .)
    INIT            reduce using rule 128 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 128 (label -> simpleIdentifier .)
    OUT             reduce using rule 128 (label -> simpleIdentifier .)
    VARARG          reduce using rule 128 (label -> simpleIdentifier .)
    WHERE           reduce using rule 128 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 128 (label -> simpleIdentifier .)
    CONST           reduce using rule 128 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 128 (label -> simpleIdentifier .)
    EOF             reduce using rule 128 (label -> simpleIdentifier .)
    FALSE           reduce using rule 128 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 128 (label -> simpleIdentifier .)
    NULL            reduce using rule 128 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 128 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 128 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 128 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 128 (label -> simpleIdentifier .)
    THIS            reduce using rule 128 (label -> simpleIdentifier .)
    TRUE            reduce using rule 128 (label -> simpleIdentifier .)
    VAL             reduce using rule 128 (label -> simpleIdentifier .)
    VAR             reduce using rule 128 (label -> simpleIdentifier .)
    WHEN            reduce using rule 128 (label -> simpleIdentifier .)
    LONG            reduce using rule 128 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 128 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 128 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 128 (label -> simpleIdentifier .)
    LCCT            reduce using rule 128 (label -> simpleIdentifier .)
    IF              reduce using rule 128 (label -> simpleIdentifier .)
    RETURN          reduce using rule 128 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 128 (label -> simpleIdentifier .)
    BREAK           reduce using rule 128 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 128 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 128 (label -> simpleIdentifier .)
    FUN             reduce using rule 128 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 128 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 128 (label -> simpleIdentifier .)

  ! RPAREN          [ reduce using rule 139 (directlyAssignableExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]


state 253

    (209) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType . optionalType optionalTypeConstraints optionalFunctionBody
    (4) optionalType -> . DOISP type
    (5) optionalType -> .

    DOISP           shift and go to state 35
    ID              reduce using rule 5 (optionalType -> .)
    CROSSINLINE     reduce using rule 5 (optionalType -> .)
    IMPORT          reduce using rule 5 (optionalType -> .)
    INIT            reduce using rule 5 (optionalType -> .)
    NOINLINE        reduce using rule 5 (optionalType -> .)
    OUT             reduce using rule 5 (optionalType -> .)
    VARARG          reduce using rule 5 (optionalType -> .)
    WHERE           reduce using rule 5 (optionalType -> .)
    OBJECT          reduce using rule 5 (optionalType -> .)
    CONST           reduce using rule 5 (optionalType -> .)
    CONSTRUCTOR     reduce using rule 5 (optionalType -> .)
    EOF             reduce using rule 5 (optionalType -> .)
    FALSE           reduce using rule 5 (optionalType -> .)
    FUNCTION        reduce using rule 5 (optionalType -> .)
    NULL            reduce using rule 5 (optionalType -> .)
    NULLABLE        reduce using rule 5 (optionalType -> .)
    NUMBER          reduce using rule 5 (optionalType -> .)
    OPERATOR        reduce using rule 5 (optionalType -> .)
    SMARTCAST       reduce using rule 5 (optionalType -> .)
    THIS            reduce using rule 5 (optionalType -> .)
    TRUE            reduce using rule 5 (optionalType -> .)
    VAL             reduce using rule 5 (optionalType -> .)
    VAR             reduce using rule 5 (optionalType -> .)
    WHEN            reduce using rule 5 (optionalType -> .)
    LONG            reduce using rule 5 (optionalType -> .)
    ARRAY           reduce using rule 5 (optionalType -> .)
    ATRIBUICAO      reduce using rule 5 (optionalType -> .)
    LCHAVE          reduce using rule 5 (optionalType -> .)
    INCREMENTO      reduce using rule 5 (optionalType -> .)
    DECREMENTO      reduce using rule 5 (optionalType -> .)
    MENOR           reduce using rule 5 (optionalType -> .)
    LCCT            reduce using rule 5 (optionalType -> .)
    COLONCOLON      reduce using rule 5 (optionalType -> .)
    PONTO           reduce using rule 5 (optionalType -> .)
    LPAREN          reduce using rule 5 (optionalType -> .)
    RCHAVE          reduce using rule 5 (optionalType -> .)
    AS              reduce using rule 5 (optionalType -> .)
    MAISIGUAL       reduce using rule 5 (optionalType -> .)
    MENOSIGUAL      reduce using rule 5 (optionalType -> .)
    MULTIGUAL       reduce using rule 5 (optionalType -> .)
    DIVIGUAL        reduce using rule 5 (optionalType -> .)
    MODIGUAL        reduce using rule 5 (optionalType -> .)
    MULT            reduce using rule 5 (optionalType -> .)
    DIVIDE          reduce using rule 5 (optionalType -> .)
    MOD             reduce using rule 5 (optionalType -> .)
    PLUS            reduce using rule 5 (optionalType -> .)
    MINUS           reduce using rule 5 (optionalType -> .)
    PONTOPONTO      reduce using rule 5 (optionalType -> .)
    ELVIS           reduce using rule 5 (optionalType -> .)
    IN              reduce using rule 5 (optionalType -> .)
    NOT_IN          reduce using rule 5 (optionalType -> .)
    IS              reduce using rule 5 (optionalType -> .)
    NOT_IS          reduce using rule 5 (optionalType -> .)
    MAIOR           reduce using rule 5 (optionalType -> .)
    MENORIGUAL      reduce using rule 5 (optionalType -> .)
    MAIORIGUAL      reduce using rule 5 (optionalType -> .)
    DIFERENTE       reduce using rule 5 (optionalType -> .)
    IDENTIDADE      reduce using rule 5 (optionalType -> .)
    IGUALDADE       reduce using rule 5 (optionalType -> .)
    SEMIDENTIDADE   reduce using rule 5 (optionalType -> .)
    AND             reduce using rule 5 (optionalType -> .)
    OR              reduce using rule 5 (optionalType -> .)
    FUN             reduce using rule 5 (optionalType -> .)
    FOR             reduce using rule 5 (optionalType -> .)
    WHILE           reduce using rule 5 (optionalType -> .)
    DO              reduce using rule 5 (optionalType -> .)
    LITERAL_STRING  reduce using rule 5 (optionalType -> .)
    IF              reduce using rule 5 (optionalType -> .)
    RETURN          reduce using rule 5 (optionalType -> .)
    RETURN_AT       reduce using rule 5 (optionalType -> .)
    CONTINUE        reduce using rule 5 (optionalType -> .)
    CONTINUE_AT     reduce using rule 5 (optionalType -> .)
    BREAK           reduce using rule 5 (optionalType -> .)
    BREAK_AT        reduce using rule 5 (optionalType -> .)
    NOT             reduce using rule 5 (optionalType -> .)
    SUSPEND         reduce using rule 5 (optionalType -> .)
    COMMA           reduce using rule 5 (optionalType -> .)
    RPAREN          reduce using rule 5 (optionalType -> .)
    RCCT            reduce using rule 5 (optionalType -> .)
    PV              reduce using rule 5 (optionalType -> .)
    ELSE            reduce using rule 5 (optionalType -> .)

    optionalType                   shift and go to state 324

state 254

    (185) parametersWithOptionalType -> LPAREN . parametersWithOptionalTypeRecursive RPAREN
    (186) parametersWithOptionalType -> LPAREN . RPAREN
    (187) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType
    (188) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA
    (189) parameterWithOptionalType -> . optionalParameterModifiers simpleIdentifier optionalType
    (190) optionalParameterModifiers -> . parameterModifiers
    (191) optionalParameterModifiers -> .
    (192) parameterModifiers -> . VARARG
    (193) parameterModifiers -> . NOINLINE
    (194) parameterModifiers -> . CROSSINLINE

  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
    RPAREN          shift and go to state 326
    ID              reduce using rule 191 (optionalParameterModifiers -> .)
    IMPORT          reduce using rule 191 (optionalParameterModifiers -> .)
    INIT            reduce using rule 191 (optionalParameterModifiers -> .)
    OUT             reduce using rule 191 (optionalParameterModifiers -> .)
    WHERE           reduce using rule 191 (optionalParameterModifiers -> .)
    OBJECT          reduce using rule 191 (optionalParameterModifiers -> .)
    CONST           reduce using rule 191 (optionalParameterModifiers -> .)
    CONSTRUCTOR     reduce using rule 191 (optionalParameterModifiers -> .)
    EOF             reduce using rule 191 (optionalParameterModifiers -> .)
    FALSE           reduce using rule 191 (optionalParameterModifiers -> .)
    FUNCTION        reduce using rule 191 (optionalParameterModifiers -> .)
    NULL            reduce using rule 191 (optionalParameterModifiers -> .)
    NULLABLE        reduce using rule 191 (optionalParameterModifiers -> .)
    NUMBER          reduce using rule 191 (optionalParameterModifiers -> .)
    OPERATOR        reduce using rule 191 (optionalParameterModifiers -> .)
    SMARTCAST       reduce using rule 191 (optionalParameterModifiers -> .)
    THIS            reduce using rule 191 (optionalParameterModifiers -> .)
    TRUE            reduce using rule 191 (optionalParameterModifiers -> .)
    VAL             reduce using rule 191 (optionalParameterModifiers -> .)
    VAR             reduce using rule 191 (optionalParameterModifiers -> .)
    WHEN            reduce using rule 191 (optionalParameterModifiers -> .)
    LONG            reduce using rule 191 (optionalParameterModifiers -> .)
    ARRAY           reduce using rule 191 (optionalParameterModifiers -> .)
    VARARG          shift and go to state 330
    NOINLINE        shift and go to state 331
    CROSSINLINE     shift and go to state 332

  ! CROSSINLINE     [ reduce using rule 191 (optionalParameterModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 191 (optionalParameterModifiers -> .) ]
  ! VARARG          [ reduce using rule 191 (optionalParameterModifiers -> .) ]

    parametersWithOptionalTypeRecursive shift and go to state 325
    parameterWithOptionalType      shift and go to state 327
    optionalParameterModifiers     shift and go to state 328
    parameterModifiers             shift and go to state 329

state 255

    (203) optionalTypePonto -> type PONTO .

    LPAREN          reduce using rule 203 (optionalTypePonto -> type PONTO .)


state 256

    (91) assignment -> directlyAssignableExpression ATRIBUICAO expression .
    (223) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for FOR resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for DO resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAR resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAL resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for ID resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for INIT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for OUT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONST resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for EOF resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULL resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for THIS resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for LONG resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IF resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for AS resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MULT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MOD resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IN resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IS resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for AND resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for OR resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for PV resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FUN             reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FOR             reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    WHILE           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DO              reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VAR             reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VAL             reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ID              reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IMPORT          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    INIT            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOINLINE        reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OUT             reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VARARG          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    WHERE           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OBJECT          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONST           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONSTRUCTOR     reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    EOF             reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FALSE           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FUNCTION        reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NULL            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NULLABLE        reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NUMBER          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OPERATOR        reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    SMARTCAST       reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    THIS            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    TRUE            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    WHEN            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LONG            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ARRAY           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LPAREN          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LCCT            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IF              reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RETURN          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONTINUE        reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    BREAK           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RCHAVE          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MINUS           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PLUS            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT             reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    SUSPEND         reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LCHAVE          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENOR           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PONTO           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    AS              reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MULT            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIVIDE          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MOD             reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ELVIS           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IN              reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT_IN          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IS              reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT_IS          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAIOR           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    AND             reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OR              reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    COMMA           reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RPAREN          reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RCCT            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PV              reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ELSE            reduce using rule 91 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)

  ! FUN             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 223 (jumpExpression -> expression .) ]


state 257

    (92) assignment -> assignableExpression assignmentAndOperator expression .
    (223) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for FOR resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DO resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for VAR resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for VAL resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ID resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for INIT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OUT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONST resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for EOF resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NULL resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for THIS resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LONG resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IF resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for AS resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MULT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MOD resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IN resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IS resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for AND resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for OR resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for PV resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    FUN             reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    FOR             reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHILE           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    DO              reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    VAR             reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    VAL             reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    ID              reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    CROSSINLINE     reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    IMPORT          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    INIT            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOINLINE        reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    OUT             reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    VARARG          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHERE           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    OBJECT          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONST           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONSTRUCTOR     reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    EOF             reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    FALSE           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    FUNCTION        reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    NULL            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    NULLABLE        reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    NUMBER          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    OPERATOR        reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    SMARTCAST       reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    THIS            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    TRUE            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHEN            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    LONG            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    ARRAY           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    LPAREN          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    LITERAL_STRING  reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    LCCT            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    IF              reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    RETURN          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    RETURN_AT       reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONTINUE        reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONTINUE_AT     reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    BREAK           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    BREAK_AT        reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    RCHAVE          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    INCREMENTO      reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    DECREMENTO      reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MINUS           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    PLUS            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT             reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    SUSPEND         reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    COLONCOLON      reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    LCHAVE          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENOR           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    PONTO           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    AS              reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAISIGUAL       reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENOSIGUAL      reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MULTIGUAL       reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIVIGUAL        reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MODIGUAL        reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MULT            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIVIDE          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MOD             reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    PONTOPONTO      reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    ELVIS           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    IN              reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT_IN          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    IS              reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT_IS          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAIOR           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENORIGUAL      reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAIORIGUAL      reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIFERENTE       reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    IDENTIDADE      reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    IGUALDADE       reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    SEMIDENTIDADE   reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    AND             reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    OR              reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    COMMA           reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    RPAREN          reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    RCCT            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    PV              reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)
    ELSE            reduce using rule 92 (assignment -> assignableExpression assignmentAndOperator expression .)

  ! FUN             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 223 (jumpExpression -> expression .) ]


state 258

    (10) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration . ATRIBUICAO expression optionalPv

    ATRIBUICAO      shift and go to state 333


state 259

    (15) genericVariableDeclaration -> multiVariableDeclaration .

    ATRIBUICAO      reduce using rule 15 (genericVariableDeclaration -> multiVariableDeclaration .)


state 260

    (16) genericVariableDeclaration -> variableDeclaration .

    ATRIBUICAO      reduce using rule 16 (genericVariableDeclaration -> variableDeclaration .)


state 261

    (34) multiVariableDeclaration -> LPAREN . multiVariableDeclarationRecursive RPAREN
    (35) multiVariableDeclaration -> LPAREN . RPAREN
    (36) multiVariableDeclarationRecursive -> . variableDeclaration
    (37) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (32) variableDeclaration -> . simpleIdentifier DOISP type
    (33) variableDeclaration -> . simpleIdentifier
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    RPAREN          shift and go to state 250
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    multiVariableDeclarationRecursive shift and go to state 249
    variableDeclaration            shift and go to state 251
    simpleIdentifier               shift and go to state 262

state 262

    (32) variableDeclaration -> simpleIdentifier . DOISP type
    (33) variableDeclaration -> simpleIdentifier .

    DOISP           shift and go to state 248
    ATRIBUICAO      reduce using rule 33 (variableDeclaration -> simpleIdentifier .)
    IN              reduce using rule 33 (variableDeclaration -> simpleIdentifier .)
    COMMA           reduce using rule 33 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 33 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 33 (variableDeclaration -> simpleIdentifier .)


state 263

    (17) typeParameters -> MENOR typeParameter . typeParametersRecursive optionalCOMMA MAIOR
    (18) typeParametersRecursive -> . COMMA typeParameter
    (19) typeParametersRecursive -> . COMMA typeParameter typeParametersRecursive

    COMMA           shift and go to state 335

    typeParametersRecursive        shift and go to state 334

state 264

    (22) typeParameter -> simpleIdentifier .
    (23) typeParameter -> simpleIdentifier . DOISP type

    COMMA           reduce using rule 22 (typeParameter -> simpleIdentifier .)
    MAIOR           reduce using rule 22 (typeParameter -> simpleIdentifier .)
    DOISP           shift and go to state 336


state 265

    (161) typeArguments -> MENOR typeArgumentsRecursive . MAIOR

    MAIOR           shift and go to state 337


state 266

    (162) typeArguments -> MENOR MAIOR .

    ATRIBUICAO      reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    RPAREN          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    INCREMENTO      reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    DECREMENTO      reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MENOR           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    LCCT            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    COLONCOLON      reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    PONTO           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    LPAREN          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    RCHAVE          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    AS              reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MAISIGUAL       reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MENOSIGUAL      reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MULTIGUAL       reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    DIVIGUAL        reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MODIGUAL        reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MULT            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    DIVIDE          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MOD             reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    PLUS            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MINUS           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    PONTOPONTO      reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    ID              reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    CROSSINLINE     reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    IMPORT          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    INIT            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    NOINLINE        reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    OUT             reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    VARARG          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    WHERE           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    OBJECT          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    CONST           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    CONSTRUCTOR     reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    EOF             reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    FALSE           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    FUNCTION        reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    NULL            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    NULLABLE        reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    NUMBER          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    OPERATOR        reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    SMARTCAST       reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    THIS            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    TRUE            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    VAL             reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    VAR             reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    WHEN            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    LONG            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    ARRAY           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    ELVIS           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    IN              reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    NOT_IN          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    IS              reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    NOT_IS          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MAIOR           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MENORIGUAL      reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    MAIORIGUAL      reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    DIFERENTE       reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    IDENTIDADE      reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    IGUALDADE       reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    SEMIDENTIDADE   reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    AND             reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    OR              reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    FUN             reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    FOR             reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    WHILE           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    DO              reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    LITERAL_STRING  reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    IF              reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    RETURN          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    RETURN_AT       reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    CONTINUE        reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    CONTINUE_AT     reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    BREAK           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    BREAK_AT        reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    NOT             reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    SUSPEND         reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    COMMA           reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    LCHAVE          reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    RCCT            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    PV              reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    ELSE            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    $end            reduce using rule 162 (typeArguments -> MENOR MAIOR .)
    SETA            reduce using rule 162 (typeArguments -> MENOR MAIOR .)


state 267

    (163) typeArgumentsRecursive -> typeProjection .
    (164) typeArgumentsRecursive -> typeProjection . COMMA typeArgumentsRecursive
    (56) typeProjectionModifiers -> typeProjection .

    MAIOR           reduce using rule 163 (typeArgumentsRecursive -> typeProjection .)
    COMMA           shift and go to state 338
    SUSPEND         reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    OBJECT          reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    CONST           reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    CONSTRUCTOR     reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    EOF             reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    FALSE           reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    FUNCTION        reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    NULL            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    NULLABLE        reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    NUMBER          reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    OPERATOR        reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    SMARTCAST       reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    THIS            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    TRUE            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    VAL             reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    VAR             reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    WHEN            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    LONG            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    ARRAY           reduce using rule 56 (typeProjectionModifiers -> typeProjection .)


state 268

    (54) typeProjection -> typeProjectionModifiers . type
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 339
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 269

    (55) typeProjection -> type .

    COMMA           reduce using rule 55 (typeProjection -> type .)
    MAIOR           reduce using rule 55 (typeProjection -> type .)
    SUSPEND         reduce using rule 55 (typeProjection -> type .)
    LPAREN          reduce using rule 55 (typeProjection -> type .)
    ID              reduce using rule 55 (typeProjection -> type .)
    CROSSINLINE     reduce using rule 55 (typeProjection -> type .)
    IMPORT          reduce using rule 55 (typeProjection -> type .)
    INIT            reduce using rule 55 (typeProjection -> type .)
    NOINLINE        reduce using rule 55 (typeProjection -> type .)
    OUT             reduce using rule 55 (typeProjection -> type .)
    VARARG          reduce using rule 55 (typeProjection -> type .)
    WHERE           reduce using rule 55 (typeProjection -> type .)
    OBJECT          reduce using rule 55 (typeProjection -> type .)
    CONST           reduce using rule 55 (typeProjection -> type .)
    CONSTRUCTOR     reduce using rule 55 (typeProjection -> type .)
    EOF             reduce using rule 55 (typeProjection -> type .)
    FALSE           reduce using rule 55 (typeProjection -> type .)
    FUNCTION        reduce using rule 55 (typeProjection -> type .)
    NULL            reduce using rule 55 (typeProjection -> type .)
    NULLABLE        reduce using rule 55 (typeProjection -> type .)
    NUMBER          reduce using rule 55 (typeProjection -> type .)
    OPERATOR        reduce using rule 55 (typeProjection -> type .)
    SMARTCAST       reduce using rule 55 (typeProjection -> type .)
    THIS            reduce using rule 55 (typeProjection -> type .)
    TRUE            reduce using rule 55 (typeProjection -> type .)
    VAL             reduce using rule 55 (typeProjection -> type .)
    VAR             reduce using rule 55 (typeProjection -> type .)
    WHEN            reduce using rule 55 (typeProjection -> type .)
    LONG            reduce using rule 55 (typeProjection -> type .)
    ARRAY           reduce using rule 55 (typeProjection -> type .)


state 270

    (57) typeProjectionModifiers -> typeProjectionModifier . typeProjectionModifiers
    (56) typeProjectionModifiers -> . typeProjection
    (57) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (54) typeProjection -> . typeProjectionModifiers type
    (55) typeProjection -> . type
    (48) typeProjectionModifier -> . varianceModifier
    (39) type -> . optionalTypeModifiers optype
    (49) varianceModifier -> . IN
    (50) varianceModifier -> . OUT
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    IN              shift and go to state 272
    OUT             shift and go to state 273
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    typeProjectionModifier         shift and go to state 270
    typeProjectionModifiers        shift and go to state 340
    typeProjection                 shift and go to state 341
    type                           shift and go to state 269
    varianceModifier               shift and go to state 271
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 271

    (48) typeProjectionModifier -> varianceModifier .

    IN              reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    OUT             reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    SUSPEND         reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    LPAREN          reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    ID              reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    CROSSINLINE     reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    IMPORT          reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    INIT            reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    NOINLINE        reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    VARARG          reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    WHERE           reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    OBJECT          reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    CONST           reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    CONSTRUCTOR     reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    EOF             reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    FALSE           reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    FUNCTION        reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    NULL            reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    NULLABLE        reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    NUMBER          reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    OPERATOR        reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    SMARTCAST       reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    THIS            reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    TRUE            reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    VAL             reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    VAR             reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    WHEN            reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    LONG            reduce using rule 48 (typeProjectionModifier -> varianceModifier .)
    ARRAY           reduce using rule 48 (typeProjectionModifier -> varianceModifier .)


state 272

    (49) varianceModifier -> IN .

    IN              reduce using rule 49 (varianceModifier -> IN .)
    OUT             reduce using rule 49 (varianceModifier -> IN .)
    SUSPEND         reduce using rule 49 (varianceModifier -> IN .)
    LPAREN          reduce using rule 49 (varianceModifier -> IN .)
    ID              reduce using rule 49 (varianceModifier -> IN .)
    CROSSINLINE     reduce using rule 49 (varianceModifier -> IN .)
    IMPORT          reduce using rule 49 (varianceModifier -> IN .)
    INIT            reduce using rule 49 (varianceModifier -> IN .)
    NOINLINE        reduce using rule 49 (varianceModifier -> IN .)
    VARARG          reduce using rule 49 (varianceModifier -> IN .)
    WHERE           reduce using rule 49 (varianceModifier -> IN .)
    OBJECT          reduce using rule 49 (varianceModifier -> IN .)
    CONST           reduce using rule 49 (varianceModifier -> IN .)
    CONSTRUCTOR     reduce using rule 49 (varianceModifier -> IN .)
    EOF             reduce using rule 49 (varianceModifier -> IN .)
    FALSE           reduce using rule 49 (varianceModifier -> IN .)
    FUNCTION        reduce using rule 49 (varianceModifier -> IN .)
    NULL            reduce using rule 49 (varianceModifier -> IN .)
    NULLABLE        reduce using rule 49 (varianceModifier -> IN .)
    NUMBER          reduce using rule 49 (varianceModifier -> IN .)
    OPERATOR        reduce using rule 49 (varianceModifier -> IN .)
    SMARTCAST       reduce using rule 49 (varianceModifier -> IN .)
    THIS            reduce using rule 49 (varianceModifier -> IN .)
    TRUE            reduce using rule 49 (varianceModifier -> IN .)
    VAL             reduce using rule 49 (varianceModifier -> IN .)
    VAR             reduce using rule 49 (varianceModifier -> IN .)
    WHEN            reduce using rule 49 (varianceModifier -> IN .)
    LONG            reduce using rule 49 (varianceModifier -> IN .)
    ARRAY           reduce using rule 49 (varianceModifier -> IN .)


state 273

    (50) varianceModifier -> OUT .

    IN              reduce using rule 50 (varianceModifier -> OUT .)
    OUT             reduce using rule 50 (varianceModifier -> OUT .)
    SUSPEND         reduce using rule 50 (varianceModifier -> OUT .)
    LPAREN          reduce using rule 50 (varianceModifier -> OUT .)
    ID              reduce using rule 50 (varianceModifier -> OUT .)
    CROSSINLINE     reduce using rule 50 (varianceModifier -> OUT .)
    IMPORT          reduce using rule 50 (varianceModifier -> OUT .)
    INIT            reduce using rule 50 (varianceModifier -> OUT .)
    NOINLINE        reduce using rule 50 (varianceModifier -> OUT .)
    VARARG          reduce using rule 50 (varianceModifier -> OUT .)
    WHERE           reduce using rule 50 (varianceModifier -> OUT .)
    OBJECT          reduce using rule 50 (varianceModifier -> OUT .)
    CONST           reduce using rule 50 (varianceModifier -> OUT .)
    CONSTRUCTOR     reduce using rule 50 (varianceModifier -> OUT .)
    EOF             reduce using rule 50 (varianceModifier -> OUT .)
    FALSE           reduce using rule 50 (varianceModifier -> OUT .)
    FUNCTION        reduce using rule 50 (varianceModifier -> OUT .)
    NULL            reduce using rule 50 (varianceModifier -> OUT .)
    NULLABLE        reduce using rule 50 (varianceModifier -> OUT .)
    NUMBER          reduce using rule 50 (varianceModifier -> OUT .)
    OPERATOR        reduce using rule 50 (varianceModifier -> OUT .)
    SMARTCAST       reduce using rule 50 (varianceModifier -> OUT .)
    THIS            reduce using rule 50 (varianceModifier -> OUT .)
    TRUE            reduce using rule 50 (varianceModifier -> OUT .)
    VAL             reduce using rule 50 (varianceModifier -> OUT .)
    VAR             reduce using rule 50 (varianceModifier -> OUT .)
    WHEN            reduce using rule 50 (varianceModifier -> OUT .)
    LONG            reduce using rule 50 (varianceModifier -> OUT .)
    ARRAY           reduce using rule 50 (varianceModifier -> OUT .)


state 274

    (148) indexingSuffix -> LCCT indexingSuffixRecursive . RCCT

    RCCT            shift and go to state 342


state 275

    (149) indexingSuffix -> LCCT RCCT .

    ATRIBUICAO      reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    RPAREN          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    INCREMENTO      reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    DECREMENTO      reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MENOR           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    LCCT            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    COLONCOLON      reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    PONTO           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    LPAREN          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    RCHAVE          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    AS              reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MAISIGUAL       reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MENOSIGUAL      reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MODIGUAL        reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MULT            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    DIVIDE          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MOD             reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    PLUS            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MINUS           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    ID              reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    IMPORT          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    INIT            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    NOINLINE        reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    OUT             reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    VARARG          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    WHERE           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    OBJECT          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    CONST           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    CONSTRUCTOR     reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    EOF             reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    FALSE           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    FUNCTION        reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    NULL            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    NULLABLE        reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    NUMBER          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    OPERATOR        reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    SMARTCAST       reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    THIS            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    TRUE            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    VAL             reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    VAR             reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    WHEN            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    LONG            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    ARRAY           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    ELVIS           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    IN              reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    NOT_IN          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    IS              reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    NOT_IS          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MAIOR           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    DIFERENTE       reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    IGUALDADE       reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    AND             reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    OR              reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    FUN             reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    FOR             reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    WHILE           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    DO              reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    IF              reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    RETURN          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    RETURN_AT       reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    CONTINUE        reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    BREAK           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    BREAK_AT        reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    NOT             reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    SUSPEND         reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    COMMA           reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    LCHAVE          reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    RCCT            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    PV              reduce using rule 149 (indexingSuffix -> LCCT RCCT .)
    ELSE            reduce using rule 149 (indexingSuffix -> LCCT RCCT .)


state 276

    (150) indexingSuffixRecursive -> expression .
    (151) indexingSuffixRecursive -> expression . COMMA indexingSuffixRecursive
    (223) jumpExpression -> expression .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RCCT resolved using rule 150 (indexingSuffixRecursive -> expression .)
    RCCT            reduce using rule 150 (indexingSuffixRecursive -> expression .)
    COMMA           shift and go to state 343
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]


state 277

    (152) navigationSuffix -> memberAccessOperator simpleIdentifier . CLASS

    CLASS           shift and go to state 344


state 278

    (153) navigationSuffix -> memberAccessOperator parenthesizedExpression . CLASS

    CLASS           shift and go to state 345


state 279

    (121) asExpression -> prefixUnaryExpression asOperator type .

    INCREMENTO      reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    DECREMENTO      reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOR           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    LCCT            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    COLONCOLON      reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTO           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    LPAREN          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    RCHAVE          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    AS              reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MAISIGUAL       reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOSIGUAL      reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MULTIGUAL       reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIGUAL        reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MODIGUAL        reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MULT            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIDE          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MOD             reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    PLUS            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MINUS           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTOPONTO      reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    ID              reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    CROSSINLINE     reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    IMPORT          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    INIT            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    NOINLINE        reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    OUT             reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    VARARG          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    WHERE           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    OBJECT          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    CONST           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    CONSTRUCTOR     reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    EOF             reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    FALSE           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    FUNCTION        reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    NULL            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    NULLABLE        reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    NUMBER          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    OPERATOR        reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    SMARTCAST       reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    THIS            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    TRUE            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    VAL             reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    VAR             reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    WHEN            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    LONG            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    ARRAY           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    ELVIS           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    IN              reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IN          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    IS              reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IS          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIOR           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MENORIGUAL      reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIORIGUAL      reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    DIFERENTE       reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    IDENTIDADE      reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    IGUALDADE       reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    SEMIDENTIDADE   reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    AND             reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    OR              reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    FUN             reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    FOR             reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    WHILE           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    DO              reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    LITERAL_STRING  reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    IF              reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN_AT       reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE        reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE_AT     reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK_AT        reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT             reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    SUSPEND         reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    COMMA           reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    RPAREN          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    LCHAVE          reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    RCCT            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    PV              reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)
    ELSE            reduce using rule 121 (asExpression -> prefixUnaryExpression asOperator type .)


state 280

    (256) asOperator -> AS asOperator .

    SUSPEND         reduce using rule 256 (asOperator -> AS asOperator .)
    LPAREN          reduce using rule 256 (asOperator -> AS asOperator .)
    ID              reduce using rule 256 (asOperator -> AS asOperator .)
    CROSSINLINE     reduce using rule 256 (asOperator -> AS asOperator .)
    IMPORT          reduce using rule 256 (asOperator -> AS asOperator .)
    INIT            reduce using rule 256 (asOperator -> AS asOperator .)
    NOINLINE        reduce using rule 256 (asOperator -> AS asOperator .)
    OUT             reduce using rule 256 (asOperator -> AS asOperator .)
    VARARG          reduce using rule 256 (asOperator -> AS asOperator .)
    WHERE           reduce using rule 256 (asOperator -> AS asOperator .)
    OBJECT          reduce using rule 256 (asOperator -> AS asOperator .)
    CONST           reduce using rule 256 (asOperator -> AS asOperator .)
    CONSTRUCTOR     reduce using rule 256 (asOperator -> AS asOperator .)
    EOF             reduce using rule 256 (asOperator -> AS asOperator .)
    FALSE           reduce using rule 256 (asOperator -> AS asOperator .)
    FUNCTION        reduce using rule 256 (asOperator -> AS asOperator .)
    NULL            reduce using rule 256 (asOperator -> AS asOperator .)
    NULLABLE        reduce using rule 256 (asOperator -> AS asOperator .)
    NUMBER          reduce using rule 256 (asOperator -> AS asOperator .)
    OPERATOR        reduce using rule 256 (asOperator -> AS asOperator .)
    SMARTCAST       reduce using rule 256 (asOperator -> AS asOperator .)
    THIS            reduce using rule 256 (asOperator -> AS asOperator .)
    TRUE            reduce using rule 256 (asOperator -> AS asOperator .)
    VAL             reduce using rule 256 (asOperator -> AS asOperator .)
    VAR             reduce using rule 256 (asOperator -> AS asOperator .)
    WHEN            reduce using rule 256 (asOperator -> AS asOperator .)
    LONG            reduce using rule 256 (asOperator -> AS asOperator .)
    ARRAY           reduce using rule 256 (asOperator -> AS asOperator .)


state 281

    (83) forStatement_MD -> FOR LPAREN multiVariableDeclaration . IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> FOR LPAREN multiVariableDeclaration . IN expression RPAREN

    IN              shift and go to state 346


state 282

    (85) forStatement_VD -> FOR LPAREN variableDeclaration . IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> FOR LPAREN variableDeclaration . IN expression RPAREN

    IN              shift and go to state 347


state 283

    (141) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .

    ATRIBUICAO      reduce using rule 141 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)
    RPAREN          reduce using rule 141 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)


state 284

    (144) parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .

    MAISIGUAL       reduce using rule 144 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MENOSIGUAL      reduce using rule 144 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MULTIGUAL       reduce using rule 144 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    DIVIGUAL        reduce using rule 144 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MODIGUAL        reduce using rule 144 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    RPAREN          reduce using rule 144 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)


state 285

    (180) parenthesizedExpression -> LPAREN expression RPAREN .

    INCREMENTO      reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCCT            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTO           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AS              reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULT            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ID              reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    INIT            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OUT             reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VARARG          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHERE           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OBJECT          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONSTRUCTOR     reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    EOF             reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NULL            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NULLABLE        reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OPERATOR        reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SMARTCAST       reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    THIS            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAL             reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LONG            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ARRAY           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELVIS           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IN              reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IS              reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AND             reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OR              reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FUN             reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DO              reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IF              reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCCT            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PV              reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 180 (parenthesizedExpression -> LPAREN expression RPAREN .)


state 286

    (87) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (88) whileStatement -> WHILE LPAREN expression . RPAREN PV
    (223) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 348
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 287

    (89) doWhileStatement -> DO controlStructureBody WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 349


state 288

    (90) doWhileStatement -> DO WHILE LPAREN . expression RPAREN
    (87) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (88) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 350
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 289

    (95) disjunction -> conjunction OR disjunction .
    (93) expression -> disjunction .

  ! reduce/reduce conflict for FUN resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for FOR resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for WHILE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for DO resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for VAR resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for VAL resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for ID resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for IMPORT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for INIT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for OUT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for VARARG resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for WHERE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for OBJECT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for CONST resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for EOF resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for FALSE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for NULL resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for NUMBER resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for THIS resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for TRUE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for WHEN resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for LONG resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for ARRAY resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for LPAREN resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for LCCT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for IF resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for RETURN resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for BREAK resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MINUS resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for PLUS resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for NOT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MENOR resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for PONTO resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for AS resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MULT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MOD resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for ELVIS resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for IN resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for IS resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MAIOR resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for AND resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for OR resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for COMMA resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for RPAREN resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for RCCT resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for PV resolved using rule 93 (expression -> disjunction .)
  ! reduce/reduce conflict for ELSE resolved using rule 93 (expression -> disjunction .)
    FUN             reduce using rule 93 (expression -> disjunction .)
    FOR             reduce using rule 93 (expression -> disjunction .)
    WHILE           reduce using rule 93 (expression -> disjunction .)
    DO              reduce using rule 93 (expression -> disjunction .)
    VAR             reduce using rule 93 (expression -> disjunction .)
    VAL             reduce using rule 93 (expression -> disjunction .)
    ID              reduce using rule 93 (expression -> disjunction .)
    CROSSINLINE     reduce using rule 93 (expression -> disjunction .)
    IMPORT          reduce using rule 93 (expression -> disjunction .)
    INIT            reduce using rule 93 (expression -> disjunction .)
    NOINLINE        reduce using rule 93 (expression -> disjunction .)
    OUT             reduce using rule 93 (expression -> disjunction .)
    VARARG          reduce using rule 93 (expression -> disjunction .)
    WHERE           reduce using rule 93 (expression -> disjunction .)
    OBJECT          reduce using rule 93 (expression -> disjunction .)
    CONST           reduce using rule 93 (expression -> disjunction .)
    CONSTRUCTOR     reduce using rule 93 (expression -> disjunction .)
    EOF             reduce using rule 93 (expression -> disjunction .)
    FALSE           reduce using rule 93 (expression -> disjunction .)
    FUNCTION        reduce using rule 93 (expression -> disjunction .)
    NULL            reduce using rule 93 (expression -> disjunction .)
    NULLABLE        reduce using rule 93 (expression -> disjunction .)
    NUMBER          reduce using rule 93 (expression -> disjunction .)
    OPERATOR        reduce using rule 93 (expression -> disjunction .)
    SMARTCAST       reduce using rule 93 (expression -> disjunction .)
    THIS            reduce using rule 93 (expression -> disjunction .)
    TRUE            reduce using rule 93 (expression -> disjunction .)
    WHEN            reduce using rule 93 (expression -> disjunction .)
    LONG            reduce using rule 93 (expression -> disjunction .)
    ARRAY           reduce using rule 93 (expression -> disjunction .)
    LPAREN          reduce using rule 93 (expression -> disjunction .)
    LITERAL_STRING  reduce using rule 93 (expression -> disjunction .)
    LCCT            reduce using rule 93 (expression -> disjunction .)
    IF              reduce using rule 93 (expression -> disjunction .)
    RETURN          reduce using rule 93 (expression -> disjunction .)
    RETURN_AT       reduce using rule 93 (expression -> disjunction .)
    CONTINUE        reduce using rule 93 (expression -> disjunction .)
    CONTINUE_AT     reduce using rule 93 (expression -> disjunction .)
    BREAK           reduce using rule 93 (expression -> disjunction .)
    BREAK_AT        reduce using rule 93 (expression -> disjunction .)
    RCHAVE          reduce using rule 93 (expression -> disjunction .)
    INCREMENTO      reduce using rule 93 (expression -> disjunction .)
    DECREMENTO      reduce using rule 93 (expression -> disjunction .)
    MINUS           reduce using rule 93 (expression -> disjunction .)
    PLUS            reduce using rule 93 (expression -> disjunction .)
    NOT             reduce using rule 93 (expression -> disjunction .)
    SUSPEND         reduce using rule 93 (expression -> disjunction .)
    COLONCOLON      reduce using rule 93 (expression -> disjunction .)
    LCHAVE          reduce using rule 93 (expression -> disjunction .)
    MENOR           reduce using rule 93 (expression -> disjunction .)
    PONTO           reduce using rule 93 (expression -> disjunction .)
    AS              reduce using rule 93 (expression -> disjunction .)
    MAISIGUAL       reduce using rule 93 (expression -> disjunction .)
    MENOSIGUAL      reduce using rule 93 (expression -> disjunction .)
    MULTIGUAL       reduce using rule 93 (expression -> disjunction .)
    DIVIGUAL        reduce using rule 93 (expression -> disjunction .)
    MODIGUAL        reduce using rule 93 (expression -> disjunction .)
    MULT            reduce using rule 93 (expression -> disjunction .)
    DIVIDE          reduce using rule 93 (expression -> disjunction .)
    MOD             reduce using rule 93 (expression -> disjunction .)
    PONTOPONTO      reduce using rule 93 (expression -> disjunction .)
    ELVIS           reduce using rule 93 (expression -> disjunction .)
    IN              reduce using rule 93 (expression -> disjunction .)
    NOT_IN          reduce using rule 93 (expression -> disjunction .)
    IS              reduce using rule 93 (expression -> disjunction .)
    NOT_IS          reduce using rule 93 (expression -> disjunction .)
    MAIOR           reduce using rule 93 (expression -> disjunction .)
    MENORIGUAL      reduce using rule 93 (expression -> disjunction .)
    MAIORIGUAL      reduce using rule 93 (expression -> disjunction .)
    DIFERENTE       reduce using rule 93 (expression -> disjunction .)
    IDENTIDADE      reduce using rule 93 (expression -> disjunction .)
    IGUALDADE       reduce using rule 93 (expression -> disjunction .)
    SEMIDENTIDADE   reduce using rule 93 (expression -> disjunction .)
    AND             reduce using rule 93 (expression -> disjunction .)
    OR              reduce using rule 93 (expression -> disjunction .)
    COMMA           reduce using rule 93 (expression -> disjunction .)
    RPAREN          reduce using rule 93 (expression -> disjunction .)
    RCCT            reduce using rule 93 (expression -> disjunction .)
    PV              reduce using rule 93 (expression -> disjunction .)
    ELSE            reduce using rule 93 (expression -> disjunction .)

  ! INCREMENTO      [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! DECREMENTO      [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MENOR           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! LCCT            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! COLONCOLON      [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! PONTO           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! LPAREN          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! RCHAVE          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! AS              [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MAISIGUAL       [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MENOSIGUAL      [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MULTIGUAL       [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! DIVIGUAL        [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MODIGUAL        [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MULT            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! DIVIDE          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MOD             [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! PLUS            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MINUS           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! PONTOPONTO      [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! ID              [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! CROSSINLINE     [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! IMPORT          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! INIT            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! NOINLINE        [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! OUT             [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! VARARG          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! WHERE           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! OBJECT          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! CONST           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! CONSTRUCTOR     [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! EOF             [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! FALSE           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! FUNCTION        [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! NULL            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! NULLABLE        [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! NUMBER          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! OPERATOR        [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! SMARTCAST       [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! THIS            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! TRUE            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! VAL             [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! VAR             [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! WHEN            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! LONG            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! ARRAY           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! ELVIS           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! IN              [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! NOT_IN          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! IS              [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! NOT_IS          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MAIOR           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MENORIGUAL      [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! MAIORIGUAL      [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! DIFERENTE       [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! IDENTIDADE      [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! IGUALDADE       [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! SEMIDENTIDADE   [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! AND             [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! OR              [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! FUN             [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! FOR             [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! WHILE           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! DO              [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! LITERAL_STRING  [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! IF              [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! RETURN          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! RETURN_AT       [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! CONTINUE        [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! CONTINUE_AT     [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! BREAK           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! BREAK_AT        [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! NOT             [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! SUSPEND         [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! COMMA           [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! RPAREN          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! LCHAVE          [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! RCCT            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! PV              [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]
  ! ELSE            [ reduce using rule 95 (disjunction -> conjunction OR disjunction .) ]


state 290

    (130) postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .

    INCREMENTO      reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DECREMENTO      reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENOR           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LCCT            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PONTO           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RCHAVE          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    AS              reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAISIGUAL       reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENOSIGUAL      reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MULTIGUAL       reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIVIGUAL        reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MODIGUAL        reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MULT            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIVIDE          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MOD             reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PLUS            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MINUS           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PONTOPONTO      reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ID              reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    INIT            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OUT             reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VARARG          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    WHERE           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OBJECT          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONST           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONSTRUCTOR     reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    EOF             reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FALSE           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FUNCTION        reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NULL            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NULLABLE        reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    SMARTCAST       reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    THIS            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    TRUE            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VAL             reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VAR             reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    WHEN            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LONG            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ARRAY           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ELVIS           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IN              reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT_IN          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IS              reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT_IS          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAIOR           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENORIGUAL      reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAIORIGUAL      reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIFERENTE       reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IDENTIDADE      reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IGUALDADE       reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    SEMIDENTIDADE   reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    AND             reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OR              reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FUN             reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FOR             reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    WHILE           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DO              reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LITERAL_STRING  reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IF              reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RETURN          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    BREAK           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT             reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    COMMA           reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RPAREN          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LCHAVE          reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RCCT            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PV              reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ELSE            reduce using rule 130 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)


state 291

    (154) callSuffix -> optionalTypeArguments optionalValueArguments . annotatedLambda
    (155) callSuffix -> optionalTypeArguments optionalValueArguments .
    (160) annotatedLambda -> . lambdaLiteral
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE

  ! shift/reduce conflict for RCHAVE resolved as shift
    INCREMENTO      reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DECREMENTO      reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MENOR           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LCCT            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    COLONCOLON      reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PONTO           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LPAREN          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    AS              reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MAISIGUAL       reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MENOSIGUAL      reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MULTIGUAL       reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DIVIGUAL        reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MODIGUAL        reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MULT            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DIVIDE          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MOD             reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PLUS            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MINUS           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PONTOPONTO      reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ID              reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CROSSINLINE     reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IMPORT          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    INIT            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOINLINE        reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OUT             reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    VARARG          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    WHERE           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OBJECT          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CONST           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CONSTRUCTOR     reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    EOF             reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    FALSE           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    FUNCTION        reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NULL            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NULLABLE        reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NUMBER          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OPERATOR        reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    SMARTCAST       reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    THIS            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    TRUE            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    VAL             reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    VAR             reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    WHEN            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LONG            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ARRAY           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ELVIS           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IN              reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOT_IN          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IS              reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOT_IS          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MAIOR           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MENORIGUAL      reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MAIORIGUAL      reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DIFERENTE       reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IDENTIDADE      reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IGUALDADE       reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    SEMIDENTIDADE   reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    AND             reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OR              reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    FUN             reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    FOR             reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    WHILE           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DO              reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LITERAL_STRING  reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IF              reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RETURN          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RETURN_AT       reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CONTINUE        reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CONTINUE_AT     reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    BREAK           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    BREAK_AT        reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOT             reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    SUSPEND         reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    COMMA           reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RPAREN          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LCHAVE          reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RCCT            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PV              reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ELSE            reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RCHAVE          shift and go to state 55

  ! RCHAVE          [ reduce using rule 155 (callSuffix -> optionalTypeArguments optionalValueArguments .) ]

    annotatedLambda                shift and go to state 351
    lambdaLiteral                  shift and go to state 352

state 292

    (158) optionalValueArguments -> valueArguments .

    RCHAVE          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    INCREMENTO      reduce using rule 158 (optionalValueArguments -> valueArguments .)
    DECREMENTO      reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MENOR           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    LCCT            reduce using rule 158 (optionalValueArguments -> valueArguments .)
    COLONCOLON      reduce using rule 158 (optionalValueArguments -> valueArguments .)
    PONTO           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    LPAREN          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    AS              reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MAISIGUAL       reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MENOSIGUAL      reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MULTIGUAL       reduce using rule 158 (optionalValueArguments -> valueArguments .)
    DIVIGUAL        reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MODIGUAL        reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MULT            reduce using rule 158 (optionalValueArguments -> valueArguments .)
    DIVIDE          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MOD             reduce using rule 158 (optionalValueArguments -> valueArguments .)
    PLUS            reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MINUS           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    PONTOPONTO      reduce using rule 158 (optionalValueArguments -> valueArguments .)
    ID              reduce using rule 158 (optionalValueArguments -> valueArguments .)
    CROSSINLINE     reduce using rule 158 (optionalValueArguments -> valueArguments .)
    IMPORT          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    INIT            reduce using rule 158 (optionalValueArguments -> valueArguments .)
    NOINLINE        reduce using rule 158 (optionalValueArguments -> valueArguments .)
    OUT             reduce using rule 158 (optionalValueArguments -> valueArguments .)
    VARARG          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    WHERE           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    OBJECT          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    CONST           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    CONSTRUCTOR     reduce using rule 158 (optionalValueArguments -> valueArguments .)
    EOF             reduce using rule 158 (optionalValueArguments -> valueArguments .)
    FALSE           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    FUNCTION        reduce using rule 158 (optionalValueArguments -> valueArguments .)
    NULL            reduce using rule 158 (optionalValueArguments -> valueArguments .)
    NULLABLE        reduce using rule 158 (optionalValueArguments -> valueArguments .)
    NUMBER          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    OPERATOR        reduce using rule 158 (optionalValueArguments -> valueArguments .)
    SMARTCAST       reduce using rule 158 (optionalValueArguments -> valueArguments .)
    THIS            reduce using rule 158 (optionalValueArguments -> valueArguments .)
    TRUE            reduce using rule 158 (optionalValueArguments -> valueArguments .)
    VAL             reduce using rule 158 (optionalValueArguments -> valueArguments .)
    VAR             reduce using rule 158 (optionalValueArguments -> valueArguments .)
    WHEN            reduce using rule 158 (optionalValueArguments -> valueArguments .)
    LONG            reduce using rule 158 (optionalValueArguments -> valueArguments .)
    ARRAY           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    ELVIS           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    IN              reduce using rule 158 (optionalValueArguments -> valueArguments .)
    NOT_IN          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    IS              reduce using rule 158 (optionalValueArguments -> valueArguments .)
    NOT_IS          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MAIOR           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MENORIGUAL      reduce using rule 158 (optionalValueArguments -> valueArguments .)
    MAIORIGUAL      reduce using rule 158 (optionalValueArguments -> valueArguments .)
    DIFERENTE       reduce using rule 158 (optionalValueArguments -> valueArguments .)
    IDENTIDADE      reduce using rule 158 (optionalValueArguments -> valueArguments .)
    IGUALDADE       reduce using rule 158 (optionalValueArguments -> valueArguments .)
    SEMIDENTIDADE   reduce using rule 158 (optionalValueArguments -> valueArguments .)
    AND             reduce using rule 158 (optionalValueArguments -> valueArguments .)
    OR              reduce using rule 158 (optionalValueArguments -> valueArguments .)
    FUN             reduce using rule 158 (optionalValueArguments -> valueArguments .)
    FOR             reduce using rule 158 (optionalValueArguments -> valueArguments .)
    WHILE           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    DO              reduce using rule 158 (optionalValueArguments -> valueArguments .)
    LITERAL_STRING  reduce using rule 158 (optionalValueArguments -> valueArguments .)
    IF              reduce using rule 158 (optionalValueArguments -> valueArguments .)
    RETURN          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    RETURN_AT       reduce using rule 158 (optionalValueArguments -> valueArguments .)
    CONTINUE        reduce using rule 158 (optionalValueArguments -> valueArguments .)
    CONTINUE_AT     reduce using rule 158 (optionalValueArguments -> valueArguments .)
    BREAK           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    BREAK_AT        reduce using rule 158 (optionalValueArguments -> valueArguments .)
    NOT             reduce using rule 158 (optionalValueArguments -> valueArguments .)
    SUSPEND         reduce using rule 158 (optionalValueArguments -> valueArguments .)
    COMMA           reduce using rule 158 (optionalValueArguments -> valueArguments .)
    RPAREN          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    LCHAVE          reduce using rule 158 (optionalValueArguments -> valueArguments .)
    RCCT            reduce using rule 158 (optionalValueArguments -> valueArguments .)
    PV              reduce using rule 158 (optionalValueArguments -> valueArguments .)
    ELSE            reduce using rule 158 (optionalValueArguments -> valueArguments .)


state 293

    (167) valueArguments -> LPAREN . RPAREN
    (168) valueArguments -> LPAREN . valueArgumentsRecursive RPAREN
    (165) valueArgumentsRecursive -> . valueArgument
    (166) valueArgumentsRecursive -> . valueArgument COMMA valueArgumentsRecursive
    (169) valueArgument -> . simpleIdentifier IGUALDADE MULT expression
    (170) valueArgument -> . simpleIdentifier IGUALDADE expression
    (171) valueArgument -> . expression
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    RPAREN          shift and go to state 353
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    valueArgumentsRecursive        shift and go to state 354
    valueArgument                  shift and go to state 355
    simpleIdentifier               shift and go to state 356
    expression                     shift and go to state 357
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 294

    (97) conjunction -> equality AND conjunction .
    (94) disjunction -> conjunction .
    (95) disjunction -> conjunction . OR disjunction

  ! reduce/reduce conflict for FUN resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for FOR resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for WHILE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DO resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for VAR resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for VAL resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ID resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IMPORT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for INIT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OUT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for VARARG resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for WHERE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OBJECT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONST resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for EOF resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for FALSE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NULL resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NUMBER resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for THIS resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for TRUE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for WHEN resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LONG resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ARRAY resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LPAREN resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LCCT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IF resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RETURN resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for BREAK resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MINUS resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PLUS resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MENOR resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PONTO resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for AS resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MULT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MOD resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ELVIS resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IN resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IS resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MAIOR resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for AND resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for OR resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for COMMA resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RPAREN resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for RCCT resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for PV resolved using rule 94 (disjunction -> conjunction .)
  ! reduce/reduce conflict for ELSE resolved using rule 94 (disjunction -> conjunction .)
  ! shift/reduce conflict for OR resolved as shift
    FUN             reduce using rule 94 (disjunction -> conjunction .)
    FOR             reduce using rule 94 (disjunction -> conjunction .)
    WHILE           reduce using rule 94 (disjunction -> conjunction .)
    DO              reduce using rule 94 (disjunction -> conjunction .)
    VAR             reduce using rule 94 (disjunction -> conjunction .)
    VAL             reduce using rule 94 (disjunction -> conjunction .)
    ID              reduce using rule 94 (disjunction -> conjunction .)
    CROSSINLINE     reduce using rule 94 (disjunction -> conjunction .)
    IMPORT          reduce using rule 94 (disjunction -> conjunction .)
    INIT            reduce using rule 94 (disjunction -> conjunction .)
    NOINLINE        reduce using rule 94 (disjunction -> conjunction .)
    OUT             reduce using rule 94 (disjunction -> conjunction .)
    VARARG          reduce using rule 94 (disjunction -> conjunction .)
    WHERE           reduce using rule 94 (disjunction -> conjunction .)
    OBJECT          reduce using rule 94 (disjunction -> conjunction .)
    CONST           reduce using rule 94 (disjunction -> conjunction .)
    CONSTRUCTOR     reduce using rule 94 (disjunction -> conjunction .)
    EOF             reduce using rule 94 (disjunction -> conjunction .)
    FALSE           reduce using rule 94 (disjunction -> conjunction .)
    FUNCTION        reduce using rule 94 (disjunction -> conjunction .)
    NULL            reduce using rule 94 (disjunction -> conjunction .)
    NULLABLE        reduce using rule 94 (disjunction -> conjunction .)
    NUMBER          reduce using rule 94 (disjunction -> conjunction .)
    OPERATOR        reduce using rule 94 (disjunction -> conjunction .)
    SMARTCAST       reduce using rule 94 (disjunction -> conjunction .)
    THIS            reduce using rule 94 (disjunction -> conjunction .)
    TRUE            reduce using rule 94 (disjunction -> conjunction .)
    WHEN            reduce using rule 94 (disjunction -> conjunction .)
    LONG            reduce using rule 94 (disjunction -> conjunction .)
    ARRAY           reduce using rule 94 (disjunction -> conjunction .)
    LPAREN          reduce using rule 94 (disjunction -> conjunction .)
    LITERAL_STRING  reduce using rule 94 (disjunction -> conjunction .)
    LCCT            reduce using rule 94 (disjunction -> conjunction .)
    IF              reduce using rule 94 (disjunction -> conjunction .)
    RETURN          reduce using rule 94 (disjunction -> conjunction .)
    RETURN_AT       reduce using rule 94 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 94 (disjunction -> conjunction .)
    CONTINUE_AT     reduce using rule 94 (disjunction -> conjunction .)
    BREAK           reduce using rule 94 (disjunction -> conjunction .)
    BREAK_AT        reduce using rule 94 (disjunction -> conjunction .)
    RCHAVE          reduce using rule 94 (disjunction -> conjunction .)
    INCREMENTO      reduce using rule 94 (disjunction -> conjunction .)
    DECREMENTO      reduce using rule 94 (disjunction -> conjunction .)
    MINUS           reduce using rule 94 (disjunction -> conjunction .)
    PLUS            reduce using rule 94 (disjunction -> conjunction .)
    NOT             reduce using rule 94 (disjunction -> conjunction .)
    SUSPEND         reduce using rule 94 (disjunction -> conjunction .)
    COLONCOLON      reduce using rule 94 (disjunction -> conjunction .)
    LCHAVE          reduce using rule 94 (disjunction -> conjunction .)
    MENOR           reduce using rule 94 (disjunction -> conjunction .)
    PONTO           reduce using rule 94 (disjunction -> conjunction .)
    AS              reduce using rule 94 (disjunction -> conjunction .)
    MAISIGUAL       reduce using rule 94 (disjunction -> conjunction .)
    MENOSIGUAL      reduce using rule 94 (disjunction -> conjunction .)
    MULTIGUAL       reduce using rule 94 (disjunction -> conjunction .)
    DIVIGUAL        reduce using rule 94 (disjunction -> conjunction .)
    MODIGUAL        reduce using rule 94 (disjunction -> conjunction .)
    MULT            reduce using rule 94 (disjunction -> conjunction .)
    DIVIDE          reduce using rule 94 (disjunction -> conjunction .)
    MOD             reduce using rule 94 (disjunction -> conjunction .)
    PONTOPONTO      reduce using rule 94 (disjunction -> conjunction .)
    ELVIS           reduce using rule 94 (disjunction -> conjunction .)
    IN              reduce using rule 94 (disjunction -> conjunction .)
    NOT_IN          reduce using rule 94 (disjunction -> conjunction .)
    IS              reduce using rule 94 (disjunction -> conjunction .)
    NOT_IS          reduce using rule 94 (disjunction -> conjunction .)
    MAIOR           reduce using rule 94 (disjunction -> conjunction .)
    MENORIGUAL      reduce using rule 94 (disjunction -> conjunction .)
    MAIORIGUAL      reduce using rule 94 (disjunction -> conjunction .)
    DIFERENTE       reduce using rule 94 (disjunction -> conjunction .)
    IDENTIDADE      reduce using rule 94 (disjunction -> conjunction .)
    IGUALDADE       reduce using rule 94 (disjunction -> conjunction .)
    SEMIDENTIDADE   reduce using rule 94 (disjunction -> conjunction .)
    AND             reduce using rule 94 (disjunction -> conjunction .)
    COMMA           reduce using rule 94 (disjunction -> conjunction .)
    RPAREN          reduce using rule 94 (disjunction -> conjunction .)
    RCCT            reduce using rule 94 (disjunction -> conjunction .)
    PV              reduce using rule 94 (disjunction -> conjunction .)
    ELSE            reduce using rule 94 (disjunction -> conjunction .)
    OR              shift and go to state 184

  ! INCREMENTO      [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! DECREMENTO      [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MENOR           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! LCCT            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! COLONCOLON      [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! PONTO           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! LPAREN          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! RCHAVE          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! AS              [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MAISIGUAL       [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MENOSIGUAL      [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MULTIGUAL       [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! DIVIGUAL        [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MODIGUAL        [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MULT            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! DIVIDE          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MOD             [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! PLUS            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MINUS           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! PONTOPONTO      [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! ID              [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! CROSSINLINE     [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! IMPORT          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! INIT            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! NOINLINE        [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! OUT             [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! VARARG          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! WHERE           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! OBJECT          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! CONST           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! CONSTRUCTOR     [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! EOF             [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! FALSE           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! FUNCTION        [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! NULL            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! NULLABLE        [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! NUMBER          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! OPERATOR        [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! SMARTCAST       [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! THIS            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! TRUE            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! VAL             [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! VAR             [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! WHEN            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! LONG            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! ARRAY           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! ELVIS           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! IN              [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! NOT_IN          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! IS              [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! NOT_IS          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MAIOR           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MENORIGUAL      [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! MAIORIGUAL      [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! DIFERENTE       [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! IDENTIDADE      [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! IGUALDADE       [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! SEMIDENTIDADE   [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! AND             [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! OR              [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! FUN             [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! FOR             [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! WHILE           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! DO              [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! LITERAL_STRING  [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! IF              [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! RETURN          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! RETURN_AT       [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! CONTINUE        [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! CONTINUE_AT     [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! BREAK           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! BREAK_AT        [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! NOT             [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! SUSPEND         [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! COMMA           [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! RPAREN          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! LCHAVE          [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! RCCT            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! PV              [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! ELSE            [ reduce using rule 97 (conjunction -> equality AND conjunction .) ]
  ! OR              [ reduce using rule 94 (disjunction -> conjunction .) ]


state 295

    (99) equality -> comparison equalityOperator equality .
    (96) conjunction -> equality .
    (97) conjunction -> equality . AND conjunction

  ! reduce/reduce conflict for FUN resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for FOR resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for WHILE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for DO resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for VAR resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for VAL resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for ID resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for IMPORT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for INIT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for OUT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for VARARG resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for WHERE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for OBJECT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for CONST resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for EOF resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for FALSE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for NULL resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for NUMBER resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for THIS resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for TRUE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for WHEN resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for LONG resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for ARRAY resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for LPAREN resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for LCCT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for IF resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for RETURN resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for BREAK resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MINUS resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for PLUS resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for NOT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MENOR resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for PONTO resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for AS resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MULT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MOD resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for ELVIS resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for IN resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for IS resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MAIOR resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for AND resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for OR resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for COMMA resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for RPAREN resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for RCCT resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for PV resolved using rule 96 (conjunction -> equality .)
  ! reduce/reduce conflict for ELSE resolved using rule 96 (conjunction -> equality .)
  ! shift/reduce conflict for AND resolved as shift
    FUN             reduce using rule 96 (conjunction -> equality .)
    FOR             reduce using rule 96 (conjunction -> equality .)
    WHILE           reduce using rule 96 (conjunction -> equality .)
    DO              reduce using rule 96 (conjunction -> equality .)
    VAR             reduce using rule 96 (conjunction -> equality .)
    VAL             reduce using rule 96 (conjunction -> equality .)
    ID              reduce using rule 96 (conjunction -> equality .)
    CROSSINLINE     reduce using rule 96 (conjunction -> equality .)
    IMPORT          reduce using rule 96 (conjunction -> equality .)
    INIT            reduce using rule 96 (conjunction -> equality .)
    NOINLINE        reduce using rule 96 (conjunction -> equality .)
    OUT             reduce using rule 96 (conjunction -> equality .)
    VARARG          reduce using rule 96 (conjunction -> equality .)
    WHERE           reduce using rule 96 (conjunction -> equality .)
    OBJECT          reduce using rule 96 (conjunction -> equality .)
    CONST           reduce using rule 96 (conjunction -> equality .)
    CONSTRUCTOR     reduce using rule 96 (conjunction -> equality .)
    EOF             reduce using rule 96 (conjunction -> equality .)
    FALSE           reduce using rule 96 (conjunction -> equality .)
    FUNCTION        reduce using rule 96 (conjunction -> equality .)
    NULL            reduce using rule 96 (conjunction -> equality .)
    NULLABLE        reduce using rule 96 (conjunction -> equality .)
    NUMBER          reduce using rule 96 (conjunction -> equality .)
    OPERATOR        reduce using rule 96 (conjunction -> equality .)
    SMARTCAST       reduce using rule 96 (conjunction -> equality .)
    THIS            reduce using rule 96 (conjunction -> equality .)
    TRUE            reduce using rule 96 (conjunction -> equality .)
    WHEN            reduce using rule 96 (conjunction -> equality .)
    LONG            reduce using rule 96 (conjunction -> equality .)
    ARRAY           reduce using rule 96 (conjunction -> equality .)
    LPAREN          reduce using rule 96 (conjunction -> equality .)
    LITERAL_STRING  reduce using rule 96 (conjunction -> equality .)
    LCCT            reduce using rule 96 (conjunction -> equality .)
    IF              reduce using rule 96 (conjunction -> equality .)
    RETURN          reduce using rule 96 (conjunction -> equality .)
    RETURN_AT       reduce using rule 96 (conjunction -> equality .)
    CONTINUE        reduce using rule 96 (conjunction -> equality .)
    CONTINUE_AT     reduce using rule 96 (conjunction -> equality .)
    BREAK           reduce using rule 96 (conjunction -> equality .)
    BREAK_AT        reduce using rule 96 (conjunction -> equality .)
    RCHAVE          reduce using rule 96 (conjunction -> equality .)
    INCREMENTO      reduce using rule 96 (conjunction -> equality .)
    DECREMENTO      reduce using rule 96 (conjunction -> equality .)
    MINUS           reduce using rule 96 (conjunction -> equality .)
    PLUS            reduce using rule 96 (conjunction -> equality .)
    NOT             reduce using rule 96 (conjunction -> equality .)
    SUSPEND         reduce using rule 96 (conjunction -> equality .)
    COLONCOLON      reduce using rule 96 (conjunction -> equality .)
    LCHAVE          reduce using rule 96 (conjunction -> equality .)
    MENOR           reduce using rule 96 (conjunction -> equality .)
    PONTO           reduce using rule 96 (conjunction -> equality .)
    AS              reduce using rule 96 (conjunction -> equality .)
    MAISIGUAL       reduce using rule 96 (conjunction -> equality .)
    MENOSIGUAL      reduce using rule 96 (conjunction -> equality .)
    MULTIGUAL       reduce using rule 96 (conjunction -> equality .)
    DIVIGUAL        reduce using rule 96 (conjunction -> equality .)
    MODIGUAL        reduce using rule 96 (conjunction -> equality .)
    MULT            reduce using rule 96 (conjunction -> equality .)
    DIVIDE          reduce using rule 96 (conjunction -> equality .)
    MOD             reduce using rule 96 (conjunction -> equality .)
    PONTOPONTO      reduce using rule 96 (conjunction -> equality .)
    ELVIS           reduce using rule 96 (conjunction -> equality .)
    IN              reduce using rule 96 (conjunction -> equality .)
    NOT_IN          reduce using rule 96 (conjunction -> equality .)
    IS              reduce using rule 96 (conjunction -> equality .)
    NOT_IS          reduce using rule 96 (conjunction -> equality .)
    MAIOR           reduce using rule 96 (conjunction -> equality .)
    MENORIGUAL      reduce using rule 96 (conjunction -> equality .)
    MAIORIGUAL      reduce using rule 96 (conjunction -> equality .)
    DIFERENTE       reduce using rule 96 (conjunction -> equality .)
    IDENTIDADE      reduce using rule 96 (conjunction -> equality .)
    IGUALDADE       reduce using rule 96 (conjunction -> equality .)
    SEMIDENTIDADE   reduce using rule 96 (conjunction -> equality .)
    OR              reduce using rule 96 (conjunction -> equality .)
    COMMA           reduce using rule 96 (conjunction -> equality .)
    RPAREN          reduce using rule 96 (conjunction -> equality .)
    RCCT            reduce using rule 96 (conjunction -> equality .)
    PV              reduce using rule 96 (conjunction -> equality .)
    ELSE            reduce using rule 96 (conjunction -> equality .)
    AND             shift and go to state 197

  ! INCREMENTO      [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! DECREMENTO      [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MENOR           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! LCCT            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! COLONCOLON      [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! PONTO           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! LPAREN          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! RCHAVE          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! AS              [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MAISIGUAL       [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MENOSIGUAL      [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MULTIGUAL       [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! DIVIGUAL        [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MODIGUAL        [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MULT            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! DIVIDE          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MOD             [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! PLUS            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MINUS           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! PONTOPONTO      [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! ID              [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! CROSSINLINE     [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! IMPORT          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! INIT            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! NOINLINE        [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! OUT             [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! VARARG          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! WHERE           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! OBJECT          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! CONST           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! CONSTRUCTOR     [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! EOF             [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! FALSE           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! FUNCTION        [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! NULL            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! NULLABLE        [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! NUMBER          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! OPERATOR        [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! SMARTCAST       [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! THIS            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! TRUE            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! VAL             [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! VAR             [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! WHEN            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! LONG            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! ARRAY           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! ELVIS           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! IN              [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! NOT_IN          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! IS              [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! NOT_IS          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MAIOR           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MENORIGUAL      [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! MAIORIGUAL      [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! DIFERENTE       [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! IDENTIDADE      [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! IGUALDADE       [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! SEMIDENTIDADE   [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! AND             [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! OR              [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! FUN             [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! FOR             [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! WHILE           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! DO              [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! LITERAL_STRING  [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! IF              [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! RETURN          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! RETURN_AT       [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! CONTINUE        [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! CONTINUE_AT     [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! BREAK           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! BREAK_AT        [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! NOT             [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! SUSPEND         [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! COMMA           [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! RPAREN          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! LCHAVE          [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! RCCT            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! PV              [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! ELSE            [ reduce using rule 99 (equality -> comparison equalityOperator equality .) ]
  ! AND             [ reduce using rule 96 (conjunction -> equality .) ]


state 296

    (228) callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .

    INCREMENTO      reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DECREMENTO      reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MENOR           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LCCT            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    COLONCOLON      reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PONTO           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LPAREN          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RCHAVE          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    AS              reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MAISIGUAL       reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MENOSIGUAL      reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MULTIGUAL       reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DIVIGUAL        reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MODIGUAL        reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MULT            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DIVIDE          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MOD             reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PLUS            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MINUS           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PONTOPONTO      reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ID              reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CROSSINLINE     reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IMPORT          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    INIT            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOINLINE        reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OUT             reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    VARARG          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    WHERE           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OBJECT          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CONST           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CONSTRUCTOR     reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    EOF             reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    FALSE           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    FUNCTION        reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NULL            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NULLABLE        reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NUMBER          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OPERATOR        reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    SMARTCAST       reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    THIS            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    TRUE            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    VAL             reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    VAR             reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    WHEN            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LONG            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ARRAY           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ELVIS           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IN              reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOT_IN          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IS              reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOT_IS          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MAIOR           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MENORIGUAL      reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MAIORIGUAL      reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DIFERENTE       reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IDENTIDADE      reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IGUALDADE       reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    SEMIDENTIDADE   reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    AND             reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OR              reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    FUN             reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    FOR             reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    WHILE           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DO              reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LITERAL_STRING  reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IF              reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RETURN          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RETURN_AT       reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CONTINUE        reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CONTINUE_AT     reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    BREAK           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    BREAK_AT        reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOT             reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    SUSPEND         reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    COMMA           reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RPAREN          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LCHAVE          reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RCCT            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PV              reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ELSE            reduce using rule 228 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)


state 297

    (231) simpleIdentifierOrClass -> simpleIdentifier .

    INCREMENTO      reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    DECREMENTO      reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENOR           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    LCCT            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    COLONCOLON      reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    PONTO           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    LPAREN          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    RCHAVE          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    AS              reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MODIGUAL        reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MULT            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIVIDE          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MOD             reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    PLUS            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MINUS           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    ID              reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    IMPORT          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    INIT            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOINLINE        reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    OUT             reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    VARARG          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    WHERE           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    OBJECT          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONST           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    EOF             reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    FALSE           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    FUNCTION        reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    NULL            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    NULLABLE        reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    NUMBER          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    OPERATOR        reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    SMARTCAST       reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    THIS            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    TRUE            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    VAL             reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    VAR             reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    WHEN            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    LONG            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    ARRAY           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    ELVIS           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    IN              reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT_IN          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    IS              reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT_IS          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAIOR           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIFERENTE       reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    IGUALDADE       reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    AND             reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    OR              reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    FUN             reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    FOR             reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    WHILE           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    DO              reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    IF              reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    RETURN          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    RETURN_AT       reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONTINUE        reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    BREAK           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    BREAK_AT        reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT             reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    SUSPEND         reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    COMMA           reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    RPAREN          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    LCHAVE          reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    RCCT            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    PV              reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)
    ELSE            reduce using rule 231 (simpleIdentifierOrClass -> simpleIdentifier .)


state 298

    (232) simpleIdentifierOrClass -> CLASS .

    INCREMENTO      reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    DECREMENTO      reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MENOR           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    LCCT            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    COLONCOLON      reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    PONTO           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    LPAREN          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    RCHAVE          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    AS              reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MAISIGUAL       reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MENOSIGUAL      reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MULTIGUAL       reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    DIVIGUAL        reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MODIGUAL        reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MULT            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    DIVIDE          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MOD             reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    PLUS            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MINUS           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    PONTOPONTO      reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    ID              reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    CROSSINLINE     reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    IMPORT          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    INIT            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    NOINLINE        reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    OUT             reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    VARARG          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    WHERE           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    OBJECT          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    CONST           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    CONSTRUCTOR     reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    EOF             reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    FALSE           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    FUNCTION        reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    NULL            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    NULLABLE        reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    NUMBER          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    OPERATOR        reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    SMARTCAST       reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    THIS            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    TRUE            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    VAL             reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    VAR             reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    WHEN            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    LONG            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    ARRAY           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    ELVIS           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    IN              reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    NOT_IN          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    IS              reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    NOT_IS          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MAIOR           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MENORIGUAL      reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    MAIORIGUAL      reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    DIFERENTE       reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    IDENTIDADE      reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    IGUALDADE       reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    SEMIDENTIDADE   reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    AND             reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    OR              reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    FUN             reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    FOR             reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    WHILE           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    DO              reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    LITERAL_STRING  reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    IF              reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    RETURN          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    RETURN_AT       reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    CONTINUE        reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    CONTINUE_AT     reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    BREAK           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    BREAK_AT        reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    NOT             reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    SUSPEND         reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    COMMA           reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    RPAREN          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    LCHAVE          reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    RCCT            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    PV              reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)
    ELSE            reduce using rule 232 (simpleIdentifierOrClass -> CLASS .)


state 299

    (181) collectionLiteral -> LCCT collectionLiteralRecursive RCCT .

    INCREMENTO      reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DECREMENTO      reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENOR           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LCCT            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    COLONCOLON      reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PONTO           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LPAREN          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RCHAVE          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    AS              reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAISIGUAL       reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENOSIGUAL      reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MULTIGUAL       reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIVIGUAL        reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MODIGUAL        reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MULT            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIVIDE          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MOD             reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PLUS            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MINUS           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PONTOPONTO      reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ID              reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CROSSINLINE     reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IMPORT          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    INIT            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOINLINE        reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OUT             reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VARARG          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    WHERE           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OBJECT          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONST           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONSTRUCTOR     reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    EOF             reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FALSE           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FUNCTION        reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NULL            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NULLABLE        reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NUMBER          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OPERATOR        reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    SMARTCAST       reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    THIS            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    TRUE            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VAL             reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VAR             reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    WHEN            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LONG            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ARRAY           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ELVIS           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IN              reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT_IN          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IS              reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT_IS          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAIOR           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENORIGUAL      reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAIORIGUAL      reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIFERENTE       reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IDENTIDADE      reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IGUALDADE       reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    SEMIDENTIDADE   reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    AND             reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OR              reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FUN             reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FOR             reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    WHILE           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DO              reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LITERAL_STRING  reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IF              reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RETURN          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RETURN_AT       reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONTINUE        reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONTINUE_AT     reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    BREAK           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    BREAK_AT        reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT             reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    SUSPEND         reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    COMMA           reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RPAREN          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LCHAVE          reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RCCT            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PV              reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ELSE            reduce using rule 181 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)


state 300

    (184) collectionLiteralRecursive -> expression COMMA . collectionLiteralRecursive
    (183) collectionLiteralRecursive -> . expression
    (184) collectionLiteralRecursive -> . expression COMMA collectionLiteralRecursive
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 208
    collectionLiteralRecursive     shift and go to state 358
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 301

    (213) ifExpression -> IF LPAREN expression . RPAREN controlStructureBodyOrPV
    (214) ifExpression -> IF LPAREN expression . RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 359
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 302

    (101) comparison -> infixOperation comparisonOperator infixOperation .
    (100) comparison -> infixOperation .
    (101) comparison -> infixOperation . comparisonOperator infixOperation
    (242) comparisonOperator -> . MENOR
    (243) comparisonOperator -> . MAIOR
    (244) comparisonOperator -> . MENORIGUAL
    (245) comparisonOperator -> . MAIORIGUAL

  ! reduce/reduce conflict for FUN resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for FOR resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for WHILE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DO resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for VAR resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for VAL resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ID resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IMPORT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for INIT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OUT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for VARARG resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for WHERE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OBJECT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONST resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for EOF resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for FALSE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NULL resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NUMBER resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for THIS resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for TRUE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for WHEN resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LONG resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ARRAY resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LPAREN resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LCCT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IF resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RETURN resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for BREAK resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MINUS resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PLUS resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MENOR resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PONTO resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for AS resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MULT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MOD resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ELVIS resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IN resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IS resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MAIOR resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for AND resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for OR resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for COMMA resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RPAREN resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for RCCT resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for PV resolved using rule 100 (comparison -> infixOperation .)
  ! reduce/reduce conflict for ELSE resolved using rule 100 (comparison -> infixOperation .)
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
    FUN             reduce using rule 100 (comparison -> infixOperation .)
    FOR             reduce using rule 100 (comparison -> infixOperation .)
    WHILE           reduce using rule 100 (comparison -> infixOperation .)
    DO              reduce using rule 100 (comparison -> infixOperation .)
    VAR             reduce using rule 100 (comparison -> infixOperation .)
    VAL             reduce using rule 100 (comparison -> infixOperation .)
    ID              reduce using rule 100 (comparison -> infixOperation .)
    CROSSINLINE     reduce using rule 100 (comparison -> infixOperation .)
    IMPORT          reduce using rule 100 (comparison -> infixOperation .)
    INIT            reduce using rule 100 (comparison -> infixOperation .)
    NOINLINE        reduce using rule 100 (comparison -> infixOperation .)
    OUT             reduce using rule 100 (comparison -> infixOperation .)
    VARARG          reduce using rule 100 (comparison -> infixOperation .)
    WHERE           reduce using rule 100 (comparison -> infixOperation .)
    OBJECT          reduce using rule 100 (comparison -> infixOperation .)
    CONST           reduce using rule 100 (comparison -> infixOperation .)
    CONSTRUCTOR     reduce using rule 100 (comparison -> infixOperation .)
    EOF             reduce using rule 100 (comparison -> infixOperation .)
    FALSE           reduce using rule 100 (comparison -> infixOperation .)
    FUNCTION        reduce using rule 100 (comparison -> infixOperation .)
    NULL            reduce using rule 100 (comparison -> infixOperation .)
    NULLABLE        reduce using rule 100 (comparison -> infixOperation .)
    NUMBER          reduce using rule 100 (comparison -> infixOperation .)
    OPERATOR        reduce using rule 100 (comparison -> infixOperation .)
    SMARTCAST       reduce using rule 100 (comparison -> infixOperation .)
    THIS            reduce using rule 100 (comparison -> infixOperation .)
    TRUE            reduce using rule 100 (comparison -> infixOperation .)
    WHEN            reduce using rule 100 (comparison -> infixOperation .)
    LONG            reduce using rule 100 (comparison -> infixOperation .)
    ARRAY           reduce using rule 100 (comparison -> infixOperation .)
    LPAREN          reduce using rule 100 (comparison -> infixOperation .)
    LITERAL_STRING  reduce using rule 100 (comparison -> infixOperation .)
    LCCT            reduce using rule 100 (comparison -> infixOperation .)
    IF              reduce using rule 100 (comparison -> infixOperation .)
    RETURN          reduce using rule 100 (comparison -> infixOperation .)
    RETURN_AT       reduce using rule 100 (comparison -> infixOperation .)
    CONTINUE        reduce using rule 100 (comparison -> infixOperation .)
    CONTINUE_AT     reduce using rule 100 (comparison -> infixOperation .)
    BREAK           reduce using rule 100 (comparison -> infixOperation .)
    BREAK_AT        reduce using rule 100 (comparison -> infixOperation .)
    RCHAVE          reduce using rule 100 (comparison -> infixOperation .)
    INCREMENTO      reduce using rule 100 (comparison -> infixOperation .)
    DECREMENTO      reduce using rule 100 (comparison -> infixOperation .)
    MINUS           reduce using rule 100 (comparison -> infixOperation .)
    PLUS            reduce using rule 100 (comparison -> infixOperation .)
    NOT             reduce using rule 100 (comparison -> infixOperation .)
    SUSPEND         reduce using rule 100 (comparison -> infixOperation .)
    COLONCOLON      reduce using rule 100 (comparison -> infixOperation .)
    LCHAVE          reduce using rule 100 (comparison -> infixOperation .)
    PONTO           reduce using rule 100 (comparison -> infixOperation .)
    AS              reduce using rule 100 (comparison -> infixOperation .)
    MAISIGUAL       reduce using rule 100 (comparison -> infixOperation .)
    MENOSIGUAL      reduce using rule 100 (comparison -> infixOperation .)
    MULTIGUAL       reduce using rule 100 (comparison -> infixOperation .)
    DIVIGUAL        reduce using rule 100 (comparison -> infixOperation .)
    MODIGUAL        reduce using rule 100 (comparison -> infixOperation .)
    MULT            reduce using rule 100 (comparison -> infixOperation .)
    DIVIDE          reduce using rule 100 (comparison -> infixOperation .)
    MOD             reduce using rule 100 (comparison -> infixOperation .)
    PONTOPONTO      reduce using rule 100 (comparison -> infixOperation .)
    ELVIS           reduce using rule 100 (comparison -> infixOperation .)
    IN              reduce using rule 100 (comparison -> infixOperation .)
    NOT_IN          reduce using rule 100 (comparison -> infixOperation .)
    IS              reduce using rule 100 (comparison -> infixOperation .)
    NOT_IS          reduce using rule 100 (comparison -> infixOperation .)
    DIFERENTE       reduce using rule 100 (comparison -> infixOperation .)
    IDENTIDADE      reduce using rule 100 (comparison -> infixOperation .)
    IGUALDADE       reduce using rule 100 (comparison -> infixOperation .)
    SEMIDENTIDADE   reduce using rule 100 (comparison -> infixOperation .)
    AND             reduce using rule 100 (comparison -> infixOperation .)
    OR              reduce using rule 100 (comparison -> infixOperation .)
    COMMA           reduce using rule 100 (comparison -> infixOperation .)
    RPAREN          reduce using rule 100 (comparison -> infixOperation .)
    RCCT            reduce using rule 100 (comparison -> infixOperation .)
    PV              reduce using rule 100 (comparison -> infixOperation .)
    ELSE            reduce using rule 100 (comparison -> infixOperation .)
    MENOR           shift and go to state 213
    MAIOR           shift and go to state 214
    MENORIGUAL      shift and go to state 215
    MAIORIGUAL      shift and go to state 216

  ! INCREMENTO      [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DECREMENTO      [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENOR           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LCCT            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! COLONCOLON      [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PONTO           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LPAREN          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RCHAVE          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! AS              [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MAISIGUAL       [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENOSIGUAL      [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MULTIGUAL       [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DIVIGUAL        [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MODIGUAL        [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MULT            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DIVIDE          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MOD             [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PLUS            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MINUS           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PONTOPONTO      [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ID              [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CROSSINLINE     [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IMPORT          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! INIT            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOINLINE        [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OUT             [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! VARARG          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! WHERE           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OBJECT          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONST           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONSTRUCTOR     [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! EOF             [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FALSE           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FUNCTION        [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NULL            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NULLABLE        [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NUMBER          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OPERATOR        [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! SMARTCAST       [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! THIS            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! TRUE            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! VAL             [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! VAR             [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! WHEN            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LONG            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ARRAY           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ELVIS           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IN              [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOT_IN          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IS              [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOT_IS          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MAIOR           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DIFERENTE       [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IDENTIDADE      [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IGUALDADE       [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! SEMIDENTIDADE   [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! AND             [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! OR              [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FUN             [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! FOR             [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! WHILE           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! DO              [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LITERAL_STRING  [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! IF              [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RETURN          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RETURN_AT       [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONTINUE        [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! CONTINUE_AT     [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! BREAK           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! BREAK_AT        [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! NOT             [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! SUSPEND         [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! COMMA           [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RPAREN          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! LCHAVE          [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! RCCT            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! PV              [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! ELSE            [ reduce using rule 101 (comparison -> infixOperation comparisonOperator infixOperation .) ]
  ! MENOR           [ reduce using rule 100 (comparison -> infixOperation .) ]
  ! MAIOR           [ reduce using rule 100 (comparison -> infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 100 (comparison -> infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 100 (comparison -> infixOperation .) ]

    comparisonOperator             shift and go to state 212

state 303

    (104) infixOperationRecursive -> inOrIs elvisOrType .
    (105) infixOperationRecursive -> inOrIs elvisOrType . infixOperationRecursive
    (104) infixOperationRecursive -> . inOrIs elvisOrType
    (105) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (106) inOrIs -> . inOperator
    (107) inOrIs -> . isOperator
    (246) inOperator -> . IN
    (247) inOperator -> . NOT_IN
    (248) isOperator -> . IS
    (249) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    FOR             reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    WHILE           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    DO              reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    VAR             reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    VAL             reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    ID              reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    CROSSINLINE     reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    IMPORT          reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    INIT            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    NOINLINE        reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    OUT             reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    VARARG          reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    WHERE           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    OBJECT          reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONST           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONSTRUCTOR     reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    EOF             reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    FALSE           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    FUNCTION        reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    NULL            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    NULLABLE        reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    NUMBER          reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    OPERATOR        reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    SMARTCAST       reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    THIS            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    TRUE            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    WHEN            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    LONG            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    ARRAY           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    LPAREN          reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    LITERAL_STRING  reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    LCCT            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    IF              reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    RETURN          reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    RETURN_AT       reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONTINUE        reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONTINUE_AT     reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    BREAK           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    BREAK_AT        reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    RCHAVE          reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    INCREMENTO      reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    DECREMENTO      reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MINUS           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    PLUS            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    NOT             reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    SUSPEND         reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    COLONCOLON      reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    LCHAVE          reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENOR           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    PONTO           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    AS              reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAISIGUAL       reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENOSIGUAL      reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MULTIGUAL       reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIVIGUAL        reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MODIGUAL        reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MULT            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIVIDE          reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MOD             reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    PONTOPONTO      reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    ELVIS           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAIOR           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENORIGUAL      reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAIORIGUAL      reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIFERENTE       reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    IDENTIDADE      reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    IGUALDADE       reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    SEMIDENTIDADE   reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    AND             reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    OR              reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    COMMA           reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    RPAREN          reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    RCCT            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    PV              reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    ELSE            reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .)
    IN              shift and go to state 221
    NOT_IN          shift and go to state 222
    IS              shift and go to state 223
    NOT_IS          shift and go to state 224

  ! IN              [ reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! NOT_IN          [ reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! IS              [ reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! NOT_IS          [ reduce using rule 104 (infixOperationRecursive -> inOrIs elvisOrType .) ]

    inOrIs                         shift and go to state 218
    infixOperationRecursive        shift and go to state 360
    inOperator                     shift and go to state 219
    isOperator                     shift and go to state 220

state 304

    (108) elvisOrType -> elvisExpression .
    (102) infixOperation -> elvisExpression . infixOperationRecursive
    (103) infixOperation -> elvisExpression .
    (104) infixOperationRecursive -> . inOrIs elvisOrType
    (105) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (106) inOrIs -> . inOperator
    (107) inOrIs -> . isOperator
    (246) inOperator -> . IN
    (247) inOperator -> . NOT_IN
    (248) isOperator -> . IS
    (249) isOperator -> . NOT_IS

  ! reduce/reduce conflict for FUN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DO resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ID resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IF resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AND resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PV resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 103 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 103 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 103 (infixOperation -> elvisExpression .)
    DO              reduce using rule 103 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 103 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 103 (infixOperation -> elvisExpression .)
    ID              reduce using rule 103 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 103 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 103 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 103 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 103 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 103 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 103 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 103 (infixOperation -> elvisExpression .)
    OBJECT          reduce using rule 103 (infixOperation -> elvisExpression .)
    CONST           reduce using rule 103 (infixOperation -> elvisExpression .)
    CONSTRUCTOR     reduce using rule 103 (infixOperation -> elvisExpression .)
    EOF             reduce using rule 103 (infixOperation -> elvisExpression .)
    FALSE           reduce using rule 103 (infixOperation -> elvisExpression .)
    FUNCTION        reduce using rule 103 (infixOperation -> elvisExpression .)
    NULL            reduce using rule 103 (infixOperation -> elvisExpression .)
    NULLABLE        reduce using rule 103 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 103 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 103 (infixOperation -> elvisExpression .)
    SMARTCAST       reduce using rule 103 (infixOperation -> elvisExpression .)
    THIS            reduce using rule 103 (infixOperation -> elvisExpression .)
    TRUE            reduce using rule 103 (infixOperation -> elvisExpression .)
    WHEN            reduce using rule 103 (infixOperation -> elvisExpression .)
    LONG            reduce using rule 103 (infixOperation -> elvisExpression .)
    ARRAY           reduce using rule 103 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 103 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 103 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 103 (infixOperation -> elvisExpression .)
    IF              reduce using rule 103 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 103 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 103 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 103 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 103 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 103 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 103 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 103 (infixOperation -> elvisExpression .)
    INCREMENTO      reduce using rule 103 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 103 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 103 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 103 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 103 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 103 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 103 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 103 (infixOperation -> elvisExpression .)
    MENOR           reduce using rule 103 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 103 (infixOperation -> elvisExpression .)
    AS              reduce using rule 103 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 103 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 103 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 103 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 103 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 103 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 103 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 103 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 103 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 103 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 103 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 103 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 103 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 103 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 103 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 103 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 103 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 103 (infixOperation -> elvisExpression .)
    AND             reduce using rule 103 (infixOperation -> elvisExpression .)
    OR              reduce using rule 103 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 103 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 103 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 103 (infixOperation -> elvisExpression .)
    PV              reduce using rule 103 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 103 (infixOperation -> elvisExpression .)
    IN              shift and go to state 221
    NOT_IN          shift and go to state 222
    IS              shift and go to state 223
    NOT_IS          shift and go to state 224

  ! FUN             [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! FOR             [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! WHILE           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! DO              [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! VAR             [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! VAL             [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! ID              [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! CROSSINLINE     [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! IMPORT          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! INIT            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! NOINLINE        [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! OUT             [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! VARARG          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! WHERE           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! OBJECT          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! CONST           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! EOF             [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! FALSE           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! FUNCTION        [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! NULL            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! NULLABLE        [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! NUMBER          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! OPERATOR        [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! SMARTCAST       [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! THIS            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! TRUE            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! WHEN            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! LONG            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! ARRAY           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! LPAREN          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! LCCT            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! IF              [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! RETURN          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! RETURN_AT       [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! CONTINUE        [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! BREAK           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! BREAK_AT        [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! RCHAVE          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! INCREMENTO      [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! DECREMENTO      [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MINUS           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! PLUS            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! NOT             [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! SUSPEND         [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! COLONCOLON      [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! LCHAVE          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MENOR           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! PONTO           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! AS              [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MAISIGUAL       [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MULTIGUAL       [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! DIVIGUAL        [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MODIGUAL        [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MULT            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! DIVIDE          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MOD             [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! PONTOPONTO      [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! ELVIS           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! IN              [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! IS              [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MAIOR           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MENORIGUAL      [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! DIFERENTE       [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! IDENTIDADE      [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! IGUALDADE       [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! AND             [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! OR              [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! COMMA           [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! RPAREN          [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! RCCT            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! PV              [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! ELSE            [ reduce using rule 108 (elvisOrType -> elvisExpression .) ]
  ! IN              [ reduce using rule 103 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 103 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 103 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 103 (infixOperation -> elvisExpression .) ]

    infixOperationRecursive        shift and go to state 217
    inOrIs                         shift and go to state 218
    inOperator                     shift and go to state 219
    isOperator                     shift and go to state 220

state 305

    (109) elvisOrType -> type .

    FUN             reduce using rule 109 (elvisOrType -> type .)
    FOR             reduce using rule 109 (elvisOrType -> type .)
    WHILE           reduce using rule 109 (elvisOrType -> type .)
    DO              reduce using rule 109 (elvisOrType -> type .)
    VAR             reduce using rule 109 (elvisOrType -> type .)
    VAL             reduce using rule 109 (elvisOrType -> type .)
    ID              reduce using rule 109 (elvisOrType -> type .)
    CROSSINLINE     reduce using rule 109 (elvisOrType -> type .)
    IMPORT          reduce using rule 109 (elvisOrType -> type .)
    INIT            reduce using rule 109 (elvisOrType -> type .)
    NOINLINE        reduce using rule 109 (elvisOrType -> type .)
    OUT             reduce using rule 109 (elvisOrType -> type .)
    VARARG          reduce using rule 109 (elvisOrType -> type .)
    WHERE           reduce using rule 109 (elvisOrType -> type .)
    OBJECT          reduce using rule 109 (elvisOrType -> type .)
    CONST           reduce using rule 109 (elvisOrType -> type .)
    CONSTRUCTOR     reduce using rule 109 (elvisOrType -> type .)
    EOF             reduce using rule 109 (elvisOrType -> type .)
    FALSE           reduce using rule 109 (elvisOrType -> type .)
    FUNCTION        reduce using rule 109 (elvisOrType -> type .)
    NULL            reduce using rule 109 (elvisOrType -> type .)
    NULLABLE        reduce using rule 109 (elvisOrType -> type .)
    NUMBER          reduce using rule 109 (elvisOrType -> type .)
    OPERATOR        reduce using rule 109 (elvisOrType -> type .)
    SMARTCAST       reduce using rule 109 (elvisOrType -> type .)
    THIS            reduce using rule 109 (elvisOrType -> type .)
    TRUE            reduce using rule 109 (elvisOrType -> type .)
    WHEN            reduce using rule 109 (elvisOrType -> type .)
    LONG            reduce using rule 109 (elvisOrType -> type .)
    ARRAY           reduce using rule 109 (elvisOrType -> type .)
    LPAREN          reduce using rule 109 (elvisOrType -> type .)
    LITERAL_STRING  reduce using rule 109 (elvisOrType -> type .)
    LCCT            reduce using rule 109 (elvisOrType -> type .)
    IF              reduce using rule 109 (elvisOrType -> type .)
    RETURN          reduce using rule 109 (elvisOrType -> type .)
    RETURN_AT       reduce using rule 109 (elvisOrType -> type .)
    CONTINUE        reduce using rule 109 (elvisOrType -> type .)
    CONTINUE_AT     reduce using rule 109 (elvisOrType -> type .)
    BREAK           reduce using rule 109 (elvisOrType -> type .)
    BREAK_AT        reduce using rule 109 (elvisOrType -> type .)
    RCHAVE          reduce using rule 109 (elvisOrType -> type .)
    INCREMENTO      reduce using rule 109 (elvisOrType -> type .)
    DECREMENTO      reduce using rule 109 (elvisOrType -> type .)
    MINUS           reduce using rule 109 (elvisOrType -> type .)
    PLUS            reduce using rule 109 (elvisOrType -> type .)
    NOT             reduce using rule 109 (elvisOrType -> type .)
    SUSPEND         reduce using rule 109 (elvisOrType -> type .)
    COLONCOLON      reduce using rule 109 (elvisOrType -> type .)
    LCHAVE          reduce using rule 109 (elvisOrType -> type .)
    MENOR           reduce using rule 109 (elvisOrType -> type .)
    PONTO           reduce using rule 109 (elvisOrType -> type .)
    AS              reduce using rule 109 (elvisOrType -> type .)
    MAISIGUAL       reduce using rule 109 (elvisOrType -> type .)
    MENOSIGUAL      reduce using rule 109 (elvisOrType -> type .)
    MULTIGUAL       reduce using rule 109 (elvisOrType -> type .)
    DIVIGUAL        reduce using rule 109 (elvisOrType -> type .)
    MODIGUAL        reduce using rule 109 (elvisOrType -> type .)
    MULT            reduce using rule 109 (elvisOrType -> type .)
    DIVIDE          reduce using rule 109 (elvisOrType -> type .)
    MOD             reduce using rule 109 (elvisOrType -> type .)
    PONTOPONTO      reduce using rule 109 (elvisOrType -> type .)
    ELVIS           reduce using rule 109 (elvisOrType -> type .)
    IN              reduce using rule 109 (elvisOrType -> type .)
    NOT_IN          reduce using rule 109 (elvisOrType -> type .)
    IS              reduce using rule 109 (elvisOrType -> type .)
    NOT_IS          reduce using rule 109 (elvisOrType -> type .)
    MAIOR           reduce using rule 109 (elvisOrType -> type .)
    MENORIGUAL      reduce using rule 109 (elvisOrType -> type .)
    MAIORIGUAL      reduce using rule 109 (elvisOrType -> type .)
    DIFERENTE       reduce using rule 109 (elvisOrType -> type .)
    IDENTIDADE      reduce using rule 109 (elvisOrType -> type .)
    IGUALDADE       reduce using rule 109 (elvisOrType -> type .)
    SEMIDENTIDADE   reduce using rule 109 (elvisOrType -> type .)
    AND             reduce using rule 109 (elvisOrType -> type .)
    OR              reduce using rule 109 (elvisOrType -> type .)
    COMMA           reduce using rule 109 (elvisOrType -> type .)
    RPAREN          reduce using rule 109 (elvisOrType -> type .)
    RCCT            reduce using rule 109 (elvisOrType -> type .)
    PV              reduce using rule 109 (elvisOrType -> type .)
    ELSE            reduce using rule 109 (elvisOrType -> type .)


state 306

    (45) typeModifiers -> typeModifier .
    (46) typeModifiers -> typeModifier . typeModifiers
    (68) receiverType -> typeModifier . parenthesizedType
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (67) parenthesizedType -> . LPAREN type RPAREN
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    ID              reduce using rule 45 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 45 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 45 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 45 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 45 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 45 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 45 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 45 (typeModifiers -> typeModifier .)
    OBJECT          reduce using rule 45 (typeModifiers -> typeModifier .)
    CONST           reduce using rule 45 (typeModifiers -> typeModifier .)
    CONSTRUCTOR     reduce using rule 45 (typeModifiers -> typeModifier .)
    EOF             reduce using rule 45 (typeModifiers -> typeModifier .)
    FALSE           reduce using rule 45 (typeModifiers -> typeModifier .)
    FUNCTION        reduce using rule 45 (typeModifiers -> typeModifier .)
    NULL            reduce using rule 45 (typeModifiers -> typeModifier .)
    NULLABLE        reduce using rule 45 (typeModifiers -> typeModifier .)
    NUMBER          reduce using rule 45 (typeModifiers -> typeModifier .)
    OPERATOR        reduce using rule 45 (typeModifiers -> typeModifier .)
    SMARTCAST       reduce using rule 45 (typeModifiers -> typeModifier .)
    THIS            reduce using rule 45 (typeModifiers -> typeModifier .)
    TRUE            reduce using rule 45 (typeModifiers -> typeModifier .)
    VAL             reduce using rule 45 (typeModifiers -> typeModifier .)
    VAR             reduce using rule 45 (typeModifiers -> typeModifier .)
    WHEN            reduce using rule 45 (typeModifiers -> typeModifier .)
    LONG            reduce using rule 45 (typeModifiers -> typeModifier .)
    ARRAY           reduce using rule 45 (typeModifiers -> typeModifier .)
    LPAREN          shift and go to state 226
    SUSPEND         shift and go to state 48

  ! LPAREN          [ reduce using rule 45 (typeModifiers -> typeModifier .) ]
  ! SUSPEND         [ reduce using rule 45 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 47
    typeModifiers                  shift and go to state 131
    parenthesizedType              shift and go to state 225

state 307

    (67) parenthesizedType -> LPAREN type . RPAREN

    RPAREN          shift and go to state 313


state 308

    (111) elvisExpression -> infixFunctionCall ELVIS elvisExpression .
    (102) infixOperation -> elvisExpression . infixOperationRecursive
    (103) infixOperation -> elvisExpression .
    (104) infixOperationRecursive -> . inOrIs elvisOrType
    (105) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (106) inOrIs -> . inOperator
    (107) inOrIs -> . isOperator
    (246) inOperator -> . IN
    (247) inOperator -> . NOT_IN
    (248) isOperator -> . IS
    (249) isOperator -> . NOT_IS

  ! reduce/reduce conflict for FUN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DO resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ID resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IF resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for AND resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for OR resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for PV resolved using rule 103 (infixOperation -> elvisExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (infixOperation -> elvisExpression .)
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 103 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 103 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 103 (infixOperation -> elvisExpression .)
    DO              reduce using rule 103 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 103 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 103 (infixOperation -> elvisExpression .)
    ID              reduce using rule 103 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 103 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 103 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 103 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 103 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 103 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 103 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 103 (infixOperation -> elvisExpression .)
    OBJECT          reduce using rule 103 (infixOperation -> elvisExpression .)
    CONST           reduce using rule 103 (infixOperation -> elvisExpression .)
    CONSTRUCTOR     reduce using rule 103 (infixOperation -> elvisExpression .)
    EOF             reduce using rule 103 (infixOperation -> elvisExpression .)
    FALSE           reduce using rule 103 (infixOperation -> elvisExpression .)
    FUNCTION        reduce using rule 103 (infixOperation -> elvisExpression .)
    NULL            reduce using rule 103 (infixOperation -> elvisExpression .)
    NULLABLE        reduce using rule 103 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 103 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 103 (infixOperation -> elvisExpression .)
    SMARTCAST       reduce using rule 103 (infixOperation -> elvisExpression .)
    THIS            reduce using rule 103 (infixOperation -> elvisExpression .)
    TRUE            reduce using rule 103 (infixOperation -> elvisExpression .)
    WHEN            reduce using rule 103 (infixOperation -> elvisExpression .)
    LONG            reduce using rule 103 (infixOperation -> elvisExpression .)
    ARRAY           reduce using rule 103 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 103 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 103 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 103 (infixOperation -> elvisExpression .)
    IF              reduce using rule 103 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 103 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 103 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 103 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 103 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 103 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 103 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 103 (infixOperation -> elvisExpression .)
    INCREMENTO      reduce using rule 103 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 103 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 103 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 103 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 103 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 103 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 103 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 103 (infixOperation -> elvisExpression .)
    MENOR           reduce using rule 103 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 103 (infixOperation -> elvisExpression .)
    AS              reduce using rule 103 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 103 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 103 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 103 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 103 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 103 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 103 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 103 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 103 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 103 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 103 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 103 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 103 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 103 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 103 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 103 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 103 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 103 (infixOperation -> elvisExpression .)
    AND             reduce using rule 103 (infixOperation -> elvisExpression .)
    OR              reduce using rule 103 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 103 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 103 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 103 (infixOperation -> elvisExpression .)
    PV              reduce using rule 103 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 103 (infixOperation -> elvisExpression .)
    IN              shift and go to state 221
    NOT_IN          shift and go to state 222
    IS              shift and go to state 223
    NOT_IS          shift and go to state 224

  ! INCREMENTO      [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DECREMENTO      [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MENOR           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LCCT            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! COLONCOLON      [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PONTO           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LPAREN          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RCHAVE          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! AS              [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MAISIGUAL       [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MULTIGUAL       [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DIVIGUAL        [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MODIGUAL        [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MULT            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DIVIDE          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MOD             [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PLUS            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MINUS           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PONTOPONTO      [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ID              [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CROSSINLINE     [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IMPORT          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! INIT            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOINLINE        [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OUT             [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! VARARG          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! WHERE           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OBJECT          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONST           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! EOF             [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FALSE           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FUNCTION        [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NULL            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NULLABLE        [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NUMBER          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OPERATOR        [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! SMARTCAST       [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! THIS            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! TRUE            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! VAL             [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! VAR             [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! WHEN            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LONG            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ARRAY           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ELVIS           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IN              [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IS              [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MAIOR           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MENORIGUAL      [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DIFERENTE       [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IDENTIDADE      [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IGUALDADE       [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! AND             [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! OR              [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FUN             [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! FOR             [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! WHILE           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! DO              [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IF              [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RETURN          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RETURN_AT       [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONTINUE        [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! BREAK           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! BREAK_AT        [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! NOT             [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! SUSPEND         [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! COMMA           [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RPAREN          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! LCHAVE          [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! RCCT            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! PV              [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! ELSE            [ reduce using rule 111 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .) ]
  ! IN              [ reduce using rule 103 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 103 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 103 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 103 (infixOperation -> elvisExpression .) ]

    infixOperationRecursive        shift and go to state 217
    inOrIs                         shift and go to state 218
    inOperator                     shift and go to state 219
    isOperator                     shift and go to state 220

state 309

    (113) infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .
    (110) elvisExpression -> infixFunctionCall .
    (111) elvisExpression -> infixFunctionCall . ELVIS elvisExpression

  ! reduce/reduce conflict for FUN resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for FOR resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for WHILE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DO resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for VAR resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for VAL resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ID resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IMPORT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for INIT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OUT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for VARARG resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for WHERE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OBJECT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONST resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for EOF resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for FALSE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NULL resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NUMBER resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for THIS resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for TRUE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for WHEN resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LONG resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ARRAY resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LPAREN resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LCCT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IF resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RETURN resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for BREAK resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MINUS resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PLUS resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MENOR resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PONTO resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for AS resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MULT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MOD resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ELVIS resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IN resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IS resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MAIOR resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for AND resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for OR resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for COMMA resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RPAREN resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for RCCT resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for PV resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! reduce/reduce conflict for ELSE resolved using rule 110 (elvisExpression -> infixFunctionCall .)
  ! shift/reduce conflict for ELVIS resolved as shift
    FUN             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    FOR             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    WHILE           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    DO              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    VAR             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    VAL             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    ID              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    CROSSINLINE     reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IMPORT          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    INIT            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NOINLINE        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    OUT             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    VARARG          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    WHERE           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    OBJECT          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    CONST           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    CONSTRUCTOR     reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    EOF             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    FALSE           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    FUNCTION        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NULL            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NULLABLE        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NUMBER          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    OPERATOR        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    SMARTCAST       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    THIS            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    TRUE            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    WHEN            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    LONG            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    ARRAY           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    LPAREN          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    LITERAL_STRING  reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    LCCT            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IF              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    RETURN          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    RETURN_AT       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    CONTINUE        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    CONTINUE_AT     reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    BREAK           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    BREAK_AT        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    RCHAVE          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    INCREMENTO      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    DECREMENTO      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MINUS           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    PLUS            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NOT             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    SUSPEND         reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    COLONCOLON      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    LCHAVE          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MENOR           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    PONTO           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    AS              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MAISIGUAL       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MENOSIGUAL      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MULTIGUAL       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    DIVIGUAL        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MODIGUAL        reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MULT            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    DIVIDE          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MOD             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    PONTOPONTO      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IN              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NOT_IN          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IS              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    NOT_IS          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MAIOR           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MENORIGUAL      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    MAIORIGUAL      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    DIFERENTE       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IDENTIDADE      reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    IGUALDADE       reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    AND             reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    OR              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    COMMA           reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    RPAREN          reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    RCCT            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    PV              reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    ELSE            reduce using rule 110 (elvisExpression -> infixFunctionCall .)
    ELVIS           shift and go to state 227

  ! INCREMENTO      [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DECREMENTO      [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MENOR           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LCCT            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! COLONCOLON      [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PONTO           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LPAREN          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RCHAVE          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! AS              [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MAISIGUAL       [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MENOSIGUAL      [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MULTIGUAL       [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DIVIGUAL        [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MODIGUAL        [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MULT            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DIVIDE          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MOD             [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PLUS            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MINUS           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PONTOPONTO      [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ID              [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CROSSINLINE     [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IMPORT          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! INIT            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOINLINE        [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OUT             [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! VARARG          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! WHERE           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OBJECT          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONST           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONSTRUCTOR     [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! EOF             [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FALSE           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FUNCTION        [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NULL            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NULLABLE        [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NUMBER          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OPERATOR        [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! SMARTCAST       [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! THIS            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! TRUE            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! VAL             [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! VAR             [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! WHEN            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LONG            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ARRAY           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ELVIS           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IN              [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOT_IN          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IS              [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOT_IS          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MAIOR           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MENORIGUAL      [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! MAIORIGUAL      [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DIFERENTE       [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IDENTIDADE      [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IGUALDADE       [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! SEMIDENTIDADE   [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! AND             [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! OR              [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FUN             [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! FOR             [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! WHILE           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! DO              [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LITERAL_STRING  [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! IF              [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RETURN          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RETURN_AT       [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONTINUE        [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! CONTINUE_AT     [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! BREAK           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! BREAK_AT        [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! NOT             [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! SUSPEND         [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! COMMA           [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RPAREN          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! LCHAVE          [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! RCCT            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! PV              [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ELSE            [ reduce using rule 113 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .) ]
  ! ELVIS           [ reduce using rule 110 (elvisExpression -> infixFunctionCall .) ]


state 310

    (115) rangeExpression -> additiveExpression PONTOPONTO rangeExpression .
    (112) infixFunctionCall -> rangeExpression .
    (113) infixFunctionCall -> rangeExpression . simpleIdentifier infixFunctionCall
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

  ! reduce/reduce conflict for FUN resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DO resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ID resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IF resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for AS resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IN resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IS resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for AND resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for OR resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for PV resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 112 (infixFunctionCall -> rangeExpression .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    FUN             reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    FOR             reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    WHILE           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    DO              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    LPAREN          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    LITERAL_STRING  reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    LCCT            reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    IF              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    RETURN          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    RETURN_AT       reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    CONTINUE        reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    CONTINUE_AT     reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    BREAK           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    BREAK_AT        reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    RCHAVE          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    INCREMENTO      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    DECREMENTO      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MINUS           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    PLUS            reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    NOT             reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    SUSPEND         reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    COLONCOLON      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    LCHAVE          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MENOR           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    PONTO           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    AS              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MAISIGUAL       reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MENOSIGUAL      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MULTIGUAL       reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    DIVIGUAL        reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MODIGUAL        reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MULT            reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    DIVIDE          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MOD             reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    PONTOPONTO      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    ELVIS           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    IN              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    NOT_IN          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    IS              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    NOT_IS          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MAIOR           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MENORIGUAL      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    MAIORIGUAL      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    DIFERENTE       reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    IDENTIDADE      reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    IGUALDADE       reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    SEMIDENTIDADE   reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    AND             reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    OR              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    COMMA           reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    RPAREN          reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    RCCT            reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    PV              reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    ELSE            reduce using rule 112 (infixFunctionCall -> rangeExpression .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

  ! INCREMENTO      [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DECREMENTO      [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MENOR           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LCCT            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! COLONCOLON      [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PONTO           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LPAREN          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RCHAVE          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! AS              [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MAISIGUAL       [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MULTIGUAL       [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DIVIGUAL        [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MODIGUAL        [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MULT            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DIVIDE          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MOD             [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PLUS            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MINUS           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PONTOPONTO      [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ID              [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IMPORT          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! INIT            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OUT             [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VARARG          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! WHERE           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OBJECT          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONST           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! EOF             [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FALSE           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FUNCTION        [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NULL            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NULLABLE        [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NUMBER          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! SMARTCAST       [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! THIS            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! TRUE            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VAL             [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VAR             [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! WHEN            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LONG            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ARRAY           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ELVIS           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IN              [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOT_IN          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IS              [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOT_IS          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MAIOR           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MENORIGUAL      [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DIFERENTE       [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IDENTIDADE      [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IGUALDADE       [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! AND             [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! OR              [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FUN             [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! FOR             [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! WHILE           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! DO              [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! IF              [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RETURN          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RETURN_AT       [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONTINUE        [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! BREAK           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! BREAK_AT        [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! NOT             [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! SUSPEND         [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! COMMA           [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RPAREN          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! LCHAVE          [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! RCCT            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! PV              [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! ELSE            [ reduce using rule 115 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .) ]
  ! VAR             [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! VAL             [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! ID              [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! IMPORT          [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! INIT            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! OUT             [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! VARARG          [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! WHERE           [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! OBJECT          [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! CONST           [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! EOF             [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! FALSE           [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! FUNCTION        [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! NULL            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! NULLABLE        [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! NUMBER          [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! SMARTCAST       [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! THIS            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! TRUE            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! WHEN            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! LONG            [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]
  ! ARRAY           [ reduce using rule 112 (infixFunctionCall -> rangeExpression .) ]

    simpleIdentifier               shift and go to state 228

state 311

    (117) additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .
    (114) rangeExpression -> additiveExpression .
    (115) rangeExpression -> additiveExpression . PONTOPONTO rangeExpression

  ! reduce/reduce conflict for FUN resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DO resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ID resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IF resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for AS resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IN resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IS resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for AND resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for OR resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for PV resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 114 (rangeExpression -> additiveExpression .)
  ! shift/reduce conflict for PONTOPONTO resolved as shift
    FUN             reduce using rule 114 (rangeExpression -> additiveExpression .)
    FOR             reduce using rule 114 (rangeExpression -> additiveExpression .)
    WHILE           reduce using rule 114 (rangeExpression -> additiveExpression .)
    DO              reduce using rule 114 (rangeExpression -> additiveExpression .)
    VAR             reduce using rule 114 (rangeExpression -> additiveExpression .)
    VAL             reduce using rule 114 (rangeExpression -> additiveExpression .)
    ID              reduce using rule 114 (rangeExpression -> additiveExpression .)
    CROSSINLINE     reduce using rule 114 (rangeExpression -> additiveExpression .)
    IMPORT          reduce using rule 114 (rangeExpression -> additiveExpression .)
    INIT            reduce using rule 114 (rangeExpression -> additiveExpression .)
    NOINLINE        reduce using rule 114 (rangeExpression -> additiveExpression .)
    OUT             reduce using rule 114 (rangeExpression -> additiveExpression .)
    VARARG          reduce using rule 114 (rangeExpression -> additiveExpression .)
    WHERE           reduce using rule 114 (rangeExpression -> additiveExpression .)
    OBJECT          reduce using rule 114 (rangeExpression -> additiveExpression .)
    CONST           reduce using rule 114 (rangeExpression -> additiveExpression .)
    CONSTRUCTOR     reduce using rule 114 (rangeExpression -> additiveExpression .)
    EOF             reduce using rule 114 (rangeExpression -> additiveExpression .)
    FALSE           reduce using rule 114 (rangeExpression -> additiveExpression .)
    FUNCTION        reduce using rule 114 (rangeExpression -> additiveExpression .)
    NULL            reduce using rule 114 (rangeExpression -> additiveExpression .)
    NULLABLE        reduce using rule 114 (rangeExpression -> additiveExpression .)
    NUMBER          reduce using rule 114 (rangeExpression -> additiveExpression .)
    OPERATOR        reduce using rule 114 (rangeExpression -> additiveExpression .)
    SMARTCAST       reduce using rule 114 (rangeExpression -> additiveExpression .)
    THIS            reduce using rule 114 (rangeExpression -> additiveExpression .)
    TRUE            reduce using rule 114 (rangeExpression -> additiveExpression .)
    WHEN            reduce using rule 114 (rangeExpression -> additiveExpression .)
    LONG            reduce using rule 114 (rangeExpression -> additiveExpression .)
    ARRAY           reduce using rule 114 (rangeExpression -> additiveExpression .)
    LPAREN          reduce using rule 114 (rangeExpression -> additiveExpression .)
    LITERAL_STRING  reduce using rule 114 (rangeExpression -> additiveExpression .)
    LCCT            reduce using rule 114 (rangeExpression -> additiveExpression .)
    IF              reduce using rule 114 (rangeExpression -> additiveExpression .)
    RETURN          reduce using rule 114 (rangeExpression -> additiveExpression .)
    RETURN_AT       reduce using rule 114 (rangeExpression -> additiveExpression .)
    CONTINUE        reduce using rule 114 (rangeExpression -> additiveExpression .)
    CONTINUE_AT     reduce using rule 114 (rangeExpression -> additiveExpression .)
    BREAK           reduce using rule 114 (rangeExpression -> additiveExpression .)
    BREAK_AT        reduce using rule 114 (rangeExpression -> additiveExpression .)
    RCHAVE          reduce using rule 114 (rangeExpression -> additiveExpression .)
    INCREMENTO      reduce using rule 114 (rangeExpression -> additiveExpression .)
    DECREMENTO      reduce using rule 114 (rangeExpression -> additiveExpression .)
    MINUS           reduce using rule 114 (rangeExpression -> additiveExpression .)
    PLUS            reduce using rule 114 (rangeExpression -> additiveExpression .)
    NOT             reduce using rule 114 (rangeExpression -> additiveExpression .)
    SUSPEND         reduce using rule 114 (rangeExpression -> additiveExpression .)
    COLONCOLON      reduce using rule 114 (rangeExpression -> additiveExpression .)
    LCHAVE          reduce using rule 114 (rangeExpression -> additiveExpression .)
    MENOR           reduce using rule 114 (rangeExpression -> additiveExpression .)
    PONTO           reduce using rule 114 (rangeExpression -> additiveExpression .)
    AS              reduce using rule 114 (rangeExpression -> additiveExpression .)
    MAISIGUAL       reduce using rule 114 (rangeExpression -> additiveExpression .)
    MENOSIGUAL      reduce using rule 114 (rangeExpression -> additiveExpression .)
    MULTIGUAL       reduce using rule 114 (rangeExpression -> additiveExpression .)
    DIVIGUAL        reduce using rule 114 (rangeExpression -> additiveExpression .)
    MODIGUAL        reduce using rule 114 (rangeExpression -> additiveExpression .)
    MULT            reduce using rule 114 (rangeExpression -> additiveExpression .)
    DIVIDE          reduce using rule 114 (rangeExpression -> additiveExpression .)
    MOD             reduce using rule 114 (rangeExpression -> additiveExpression .)
    ELVIS           reduce using rule 114 (rangeExpression -> additiveExpression .)
    IN              reduce using rule 114 (rangeExpression -> additiveExpression .)
    NOT_IN          reduce using rule 114 (rangeExpression -> additiveExpression .)
    IS              reduce using rule 114 (rangeExpression -> additiveExpression .)
    NOT_IS          reduce using rule 114 (rangeExpression -> additiveExpression .)
    MAIOR           reduce using rule 114 (rangeExpression -> additiveExpression .)
    MENORIGUAL      reduce using rule 114 (rangeExpression -> additiveExpression .)
    MAIORIGUAL      reduce using rule 114 (rangeExpression -> additiveExpression .)
    DIFERENTE       reduce using rule 114 (rangeExpression -> additiveExpression .)
    IDENTIDADE      reduce using rule 114 (rangeExpression -> additiveExpression .)
    IGUALDADE       reduce using rule 114 (rangeExpression -> additiveExpression .)
    SEMIDENTIDADE   reduce using rule 114 (rangeExpression -> additiveExpression .)
    AND             reduce using rule 114 (rangeExpression -> additiveExpression .)
    OR              reduce using rule 114 (rangeExpression -> additiveExpression .)
    COMMA           reduce using rule 114 (rangeExpression -> additiveExpression .)
    RPAREN          reduce using rule 114 (rangeExpression -> additiveExpression .)
    RCCT            reduce using rule 114 (rangeExpression -> additiveExpression .)
    PV              reduce using rule 114 (rangeExpression -> additiveExpression .)
    ELSE            reduce using rule 114 (rangeExpression -> additiveExpression .)
    PONTOPONTO      shift and go to state 229

  ! INCREMENTO      [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DECREMENTO      [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MENOR           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LCCT            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! COLONCOLON      [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PONTO           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LPAREN          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RCHAVE          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! AS              [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MAISIGUAL       [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MULTIGUAL       [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DIVIGUAL        [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MODIGUAL        [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MULT            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DIVIDE          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MOD             [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PLUS            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MINUS           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PONTOPONTO      [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ID              [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CROSSINLINE     [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IMPORT          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! INIT            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOINLINE        [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OUT             [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! VARARG          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! WHERE           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OBJECT          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONST           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! EOF             [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FALSE           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FUNCTION        [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NULL            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NULLABLE        [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NUMBER          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OPERATOR        [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! SMARTCAST       [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! THIS            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! TRUE            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! VAL             [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! VAR             [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! WHEN            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LONG            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ARRAY           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ELVIS           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IN              [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOT_IN          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IS              [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOT_IS          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MAIOR           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MENORIGUAL      [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DIFERENTE       [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IDENTIDADE      [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IGUALDADE       [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! AND             [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! OR              [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FUN             [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! FOR             [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! WHILE           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! DO              [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! IF              [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RETURN          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RETURN_AT       [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONTINUE        [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! BREAK           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! BREAK_AT        [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! NOT             [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! SUSPEND         [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! COMMA           [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RPAREN          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! LCHAVE          [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! RCCT            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PV              [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! ELSE            [ reduce using rule 117 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .) ]
  ! PONTOPONTO      [ reduce using rule 114 (rangeExpression -> additiveExpression .) ]


state 312

    (119) multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .
    (116) additiveExpression -> multiplicativeExpression .
    (117) additiveExpression -> multiplicativeExpression . additiveOperator additiveExpression
    (250) additiveOperator -> . PLUS
    (251) additiveOperator -> . MINUS

  ! reduce/reduce conflict for FUN resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DO resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ID resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONST resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for EOF resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for FALSE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NULL resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for THIS resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for TRUE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for WHEN resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LONG resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LCCT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IF resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MENOR resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for AS resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IN resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IS resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for AND resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for OR resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for PV resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 116 (additiveExpression -> multiplicativeExpression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    FUN             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    FOR             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    WHILE           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    DO              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    VAR             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    VAL             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    ID              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    CROSSINLINE     reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IMPORT          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    INIT            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NOINLINE        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    OUT             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    VARARG          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    WHERE           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    OBJECT          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    CONST           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    CONSTRUCTOR     reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    EOF             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    FALSE           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    FUNCTION        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NULL            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NULLABLE        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NUMBER          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    OPERATOR        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    SMARTCAST       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    THIS            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    TRUE            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    WHEN            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    LONG            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    ARRAY           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    LPAREN          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    LCCT            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IF              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    RETURN          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    RETURN_AT       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    CONTINUE        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    BREAK           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    BREAK_AT        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    RCHAVE          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    INCREMENTO      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    DECREMENTO      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NOT             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    SUSPEND         reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    COLONCOLON      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    LCHAVE          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MENOR           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    PONTO           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    AS              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MAISIGUAL       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MENOSIGUAL      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MULTIGUAL       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    DIVIGUAL        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MODIGUAL        reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MULT            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    DIVIDE          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MOD             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    PONTOPONTO      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    ELVIS           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IN              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NOT_IN          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IS              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    NOT_IS          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MAIOR           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MENORIGUAL      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    DIFERENTE       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IDENTIDADE      reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    IGUALDADE       reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    COMMA           reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    RCCT            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    PV              reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    ELSE            reduce using rule 116 (additiveExpression -> multiplicativeExpression .)
    PLUS            shift and go to state 231
    MINUS           shift and go to state 232

  ! INCREMENTO      [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DECREMENTO      [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MENOR           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LCCT            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! COLONCOLON      [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PONTO           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LPAREN          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RCHAVE          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! AS              [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MAISIGUAL       [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MULTIGUAL       [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DIVIGUAL        [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MODIGUAL        [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MULT            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DIVIDE          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MOD             [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PLUS            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MINUS           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PONTOPONTO      [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ID              [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IMPORT          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! INIT            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOINLINE        [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OUT             [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! VARARG          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! WHERE           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OBJECT          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONST           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONSTRUCTOR     [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! EOF             [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FALSE           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FUNCTION        [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NULL            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NULLABLE        [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NUMBER          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OPERATOR        [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! SMARTCAST       [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! THIS            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! TRUE            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! VAL             [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! VAR             [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! WHEN            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LONG            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ARRAY           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ELVIS           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IN              [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOT_IN          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IS              [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOT_IS          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MAIOR           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MENORIGUAL      [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MAIORIGUAL      [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DIFERENTE       [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IDENTIDADE      [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IGUALDADE       [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! AND             [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! OR              [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FUN             [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! FOR             [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! WHILE           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! DO              [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LITERAL_STRING  [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! IF              [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RETURN          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RETURN_AT       [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONTINUE        [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! CONTINUE_AT     [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! BREAK           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! BREAK_AT        [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! NOT             [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! SUSPEND         [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! COMMA           [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RPAREN          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! LCHAVE          [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! RCCT            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! PV              [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! ELSE            [ reduce using rule 119 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .) ]
  ! MINUS           [ reduce using rule 116 (additiveExpression -> multiplicativeExpression .) ]
  ! PLUS            [ reduce using rule 116 (additiveExpression -> multiplicativeExpression .) ]

    additiveOperator               shift and go to state 230

state 313

    (67) parenthesizedType -> LPAREN type RPAREN .

    LCHAVE          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    FUN             reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    $end            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    FOR             reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    WHILE           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    DO              reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    VAR             reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    VAL             reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    ID              reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    CROSSINLINE     reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    IMPORT          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    INIT            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    NOINLINE        reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    OUT             reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    VARARG          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    WHERE           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    OBJECT          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    CONST           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    CONSTRUCTOR     reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    EOF             reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    FALSE           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    FUNCTION        reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    NULL            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    NULLABLE        reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    NUMBER          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    OPERATOR        reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    SMARTCAST       reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    THIS            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    TRUE            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    WHEN            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    LONG            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    ARRAY           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    LITERAL_STRING  reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    LCCT            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    IF              reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN_AT       reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE        reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE_AT     reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK_AT        reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    RCHAVE          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    INCREMENTO      reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    DECREMENTO      reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MINUS           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    PLUS            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    NOT             reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    SUSPEND         reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    COLONCOLON      reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MENOR           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    PONTO           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    AS              reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MAISIGUAL       reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MENOSIGUAL      reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MULTIGUAL       reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIGUAL        reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MODIGUAL        reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MULT            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIDE          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MOD             reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    PONTOPONTO      reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    ELVIS           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    IN              reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IN          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    IS              reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IS          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MAIOR           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MENORIGUAL      reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    MAIORIGUAL      reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    DIFERENTE       reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    IDENTIDADE      reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    IGUALDADE       reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    SEMIDENTIDADE   reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    AND             reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    OR              reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    COMMA           reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    RCCT            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    PV              reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    ELSE            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    SETA            reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)
    ATRIBUICAO      reduce using rule 67 (parenthesizedType -> LPAREN type RPAREN .)


state 314

    (60) functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive . optionalCOMMA RPAREN
    (20) optionalCOMMA -> . COMMA
    (21) optionalCOMMA -> .

    COMMA           shift and go to state 362
    RPAREN          reduce using rule 21 (optionalCOMMA -> .)

    optionalCOMMA                  shift and go to state 361

state 315

    (64) parameterOrTypeRecursive -> COMMA . optionalParameterOrType
    (65) parameterOrTypeRecursive -> COMMA . optionalParameterOrType parameterOrTypeRecursive
    (61) optionalParameterOrType -> . parameter
    (62) optionalParameterOrType -> . type
    (63) optionalParameterOrType -> .
    (38) parameter -> . simpleIdentifier DOISP type
    (39) type -> . optionalTypeModifiers optype
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COMMA           reduce using rule 63 (optionalParameterOrType -> .)
    RPAREN          reduce using rule 63 (optionalParameterOrType -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! ID              [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CROSSINLINE     [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! IMPORT          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! INIT            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VARARG          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! WHERE           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OBJECT          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CONST           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! EOF             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! FALSE           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! FUNCTION        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NULL            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NULLABLE        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NUMBER          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OPERATOR        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! SMARTCAST       [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! THIS            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! TRUE            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VAL             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VAR             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! WHEN            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! LONG            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! ARRAY           [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    optionalParameterOrType        shift and go to state 363
    parameter                      shift and go to state 239
    type                           shift and go to state 364
    simpleIdentifier               shift and go to state 40
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 316

    (58) functionType -> receiverType PONTO functionTypeParameters . SETA type

    SETA            shift and go to state 365


state 317

    (60) functionTypeParameters -> LPAREN . optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (61) optionalParameterOrType -> . parameter
    (62) optionalParameterOrType -> . type
    (63) optionalParameterOrType -> .
    (38) parameter -> . simpleIdentifier DOISP type
    (39) type -> . optionalTypeModifiers optype
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COMMA           reduce using rule 63 (optionalParameterOrType -> .)
    RPAREN          reduce using rule 63 (optionalParameterOrType -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! ID              [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CROSSINLINE     [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! IMPORT          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! INIT            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VARARG          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! WHERE           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OBJECT          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CONST           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! EOF             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! FALSE           [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! FUNCTION        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NULL            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NULLABLE        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! NUMBER          [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OPERATOR        [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! SMARTCAST       [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! THIS            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! TRUE            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VAL             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! VAR             [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! WHEN            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! LONG            [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! ARRAY           [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    optionalParameterOrType        shift and go to state 238
    parameter                      shift and go to state 239
    type                           shift and go to state 364
    simpleIdentifier               shift and go to state 40
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 318

    (59) functionType -> functionTypeParameters SETA type .

    LCHAVE          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    FUN             reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    $end            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    FOR             reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    WHILE           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    DO              reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    VAR             reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    VAL             reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    ID              reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    IMPORT          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    INIT            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    OUT             reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    VARARG          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    WHERE           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    OBJECT          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    CONST           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    CONSTRUCTOR     reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    EOF             reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    FALSE           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    FUNCTION        reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    NULL            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    NULLABLE        reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    NUMBER          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    OPERATOR        reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    SMARTCAST       reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    THIS            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    TRUE            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    WHEN            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    LONG            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    ARRAY           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    LPAREN          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    LCCT            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    IF              reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    RETURN          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    BREAK           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MINUS           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    PLUS            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    NOT             reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MENOR           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    PONTO           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    AS              reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MAISIGUAL       reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MENOSIGUAL      reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MULT            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MOD             reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    ELVIS           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    IN              reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    IS              reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MAIOR           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    AND             reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    OR              reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    COMMA           reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    RPAREN          reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    RCCT            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    PV              reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    ELSE            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    SETA            reduce using rule 59 (functionType -> functionTypeParameters SETA type .)
    ATRIBUICAO      reduce using rule 59 (functionType -> functionTypeParameters SETA type .)


state 319

    (197) optionsLambdaLiteral -> lambdaParameters SETA statements .

    LCHAVE          reduce using rule 197 (optionsLambdaLiteral -> lambdaParameters SETA statements .)


state 320

    (200) lambdaParameters -> lambdaParameter COMMA lambdaParameters .

    SETA            reduce using rule 200 (lambdaParameters -> lambdaParameter COMMA lambdaParameters .)


state 321

    (32) variableDeclaration -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 32 (variableDeclaration -> simpleIdentifier DOISP type .)
    SETA            reduce using rule 32 (variableDeclaration -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 32 (variableDeclaration -> simpleIdentifier DOISP type .)
    ATRIBUICAO      reduce using rule 32 (variableDeclaration -> simpleIdentifier DOISP type .)
    IN              reduce using rule 32 (variableDeclaration -> simpleIdentifier DOISP type .)


state 322

    (34) multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .

    DOISP           reduce using rule 34 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    COMMA           reduce using rule 34 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    SETA            reduce using rule 34 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    ATRIBUICAO      reduce using rule 34 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    IN              reduce using rule 34 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)


state 323

    (37) multiVariableDeclarationRecursive -> variableDeclaration COMMA . multiVariableDeclarationRecursive
    (36) multiVariableDeclarationRecursive -> . variableDeclaration
    (37) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (32) variableDeclaration -> . simpleIdentifier DOISP type
    (33) variableDeclaration -> . simpleIdentifier
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    variableDeclaration            shift and go to state 251
    multiVariableDeclarationRecursive shift and go to state 366
    simpleIdentifier               shift and go to state 262

state 324

    (209) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType . optionalTypeConstraints optionalFunctionBody
    (205) optionalTypeConstraints -> . typeConstraints
    (206) optionalTypeConstraints -> .
    (212) typeConstraints -> . simpleIdentifier DOISP type
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    ATRIBUICAO      reduce using rule 206 (optionalTypeConstraints -> .)
    LCHAVE          reduce using rule 206 (optionalTypeConstraints -> .)
    INCREMENTO      reduce using rule 206 (optionalTypeConstraints -> .)
    DECREMENTO      reduce using rule 206 (optionalTypeConstraints -> .)
    MENOR           reduce using rule 206 (optionalTypeConstraints -> .)
    LCCT            reduce using rule 206 (optionalTypeConstraints -> .)
    COLONCOLON      reduce using rule 206 (optionalTypeConstraints -> .)
    PONTO           reduce using rule 206 (optionalTypeConstraints -> .)
    LPAREN          reduce using rule 206 (optionalTypeConstraints -> .)
    RCHAVE          reduce using rule 206 (optionalTypeConstraints -> .)
    AS              reduce using rule 206 (optionalTypeConstraints -> .)
    MAISIGUAL       reduce using rule 206 (optionalTypeConstraints -> .)
    MENOSIGUAL      reduce using rule 206 (optionalTypeConstraints -> .)
    MULTIGUAL       reduce using rule 206 (optionalTypeConstraints -> .)
    DIVIGUAL        reduce using rule 206 (optionalTypeConstraints -> .)
    MODIGUAL        reduce using rule 206 (optionalTypeConstraints -> .)
    MULT            reduce using rule 206 (optionalTypeConstraints -> .)
    DIVIDE          reduce using rule 206 (optionalTypeConstraints -> .)
    MOD             reduce using rule 206 (optionalTypeConstraints -> .)
    PLUS            reduce using rule 206 (optionalTypeConstraints -> .)
    MINUS           reduce using rule 206 (optionalTypeConstraints -> .)
    PONTOPONTO      reduce using rule 206 (optionalTypeConstraints -> .)
    ELVIS           reduce using rule 206 (optionalTypeConstraints -> .)
    IN              reduce using rule 206 (optionalTypeConstraints -> .)
    NOT_IN          reduce using rule 206 (optionalTypeConstraints -> .)
    IS              reduce using rule 206 (optionalTypeConstraints -> .)
    NOT_IS          reduce using rule 206 (optionalTypeConstraints -> .)
    MAIOR           reduce using rule 206 (optionalTypeConstraints -> .)
    MENORIGUAL      reduce using rule 206 (optionalTypeConstraints -> .)
    MAIORIGUAL      reduce using rule 206 (optionalTypeConstraints -> .)
    DIFERENTE       reduce using rule 206 (optionalTypeConstraints -> .)
    IDENTIDADE      reduce using rule 206 (optionalTypeConstraints -> .)
    IGUALDADE       reduce using rule 206 (optionalTypeConstraints -> .)
    SEMIDENTIDADE   reduce using rule 206 (optionalTypeConstraints -> .)
    AND             reduce using rule 206 (optionalTypeConstraints -> .)
    OR              reduce using rule 206 (optionalTypeConstraints -> .)
    FUN             reduce using rule 206 (optionalTypeConstraints -> .)
    FOR             reduce using rule 206 (optionalTypeConstraints -> .)
    WHILE           reduce using rule 206 (optionalTypeConstraints -> .)
    DO              reduce using rule 206 (optionalTypeConstraints -> .)
    LITERAL_STRING  reduce using rule 206 (optionalTypeConstraints -> .)
    IF              reduce using rule 206 (optionalTypeConstraints -> .)
    RETURN          reduce using rule 206 (optionalTypeConstraints -> .)
    RETURN_AT       reduce using rule 206 (optionalTypeConstraints -> .)
    CONTINUE        reduce using rule 206 (optionalTypeConstraints -> .)
    CONTINUE_AT     reduce using rule 206 (optionalTypeConstraints -> .)
    BREAK           reduce using rule 206 (optionalTypeConstraints -> .)
    BREAK_AT        reduce using rule 206 (optionalTypeConstraints -> .)
    NOT             reduce using rule 206 (optionalTypeConstraints -> .)
    SUSPEND         reduce using rule 206 (optionalTypeConstraints -> .)
    COMMA           reduce using rule 206 (optionalTypeConstraints -> .)
    RPAREN          reduce using rule 206 (optionalTypeConstraints -> .)
    RCCT            reduce using rule 206 (optionalTypeConstraints -> .)
    PV              reduce using rule 206 (optionalTypeConstraints -> .)
    ELSE            reduce using rule 206 (optionalTypeConstraints -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

  ! ID              [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! CROSSINLINE     [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! IMPORT          [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! INIT            [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! NOINLINE        [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! OUT             [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! VARARG          [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! WHERE           [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! OBJECT          [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! CONST           [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! CONSTRUCTOR     [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! EOF             [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! FALSE           [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! FUNCTION        [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! NULL            [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! NULLABLE        [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! NUMBER          [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! OPERATOR        [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! SMARTCAST       [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! THIS            [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! TRUE            [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! VAL             [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! VAR             [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! WHEN            [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! LONG            [ reduce using rule 206 (optionalTypeConstraints -> .) ]
  ! ARRAY           [ reduce using rule 206 (optionalTypeConstraints -> .) ]

    optionalTypeConstraints        shift and go to state 367
    typeConstraints                shift and go to state 368
    simpleIdentifier               shift and go to state 369

state 325

    (185) parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive . RPAREN

    RPAREN          shift and go to state 370


state 326

    (186) parametersWithOptionalType -> LPAREN RPAREN .

    DOISP           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    ID              reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    IMPORT          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    INIT            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    OUT             reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    VARARG          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHERE           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    OBJECT          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONST           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONSTRUCTOR     reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    EOF             reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    FALSE           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    NULL            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    NULLABLE        reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    NUMBER          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    SMARTCAST       reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    THIS            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    TRUE            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    VAL             reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    VAR             reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHEN            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    LONG            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    ARRAY           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENOR           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    LCCT            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    PONTO           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    LPAREN          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    AS              reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MULT            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MOD             reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    PLUS            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MINUS           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    ELVIS           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    IN              reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    IS              reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAIOR           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    AND             reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    OR              reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    FUN             reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    FOR             reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHILE           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    DO              reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    IF              reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    RETURN          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    BREAK           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT             reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    COMMA           reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    RPAREN          reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    RCCT            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    PV              reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)
    ELSE            reduce using rule 186 (parametersWithOptionalType -> LPAREN RPAREN .)


state 327

    (187) parametersWithOptionalTypeRecursive -> parameterWithOptionalType .
    (188) parametersWithOptionalTypeRecursive -> parameterWithOptionalType . COMMA parametersWithOptionalTypeRecursive COMMA

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 187 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType .)
    COMMA           shift and go to state 371

  ! COMMA           [ reduce using rule 187 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType .) ]


state 328

    (189) parameterWithOptionalType -> optionalParameterModifiers . simpleIdentifier optionalType
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    simpleIdentifier               shift and go to state 372

state 329

    (190) optionalParameterModifiers -> parameterModifiers .

    ID              reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    CROSSINLINE     reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    IMPORT          reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    INIT            reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    NOINLINE        reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    OUT             reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    VARARG          reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    WHERE           reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    OBJECT          reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    CONST           reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    CONSTRUCTOR     reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    EOF             reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    FALSE           reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    FUNCTION        reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    NULL            reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    NULLABLE        reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    NUMBER          reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    OPERATOR        reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    SMARTCAST       reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    THIS            reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    TRUE            reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    VAL             reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    VAR             reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    WHEN            reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    LONG            reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)
    ARRAY           reduce using rule 190 (optionalParameterModifiers -> parameterModifiers .)


state 330

    (192) parameterModifiers -> VARARG .

    ID              reduce using rule 192 (parameterModifiers -> VARARG .)
    CROSSINLINE     reduce using rule 192 (parameterModifiers -> VARARG .)
    IMPORT          reduce using rule 192 (parameterModifiers -> VARARG .)
    INIT            reduce using rule 192 (parameterModifiers -> VARARG .)
    NOINLINE        reduce using rule 192 (parameterModifiers -> VARARG .)
    OUT             reduce using rule 192 (parameterModifiers -> VARARG .)
    VARARG          reduce using rule 192 (parameterModifiers -> VARARG .)
    WHERE           reduce using rule 192 (parameterModifiers -> VARARG .)
    OBJECT          reduce using rule 192 (parameterModifiers -> VARARG .)
    CONST           reduce using rule 192 (parameterModifiers -> VARARG .)
    CONSTRUCTOR     reduce using rule 192 (parameterModifiers -> VARARG .)
    EOF             reduce using rule 192 (parameterModifiers -> VARARG .)
    FALSE           reduce using rule 192 (parameterModifiers -> VARARG .)
    FUNCTION        reduce using rule 192 (parameterModifiers -> VARARG .)
    NULL            reduce using rule 192 (parameterModifiers -> VARARG .)
    NULLABLE        reduce using rule 192 (parameterModifiers -> VARARG .)
    NUMBER          reduce using rule 192 (parameterModifiers -> VARARG .)
    OPERATOR        reduce using rule 192 (parameterModifiers -> VARARG .)
    SMARTCAST       reduce using rule 192 (parameterModifiers -> VARARG .)
    THIS            reduce using rule 192 (parameterModifiers -> VARARG .)
    TRUE            reduce using rule 192 (parameterModifiers -> VARARG .)
    VAL             reduce using rule 192 (parameterModifiers -> VARARG .)
    VAR             reduce using rule 192 (parameterModifiers -> VARARG .)
    WHEN            reduce using rule 192 (parameterModifiers -> VARARG .)
    LONG            reduce using rule 192 (parameterModifiers -> VARARG .)
    ARRAY           reduce using rule 192 (parameterModifiers -> VARARG .)


state 331

    (193) parameterModifiers -> NOINLINE .

    ID              reduce using rule 193 (parameterModifiers -> NOINLINE .)
    CROSSINLINE     reduce using rule 193 (parameterModifiers -> NOINLINE .)
    IMPORT          reduce using rule 193 (parameterModifiers -> NOINLINE .)
    INIT            reduce using rule 193 (parameterModifiers -> NOINLINE .)
    NOINLINE        reduce using rule 193 (parameterModifiers -> NOINLINE .)
    OUT             reduce using rule 193 (parameterModifiers -> NOINLINE .)
    VARARG          reduce using rule 193 (parameterModifiers -> NOINLINE .)
    WHERE           reduce using rule 193 (parameterModifiers -> NOINLINE .)
    OBJECT          reduce using rule 193 (parameterModifiers -> NOINLINE .)
    CONST           reduce using rule 193 (parameterModifiers -> NOINLINE .)
    CONSTRUCTOR     reduce using rule 193 (parameterModifiers -> NOINLINE .)
    EOF             reduce using rule 193 (parameterModifiers -> NOINLINE .)
    FALSE           reduce using rule 193 (parameterModifiers -> NOINLINE .)
    FUNCTION        reduce using rule 193 (parameterModifiers -> NOINLINE .)
    NULL            reduce using rule 193 (parameterModifiers -> NOINLINE .)
    NULLABLE        reduce using rule 193 (parameterModifiers -> NOINLINE .)
    NUMBER          reduce using rule 193 (parameterModifiers -> NOINLINE .)
    OPERATOR        reduce using rule 193 (parameterModifiers -> NOINLINE .)
    SMARTCAST       reduce using rule 193 (parameterModifiers -> NOINLINE .)
    THIS            reduce using rule 193 (parameterModifiers -> NOINLINE .)
    TRUE            reduce using rule 193 (parameterModifiers -> NOINLINE .)
    VAL             reduce using rule 193 (parameterModifiers -> NOINLINE .)
    VAR             reduce using rule 193 (parameterModifiers -> NOINLINE .)
    WHEN            reduce using rule 193 (parameterModifiers -> NOINLINE .)
    LONG            reduce using rule 193 (parameterModifiers -> NOINLINE .)
    ARRAY           reduce using rule 193 (parameterModifiers -> NOINLINE .)


state 332

    (194) parameterModifiers -> CROSSINLINE .

    ID              reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    IMPORT          reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    INIT            reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    NOINLINE        reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    OUT             reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    VARARG          reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    WHERE           reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    OBJECT          reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    CONST           reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    CONSTRUCTOR     reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    EOF             reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    FALSE           reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    FUNCTION        reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    NULL            reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    NULLABLE        reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    NUMBER          reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    OPERATOR        reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    SMARTCAST       reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    THIS            reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    TRUE            reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    VAL             reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    VAR             reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    WHEN            reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    LONG            reduce using rule 194 (parameterModifiers -> CROSSINLINE .)
    ARRAY           reduce using rule 194 (parameterModifiers -> CROSSINLINE .)


state 333

    (10) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO . expression optionalPv
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 373
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 334

    (17) typeParameters -> MENOR typeParameter typeParametersRecursive . optionalCOMMA MAIOR
    (20) optionalCOMMA -> . COMMA
    (21) optionalCOMMA -> .

    COMMA           shift and go to state 362
    MAIOR           reduce using rule 21 (optionalCOMMA -> .)

    optionalCOMMA                  shift and go to state 374

state 335

    (18) typeParametersRecursive -> COMMA . typeParameter
    (19) typeParametersRecursive -> COMMA . typeParameter typeParametersRecursive
    (22) typeParameter -> . simpleIdentifier
    (23) typeParameter -> . simpleIdentifier DOISP type
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31

    typeParameter                  shift and go to state 375
    simpleIdentifier               shift and go to state 264

state 336

    (23) typeParameter -> simpleIdentifier DOISP . type
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 376
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 337

    (161) typeArguments -> MENOR typeArgumentsRecursive MAIOR .

    ATRIBUICAO      reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RPAREN          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    INCREMENTO      reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DECREMENTO      reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENOR           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LCCT            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    COLONCOLON      reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PONTO           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LPAREN          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RCHAVE          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    AS              reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAISIGUAL       reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENOSIGUAL      reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MULTIGUAL       reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIVIGUAL        reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MODIGUAL        reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MULT            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIVIDE          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MOD             reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PLUS            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MINUS           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PONTOPONTO      reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ID              reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CROSSINLINE     reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IMPORT          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    INIT            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOINLINE        reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OUT             reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VARARG          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    WHERE           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OBJECT          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONST           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONSTRUCTOR     reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    EOF             reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FALSE           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FUNCTION        reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NULL            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NULLABLE        reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NUMBER          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OPERATOR        reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SMARTCAST       reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    THIS            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    TRUE            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VAL             reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VAR             reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    WHEN            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LONG            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ARRAY           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ELVIS           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IN              reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT_IN          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IS              reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT_IS          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAIOR           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENORIGUAL      reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAIORIGUAL      reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIFERENTE       reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IDENTIDADE      reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IGUALDADE       reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SEMIDENTIDADE   reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    AND             reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OR              reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FUN             reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FOR             reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    WHILE           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DO              reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LITERAL_STRING  reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IF              reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RETURN          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RETURN_AT       reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONTINUE        reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONTINUE_AT     reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    BREAK           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    BREAK_AT        reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT             reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SUSPEND         reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    COMMA           reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LCHAVE          reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RCCT            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PV              reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ELSE            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    $end            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SETA            reduce using rule 161 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)


state 338

    (164) typeArgumentsRecursive -> typeProjection COMMA . typeArgumentsRecursive
    (163) typeArgumentsRecursive -> . typeProjection
    (164) typeArgumentsRecursive -> . typeProjection COMMA typeArgumentsRecursive
    (54) typeProjection -> . typeProjectionModifiers type
    (55) typeProjection -> . type
    (56) typeProjectionModifiers -> . typeProjection
    (57) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (39) type -> . optionalTypeModifiers optype
    (48) typeProjectionModifier -> . varianceModifier
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (49) varianceModifier -> . IN
    (50) varianceModifier -> . OUT
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    IN              shift and go to state 272
    OUT             shift and go to state 273
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]
  ! OUT             [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    typeProjection                 shift and go to state 267
    typeArgumentsRecursive         shift and go to state 377
    typeProjectionModifiers        shift and go to state 268
    type                           shift and go to state 269
    typeProjectionModifier         shift and go to state 270
    optionalTypeModifiers          shift and go to state 45
    varianceModifier               shift and go to state 271
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 339

    (54) typeProjection -> typeProjectionModifiers type .

    COMMA           reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    MAIOR           reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    SUSPEND         reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    LPAREN          reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    ID              reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    CROSSINLINE     reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    IMPORT          reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    INIT            reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    NOINLINE        reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    OUT             reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    VARARG          reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    WHERE           reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    OBJECT          reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    CONST           reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    CONSTRUCTOR     reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    EOF             reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    FALSE           reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    FUNCTION        reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    NULL            reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    NULLABLE        reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    NUMBER          reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    OPERATOR        reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    SMARTCAST       reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    THIS            reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    TRUE            reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    VAL             reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    VAR             reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    WHEN            reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    LONG            reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)
    ARRAY           reduce using rule 54 (typeProjection -> typeProjectionModifiers type .)


state 340

    (57) typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .
    (54) typeProjection -> typeProjectionModifiers . type
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! reduce/reduce conflict for LPAREN resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for ID resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for INIT resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for OUT resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for OBJECT resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for CONST resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for EOF resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for FALSE resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for NULL resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for THIS resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for TRUE resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for VAL resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for VAR resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for WHEN resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for LONG resolved using rule 41 (optionalTypeModifiers -> .)
  ! reduce/reduce conflict for ARRAY resolved using rule 41 (optionalTypeModifiers -> .)
  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! LPAREN          [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! ID              [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CROSSINLINE     [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! IMPORT          [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! INIT            [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NOINLINE        [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OUT             [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VARARG          [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! WHERE           [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OBJECT          [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CONST           [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CONSTRUCTOR     [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! EOF             [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! FALSE           [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! FUNCTION        [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NULL            [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NULLABLE        [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NUMBER          [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OPERATOR        [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! SMARTCAST       [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! THIS            [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! TRUE            [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VAL             [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VAR             [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! WHEN            [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! LONG            [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! ARRAY           [ reduce using rule 57 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 339
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 341

    (56) typeProjectionModifiers -> typeProjection .

    SUSPEND         reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    OBJECT          reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    CONST           reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    CONSTRUCTOR     reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    EOF             reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    FALSE           reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    FUNCTION        reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    NULL            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    NULLABLE        reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    NUMBER          reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    OPERATOR        reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    SMARTCAST       reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    THIS            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    TRUE            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    VAL             reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    VAR             reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    WHEN            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    LONG            reduce using rule 56 (typeProjectionModifiers -> typeProjection .)
    ARRAY           reduce using rule 56 (typeProjectionModifiers -> typeProjection .)


state 342

    (148) indexingSuffix -> LCCT indexingSuffixRecursive RCCT .

    ATRIBUICAO      reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RPAREN          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    INCREMENTO      reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DECREMENTO      reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENOR           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LCCT            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    COLONCOLON      reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PONTO           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LPAREN          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RCHAVE          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    AS              reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAISIGUAL       reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENOSIGUAL      reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MULTIGUAL       reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIVIGUAL        reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MODIGUAL        reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MULT            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIVIDE          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MOD             reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PLUS            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MINUS           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PONTOPONTO      reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ID              reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CROSSINLINE     reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IMPORT          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    INIT            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOINLINE        reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OUT             reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VARARG          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    WHERE           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OBJECT          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONST           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONSTRUCTOR     reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    EOF             reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FALSE           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FUNCTION        reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NULL            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NULLABLE        reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NUMBER          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OPERATOR        reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    SMARTCAST       reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    THIS            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    TRUE            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VAL             reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VAR             reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    WHEN            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LONG            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ARRAY           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ELVIS           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IN              reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT_IN          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IS              reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT_IS          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAIOR           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENORIGUAL      reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAIORIGUAL      reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIFERENTE       reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IDENTIDADE      reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IGUALDADE       reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    SEMIDENTIDADE   reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    AND             reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OR              reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FUN             reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FOR             reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    WHILE           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DO              reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LITERAL_STRING  reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IF              reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RETURN          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RETURN_AT       reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONTINUE        reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONTINUE_AT     reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    BREAK           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    BREAK_AT        reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT             reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    SUSPEND         reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    COMMA           reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LCHAVE          reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RCCT            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PV              reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ELSE            reduce using rule 148 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)


state 343

    (151) indexingSuffixRecursive -> expression COMMA . indexingSuffixRecursive
    (150) indexingSuffixRecursive -> . expression
    (151) indexingSuffixRecursive -> . expression COMMA indexingSuffixRecursive
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 276
    indexingSuffixRecursive        shift and go to state 378
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 344

    (152) navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .

    ATRIBUICAO      reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RPAREN          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INCREMENTO      reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DECREMENTO      reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOR           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCCT            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COLONCOLON      reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTO           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LPAREN          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCHAVE          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AS              reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAISIGUAL       reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOSIGUAL      reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULTIGUAL       reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIGUAL        reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MODIGUAL        reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULT            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIDE          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MOD             reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PLUS            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MINUS           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTOPONTO      reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ID              reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CROSSINLINE     reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IMPORT          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INIT            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOINLINE        reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OUT             reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VARARG          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHERE           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OBJECT          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONST           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONSTRUCTOR     reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    EOF             reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FALSE           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FUNCTION        reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NULL            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NULLABLE        reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NUMBER          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OPERATOR        reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SMARTCAST       reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    THIS            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    TRUE            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VAL             reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VAR             reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHEN            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LONG            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ARRAY           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELVIS           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IN              reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IN          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IS              reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IS          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIOR           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENORIGUAL      reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIORIGUAL      reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIFERENTE       reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IDENTIDADE      reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IGUALDADE       reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SEMIDENTIDADE   reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AND             reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OR              reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FUN             reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FOR             reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHILE           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DO              reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LITERAL_STRING  reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IF              reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN_AT       reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE        reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE_AT     reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK_AT        reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT             reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SUSPEND         reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COMMA           reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCHAVE          reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCCT            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PV              reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELSE            reduce using rule 152 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)


state 345

    (153) navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .

    ATRIBUICAO      reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RPAREN          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INCREMENTO      reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DECREMENTO      reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOR           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCCT            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COLONCOLON      reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTO           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LPAREN          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCHAVE          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AS              reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAISIGUAL       reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOSIGUAL      reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULTIGUAL       reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIGUAL        reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MODIGUAL        reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULT            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIDE          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MOD             reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PLUS            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MINUS           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTOPONTO      reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ID              reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CROSSINLINE     reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IMPORT          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INIT            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOINLINE        reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OUT             reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VARARG          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHERE           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OBJECT          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONST           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONSTRUCTOR     reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    EOF             reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FALSE           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FUNCTION        reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NULL            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NULLABLE        reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NUMBER          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OPERATOR        reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SMARTCAST       reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    THIS            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    TRUE            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VAL             reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VAR             reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHEN            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LONG            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ARRAY           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELVIS           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IN              reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IN          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IS              reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IS          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIOR           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENORIGUAL      reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIORIGUAL      reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIFERENTE       reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IDENTIDADE      reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IGUALDADE       reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SEMIDENTIDADE   reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AND             reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OR              reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FUN             reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FOR             reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHILE           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DO              reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LITERAL_STRING  reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IF              reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN_AT       reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE        reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE_AT     reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK_AT        reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT             reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SUSPEND         reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COMMA           reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCHAVE          reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCCT            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PV              reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELSE            reduce using rule 153 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)


state 346

    (83) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN . expression RPAREN controlStructureBody
    (84) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN . expression RPAREN
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 379
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 347

    (85) forStatement_VD -> FOR LPAREN variableDeclaration IN . expression RPAREN controlStructureBody
    (86) forStatement_VD -> FOR LPAREN variableDeclaration IN . expression RPAREN
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 380
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 348

    (87) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (88) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (76) controlStructureBody -> . block
    (77) controlStructureBody -> . statement
    (78) block -> . LCHAVE statements RCHAVE
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

    PV              shift and go to state 382
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 60
    controlStructureBody           shift and go to state 381
    block                          shift and go to state 182
    statement                      shift and go to state 183
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 349

    (89) doWhileStatement -> DO controlStructureBody WHILE LPAREN . expression RPAREN
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 383
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 350

    (90) doWhileStatement -> DO WHILE LPAREN expression . RPAREN
    (87) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (88) whileStatement -> WHILE LPAREN expression . RPAREN PV
    (223) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 384
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 351

    (154) callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .

    INCREMENTO      reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DECREMENTO      reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MENOR           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LCCT            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    COLONCOLON      reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PONTO           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LPAREN          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RCHAVE          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    AS              reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MAISIGUAL       reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MENOSIGUAL      reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MODIGUAL        reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MULT            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DIVIDE          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MOD             reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PLUS            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MINUS           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ID              reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IMPORT          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    INIT            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOINLINE        reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OUT             reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    VARARG          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    WHERE           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OBJECT          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CONST           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CONSTRUCTOR     reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    EOF             reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    FALSE           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    FUNCTION        reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NULL            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NULLABLE        reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NUMBER          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OPERATOR        reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    SMARTCAST       reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    THIS            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    TRUE            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    VAL             reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    VAR             reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    WHEN            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LONG            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ARRAY           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ELVIS           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IN              reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOT_IN          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IS              reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOT_IS          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MAIOR           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DIFERENTE       reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IGUALDADE       reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    AND             reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OR              reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    FUN             reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    FOR             reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    WHILE           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DO              reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IF              reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RETURN          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RETURN_AT       reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CONTINUE        reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    BREAK           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    BREAK_AT        reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOT             reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    SUSPEND         reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    COMMA           reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RPAREN          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LCHAVE          reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RCCT            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PV              reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ELSE            reduce using rule 154 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)


state 352

    (160) annotatedLambda -> lambdaLiteral .

    INCREMENTO      reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    DECREMENTO      reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MENOR           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    LCCT            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    COLONCOLON      reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    PONTO           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    LPAREN          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    RCHAVE          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    AS              reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MAISIGUAL       reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MENOSIGUAL      reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MODIGUAL        reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MULT            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    DIVIDE          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MOD             reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    PLUS            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MINUS           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    ID              reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    IMPORT          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    INIT            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    NOINLINE        reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    OUT             reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    VARARG          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    WHERE           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    OBJECT          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    CONST           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    CONSTRUCTOR     reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    EOF             reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    FALSE           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    FUNCTION        reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    NULL            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    NULLABLE        reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    NUMBER          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    OPERATOR        reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    SMARTCAST       reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    THIS            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    TRUE            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    VAL             reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    VAR             reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    WHEN            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    LONG            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    ARRAY           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    ELVIS           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    IN              reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    NOT_IN          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    IS              reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    NOT_IS          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MAIOR           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    DIFERENTE       reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    IGUALDADE       reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    AND             reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    OR              reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    FUN             reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    FOR             reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    WHILE           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    DO              reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    IF              reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    RETURN          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    RETURN_AT       reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    CONTINUE        reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    BREAK           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    BREAK_AT        reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    NOT             reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    SUSPEND         reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    COMMA           reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    RPAREN          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    LCHAVE          reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    RCCT            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    PV              reduce using rule 160 (annotatedLambda -> lambdaLiteral .)
    ELSE            reduce using rule 160 (annotatedLambda -> lambdaLiteral .)


state 353

    (167) valueArguments -> LPAREN RPAREN .

    RCHAVE          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MENOR           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    LCCT            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    PONTO           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    LPAREN          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    AS              reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MULT            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MOD             reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    PLUS            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MINUS           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    ID              reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    IMPORT          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    INIT            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    OUT             reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    VARARG          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    WHERE           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    OBJECT          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    CONST           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    CONSTRUCTOR     reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    EOF             reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    FALSE           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    NULL            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    NULLABLE        reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    NUMBER          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    SMARTCAST       reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    THIS            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    TRUE            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    VAL             reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    VAR             reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    WHEN            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    LONG            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    ARRAY           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    ELVIS           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    IN              reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    IS              reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MAIOR           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    AND             reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    OR              reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    FUN             reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    FOR             reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    WHILE           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    DO              reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    IF              reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    RETURN          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    BREAK           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    NOT             reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    COMMA           reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    RPAREN          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    RCCT            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    PV              reduce using rule 167 (valueArguments -> LPAREN RPAREN .)
    ELSE            reduce using rule 167 (valueArguments -> LPAREN RPAREN .)


state 354

    (168) valueArguments -> LPAREN valueArgumentsRecursive . RPAREN

    RPAREN          shift and go to state 385


state 355

    (165) valueArgumentsRecursive -> valueArgument .
    (166) valueArgumentsRecursive -> valueArgument . COMMA valueArgumentsRecursive

    RPAREN          reduce using rule 165 (valueArgumentsRecursive -> valueArgument .)
    COMMA           shift and go to state 386


state 356

    (169) valueArgument -> simpleIdentifier . IGUALDADE MULT expression
    (170) valueArgument -> simpleIdentifier . IGUALDADE expression
    (173) primaryExpression -> simpleIdentifier .
    (128) label -> simpleIdentifier .

  ! shift/reduce conflict for IGUALDADE resolved as shift
  ! reduce/reduce conflict for INCREMENTO resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OBJECT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONST resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for EOF resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FALSE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULL resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for THIS resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for TRUE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHEN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LONG resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ARRAY resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 128 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 128 (label -> simpleIdentifier .)
    IGUALDADE       shift and go to state 387
    PONTOPONTO      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 173 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 128 (label -> simpleIdentifier .)
    MINUS           reduce using rule 128 (label -> simpleIdentifier .)
    PLUS            reduce using rule 128 (label -> simpleIdentifier .)
    NOT             reduce using rule 128 (label -> simpleIdentifier .)
    ID              reduce using rule 128 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 128 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 128 (label -> simpleIdentifier .)
    INIT            reduce using rule 128 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 128 (label -> simpleIdentifier .)
    OUT             reduce using rule 128 (label -> simpleIdentifier .)
    VARARG          reduce using rule 128 (label -> simpleIdentifier .)
    WHERE           reduce using rule 128 (label -> simpleIdentifier .)
    OBJECT          reduce using rule 128 (label -> simpleIdentifier .)
    CONST           reduce using rule 128 (label -> simpleIdentifier .)
    CONSTRUCTOR     reduce using rule 128 (label -> simpleIdentifier .)
    EOF             reduce using rule 128 (label -> simpleIdentifier .)
    FALSE           reduce using rule 128 (label -> simpleIdentifier .)
    FUNCTION        reduce using rule 128 (label -> simpleIdentifier .)
    NULL            reduce using rule 128 (label -> simpleIdentifier .)
    NULLABLE        reduce using rule 128 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 128 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 128 (label -> simpleIdentifier .)
    SMARTCAST       reduce using rule 128 (label -> simpleIdentifier .)
    THIS            reduce using rule 128 (label -> simpleIdentifier .)
    TRUE            reduce using rule 128 (label -> simpleIdentifier .)
    VAL             reduce using rule 128 (label -> simpleIdentifier .)
    VAR             reduce using rule 128 (label -> simpleIdentifier .)
    WHEN            reduce using rule 128 (label -> simpleIdentifier .)
    LONG            reduce using rule 128 (label -> simpleIdentifier .)
    ARRAY           reduce using rule 128 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 128 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 128 (label -> simpleIdentifier .)
    LCCT            reduce using rule 128 (label -> simpleIdentifier .)
    IF              reduce using rule 128 (label -> simpleIdentifier .)
    RETURN          reduce using rule 128 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 128 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 128 (label -> simpleIdentifier .)
    BREAK           reduce using rule 128 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 128 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 128 (label -> simpleIdentifier .)
    FUN             reduce using rule 128 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 128 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 128 (label -> simpleIdentifier .)

  ! PLUS            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OBJECT          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONST           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! CONSTRUCTOR     [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! EOF             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FALSE           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! FUNCTION        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NULL            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NULLABLE        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! SMARTCAST       [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! THIS            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! TRUE            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! WHEN            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LONG            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! ARRAY           [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! IGUALDADE       [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 173 (primaryExpression -> simpleIdentifier .) ]


state 357

    (171) valueArgument -> expression .
    (223) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 171 (valueArgument -> expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 171 (valueArgument -> expression .)
    COMMA           reduce using rule 171 (valueArgument -> expression .)
    RPAREN          reduce using rule 171 (valueArgument -> expression .)
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 358

    (184) collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive .

    RCCT            reduce using rule 184 (collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive .)


state 359

    (213) ifExpression -> IF LPAREN expression RPAREN . controlStructureBodyOrPV
    (214) ifExpression -> IF LPAREN expression RPAREN . optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (215) controlStructureBodyOrPV -> . controlStructureBody
    (216) controlStructureBodyOrPV -> . PV
    (217) optionalControlStructureBody -> . controlStructureBody
    (218) optionalControlStructureBody -> .
    (76) controlStructureBody -> . block
    (77) controlStructureBody -> . statement
    (78) block -> . LCHAVE statements RCHAVE
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 391
    ELSE            reduce using rule 218 (optionalControlStructureBody -> .)
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

  ! PV              [ reduce using rule 218 (optionalControlStructureBody -> .) ]

    expression                     shift and go to state 60
    controlStructureBodyOrPV       shift and go to state 388
    optionalControlStructureBody   shift and go to state 389
    controlStructureBody           shift and go to state 390
    block                          shift and go to state 182
    statement                      shift and go to state 183
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 360

    (105) infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .

    FUN             reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    FOR             reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    WHILE           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DO              reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VAR             reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VAL             reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ID              reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CROSSINLINE     reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IMPORT          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    INIT            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOINLINE        reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OUT             reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VARARG          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    WHERE           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OBJECT          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONST           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONSTRUCTOR     reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    EOF             reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    FALSE           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    FUNCTION        reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NULL            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NULLABLE        reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NUMBER          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OPERATOR        reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    SMARTCAST       reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    THIS            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    TRUE            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    WHEN            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LONG            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ARRAY           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LPAREN          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LITERAL_STRING  reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LCCT            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IF              reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RETURN          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RETURN_AT       reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONTINUE        reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONTINUE_AT     reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    BREAK           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    BREAK_AT        reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RCHAVE          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    INCREMENTO      reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DECREMENTO      reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MINUS           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PLUS            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT             reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    SUSPEND         reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    COLONCOLON      reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LCHAVE          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENOR           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PONTO           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    AS              reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAISIGUAL       reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENOSIGUAL      reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MULTIGUAL       reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIVIGUAL        reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MODIGUAL        reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MULT            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIVIDE          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MOD             reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PONTOPONTO      reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ELVIS           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IN              reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT_IN          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IS              reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT_IS          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAIOR           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENORIGUAL      reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAIORIGUAL      reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIFERENTE       reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IDENTIDADE      reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IGUALDADE       reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    SEMIDENTIDADE   reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    AND             reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OR              reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    COMMA           reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RPAREN          reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RCCT            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PV              reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ELSE            reduce using rule 105 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)


state 361

    (60) functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA . RPAREN

    RPAREN          shift and go to state 392


state 362

    (20) optionalCOMMA -> COMMA .

    RPAREN          reduce using rule 20 (optionalCOMMA -> COMMA .)
    MAIOR           reduce using rule 20 (optionalCOMMA -> COMMA .)


state 363

    (64) parameterOrTypeRecursive -> COMMA optionalParameterOrType .
    (65) parameterOrTypeRecursive -> COMMA optionalParameterOrType . parameterOrTypeRecursive
    (64) parameterOrTypeRecursive -> . COMMA optionalParameterOrType
    (65) parameterOrTypeRecursive -> . COMMA optionalParameterOrType parameterOrTypeRecursive
    (66) parameterOrTypeRecursive -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 64 (parameterOrTypeRecursive -> COMMA optionalParameterOrType .)
    RPAREN          reduce using rule 64 (parameterOrTypeRecursive -> COMMA optionalParameterOrType .)
    COMMA           shift and go to state 315

  ! COMMA           [ reduce using rule 64 (parameterOrTypeRecursive -> COMMA optionalParameterOrType .) ]
  ! COMMA           [ reduce using rule 66 (parameterOrTypeRecursive -> .) ]
  ! RPAREN          [ reduce using rule 66 (parameterOrTypeRecursive -> .) ]

    parameterOrTypeRecursive       shift and go to state 393

state 364

    (62) optionalParameterOrType -> type .

    COMMA           reduce using rule 62 (optionalParameterOrType -> type .)
    RPAREN          reduce using rule 62 (optionalParameterOrType -> type .)


state 365

    (58) functionType -> receiverType PONTO functionTypeParameters SETA . type
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 394
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 366

    (37) multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive .

    RPAREN          reduce using rule 37 (multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive .)


state 367

    (209) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints . optionalFunctionBody
    (207) optionalFunctionBody -> . functionBody
    (208) optionalFunctionBody -> .
    (24) functionBody -> . block
    (25) functionBody -> . ATRIBUICAO expression
    (78) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 208 (optionalFunctionBody -> .)
    FOR             reduce using rule 208 (optionalFunctionBody -> .)
    WHILE           reduce using rule 208 (optionalFunctionBody -> .)
    DO              reduce using rule 208 (optionalFunctionBody -> .)
    VAR             reduce using rule 208 (optionalFunctionBody -> .)
    VAL             reduce using rule 208 (optionalFunctionBody -> .)
    ID              reduce using rule 208 (optionalFunctionBody -> .)
    CROSSINLINE     reduce using rule 208 (optionalFunctionBody -> .)
    IMPORT          reduce using rule 208 (optionalFunctionBody -> .)
    INIT            reduce using rule 208 (optionalFunctionBody -> .)
    NOINLINE        reduce using rule 208 (optionalFunctionBody -> .)
    OUT             reduce using rule 208 (optionalFunctionBody -> .)
    VARARG          reduce using rule 208 (optionalFunctionBody -> .)
    WHERE           reduce using rule 208 (optionalFunctionBody -> .)
    OBJECT          reduce using rule 208 (optionalFunctionBody -> .)
    CONST           reduce using rule 208 (optionalFunctionBody -> .)
    CONSTRUCTOR     reduce using rule 208 (optionalFunctionBody -> .)
    EOF             reduce using rule 208 (optionalFunctionBody -> .)
    FALSE           reduce using rule 208 (optionalFunctionBody -> .)
    FUNCTION        reduce using rule 208 (optionalFunctionBody -> .)
    NULL            reduce using rule 208 (optionalFunctionBody -> .)
    NULLABLE        reduce using rule 208 (optionalFunctionBody -> .)
    NUMBER          reduce using rule 208 (optionalFunctionBody -> .)
    OPERATOR        reduce using rule 208 (optionalFunctionBody -> .)
    SMARTCAST       reduce using rule 208 (optionalFunctionBody -> .)
    THIS            reduce using rule 208 (optionalFunctionBody -> .)
    TRUE            reduce using rule 208 (optionalFunctionBody -> .)
    WHEN            reduce using rule 208 (optionalFunctionBody -> .)
    LONG            reduce using rule 208 (optionalFunctionBody -> .)
    ARRAY           reduce using rule 208 (optionalFunctionBody -> .)
    LPAREN          reduce using rule 208 (optionalFunctionBody -> .)
    LITERAL_STRING  reduce using rule 208 (optionalFunctionBody -> .)
    LCCT            reduce using rule 208 (optionalFunctionBody -> .)
    IF              reduce using rule 208 (optionalFunctionBody -> .)
    RETURN          reduce using rule 208 (optionalFunctionBody -> .)
    RETURN_AT       reduce using rule 208 (optionalFunctionBody -> .)
    CONTINUE        reduce using rule 208 (optionalFunctionBody -> .)
    CONTINUE_AT     reduce using rule 208 (optionalFunctionBody -> .)
    BREAK           reduce using rule 208 (optionalFunctionBody -> .)
    BREAK_AT        reduce using rule 208 (optionalFunctionBody -> .)
    RCHAVE          reduce using rule 208 (optionalFunctionBody -> .)
    INCREMENTO      reduce using rule 208 (optionalFunctionBody -> .)
    DECREMENTO      reduce using rule 208 (optionalFunctionBody -> .)
    MINUS           reduce using rule 208 (optionalFunctionBody -> .)
    PLUS            reduce using rule 208 (optionalFunctionBody -> .)
    NOT             reduce using rule 208 (optionalFunctionBody -> .)
    SUSPEND         reduce using rule 208 (optionalFunctionBody -> .)
    COLONCOLON      reduce using rule 208 (optionalFunctionBody -> .)
    MENOR           reduce using rule 208 (optionalFunctionBody -> .)
    PONTO           reduce using rule 208 (optionalFunctionBody -> .)
    AS              reduce using rule 208 (optionalFunctionBody -> .)
    MAISIGUAL       reduce using rule 208 (optionalFunctionBody -> .)
    MENOSIGUAL      reduce using rule 208 (optionalFunctionBody -> .)
    MULTIGUAL       reduce using rule 208 (optionalFunctionBody -> .)
    DIVIGUAL        reduce using rule 208 (optionalFunctionBody -> .)
    MODIGUAL        reduce using rule 208 (optionalFunctionBody -> .)
    MULT            reduce using rule 208 (optionalFunctionBody -> .)
    DIVIDE          reduce using rule 208 (optionalFunctionBody -> .)
    MOD             reduce using rule 208 (optionalFunctionBody -> .)
    PONTOPONTO      reduce using rule 208 (optionalFunctionBody -> .)
    ELVIS           reduce using rule 208 (optionalFunctionBody -> .)
    IN              reduce using rule 208 (optionalFunctionBody -> .)
    NOT_IN          reduce using rule 208 (optionalFunctionBody -> .)
    IS              reduce using rule 208 (optionalFunctionBody -> .)
    NOT_IS          reduce using rule 208 (optionalFunctionBody -> .)
    MAIOR           reduce using rule 208 (optionalFunctionBody -> .)
    MENORIGUAL      reduce using rule 208 (optionalFunctionBody -> .)
    MAIORIGUAL      reduce using rule 208 (optionalFunctionBody -> .)
    DIFERENTE       reduce using rule 208 (optionalFunctionBody -> .)
    IDENTIDADE      reduce using rule 208 (optionalFunctionBody -> .)
    IGUALDADE       reduce using rule 208 (optionalFunctionBody -> .)
    SEMIDENTIDADE   reduce using rule 208 (optionalFunctionBody -> .)
    AND             reduce using rule 208 (optionalFunctionBody -> .)
    OR              reduce using rule 208 (optionalFunctionBody -> .)
    COMMA           reduce using rule 208 (optionalFunctionBody -> .)
    RPAREN          reduce using rule 208 (optionalFunctionBody -> .)
    RCCT            reduce using rule 208 (optionalFunctionBody -> .)
    PV              reduce using rule 208 (optionalFunctionBody -> .)
    ELSE            reduce using rule 208 (optionalFunctionBody -> .)
    ATRIBUICAO      shift and go to state 398
    LCHAVE          shift and go to state 43

  ! LCHAVE          [ reduce using rule 208 (optionalFunctionBody -> .) ]

    optionalFunctionBody           shift and go to state 395
    functionBody                   shift and go to state 396
    block                          shift and go to state 397

state 368

    (205) optionalTypeConstraints -> typeConstraints .

    ATRIBUICAO      reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    LCHAVE          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    INCREMENTO      reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    DECREMENTO      reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MENOR           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    LCCT            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    COLONCOLON      reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    PONTO           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    LPAREN          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    RCHAVE          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    AS              reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MAISIGUAL       reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MENOSIGUAL      reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MULTIGUAL       reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    DIVIGUAL        reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MODIGUAL        reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MULT            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    DIVIDE          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MOD             reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    PLUS            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MINUS           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    PONTOPONTO      reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    ID              reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    CROSSINLINE     reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    IMPORT          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    INIT            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    NOINLINE        reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    OUT             reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    VARARG          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    WHERE           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    OBJECT          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    CONST           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    CONSTRUCTOR     reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    EOF             reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    FALSE           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    FUNCTION        reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    NULL            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    NULLABLE        reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    NUMBER          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    OPERATOR        reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    SMARTCAST       reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    THIS            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    TRUE            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    VAL             reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    VAR             reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    WHEN            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    LONG            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    ARRAY           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    ELVIS           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    IN              reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    NOT_IN          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    IS              reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    NOT_IS          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MAIOR           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MENORIGUAL      reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    MAIORIGUAL      reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    DIFERENTE       reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    IDENTIDADE      reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    IGUALDADE       reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    SEMIDENTIDADE   reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    AND             reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    OR              reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    FUN             reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    FOR             reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    WHILE           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    DO              reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    LITERAL_STRING  reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    IF              reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    RETURN          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    RETURN_AT       reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    CONTINUE        reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    CONTINUE_AT     reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    BREAK           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    BREAK_AT        reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    NOT             reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    SUSPEND         reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    COMMA           reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    RPAREN          reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    RCCT            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    PV              reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)
    ELSE            reduce using rule 205 (optionalTypeConstraints -> typeConstraints .)


state 369

    (212) typeConstraints -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 399


state 370

    (185) parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .

    DOISP           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ID              reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CROSSINLINE     reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IMPORT          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    INIT            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOINLINE        reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OUT             reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VARARG          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    WHERE           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OBJECT          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONST           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONSTRUCTOR     reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    EOF             reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FALSE           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FUNCTION        reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NULL            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NULLABLE        reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NUMBER          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OPERATOR        reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    SMARTCAST       reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    THIS            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    TRUE            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VAL             reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VAR             reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    WHEN            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LONG            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ARRAY           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ATRIBUICAO      reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LCHAVE          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    INCREMENTO      reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DECREMENTO      reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENOR           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LCCT            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    COLONCOLON      reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PONTO           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LPAREN          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RCHAVE          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    AS              reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAISIGUAL       reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MULTIGUAL       reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIVIGUAL        reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MODIGUAL        reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MULT            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIVIDE          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MOD             reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PLUS            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MINUS           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PONTOPONTO      reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ELVIS           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IN              reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT_IN          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IS              reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT_IS          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAIOR           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENORIGUAL      reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIFERENTE       reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IDENTIDADE      reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IGUALDADE       reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    AND             reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OR              reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FUN             reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FOR             reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    WHILE           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DO              reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IF              reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RETURN          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RETURN_AT       reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONTINUE        reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    BREAK           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    BREAK_AT        reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT             reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    SUSPEND         reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    COMMA           reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RPAREN          reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RCCT            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PV              reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ELSE            reduce using rule 185 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)


state 371

    (188) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA . parametersWithOptionalTypeRecursive COMMA
    (187) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType
    (188) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA
    (189) parameterWithOptionalType -> . optionalParameterModifiers simpleIdentifier optionalType
    (190) optionalParameterModifiers -> . parameterModifiers
    (191) optionalParameterModifiers -> .
    (192) parameterModifiers -> . VARARG
    (193) parameterModifiers -> . NOINLINE
    (194) parameterModifiers -> . CROSSINLINE

  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
    ID              reduce using rule 191 (optionalParameterModifiers -> .)
    IMPORT          reduce using rule 191 (optionalParameterModifiers -> .)
    INIT            reduce using rule 191 (optionalParameterModifiers -> .)
    OUT             reduce using rule 191 (optionalParameterModifiers -> .)
    WHERE           reduce using rule 191 (optionalParameterModifiers -> .)
    OBJECT          reduce using rule 191 (optionalParameterModifiers -> .)
    CONST           reduce using rule 191 (optionalParameterModifiers -> .)
    CONSTRUCTOR     reduce using rule 191 (optionalParameterModifiers -> .)
    EOF             reduce using rule 191 (optionalParameterModifiers -> .)
    FALSE           reduce using rule 191 (optionalParameterModifiers -> .)
    FUNCTION        reduce using rule 191 (optionalParameterModifiers -> .)
    NULL            reduce using rule 191 (optionalParameterModifiers -> .)
    NULLABLE        reduce using rule 191 (optionalParameterModifiers -> .)
    NUMBER          reduce using rule 191 (optionalParameterModifiers -> .)
    OPERATOR        reduce using rule 191 (optionalParameterModifiers -> .)
    SMARTCAST       reduce using rule 191 (optionalParameterModifiers -> .)
    THIS            reduce using rule 191 (optionalParameterModifiers -> .)
    TRUE            reduce using rule 191 (optionalParameterModifiers -> .)
    VAL             reduce using rule 191 (optionalParameterModifiers -> .)
    VAR             reduce using rule 191 (optionalParameterModifiers -> .)
    WHEN            reduce using rule 191 (optionalParameterModifiers -> .)
    LONG            reduce using rule 191 (optionalParameterModifiers -> .)
    ARRAY           reduce using rule 191 (optionalParameterModifiers -> .)
    VARARG          shift and go to state 330
    NOINLINE        shift and go to state 331
    CROSSINLINE     shift and go to state 332

  ! CROSSINLINE     [ reduce using rule 191 (optionalParameterModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 191 (optionalParameterModifiers -> .) ]
  ! VARARG          [ reduce using rule 191 (optionalParameterModifiers -> .) ]

    parameterWithOptionalType      shift and go to state 327
    parametersWithOptionalTypeRecursive shift and go to state 400
    optionalParameterModifiers     shift and go to state 328
    parameterModifiers             shift and go to state 329

state 372

    (189) parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier . optionalType
    (4) optionalType -> . DOISP type
    (5) optionalType -> .

    DOISP           shift and go to state 35
    COMMA           reduce using rule 5 (optionalType -> .)
    RPAREN          reduce using rule 5 (optionalType -> .)

    optionalType                   shift and go to state 401

state 373

    (10) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression . optionalPv
    (223) jumpExpression -> expression .
    (8) optionalPv -> . PV
    (9) optionalPv -> .

  ! shift/reduce conflict for PV resolved as shift
  ! reduce/reduce conflict for FUN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for DO resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for VAR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for VAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for ID resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for INIT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for OUT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for OBJECT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for CONST resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for EOF resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for FALSE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NULL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NUMBER resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for THIS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for TRUE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for WHEN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for LONG resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for ARRAY resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IF resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NOT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for AS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MULT resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MOD resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for AND resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for OR resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 9 (optionalPv -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 9 (optionalPv -> .)
  ! shift/reduce conflict for PV resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 9 (optionalPv -> .)
    PV              shift and go to state 403
    FUN             reduce using rule 9 (optionalPv -> .)
    FOR             reduce using rule 9 (optionalPv -> .)
    WHILE           reduce using rule 9 (optionalPv -> .)
    DO              reduce using rule 9 (optionalPv -> .)
    VAR             reduce using rule 9 (optionalPv -> .)
    VAL             reduce using rule 9 (optionalPv -> .)
    ID              reduce using rule 9 (optionalPv -> .)
    CROSSINLINE     reduce using rule 9 (optionalPv -> .)
    IMPORT          reduce using rule 9 (optionalPv -> .)
    INIT            reduce using rule 9 (optionalPv -> .)
    NOINLINE        reduce using rule 9 (optionalPv -> .)
    OUT             reduce using rule 9 (optionalPv -> .)
    VARARG          reduce using rule 9 (optionalPv -> .)
    WHERE           reduce using rule 9 (optionalPv -> .)
    OBJECT          reduce using rule 9 (optionalPv -> .)
    CONST           reduce using rule 9 (optionalPv -> .)
    CONSTRUCTOR     reduce using rule 9 (optionalPv -> .)
    EOF             reduce using rule 9 (optionalPv -> .)
    FALSE           reduce using rule 9 (optionalPv -> .)
    FUNCTION        reduce using rule 9 (optionalPv -> .)
    NULL            reduce using rule 9 (optionalPv -> .)
    NULLABLE        reduce using rule 9 (optionalPv -> .)
    NUMBER          reduce using rule 9 (optionalPv -> .)
    OPERATOR        reduce using rule 9 (optionalPv -> .)
    SMARTCAST       reduce using rule 9 (optionalPv -> .)
    THIS            reduce using rule 9 (optionalPv -> .)
    TRUE            reduce using rule 9 (optionalPv -> .)
    WHEN            reduce using rule 9 (optionalPv -> .)
    LONG            reduce using rule 9 (optionalPv -> .)
    ARRAY           reduce using rule 9 (optionalPv -> .)
    LPAREN          reduce using rule 9 (optionalPv -> .)
    LITERAL_STRING  reduce using rule 9 (optionalPv -> .)
    LCCT            reduce using rule 9 (optionalPv -> .)
    IF              reduce using rule 9 (optionalPv -> .)
    RETURN          reduce using rule 9 (optionalPv -> .)
    RETURN_AT       reduce using rule 9 (optionalPv -> .)
    CONTINUE        reduce using rule 9 (optionalPv -> .)
    CONTINUE_AT     reduce using rule 9 (optionalPv -> .)
    BREAK           reduce using rule 9 (optionalPv -> .)
    BREAK_AT        reduce using rule 9 (optionalPv -> .)
    RCHAVE          reduce using rule 9 (optionalPv -> .)
    INCREMENTO      reduce using rule 9 (optionalPv -> .)
    DECREMENTO      reduce using rule 9 (optionalPv -> .)
    MINUS           reduce using rule 9 (optionalPv -> .)
    PLUS            reduce using rule 9 (optionalPv -> .)
    NOT             reduce using rule 9 (optionalPv -> .)
    SUSPEND         reduce using rule 9 (optionalPv -> .)
    COLONCOLON      reduce using rule 9 (optionalPv -> .)
    LCHAVE          reduce using rule 9 (optionalPv -> .)
    MENOR           reduce using rule 9 (optionalPv -> .)
    PONTO           reduce using rule 9 (optionalPv -> .)
    AS              reduce using rule 9 (optionalPv -> .)
    MAISIGUAL       reduce using rule 9 (optionalPv -> .)
    MENOSIGUAL      reduce using rule 9 (optionalPv -> .)
    MULTIGUAL       reduce using rule 9 (optionalPv -> .)
    DIVIGUAL        reduce using rule 9 (optionalPv -> .)
    MODIGUAL        reduce using rule 9 (optionalPv -> .)
    MULT            reduce using rule 9 (optionalPv -> .)
    DIVIDE          reduce using rule 9 (optionalPv -> .)
    MOD             reduce using rule 9 (optionalPv -> .)
    PONTOPONTO      reduce using rule 9 (optionalPv -> .)
    ELVIS           reduce using rule 9 (optionalPv -> .)
    IN              reduce using rule 9 (optionalPv -> .)
    NOT_IN          reduce using rule 9 (optionalPv -> .)
    IS              reduce using rule 9 (optionalPv -> .)
    NOT_IS          reduce using rule 9 (optionalPv -> .)
    MAIOR           reduce using rule 9 (optionalPv -> .)
    MENORIGUAL      reduce using rule 9 (optionalPv -> .)
    MAIORIGUAL      reduce using rule 9 (optionalPv -> .)
    DIFERENTE       reduce using rule 9 (optionalPv -> .)
    IDENTIDADE      reduce using rule 9 (optionalPv -> .)
    IGUALDADE       reduce using rule 9 (optionalPv -> .)
    SEMIDENTIDADE   reduce using rule 9 (optionalPv -> .)
    AND             reduce using rule 9 (optionalPv -> .)
    OR              reduce using rule 9 (optionalPv -> .)
    COMMA           reduce using rule 9 (optionalPv -> .)
    RPAREN          reduce using rule 9 (optionalPv -> .)
    RCCT            reduce using rule 9 (optionalPv -> .)
    ELSE            reduce using rule 9 (optionalPv -> .)

  ! FUN             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 9 (optionalPv -> .) ]

    optionalPv                     shift and go to state 402

state 374

    (17) typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA . MAIOR

    MAIOR           shift and go to state 404


state 375

    (18) typeParametersRecursive -> COMMA typeParameter .
    (19) typeParametersRecursive -> COMMA typeParameter . typeParametersRecursive
    (18) typeParametersRecursive -> . COMMA typeParameter
    (19) typeParametersRecursive -> . COMMA typeParameter typeParametersRecursive

  ! shift/reduce conflict for COMMA resolved as shift
    MAIOR           reduce using rule 18 (typeParametersRecursive -> COMMA typeParameter .)
    COMMA           shift and go to state 335

  ! COMMA           [ reduce using rule 18 (typeParametersRecursive -> COMMA typeParameter .) ]

    typeParametersRecursive        shift and go to state 405

state 376

    (23) typeParameter -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 23 (typeParameter -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 23 (typeParameter -> simpleIdentifier DOISP type .)


state 377

    (164) typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive .

    MAIOR           reduce using rule 164 (typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive .)


state 378

    (151) indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive .

    RCCT            reduce using rule 151 (indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive .)


state 379

    (83) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression . RPAREN controlStructureBody
    (84) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression . RPAREN
    (223) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 406
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 380

    (85) forStatement_VD -> FOR LPAREN variableDeclaration IN expression . RPAREN controlStructureBody
    (86) forStatement_VD -> FOR LPAREN variableDeclaration IN expression . RPAREN
    (223) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 407
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 381

    (87) whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .

    FUN             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DO              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ID              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OBJECT          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONST           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONSTRUCTOR     reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    EOF             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FALSE           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FUNCTION        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NULL            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NULLABLE        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SMARTCAST       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    THIS            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    TRUE            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHEN            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LONG            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ARRAY           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IF              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AS              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IN              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IS              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AND             reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OR              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PV              reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 87 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)


state 382

    (88) whileStatement -> WHILE LPAREN expression RPAREN PV .

    FUN             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FOR             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHILE           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DO              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VAR             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VAL             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ID              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CROSSINLINE     reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IMPORT          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INIT            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOINLINE        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OUT             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VARARG          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHERE           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OBJECT          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONST           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONSTRUCTOR     reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    EOF             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FALSE           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FUNCTION        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NULL            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NULLABLE        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NUMBER          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OPERATOR        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SMARTCAST       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    THIS            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    TRUE            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHEN            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LONG            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ARRAY           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LPAREN          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LITERAL_STRING  reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCCT            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IF              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN_AT       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE_AT     reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK_AT        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCHAVE          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INCREMENTO      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DECREMENTO      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MINUS           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PLUS            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SUSPEND         reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COLONCOLON      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCHAVE          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOR           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTO           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AS              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAISIGUAL       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOSIGUAL      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULTIGUAL       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIGUAL        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MODIGUAL        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULT            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIDE          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MOD             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTOPONTO      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELVIS           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IN              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IN          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IS              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IS          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIOR           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENORIGUAL      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIORIGUAL      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIFERENTE       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IDENTIDADE      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IGUALDADE       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SEMIDENTIDADE   reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AND             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OR              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COMMA           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RPAREN          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCCT            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PV              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELSE            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN PV .)


state 383

    (89) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression . RPAREN
    (223) jumpExpression -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 408
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)

  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 384

    (90) doWhileStatement -> DO WHILE LPAREN expression RPAREN .
    (87) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (88) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (76) controlStructureBody -> . block
    (77) controlStructureBody -> . statement
    (78) block -> . LCHAVE statements RCHAVE
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COLONCOLON      reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PV              shift and go to state 382
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

  ! FUN             [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FOR             [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DO              [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VAR             [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VAL             [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! ID              [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INIT            [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OUT             [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OBJECT          [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONST           [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONSTRUCTOR     [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! EOF             [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FALSE           [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FUNCTION        [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NULL            [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NULLABLE        [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! SMARTCAST       [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! THIS            [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! TRUE            [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHEN            [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LONG            [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! ARRAY           [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IF              [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RCHAVE          [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOT             [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PV              [ reduce using rule 90 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 230 (optionalReceiverType -> .) ]

    expression                     shift and go to state 60
    controlStructureBody           shift and go to state 381
    block                          shift and go to state 182
    statement                      shift and go to state 183
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 385

    (168) valueArguments -> LPAREN valueArgumentsRecursive RPAREN .

    RCHAVE          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    INCREMENTO      reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DECREMENTO      reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENOR           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LCCT            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    COLONCOLON      reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PONTO           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LPAREN          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    AS              reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAISIGUAL       reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MULTIGUAL       reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIVIGUAL        reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MODIGUAL        reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MULT            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIVIDE          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MOD             reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PLUS            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MINUS           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PONTOPONTO      reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ID              reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CROSSINLINE     reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IMPORT          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    INIT            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOINLINE        reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OUT             reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VARARG          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    WHERE           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OBJECT          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONST           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONSTRUCTOR     reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    EOF             reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FALSE           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FUNCTION        reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NULL            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NULLABLE        reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NUMBER          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OPERATOR        reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    SMARTCAST       reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    THIS            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    TRUE            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VAL             reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VAR             reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    WHEN            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LONG            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ARRAY           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ELVIS           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IN              reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT_IN          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IS              reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT_IS          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAIOR           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENORIGUAL      reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIFERENTE       reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IDENTIDADE      reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IGUALDADE       reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    AND             reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OR              reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FUN             reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FOR             reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    WHILE           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DO              reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IF              reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RETURN          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RETURN_AT       reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONTINUE        reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    BREAK           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    BREAK_AT        reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT             reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    SUSPEND         reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    COMMA           reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RPAREN          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LCHAVE          reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RCCT            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PV              reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ELSE            reduce using rule 168 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)


state 386

    (166) valueArgumentsRecursive -> valueArgument COMMA . valueArgumentsRecursive
    (165) valueArgumentsRecursive -> . valueArgument
    (166) valueArgumentsRecursive -> . valueArgument COMMA valueArgumentsRecursive
    (169) valueArgument -> . simpleIdentifier IGUALDADE MULT expression
    (170) valueArgument -> . simpleIdentifier IGUALDADE expression
    (171) valueArgument -> . expression
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    valueArgument                  shift and go to state 355
    valueArgumentsRecursive        shift and go to state 409
    simpleIdentifier               shift and go to state 356
    expression                     shift and go to state 357
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 387

    (169) valueArgument -> simpleIdentifier IGUALDADE . MULT expression
    (170) valueArgument -> simpleIdentifier IGUALDADE . expression
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    MULT            shift and go to state 410
    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    simpleIdentifier               shift and go to state 134
    expression                     shift and go to state 411
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 388

    (213) ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .

    INCREMENTO      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DECREMENTO      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENOR           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LCCT            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    COLONCOLON      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PONTO           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LPAREN          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RCHAVE          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    AS              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAISIGUAL       reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENOSIGUAL      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MULTIGUAL       reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIVIGUAL        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MODIGUAL        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MULT            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIVIDE          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MOD             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PLUS            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MINUS           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PONTOPONTO      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ID              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CROSSINLINE     reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IMPORT          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    INIT            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOINLINE        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OUT             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VARARG          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    WHERE           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OBJECT          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONST           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONSTRUCTOR     reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    EOF             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FALSE           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FUNCTION        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NULL            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NULLABLE        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NUMBER          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OPERATOR        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    SMARTCAST       reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    THIS            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    TRUE            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VAL             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VAR             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    WHEN            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LONG            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ARRAY           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ELVIS           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IN              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT_IN          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IS              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT_IS          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAIOR           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENORIGUAL      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAIORIGUAL      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIFERENTE       reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IDENTIDADE      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IGUALDADE       reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    SEMIDENTIDADE   reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    AND             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OR              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FUN             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FOR             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    WHILE           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DO              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LITERAL_STRING  reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IF              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RETURN          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RETURN_AT       reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONTINUE        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONTINUE_AT     reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    BREAK           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    BREAK_AT        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    SUSPEND         reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    COMMA           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RPAREN          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LCHAVE          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RCCT            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PV              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ELSE            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)


state 389

    (214) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody . optionalPV ELSE controlStructureBodyOrPV
    (219) optionalPV -> . PV
    (220) optionalPV -> .

    PV              shift and go to state 413
    ELSE            reduce using rule 220 (optionalPV -> .)

    optionalPV                     shift and go to state 412

state 390

    (215) controlStructureBodyOrPV -> controlStructureBody .
    (217) optionalControlStructureBody -> controlStructureBody .

  ! reduce/reduce conflict for PV resolved using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
  ! reduce/reduce conflict for ELSE resolved using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    FUN             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    FOR             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    WHILE           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    DO              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    VAR             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    VAL             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    ID              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    CROSSINLINE     reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IMPORT          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    INIT            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NOINLINE        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    OUT             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    VARARG          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    WHERE           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    OBJECT          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    CONST           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    CONSTRUCTOR     reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    EOF             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    FALSE           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    FUNCTION        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NULL            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NULLABLE        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NUMBER          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    OPERATOR        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    SMARTCAST       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    THIS            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    TRUE            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    WHEN            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    LONG            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    ARRAY           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    LPAREN          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    LITERAL_STRING  reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    LCCT            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IF              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN_AT       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE_AT     reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK_AT        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    RCHAVE          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    INCREMENTO      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    DECREMENTO      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MINUS           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    PLUS            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    SUSPEND         reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    COLONCOLON      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    LCHAVE          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOR           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTO           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    AS              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MAISIGUAL       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOSIGUAL      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MULTIGUAL       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIGUAL        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MODIGUAL        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MULT            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIDE          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MOD             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTOPONTO      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    ELVIS           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IN              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IN          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IS              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IS          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIOR           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MENORIGUAL      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIORIGUAL      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    DIFERENTE       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IDENTIDADE      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IGUALDADE       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    AND             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    OR              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    COMMA           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    RPAREN          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    RCCT            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    PV              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    ELSE            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)

  ! PV              [ reduce using rule 217 (optionalControlStructureBody -> controlStructureBody .) ]
  ! ELSE            [ reduce using rule 217 (optionalControlStructureBody -> controlStructureBody .) ]


state 391

    (216) controlStructureBodyOrPV -> PV .

    FUN             reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    FOR             reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    WHILE           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    DO              reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    VAR             reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    VAL             reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    ID              reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    CROSSINLINE     reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    IMPORT          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    INIT            reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    NOINLINE        reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    OUT             reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    VARARG          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    WHERE           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    OBJECT          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    CONST           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    CONSTRUCTOR     reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    EOF             reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    FALSE           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    FUNCTION        reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    NULL            reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    NULLABLE        reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    NUMBER          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    OPERATOR        reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    SMARTCAST       reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    THIS            reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    TRUE            reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    WHEN            reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    LONG            reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    ARRAY           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    LPAREN          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    LITERAL_STRING  reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    LCCT            reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    IF              reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    RETURN          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    RETURN_AT       reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    CONTINUE        reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    CONTINUE_AT     reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    BREAK           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    BREAK_AT        reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    RCHAVE          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    INCREMENTO      reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    DECREMENTO      reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MINUS           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    PLUS            reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    NOT             reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    SUSPEND         reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    COLONCOLON      reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    LCHAVE          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MENOR           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    PONTO           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    AS              reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MAISIGUAL       reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MENOSIGUAL      reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MULTIGUAL       reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    DIVIGUAL        reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MODIGUAL        reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MULT            reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    DIVIDE          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MOD             reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    PONTOPONTO      reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    ELVIS           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    IN              reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    NOT_IN          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    IS              reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    NOT_IS          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MAIOR           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MENORIGUAL      reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    MAIORIGUAL      reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    DIFERENTE       reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    IDENTIDADE      reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    IGUALDADE       reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    SEMIDENTIDADE   reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    AND             reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    OR              reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    COMMA           reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    RPAREN          reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    RCCT            reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    PV              reduce using rule 216 (controlStructureBodyOrPV -> PV .)
    ELSE            reduce using rule 216 (controlStructureBodyOrPV -> PV .)


state 392

    (60) functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN .

    SETA            reduce using rule 60 (functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN .)


state 393

    (65) parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive .

    COMMA           reduce using rule 65 (parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive .)
    RPAREN          reduce using rule 65 (parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive .)


state 394

    (58) functionType -> receiverType PONTO functionTypeParameters SETA type .

    LCHAVE          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FUN             reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    $end            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FOR             reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHILE           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DO              reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VAR             reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VAL             reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ID              reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IMPORT          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INIT            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OUT             reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VARARG          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHERE           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OBJECT          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONST           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONSTRUCTOR     reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    EOF             reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FALSE           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FUNCTION        reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NULL            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NULLABLE        reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NUMBER          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OPERATOR        reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SMARTCAST       reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    THIS            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    TRUE            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHEN            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LONG            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ARRAY           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LPAREN          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LCCT            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IF              reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MINUS           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PLUS            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT             reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOR           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTO           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AS              reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAISIGUAL       reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOSIGUAL      reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULT            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MOD             reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELVIS           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IN              reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IS              reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIOR           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AND             reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OR              reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COMMA           reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RPAREN          reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCCT            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PV              reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELSE            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SETA            reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ATRIBUICAO      reduce using rule 58 (functionType -> receiverType PONTO functionTypeParameters SETA type .)


state 395

    (209) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .

    INCREMENTO      reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DECREMENTO      reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MENOR           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LCCT            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    COLONCOLON      reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PONTO           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LPAREN          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RCHAVE          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    AS              reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MAISIGUAL       reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MENOSIGUAL      reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MULTIGUAL       reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DIVIGUAL        reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MODIGUAL        reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MULT            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DIVIDE          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MOD             reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PLUS            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MINUS           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PONTOPONTO      reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ID              reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CROSSINLINE     reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IMPORT          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    INIT            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOINLINE        reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OUT             reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    VARARG          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    WHERE           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OBJECT          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CONST           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CONSTRUCTOR     reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    EOF             reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    FALSE           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    FUNCTION        reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NULL            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NULLABLE        reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NUMBER          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OPERATOR        reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    SMARTCAST       reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    THIS            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    TRUE            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    VAL             reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    VAR             reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    WHEN            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LONG            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ARRAY           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ELVIS           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IN              reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOT_IN          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IS              reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOT_IS          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MAIOR           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MENORIGUAL      reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MAIORIGUAL      reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DIFERENTE       reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IDENTIDADE      reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IGUALDADE       reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    SEMIDENTIDADE   reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    AND             reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OR              reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    FUN             reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    FOR             reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    WHILE           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DO              reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LITERAL_STRING  reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IF              reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RETURN          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RETURN_AT       reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CONTINUE        reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CONTINUE_AT     reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    BREAK           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    BREAK_AT        reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOT             reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    SUSPEND         reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    COMMA           reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RPAREN          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LCHAVE          reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RCCT            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PV              reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ELSE            reduce using rule 209 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)


state 396

    (207) optionalFunctionBody -> functionBody .

    FUN             reduce using rule 207 (optionalFunctionBody -> functionBody .)
    FOR             reduce using rule 207 (optionalFunctionBody -> functionBody .)
    WHILE           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    DO              reduce using rule 207 (optionalFunctionBody -> functionBody .)
    VAR             reduce using rule 207 (optionalFunctionBody -> functionBody .)
    VAL             reduce using rule 207 (optionalFunctionBody -> functionBody .)
    ID              reduce using rule 207 (optionalFunctionBody -> functionBody .)
    CROSSINLINE     reduce using rule 207 (optionalFunctionBody -> functionBody .)
    IMPORT          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    INIT            reduce using rule 207 (optionalFunctionBody -> functionBody .)
    NOINLINE        reduce using rule 207 (optionalFunctionBody -> functionBody .)
    OUT             reduce using rule 207 (optionalFunctionBody -> functionBody .)
    VARARG          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    WHERE           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    OBJECT          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    CONST           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    CONSTRUCTOR     reduce using rule 207 (optionalFunctionBody -> functionBody .)
    EOF             reduce using rule 207 (optionalFunctionBody -> functionBody .)
    FALSE           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    FUNCTION        reduce using rule 207 (optionalFunctionBody -> functionBody .)
    NULL            reduce using rule 207 (optionalFunctionBody -> functionBody .)
    NULLABLE        reduce using rule 207 (optionalFunctionBody -> functionBody .)
    NUMBER          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    OPERATOR        reduce using rule 207 (optionalFunctionBody -> functionBody .)
    SMARTCAST       reduce using rule 207 (optionalFunctionBody -> functionBody .)
    THIS            reduce using rule 207 (optionalFunctionBody -> functionBody .)
    TRUE            reduce using rule 207 (optionalFunctionBody -> functionBody .)
    WHEN            reduce using rule 207 (optionalFunctionBody -> functionBody .)
    LONG            reduce using rule 207 (optionalFunctionBody -> functionBody .)
    ARRAY           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    LPAREN          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    LITERAL_STRING  reduce using rule 207 (optionalFunctionBody -> functionBody .)
    LCCT            reduce using rule 207 (optionalFunctionBody -> functionBody .)
    IF              reduce using rule 207 (optionalFunctionBody -> functionBody .)
    RETURN          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    RETURN_AT       reduce using rule 207 (optionalFunctionBody -> functionBody .)
    CONTINUE        reduce using rule 207 (optionalFunctionBody -> functionBody .)
    CONTINUE_AT     reduce using rule 207 (optionalFunctionBody -> functionBody .)
    BREAK           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    BREAK_AT        reduce using rule 207 (optionalFunctionBody -> functionBody .)
    RCHAVE          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    INCREMENTO      reduce using rule 207 (optionalFunctionBody -> functionBody .)
    DECREMENTO      reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MINUS           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    PLUS            reduce using rule 207 (optionalFunctionBody -> functionBody .)
    NOT             reduce using rule 207 (optionalFunctionBody -> functionBody .)
    SUSPEND         reduce using rule 207 (optionalFunctionBody -> functionBody .)
    COLONCOLON      reduce using rule 207 (optionalFunctionBody -> functionBody .)
    LCHAVE          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MENOR           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    PONTO           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    AS              reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MAISIGUAL       reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MENOSIGUAL      reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MULTIGUAL       reduce using rule 207 (optionalFunctionBody -> functionBody .)
    DIVIGUAL        reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MODIGUAL        reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MULT            reduce using rule 207 (optionalFunctionBody -> functionBody .)
    DIVIDE          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MOD             reduce using rule 207 (optionalFunctionBody -> functionBody .)
    PONTOPONTO      reduce using rule 207 (optionalFunctionBody -> functionBody .)
    ELVIS           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    IN              reduce using rule 207 (optionalFunctionBody -> functionBody .)
    NOT_IN          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    IS              reduce using rule 207 (optionalFunctionBody -> functionBody .)
    NOT_IS          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MAIOR           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MENORIGUAL      reduce using rule 207 (optionalFunctionBody -> functionBody .)
    MAIORIGUAL      reduce using rule 207 (optionalFunctionBody -> functionBody .)
    DIFERENTE       reduce using rule 207 (optionalFunctionBody -> functionBody .)
    IDENTIDADE      reduce using rule 207 (optionalFunctionBody -> functionBody .)
    IGUALDADE       reduce using rule 207 (optionalFunctionBody -> functionBody .)
    SEMIDENTIDADE   reduce using rule 207 (optionalFunctionBody -> functionBody .)
    AND             reduce using rule 207 (optionalFunctionBody -> functionBody .)
    OR              reduce using rule 207 (optionalFunctionBody -> functionBody .)
    COMMA           reduce using rule 207 (optionalFunctionBody -> functionBody .)
    RPAREN          reduce using rule 207 (optionalFunctionBody -> functionBody .)
    RCCT            reduce using rule 207 (optionalFunctionBody -> functionBody .)
    PV              reduce using rule 207 (optionalFunctionBody -> functionBody .)
    ELSE            reduce using rule 207 (optionalFunctionBody -> functionBody .)


state 397

    (24) functionBody -> block .

    FUN             reduce using rule 24 (functionBody -> block .)
    FOR             reduce using rule 24 (functionBody -> block .)
    WHILE           reduce using rule 24 (functionBody -> block .)
    DO              reduce using rule 24 (functionBody -> block .)
    VAR             reduce using rule 24 (functionBody -> block .)
    VAL             reduce using rule 24 (functionBody -> block .)
    ID              reduce using rule 24 (functionBody -> block .)
    CROSSINLINE     reduce using rule 24 (functionBody -> block .)
    IMPORT          reduce using rule 24 (functionBody -> block .)
    INIT            reduce using rule 24 (functionBody -> block .)
    NOINLINE        reduce using rule 24 (functionBody -> block .)
    OUT             reduce using rule 24 (functionBody -> block .)
    VARARG          reduce using rule 24 (functionBody -> block .)
    WHERE           reduce using rule 24 (functionBody -> block .)
    OBJECT          reduce using rule 24 (functionBody -> block .)
    CONST           reduce using rule 24 (functionBody -> block .)
    CONSTRUCTOR     reduce using rule 24 (functionBody -> block .)
    EOF             reduce using rule 24 (functionBody -> block .)
    FALSE           reduce using rule 24 (functionBody -> block .)
    FUNCTION        reduce using rule 24 (functionBody -> block .)
    NULL            reduce using rule 24 (functionBody -> block .)
    NULLABLE        reduce using rule 24 (functionBody -> block .)
    NUMBER          reduce using rule 24 (functionBody -> block .)
    OPERATOR        reduce using rule 24 (functionBody -> block .)
    SMARTCAST       reduce using rule 24 (functionBody -> block .)
    THIS            reduce using rule 24 (functionBody -> block .)
    TRUE            reduce using rule 24 (functionBody -> block .)
    WHEN            reduce using rule 24 (functionBody -> block .)
    LONG            reduce using rule 24 (functionBody -> block .)
    ARRAY           reduce using rule 24 (functionBody -> block .)
    LPAREN          reduce using rule 24 (functionBody -> block .)
    LITERAL_STRING  reduce using rule 24 (functionBody -> block .)
    LCCT            reduce using rule 24 (functionBody -> block .)
    IF              reduce using rule 24 (functionBody -> block .)
    RETURN          reduce using rule 24 (functionBody -> block .)
    RETURN_AT       reduce using rule 24 (functionBody -> block .)
    CONTINUE        reduce using rule 24 (functionBody -> block .)
    CONTINUE_AT     reduce using rule 24 (functionBody -> block .)
    BREAK           reduce using rule 24 (functionBody -> block .)
    BREAK_AT        reduce using rule 24 (functionBody -> block .)
    RCHAVE          reduce using rule 24 (functionBody -> block .)
    INCREMENTO      reduce using rule 24 (functionBody -> block .)
    DECREMENTO      reduce using rule 24 (functionBody -> block .)
    MINUS           reduce using rule 24 (functionBody -> block .)
    PLUS            reduce using rule 24 (functionBody -> block .)
    NOT             reduce using rule 24 (functionBody -> block .)
    SUSPEND         reduce using rule 24 (functionBody -> block .)
    COLONCOLON      reduce using rule 24 (functionBody -> block .)
    LCHAVE          reduce using rule 24 (functionBody -> block .)
    MENOR           reduce using rule 24 (functionBody -> block .)
    PONTO           reduce using rule 24 (functionBody -> block .)
    AS              reduce using rule 24 (functionBody -> block .)
    MAISIGUAL       reduce using rule 24 (functionBody -> block .)
    MENOSIGUAL      reduce using rule 24 (functionBody -> block .)
    MULTIGUAL       reduce using rule 24 (functionBody -> block .)
    DIVIGUAL        reduce using rule 24 (functionBody -> block .)
    MODIGUAL        reduce using rule 24 (functionBody -> block .)
    MULT            reduce using rule 24 (functionBody -> block .)
    DIVIDE          reduce using rule 24 (functionBody -> block .)
    MOD             reduce using rule 24 (functionBody -> block .)
    PONTOPONTO      reduce using rule 24 (functionBody -> block .)
    ELVIS           reduce using rule 24 (functionBody -> block .)
    IN              reduce using rule 24 (functionBody -> block .)
    NOT_IN          reduce using rule 24 (functionBody -> block .)
    IS              reduce using rule 24 (functionBody -> block .)
    NOT_IS          reduce using rule 24 (functionBody -> block .)
    MAIOR           reduce using rule 24 (functionBody -> block .)
    MENORIGUAL      reduce using rule 24 (functionBody -> block .)
    MAIORIGUAL      reduce using rule 24 (functionBody -> block .)
    DIFERENTE       reduce using rule 24 (functionBody -> block .)
    IDENTIDADE      reduce using rule 24 (functionBody -> block .)
    IGUALDADE       reduce using rule 24 (functionBody -> block .)
    SEMIDENTIDADE   reduce using rule 24 (functionBody -> block .)
    AND             reduce using rule 24 (functionBody -> block .)
    OR              reduce using rule 24 (functionBody -> block .)
    COMMA           reduce using rule 24 (functionBody -> block .)
    RPAREN          reduce using rule 24 (functionBody -> block .)
    RCCT            reduce using rule 24 (functionBody -> block .)
    PV              reduce using rule 24 (functionBody -> block .)
    ELSE            reduce using rule 24 (functionBody -> block .)


state 398

    (25) functionBody -> ATRIBUICAO . expression
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 414
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    simpleIdentifier               shift and go to state 134
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 399

    (212) typeConstraints -> simpleIdentifier DOISP . type
    (39) type -> . optionalTypeModifiers optype
    (40) optionalTypeModifiers -> . typeModifiers
    (41) optionalTypeModifiers -> .
    (45) typeModifiers -> . typeModifier
    (46) typeModifiers -> . typeModifier typeModifiers
    (47) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 41 (optionalTypeModifiers -> .)
    ID              reduce using rule 41 (optionalTypeModifiers -> .)
    CROSSINLINE     reduce using rule 41 (optionalTypeModifiers -> .)
    IMPORT          reduce using rule 41 (optionalTypeModifiers -> .)
    INIT            reduce using rule 41 (optionalTypeModifiers -> .)
    NOINLINE        reduce using rule 41 (optionalTypeModifiers -> .)
    OUT             reduce using rule 41 (optionalTypeModifiers -> .)
    VARARG          reduce using rule 41 (optionalTypeModifiers -> .)
    WHERE           reduce using rule 41 (optionalTypeModifiers -> .)
    OBJECT          reduce using rule 41 (optionalTypeModifiers -> .)
    CONST           reduce using rule 41 (optionalTypeModifiers -> .)
    CONSTRUCTOR     reduce using rule 41 (optionalTypeModifiers -> .)
    EOF             reduce using rule 41 (optionalTypeModifiers -> .)
    FALSE           reduce using rule 41 (optionalTypeModifiers -> .)
    FUNCTION        reduce using rule 41 (optionalTypeModifiers -> .)
    NULL            reduce using rule 41 (optionalTypeModifiers -> .)
    NULLABLE        reduce using rule 41 (optionalTypeModifiers -> .)
    NUMBER          reduce using rule 41 (optionalTypeModifiers -> .)
    OPERATOR        reduce using rule 41 (optionalTypeModifiers -> .)
    SMARTCAST       reduce using rule 41 (optionalTypeModifiers -> .)
    THIS            reduce using rule 41 (optionalTypeModifiers -> .)
    TRUE            reduce using rule 41 (optionalTypeModifiers -> .)
    VAL             reduce using rule 41 (optionalTypeModifiers -> .)
    VAR             reduce using rule 41 (optionalTypeModifiers -> .)
    WHEN            reduce using rule 41 (optionalTypeModifiers -> .)
    LONG            reduce using rule 41 (optionalTypeModifiers -> .)
    ARRAY           reduce using rule 41 (optionalTypeModifiers -> .)
    SUSPEND         shift and go to state 48

  ! SUSPEND         [ reduce using rule 41 (optionalTypeModifiers -> .) ]

    type                           shift and go to state 415
    optionalTypeModifiers          shift and go to state 45
    typeModifiers                  shift and go to state 46
    typeModifier                   shift and go to state 47

state 400

    (188) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive . COMMA

    COMMA           shift and go to state 416


state 401

    (189) parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType .

    COMMA           reduce using rule 189 (parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType .)
    RPAREN          reduce using rule 189 (parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType .)


state 402

    (10) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .

    FUN             reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    FOR             reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    WHILE           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DO              reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    VAR             reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    VAL             reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ID              reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CROSSINLINE     reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IMPORT          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    INIT            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOINLINE        reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OUT             reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    VARARG          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    WHERE           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OBJECT          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CONST           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CONSTRUCTOR     reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    EOF             reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    FALSE           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    FUNCTION        reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NULL            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NULLABLE        reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NUMBER          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OPERATOR        reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    SMARTCAST       reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    THIS            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    TRUE            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    WHEN            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LONG            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ARRAY           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LPAREN          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LITERAL_STRING  reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LCCT            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IF              reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RETURN          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RETURN_AT       reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CONTINUE        reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CONTINUE_AT     reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    BREAK           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    BREAK_AT        reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RCHAVE          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    INCREMENTO      reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DECREMENTO      reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MINUS           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PLUS            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOT             reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    SUSPEND         reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    COLONCOLON      reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LCHAVE          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MENOR           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PONTO           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    AS              reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MAISIGUAL       reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MENOSIGUAL      reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MULTIGUAL       reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DIVIGUAL        reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MODIGUAL        reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MULT            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DIVIDE          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MOD             reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PONTOPONTO      reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ELVIS           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IN              reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOT_IN          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IS              reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOT_IS          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MAIOR           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MENORIGUAL      reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MAIORIGUAL      reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DIFERENTE       reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IDENTIDADE      reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IGUALDADE       reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    SEMIDENTIDADE   reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    AND             reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OR              reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    COMMA           reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RPAREN          reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RCCT            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PV              reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ELSE            reduce using rule 10 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)


state 403

    (8) optionalPv -> PV .

    FUN             reduce using rule 8 (optionalPv -> PV .)
    FOR             reduce using rule 8 (optionalPv -> PV .)
    WHILE           reduce using rule 8 (optionalPv -> PV .)
    DO              reduce using rule 8 (optionalPv -> PV .)
    VAR             reduce using rule 8 (optionalPv -> PV .)
    VAL             reduce using rule 8 (optionalPv -> PV .)
    ID              reduce using rule 8 (optionalPv -> PV .)
    CROSSINLINE     reduce using rule 8 (optionalPv -> PV .)
    IMPORT          reduce using rule 8 (optionalPv -> PV .)
    INIT            reduce using rule 8 (optionalPv -> PV .)
    NOINLINE        reduce using rule 8 (optionalPv -> PV .)
    OUT             reduce using rule 8 (optionalPv -> PV .)
    VARARG          reduce using rule 8 (optionalPv -> PV .)
    WHERE           reduce using rule 8 (optionalPv -> PV .)
    OBJECT          reduce using rule 8 (optionalPv -> PV .)
    CONST           reduce using rule 8 (optionalPv -> PV .)
    CONSTRUCTOR     reduce using rule 8 (optionalPv -> PV .)
    EOF             reduce using rule 8 (optionalPv -> PV .)
    FALSE           reduce using rule 8 (optionalPv -> PV .)
    FUNCTION        reduce using rule 8 (optionalPv -> PV .)
    NULL            reduce using rule 8 (optionalPv -> PV .)
    NULLABLE        reduce using rule 8 (optionalPv -> PV .)
    NUMBER          reduce using rule 8 (optionalPv -> PV .)
    OPERATOR        reduce using rule 8 (optionalPv -> PV .)
    SMARTCAST       reduce using rule 8 (optionalPv -> PV .)
    THIS            reduce using rule 8 (optionalPv -> PV .)
    TRUE            reduce using rule 8 (optionalPv -> PV .)
    WHEN            reduce using rule 8 (optionalPv -> PV .)
    LONG            reduce using rule 8 (optionalPv -> PV .)
    ARRAY           reduce using rule 8 (optionalPv -> PV .)
    LPAREN          reduce using rule 8 (optionalPv -> PV .)
    LITERAL_STRING  reduce using rule 8 (optionalPv -> PV .)
    LCCT            reduce using rule 8 (optionalPv -> PV .)
    IF              reduce using rule 8 (optionalPv -> PV .)
    RETURN          reduce using rule 8 (optionalPv -> PV .)
    RETURN_AT       reduce using rule 8 (optionalPv -> PV .)
    CONTINUE        reduce using rule 8 (optionalPv -> PV .)
    CONTINUE_AT     reduce using rule 8 (optionalPv -> PV .)
    BREAK           reduce using rule 8 (optionalPv -> PV .)
    BREAK_AT        reduce using rule 8 (optionalPv -> PV .)
    RCHAVE          reduce using rule 8 (optionalPv -> PV .)
    INCREMENTO      reduce using rule 8 (optionalPv -> PV .)
    DECREMENTO      reduce using rule 8 (optionalPv -> PV .)
    MINUS           reduce using rule 8 (optionalPv -> PV .)
    PLUS            reduce using rule 8 (optionalPv -> PV .)
    NOT             reduce using rule 8 (optionalPv -> PV .)
    SUSPEND         reduce using rule 8 (optionalPv -> PV .)
    COLONCOLON      reduce using rule 8 (optionalPv -> PV .)
    LCHAVE          reduce using rule 8 (optionalPv -> PV .)
    MENOR           reduce using rule 8 (optionalPv -> PV .)
    PONTO           reduce using rule 8 (optionalPv -> PV .)
    AS              reduce using rule 8 (optionalPv -> PV .)
    MAISIGUAL       reduce using rule 8 (optionalPv -> PV .)
    MENOSIGUAL      reduce using rule 8 (optionalPv -> PV .)
    MULTIGUAL       reduce using rule 8 (optionalPv -> PV .)
    DIVIGUAL        reduce using rule 8 (optionalPv -> PV .)
    MODIGUAL        reduce using rule 8 (optionalPv -> PV .)
    MULT            reduce using rule 8 (optionalPv -> PV .)
    DIVIDE          reduce using rule 8 (optionalPv -> PV .)
    MOD             reduce using rule 8 (optionalPv -> PV .)
    PONTOPONTO      reduce using rule 8 (optionalPv -> PV .)
    ELVIS           reduce using rule 8 (optionalPv -> PV .)
    IN              reduce using rule 8 (optionalPv -> PV .)
    NOT_IN          reduce using rule 8 (optionalPv -> PV .)
    IS              reduce using rule 8 (optionalPv -> PV .)
    NOT_IS          reduce using rule 8 (optionalPv -> PV .)
    MAIOR           reduce using rule 8 (optionalPv -> PV .)
    MENORIGUAL      reduce using rule 8 (optionalPv -> PV .)
    MAIORIGUAL      reduce using rule 8 (optionalPv -> PV .)
    DIFERENTE       reduce using rule 8 (optionalPv -> PV .)
    IDENTIDADE      reduce using rule 8 (optionalPv -> PV .)
    IGUALDADE       reduce using rule 8 (optionalPv -> PV .)
    SEMIDENTIDADE   reduce using rule 8 (optionalPv -> PV .)
    AND             reduce using rule 8 (optionalPv -> PV .)
    OR              reduce using rule 8 (optionalPv -> PV .)
    COMMA           reduce using rule 8 (optionalPv -> PV .)
    RPAREN          reduce using rule 8 (optionalPv -> PV .)
    RCCT            reduce using rule 8 (optionalPv -> PV .)
    PV              reduce using rule 8 (optionalPv -> PV .)
    ELSE            reduce using rule 8 (optionalPv -> PV .)


state 404

    (17) typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .

    LPAREN          reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    ID              reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    CROSSINLINE     reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    IMPORT          reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    INIT            reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    NOINLINE        reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    OUT             reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    VARARG          reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    WHERE           reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    OBJECT          reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    CONST           reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    CONSTRUCTOR     reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    EOF             reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    FALSE           reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    FUNCTION        reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    NULL            reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    NULLABLE        reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    NUMBER          reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    OPERATOR        reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    SMARTCAST       reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    THIS            reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    TRUE            reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    VAL             reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    VAR             reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    WHEN            reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    LONG            reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    ARRAY           reduce using rule 17 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)


state 405

    (19) typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .

    COMMA           reduce using rule 19 (typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .)
    MAIOR           reduce using rule 19 (typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .)


state 406

    (83) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN . controlStructureBody
    (84) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .
    (76) controlStructureBody -> . block
    (77) controlStructureBody -> . statement
    (78) block -> . LCHAVE statements RCHAVE
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COLONCOLON      reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MENOR           reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    PONTO           reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    AS              reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MAISIGUAL       reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MENOSIGUAL      reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MULTIGUAL       reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    DIVIGUAL        reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MODIGUAL        reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MULT            reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    DIVIDE          reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MOD             reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    PONTOPONTO      reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    ELVIS           reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IN              reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    NOT_IN          reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IS              reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    NOT_IS          reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MAIOR           reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MENORIGUAL      reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MAIORIGUAL      reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    DIFERENTE       reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IDENTIDADE      reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IGUALDADE       reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    AND             reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    OR              reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    COMMA           reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    RPAREN          reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    RCCT            reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    PV              reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    ELSE            reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

  ! FUN             [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! FOR             [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! DO              [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! VAR             [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! VAL             [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! ID              [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! INIT            [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! OUT             [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! OBJECT          [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CONST           [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CONSTRUCTOR     [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! EOF             [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! FALSE           [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! FUNCTION        [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NULL            [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NULLABLE        [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! SMARTCAST       [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! THIS            [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! TRUE            [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! WHEN            [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LONG            [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! ARRAY           [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! IF              [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! RCHAVE          [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NOT             [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 84 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 230 (optionalReceiverType -> .) ]

    expression                     shift and go to state 60
    controlStructureBody           shift and go to state 417
    block                          shift and go to state 182
    statement                      shift and go to state 183
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 407

    (85) forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN . controlStructureBody
    (86) forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .
    (76) controlStructureBody -> . block
    (77) controlStructureBody -> . statement
    (78) block -> . LCHAVE statements RCHAVE
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OBJECT resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for CONSTRUCTOR resolved as shift
  ! shift/reduce conflict for EOF resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for NULLABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for SMARTCAST resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for WHEN resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COLONCOLON      reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MENOR           reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    PONTO           reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    AS              reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MAISIGUAL       reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MENOSIGUAL      reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MULTIGUAL       reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    DIVIGUAL        reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MODIGUAL        reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MULT            reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    DIVIDE          reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MOD             reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    PONTOPONTO      reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    ELVIS           reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IN              reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    NOT_IN          reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IS              reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    NOT_IS          reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MAIOR           reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MENORIGUAL      reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MAIORIGUAL      reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    DIFERENTE       reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IDENTIDADE      reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IGUALDADE       reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    AND             reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    OR              reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    COMMA           reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    RPAREN          reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    RCCT            reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    PV              reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    ELSE            reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

  ! FUN             [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! FOR             [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! DO              [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! VAR             [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! VAL             [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! ID              [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! INIT            [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! OUT             [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! OBJECT          [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CONST           [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CONSTRUCTOR     [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! EOF             [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! FALSE           [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! FUNCTION        [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NULL            [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NULLABLE        [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! SMARTCAST       [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! THIS            [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! TRUE            [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! WHEN            [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LONG            [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! ARRAY           [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! IF              [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! RCHAVE          [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NOT             [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 86 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 230 (optionalReceiverType -> .) ]

    expression                     shift and go to state 60
    controlStructureBody           shift and go to state 418
    block                          shift and go to state 182
    statement                      shift and go to state 183
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 408

    (89) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .

    FUN             reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VAL             reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IMPORT          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INIT            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OUT             reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VARARG          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHERE           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OBJECT          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONST           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONSTRUCTOR     reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    EOF             reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FALSE           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NULL            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NULLABLE        reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NUMBER          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OPERATOR        reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SMARTCAST       reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    THIS            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    TRUE            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHEN            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LONG            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ARRAY           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCCT            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INCREMENTO      reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MINUS           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PLUS            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT             reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PV              reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 89 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)


state 409

    (166) valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive .

    RPAREN          reduce using rule 166 (valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive .)


state 410

    (169) valueArgument -> simpleIdentifier IGUALDADE MULT . expression
    (93) expression -> . disjunction
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (68) receiverType -> . typeModifier parenthesizedType
    (47) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 87
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    LPAREN          shift and go to state 137
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    VAL             shift and go to state 27
    VAR             shift and go to state 28
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    FUN             shift and go to state 138
    SUSPEND         shift and go to state 48

    simpleIdentifier               shift and go to state 134
    expression                     shift and go to state 419
    disjunction                    shift and go to state 70
    conjunction                    shift and go to state 80
    equality                       shift and go to state 85
    comparison                     shift and go to state 94
    infixOperation                 shift and go to state 108
    elvisExpression                shift and go to state 115
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121
    prefixUnaryExpression          shift and go to state 135
    prefixUnaryExpressionRecursive shift and go to state 84
    postfixUnaryExpression         shift and go to state 136
    unaryPrefix                    shift and go to state 93
    primaryExpression              shift and go to state 83
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    receiverType                   shift and go to state 109
    typeModifier                   shift and go to state 116

state 411

    (170) valueArgument -> simpleIdentifier IGUALDADE expression .
    (223) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 170 (valueArgument -> simpleIdentifier IGUALDADE expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 170 (valueArgument -> simpleIdentifier IGUALDADE expression .)
    COMMA           reduce using rule 170 (valueArgument -> simpleIdentifier IGUALDADE expression .)
    RPAREN          reduce using rule 170 (valueArgument -> simpleIdentifier IGUALDADE expression .)
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 412

    (214) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV . ELSE controlStructureBodyOrPV

    ELSE            shift and go to state 420


state 413

    (219) optionalPV -> PV .

    ELSE            reduce using rule 219 (optionalPV -> PV .)


state 414

    (25) functionBody -> ATRIBUICAO expression .
    (223) jumpExpression -> expression .

  ! reduce/reduce conflict for FUN resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DO resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAR resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for VAL resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ID resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for INIT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OUT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for VARARG resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHERE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OBJECT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONST resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONSTRUCTOR resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for EOF resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for FALSE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULL resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NULLABLE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for SMARTCAST resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for THIS resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for TRUE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for WHEN resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LONG resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ARRAY resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IF resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for AS resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MULT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MOD resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IN resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IS resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for AND resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for OR resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for RCCT resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for PV resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 25 (functionBody -> ATRIBUICAO expression .)
    FUN             reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    FOR             reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    WHILE           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    DO              reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    VAR             reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    VAL             reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    ID              reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    IMPORT          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    INIT            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    NOINLINE        reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    OUT             reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    VARARG          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    WHERE           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    OBJECT          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    CONST           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    CONSTRUCTOR     reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    EOF             reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    FALSE           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    FUNCTION        reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    NULL            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    NULLABLE        reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    NUMBER          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    OPERATOR        reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    SMARTCAST       reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    THIS            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    TRUE            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    WHEN            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    LONG            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    ARRAY           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    LPAREN          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    LCCT            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    IF              reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    RETURN          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    CONTINUE        reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    BREAK           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    RCHAVE          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MINUS           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    PLUS            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    NOT             reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    SUSPEND         reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    LCHAVE          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MENOR           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    PONTO           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    AS              reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MULT            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    DIVIDE          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MOD             reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    ELVIS           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    IN              reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    NOT_IN          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    IS              reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    NOT_IS          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MAIOR           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    AND             reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    OR              reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    COMMA           reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    RPAREN          reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    RCCT            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    PV              reduce using rule 25 (functionBody -> ATRIBUICAO expression .)
    ELSE            reduce using rule 25 (functionBody -> ATRIBUICAO expression .)

  ! FUN             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FOR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHILE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DO              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAR             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VAL             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ID              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CROSSINLINE     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IMPORT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INIT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOINLINE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OUT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! VARARG          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHERE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OBJECT          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONST           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONSTRUCTOR     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! EOF             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FALSE           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! FUNCTION        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULL            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NULLABLE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NUMBER          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OPERATOR        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SMARTCAST       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! THIS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! TRUE            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! WHEN            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LONG            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ARRAY           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LITERAL_STRING  [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IF              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RETURN_AT       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! CONTINUE_AT     [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! BREAK_AT        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! INCREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MINUS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PLUS            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SUSPEND         [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! LCHAVE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAISIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENOSIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULTIGUAL       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MODIGUAL        [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MULT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIVIDE          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MOD             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PONTOPONTO      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELVIS           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IN              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IS              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! NOT_IS          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIOR           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MENORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! MAIORIGUAL      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! DIFERENTE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IDENTIDADE      [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! IGUALDADE       [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! SEMIDENTIDADE   [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! AND             [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! OR              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RCCT            [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! PV              [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! ELSE            [ reduce using rule 223 (jumpExpression -> expression .) ]


state 415

    (212) typeConstraints -> simpleIdentifier DOISP type .

    ATRIBUICAO      reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    LCHAVE          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    INCREMENTO      reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    DECREMENTO      reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MENOR           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    LCCT            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    COLONCOLON      reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    PONTO           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    LPAREN          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    RCHAVE          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    AS              reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MAISIGUAL       reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MENOSIGUAL      reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MULTIGUAL       reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    DIVIGUAL        reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MODIGUAL        reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MULT            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    DIVIDE          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MOD             reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    PLUS            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MINUS           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    PONTOPONTO      reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    ID              reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    CROSSINLINE     reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    IMPORT          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    INIT            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    NOINLINE        reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    OUT             reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    VARARG          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    WHERE           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    OBJECT          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    CONST           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    CONSTRUCTOR     reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    EOF             reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    FALSE           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    FUNCTION        reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    NULL            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    NULLABLE        reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    NUMBER          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    OPERATOR        reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    SMARTCAST       reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    THIS            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    TRUE            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    VAL             reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    VAR             reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    WHEN            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    LONG            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    ARRAY           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    ELVIS           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    IN              reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT_IN          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    IS              reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT_IS          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MENORIGUAL      reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    MAIORIGUAL      reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    DIFERENTE       reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    IDENTIDADE      reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    IGUALDADE       reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    SEMIDENTIDADE   reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    AND             reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    OR              reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    FUN             reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    FOR             reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    WHILE           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    DO              reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    LITERAL_STRING  reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    IF              reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    RETURN          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    RETURN_AT       reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    CONTINUE        reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    CONTINUE_AT     reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    BREAK           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    BREAK_AT        reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT             reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    SUSPEND         reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    RCCT            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    PV              reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)
    ELSE            reduce using rule 212 (typeConstraints -> simpleIdentifier DOISP type .)


state 416

    (188) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA .

    RPAREN          reduce using rule 188 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA .)
    COMMA           reduce using rule 188 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA .)


state 417

    (83) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .

    FUN             reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DO              reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ID              reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    OBJECT          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONST           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONSTRUCTOR     reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    EOF             reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    FALSE           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    FUNCTION        reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NULL            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NULLABLE        reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    SMARTCAST       reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    THIS            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    TRUE            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHEN            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LONG            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ARRAY           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IF              reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    AS              reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IN              reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IS              reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    AND             reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    OR              reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PV              reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 83 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)


state 418

    (85) forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .

    FUN             reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DO              reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ID              reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    OBJECT          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CONST           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CONSTRUCTOR     reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    EOF             reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    FALSE           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    FUNCTION        reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NULL            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NULLABLE        reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    SMARTCAST       reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    THIS            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    TRUE            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    WHEN            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LONG            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ARRAY           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IF              reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    AS              reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IN              reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IS              reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    AND             reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    OR              reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PV              reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 85 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)


state 419

    (169) valueArgument -> simpleIdentifier IGUALDADE MULT expression .
    (223) jumpExpression -> expression .

  ! reduce/reduce conflict for COMMA resolved using rule 169 (valueArgument -> simpleIdentifier IGUALDADE MULT expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 169 (valueArgument -> simpleIdentifier IGUALDADE MULT expression .)
    COMMA           reduce using rule 169 (valueArgument -> simpleIdentifier IGUALDADE MULT expression .)
    RPAREN          reduce using rule 169 (valueArgument -> simpleIdentifier IGUALDADE MULT expression .)
    INCREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> expression .)
    MENOR           reduce using rule 223 (jumpExpression -> expression .)
    LCCT            reduce using rule 223 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> expression .)
    PONTO           reduce using rule 223 (jumpExpression -> expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> expression .)
    AS              reduce using rule 223 (jumpExpression -> expression .)
    MULT            reduce using rule 223 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> expression .)
    MOD             reduce using rule 223 (jumpExpression -> expression .)
    PLUS            reduce using rule 223 (jumpExpression -> expression .)
    MINUS           reduce using rule 223 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> expression .)
    ID              reduce using rule 223 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> expression .)
    INIT            reduce using rule 223 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> expression .)
    OUT             reduce using rule 223 (jumpExpression -> expression .)
    VARARG          reduce using rule 223 (jumpExpression -> expression .)
    WHERE           reduce using rule 223 (jumpExpression -> expression .)
    OBJECT          reduce using rule 223 (jumpExpression -> expression .)
    CONST           reduce using rule 223 (jumpExpression -> expression .)
    CONSTRUCTOR     reduce using rule 223 (jumpExpression -> expression .)
    EOF             reduce using rule 223 (jumpExpression -> expression .)
    FALSE           reduce using rule 223 (jumpExpression -> expression .)
    FUNCTION        reduce using rule 223 (jumpExpression -> expression .)
    NULL            reduce using rule 223 (jumpExpression -> expression .)
    NULLABLE        reduce using rule 223 (jumpExpression -> expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> expression .)
    SMARTCAST       reduce using rule 223 (jumpExpression -> expression .)
    THIS            reduce using rule 223 (jumpExpression -> expression .)
    TRUE            reduce using rule 223 (jumpExpression -> expression .)
    VAL             reduce using rule 223 (jumpExpression -> expression .)
    VAR             reduce using rule 223 (jumpExpression -> expression .)
    WHEN            reduce using rule 223 (jumpExpression -> expression .)
    LONG            reduce using rule 223 (jumpExpression -> expression .)
    ARRAY           reduce using rule 223 (jumpExpression -> expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> expression .)
    IN              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> expression .)
    IS              reduce using rule 223 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> expression .)
    AND             reduce using rule 223 (jumpExpression -> expression .)
    OR              reduce using rule 223 (jumpExpression -> expression .)

  ! COMMA           [ reduce using rule 223 (jumpExpression -> expression .) ]
  ! RPAREN          [ reduce using rule 223 (jumpExpression -> expression .) ]


state 420

    (214) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE . controlStructureBodyOrPV
    (215) controlStructureBodyOrPV -> . controlStructureBody
    (216) controlStructureBodyOrPV -> . PV
    (76) controlStructureBody -> . block
    (77) controlStructureBody -> . statement
    (78) block -> . LCHAVE statements RCHAVE
    (71) statement -> . functionDeclaration
    (72) statement -> . assignment
    (73) statement -> . loopStatement
    (74) statement -> . expression
    (75) statement -> . propertyDeclaration
    (3) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (91) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (92) assignment -> . assignableExpression assignmentAndOperator expression
    (79) loopStatement -> . forStatement_MD
    (80) loopStatement -> . forStatement_VD
    (81) loopStatement -> . whileStatement
    (82) loopStatement -> . doWhileStatement
    (93) expression -> . disjunction
    (10) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (138) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (139) directlyAssignableExpression -> . simpleIdentifier
    (140) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (142) assignableExpression -> . prefixUnaryExpression
    (143) assignableExpression -> . parenthesizedAssignableExpression
    (83) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (84) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (85) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (86) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (87) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (88) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (89) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (90) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (94) disjunction -> . conjunction
    (95) disjunction -> . conjunction OR disjunction
    (11) varOrVal -> . VAR
    (12) varOrVal -> . VAL
    (131) postfixUnaryExpression -> . primaryExpression
    (132) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (267) simpleIdentifier -> . ID
    (268) simpleIdentifier -> . CROSSINLINE
    (269) simpleIdentifier -> . IMPORT
    (270) simpleIdentifier -> . INIT
    (271) simpleIdentifier -> . NOINLINE
    (272) simpleIdentifier -> . OUT
    (273) simpleIdentifier -> . VARARG
    (274) simpleIdentifier -> . WHERE
    (275) simpleIdentifier -> . OBJECT
    (276) simpleIdentifier -> . CONST
    (277) simpleIdentifier -> . CONSTRUCTOR
    (278) simpleIdentifier -> . EOF
    (279) simpleIdentifier -> . FALSE
    (280) simpleIdentifier -> . FUNCTION
    (281) simpleIdentifier -> . NULL
    (282) simpleIdentifier -> . NULLABLE
    (283) simpleIdentifier -> . NUMBER
    (284) simpleIdentifier -> . OPERATOR
    (285) simpleIdentifier -> . SMARTCAST
    (286) simpleIdentifier -> . THIS
    (287) simpleIdentifier -> . TRUE
    (288) simpleIdentifier -> . VAL
    (289) simpleIdentifier -> . VAR
    (290) simpleIdentifier -> . WHEN
    (291) simpleIdentifier -> . LONG
    (292) simpleIdentifier -> . ARRAY
    (141) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (122) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (123) prefixUnaryExpression -> . postfixUnaryExpression
    (144) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (96) conjunction -> . equality
    (97) conjunction -> . equality AND conjunction
    (172) primaryExpression -> . parenthesizedExpression
    (173) primaryExpression -> . simpleIdentifier
    (174) primaryExpression -> . LITERAL_STRING
    (175) primaryExpression -> . callableReference
    (176) primaryExpression -> . functionLiteral
    (177) primaryExpression -> . collectionLiteral
    (178) primaryExpression -> . ifExpression
    (179) primaryExpression -> . jumpExpression
    (124) prefixUnaryExpressionRecursive -> . unaryPrefix
    (125) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (98) equality -> . comparison
    (99) equality -> . comparison equalityOperator equality
    (180) parenthesizedExpression -> . LPAREN expression RPAREN
    (228) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (210) functionLiteral -> . lambdaLiteral
    (211) functionLiteral -> . anonymousFunction
    (181) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (182) collectionLiteral -> . LCCT RCCT
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (214) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (221) jumpExpression -> . RETURN expression
    (222) jumpExpression -> . RETURN_AT expression
    (223) jumpExpression -> . expression
    (224) jumpExpression -> . CONTINUE
    (225) jumpExpression -> . CONTINUE_AT
    (226) jumpExpression -> . BREAK
    (227) jumpExpression -> . BREAK_AT
    (126) unaryPrefix -> . label
    (127) unaryPrefix -> . prefixUnaryOperator
    (100) comparison -> . infixOperation
    (101) comparison -> . infixOperation comparisonOperator infixOperation
    (229) optionalReceiverType -> . receiverType
    (230) optionalReceiverType -> .
    (195) lambdaLiteral -> . RCHAVE optionsLambdaLiteral LCHAVE
    (209) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (128) label -> . simpleIdentifier
    (257) prefixUnaryOperator -> . INCREMENTO
    (258) prefixUnaryOperator -> . DECREMENTO
    (259) prefixUnaryOperator -> . MINUS
    (260) prefixUnaryOperator -> . PLUS
    (261) prefixUnaryOperator -> . NOT
    (102) infixOperation -> . elvisExpression infixOperationRecursive
    (103) infixOperation -> . elvisExpression
    (68) receiverType -> . typeModifier parenthesizedType
    (110) elvisExpression -> . infixFunctionCall
    (111) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (47) typeModifier -> . SUSPEND
    (112) infixFunctionCall -> . rangeExpression
    (113) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (114) rangeExpression -> . additiveExpression
    (115) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (116) additiveExpression -> . multiplicativeExpression
    (117) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (118) multiplicativeExpression -> . asExpression
    (119) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (120) asExpression -> . prefixUnaryExpression
    (121) asExpression -> . prefixUnaryExpression asOperator type

    PV              shift and go to state 391
    LCHAVE          shift and go to state 43
    FUN             shift and go to state 62
    FOR             shift and go to state 76
    WHILE           shift and go to state 78
    DO              shift and go to state 79
    VAR             shift and go to state 81
    VAL             shift and go to state 82
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OBJECT          shift and go to state 14
    CONST           shift and go to state 15
    CONSTRUCTOR     shift and go to state 16
    EOF             shift and go to state 17
    FALSE           shift and go to state 18
    FUNCTION        shift and go to state 19
    NULL            shift and go to state 20
    NULLABLE        shift and go to state 21
    NUMBER          shift and go to state 22
    OPERATOR        shift and go to state 23
    SMARTCAST       shift and go to state 24
    THIS            shift and go to state 25
    TRUE            shift and go to state 26
    WHEN            shift and go to state 29
    LONG            shift and go to state 30
    ARRAY           shift and go to state 31
    LPAREN          shift and go to state 77
    LITERAL_STRING  shift and go to state 87
    LCCT            shift and go to state 98
    IF              shift and go to state 99
    RETURN          shift and go to state 100
    RETURN_AT       shift and go to state 101
    CONTINUE        shift and go to state 102
    CONTINUE_AT     shift and go to state 103
    BREAK           shift and go to state 104
    BREAK_AT        shift and go to state 105
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> .)
    RCHAVE          shift and go to state 55
    INCREMENTO      shift and go to state 110
    DECREMENTO      shift and go to state 111
    MINUS           shift and go to state 112
    PLUS            shift and go to state 113
    NOT             shift and go to state 114
    SUSPEND         shift and go to state 48

    expression                     shift and go to state 60
    controlStructureBodyOrPV       shift and go to state 421
    controlStructureBody           shift and go to state 422
    block                          shift and go to state 182
    statement                      shift and go to state 183
    functionDeclaration            shift and go to state 57
    assignment                     shift and go to state 58
    loopStatement                  shift and go to state 59
    propertyDeclaration            shift and go to state 61
    simpleIdentifier               shift and go to state 63
    directlyAssignableExpression   shift and go to state 64
    assignableExpression           shift and go to state 65
    forStatement_MD                shift and go to state 66
    forStatement_VD                shift and go to state 67
    whileStatement                 shift and go to state 68
    doWhileStatement               shift and go to state 69
    disjunction                    shift and go to state 70
    varOrVal                       shift and go to state 71
    postfixUnaryExpression         shift and go to state 72
    parenthesizedDirectlyAssignableExpression shift and go to state 73
    prefixUnaryExpression          shift and go to state 74
    parenthesizedAssignableExpression shift and go to state 75
    conjunction                    shift and go to state 80
    primaryExpression              shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 84
    equality                       shift and go to state 85
    parenthesizedExpression        shift and go to state 86
    callableReference              shift and go to state 88
    functionLiteral                shift and go to state 89
    collectionLiteral              shift and go to state 90
    ifExpression                   shift and go to state 91
    jumpExpression                 shift and go to state 92
    unaryPrefix                    shift and go to state 93
    comparison                     shift and go to state 94
    optionalReceiverType           shift and go to state 95
    lambdaLiteral                  shift and go to state 96
    anonymousFunction              shift and go to state 97
    label                          shift and go to state 106
    prefixUnaryOperator            shift and go to state 107
    infixOperation                 shift and go to state 108
    receiverType                   shift and go to state 109
    elvisExpression                shift and go to state 115
    typeModifier                   shift and go to state 116
    infixFunctionCall              shift and go to state 117
    rangeExpression                shift and go to state 118
    additiveExpression             shift and go to state 119
    multiplicativeExpression       shift and go to state 120
    asExpression                   shift and go to state 121

state 421

    (214) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .

    INCREMENTO      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DECREMENTO      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MENOR           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LCCT            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    COLONCOLON      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PONTO           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LPAREN          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RCHAVE          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    AS              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MAISIGUAL       reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MENOSIGUAL      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MULTIGUAL       reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DIVIGUAL        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MODIGUAL        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MULT            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DIVIDE          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MOD             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PLUS            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MINUS           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PONTOPONTO      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ID              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CROSSINLINE     reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IMPORT          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    INIT            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOINLINE        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OUT             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    VARARG          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    WHERE           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OBJECT          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CONST           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CONSTRUCTOR     reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    EOF             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    FALSE           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    FUNCTION        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NULL            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NULLABLE        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NUMBER          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OPERATOR        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    SMARTCAST       reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    THIS            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    TRUE            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    VAL             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    VAR             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    WHEN            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LONG            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ARRAY           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ELVIS           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IN              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOT_IN          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IS              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOT_IS          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MAIOR           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MENORIGUAL      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MAIORIGUAL      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DIFERENTE       reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IDENTIDADE      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IGUALDADE       reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    SEMIDENTIDADE   reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    AND             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OR              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    FUN             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    FOR             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    WHILE           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DO              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LITERAL_STRING  reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IF              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RETURN          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RETURN_AT       reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CONTINUE        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CONTINUE_AT     reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    BREAK           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    BREAK_AT        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOT             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    SUSPEND         reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    COMMA           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RPAREN          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LCHAVE          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RCCT            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PV              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ELSE            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)


state 422

    (215) controlStructureBodyOrPV -> controlStructureBody .

    FUN             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    FOR             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    WHILE           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    DO              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    VAR             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    VAL             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    ID              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    CROSSINLINE     reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IMPORT          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    INIT            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NOINLINE        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    OUT             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    VARARG          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    WHERE           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    OBJECT          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    CONST           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    CONSTRUCTOR     reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    EOF             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    FALSE           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    FUNCTION        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NULL            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NULLABLE        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NUMBER          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    OPERATOR        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    SMARTCAST       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    THIS            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    TRUE            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    WHEN            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    LONG            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    ARRAY           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    LPAREN          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    LITERAL_STRING  reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    LCCT            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IF              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN_AT       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE_AT     reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK_AT        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    RCHAVE          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    INCREMENTO      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    DECREMENTO      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MINUS           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    PLUS            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    SUSPEND         reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    COLONCOLON      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    LCHAVE          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOR           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTO           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    AS              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MAISIGUAL       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOSIGUAL      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MULTIGUAL       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIGUAL        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MODIGUAL        reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MULT            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIDE          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MOD             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTOPONTO      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    ELVIS           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IN              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IN          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IS              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IS          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIOR           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MENORIGUAL      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIORIGUAL      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    DIFERENTE       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IDENTIDADE      reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    IGUALDADE       reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    AND             reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    OR              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    COMMA           reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    RPAREN          reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    RCCT            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    PV              reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)
    ELSE            reduce using rule 215 (controlStructureBodyOrPV -> controlStructureBody .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LCHAVE in state 34 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 35 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 47 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 53 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 56 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 62 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 62 resolved as shift
WARNING: shift/reduce conflict for INIT in state 62 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 62 resolved as shift
WARNING: shift/reduce conflict for OUT in state 62 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 62 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 62 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 62 resolved as shift
WARNING: shift/reduce conflict for CONST in state 62 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 62 resolved as shift
WARNING: shift/reduce conflict for EOF in state 62 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 62 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 62 resolved as shift
WARNING: shift/reduce conflict for NULL in state 62 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 62 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 62 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 62 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 62 resolved as shift
WARNING: shift/reduce conflict for THIS in state 62 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 62 resolved as shift
WARNING: shift/reduce conflict for VAL in state 62 resolved as shift
WARNING: shift/reduce conflict for VAR in state 62 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 62 resolved as shift
WARNING: shift/reduce conflict for LONG in state 62 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 62 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 62 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 72 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 72 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 72 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 72 resolved as shift
WARNING: shift/reduce conflict for AS in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 83 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 83 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 83 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 83 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 83 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 83 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 83 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 83 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 83 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 93 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for NOT in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 93 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 93 resolved as shift
WARNING: shift/reduce conflict for INIT in state 93 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 93 resolved as shift
WARNING: shift/reduce conflict for OUT in state 93 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 93 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 93 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 93 resolved as shift
WARNING: shift/reduce conflict for CONST in state 93 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 93 resolved as shift
WARNING: shift/reduce conflict for EOF in state 93 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 93 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 93 resolved as shift
WARNING: shift/reduce conflict for NULL in state 93 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 93 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 93 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 93 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 93 resolved as shift
WARNING: shift/reduce conflict for THIS in state 93 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 93 resolved as shift
WARNING: shift/reduce conflict for VAL in state 93 resolved as shift
WARNING: shift/reduce conflict for VAR in state 93 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 93 resolved as shift
WARNING: shift/reduce conflict for LONG in state 93 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 93 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 94 resolved as shift
WARNING: shift/reduce conflict for IDENTIDADE in state 94 resolved as shift
WARNING: shift/reduce conflict for IGUALDADE in state 94 resolved as shift
WARNING: shift/reduce conflict for SEMIDENTIDADE in state 94 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 108 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 108 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for IN in state 115 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 115 resolved as shift
WARNING: shift/reduce conflict for IS in state 115 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 115 resolved as shift
WARNING: shift/reduce conflict for ELVIS in state 117 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 118 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 118 resolved as shift
WARNING: shift/reduce conflict for INIT in state 118 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 118 resolved as shift
WARNING: shift/reduce conflict for OUT in state 118 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 118 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 118 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 118 resolved as shift
WARNING: shift/reduce conflict for CONST in state 118 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 118 resolved as shift
WARNING: shift/reduce conflict for EOF in state 118 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 118 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 118 resolved as shift
WARNING: shift/reduce conflict for NULL in state 118 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 118 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 118 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 118 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 118 resolved as shift
WARNING: shift/reduce conflict for THIS in state 118 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 118 resolved as shift
WARNING: shift/reduce conflict for VAL in state 118 resolved as shift
WARNING: shift/reduce conflict for VAR in state 118 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 118 resolved as shift
WARNING: shift/reduce conflict for LONG in state 118 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 118 resolved as shift
WARNING: shift/reduce conflict for PONTOPONTO in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MULT in state 121 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 121 resolved as shift
WARNING: shift/reduce conflict for MOD in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 126 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 126 resolved as shift
WARNING: shift/reduce conflict for INIT in state 126 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 126 resolved as shift
WARNING: shift/reduce conflict for OUT in state 126 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 126 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 126 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 126 resolved as shift
WARNING: shift/reduce conflict for CONST in state 126 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 126 resolved as shift
WARNING: shift/reduce conflict for EOF in state 126 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 126 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 126 resolved as shift
WARNING: shift/reduce conflict for NULL in state 126 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 126 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 126 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 126 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 126 resolved as shift
WARNING: shift/reduce conflict for THIS in state 126 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 126 resolved as shift
WARNING: shift/reduce conflict for VAL in state 126 resolved as shift
WARNING: shift/reduce conflict for VAR in state 126 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 126 resolved as shift
WARNING: shift/reduce conflict for LONG in state 126 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 126 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 126 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 130 resolved as shift
WARNING: shift/reduce conflict for AS in state 135 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 138 resolved as shift
WARNING: shift/reduce conflict for OUT in state 167 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 167 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 173 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 178 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 186 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 186 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 186 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 186 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 186 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 186 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 186 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 186 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 186 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 186 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 194 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 208 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 218 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 218 resolved as shift
WARNING: shift/reduce conflict for ID in state 218 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 218 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 218 resolved as shift
WARNING: shift/reduce conflict for INIT in state 218 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 218 resolved as shift
WARNING: shift/reduce conflict for OUT in state 218 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 218 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 218 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 218 resolved as shift
WARNING: shift/reduce conflict for CONST in state 218 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 218 resolved as shift
WARNING: shift/reduce conflict for EOF in state 218 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 218 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 218 resolved as shift
WARNING: shift/reduce conflict for NULL in state 218 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 218 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 218 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 218 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 218 resolved as shift
WARNING: shift/reduce conflict for THIS in state 218 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 218 resolved as shift
WARNING: shift/reduce conflict for VAL in state 218 resolved as shift
WARNING: shift/reduce conflict for VAR in state 218 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 218 resolved as shift
WARNING: shift/reduce conflict for LONG in state 218 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 218 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 226 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 237 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 238 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 241 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 248 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 254 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 254 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 254 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 268 resolved as shift
WARNING: shift/reduce conflict for OUT in state 270 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 270 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 276 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 286 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 291 resolved as shift
WARNING: shift/reduce conflict for OR in state 294 resolved as shift
WARNING: shift/reduce conflict for AND in state 295 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 301 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 302 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 302 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 302 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 302 resolved as shift
WARNING: shift/reduce conflict for IN in state 303 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 303 resolved as shift
WARNING: shift/reduce conflict for IS in state 303 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 303 resolved as shift
WARNING: shift/reduce conflict for IN in state 304 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 304 resolved as shift
WARNING: shift/reduce conflict for IS in state 304 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 304 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 306 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 306 resolved as shift
WARNING: shift/reduce conflict for IN in state 308 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 308 resolved as shift
WARNING: shift/reduce conflict for IS in state 308 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 308 resolved as shift
WARNING: shift/reduce conflict for ELVIS in state 309 resolved as shift
WARNING: shift/reduce conflict for ID in state 310 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 310 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 310 resolved as shift
WARNING: shift/reduce conflict for INIT in state 310 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 310 resolved as shift
WARNING: shift/reduce conflict for OUT in state 310 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 310 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 310 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 310 resolved as shift
WARNING: shift/reduce conflict for CONST in state 310 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 310 resolved as shift
WARNING: shift/reduce conflict for EOF in state 310 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 310 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 310 resolved as shift
WARNING: shift/reduce conflict for NULL in state 310 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 310 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 310 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 310 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 310 resolved as shift
WARNING: shift/reduce conflict for THIS in state 310 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 310 resolved as shift
WARNING: shift/reduce conflict for VAL in state 310 resolved as shift
WARNING: shift/reduce conflict for VAR in state 310 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 310 resolved as shift
WARNING: shift/reduce conflict for LONG in state 310 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 310 resolved as shift
WARNING: shift/reduce conflict for PONTOPONTO in state 311 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 312 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 312 resolved as shift
WARNING: shift/reduce conflict for ID in state 315 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 315 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 315 resolved as shift
WARNING: shift/reduce conflict for INIT in state 315 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 315 resolved as shift
WARNING: shift/reduce conflict for OUT in state 315 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 315 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 315 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 315 resolved as shift
WARNING: shift/reduce conflict for CONST in state 315 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 315 resolved as shift
WARNING: shift/reduce conflict for EOF in state 315 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 315 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 315 resolved as shift
WARNING: shift/reduce conflict for NULL in state 315 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 315 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 315 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 315 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 315 resolved as shift
WARNING: shift/reduce conflict for THIS in state 315 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 315 resolved as shift
WARNING: shift/reduce conflict for VAL in state 315 resolved as shift
WARNING: shift/reduce conflict for VAR in state 315 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 315 resolved as shift
WARNING: shift/reduce conflict for LONG in state 315 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 315 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 315 resolved as shift
WARNING: shift/reduce conflict for ID in state 317 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 317 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 317 resolved as shift
WARNING: shift/reduce conflict for INIT in state 317 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 317 resolved as shift
WARNING: shift/reduce conflict for OUT in state 317 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 317 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 317 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 317 resolved as shift
WARNING: shift/reduce conflict for CONST in state 317 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 317 resolved as shift
WARNING: shift/reduce conflict for EOF in state 317 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 317 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 317 resolved as shift
WARNING: shift/reduce conflict for NULL in state 317 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 317 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 317 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 317 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 317 resolved as shift
WARNING: shift/reduce conflict for THIS in state 317 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 317 resolved as shift
WARNING: shift/reduce conflict for VAL in state 317 resolved as shift
WARNING: shift/reduce conflict for VAR in state 317 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 317 resolved as shift
WARNING: shift/reduce conflict for LONG in state 317 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 317 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 317 resolved as shift
WARNING: shift/reduce conflict for ID in state 324 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 324 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 324 resolved as shift
WARNING: shift/reduce conflict for INIT in state 324 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 324 resolved as shift
WARNING: shift/reduce conflict for OUT in state 324 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 324 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 324 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 324 resolved as shift
WARNING: shift/reduce conflict for CONST in state 324 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 324 resolved as shift
WARNING: shift/reduce conflict for EOF in state 324 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 324 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 324 resolved as shift
WARNING: shift/reduce conflict for NULL in state 324 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 324 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 324 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 324 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 324 resolved as shift
WARNING: shift/reduce conflict for THIS in state 324 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 324 resolved as shift
WARNING: shift/reduce conflict for VAL in state 324 resolved as shift
WARNING: shift/reduce conflict for VAR in state 324 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 324 resolved as shift
WARNING: shift/reduce conflict for LONG in state 324 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 324 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 327 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 336 resolved as shift
WARNING: shift/reduce conflict for OUT in state 338 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 338 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 340 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 350 resolved as shift
WARNING: shift/reduce conflict for IGUALDADE in state 356 resolved as shift
WARNING: shift/reduce conflict for PV in state 359 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 363 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 363 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 365 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 367 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 371 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 371 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 371 resolved as shift
WARNING: shift/reduce conflict for PV in state 373 resolved as shift
WARNING: shift/reduce conflict for PV in state 373 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 375 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 379 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 380 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 383 resolved as shift
WARNING: shift/reduce conflict for PV in state 384 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 384 resolved as shift
WARNING: shift/reduce conflict for FUN in state 384 resolved as shift
WARNING: shift/reduce conflict for FOR in state 384 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 384 resolved as shift
WARNING: shift/reduce conflict for DO in state 384 resolved as shift
WARNING: shift/reduce conflict for VAR in state 384 resolved as shift
WARNING: shift/reduce conflict for VAL in state 384 resolved as shift
WARNING: shift/reduce conflict for ID in state 384 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 384 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 384 resolved as shift
WARNING: shift/reduce conflict for INIT in state 384 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 384 resolved as shift
WARNING: shift/reduce conflict for OUT in state 384 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 384 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 384 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 384 resolved as shift
WARNING: shift/reduce conflict for CONST in state 384 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 384 resolved as shift
WARNING: shift/reduce conflict for EOF in state 384 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 384 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 384 resolved as shift
WARNING: shift/reduce conflict for NULL in state 384 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 384 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 384 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 384 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 384 resolved as shift
WARNING: shift/reduce conflict for THIS in state 384 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 384 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 384 resolved as shift
WARNING: shift/reduce conflict for LONG in state 384 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 384 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 384 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 384 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 384 resolved as shift
WARNING: shift/reduce conflict for IF in state 384 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 384 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 384 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 384 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 384 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 384 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 384 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 384 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 384 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 384 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 384 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 384 resolved as shift
WARNING: shift/reduce conflict for NOT in state 384 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 384 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 399 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 406 resolved as shift
WARNING: shift/reduce conflict for FUN in state 406 resolved as shift
WARNING: shift/reduce conflict for FOR in state 406 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 406 resolved as shift
WARNING: shift/reduce conflict for DO in state 406 resolved as shift
WARNING: shift/reduce conflict for VAR in state 406 resolved as shift
WARNING: shift/reduce conflict for VAL in state 406 resolved as shift
WARNING: shift/reduce conflict for ID in state 406 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 406 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 406 resolved as shift
WARNING: shift/reduce conflict for INIT in state 406 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 406 resolved as shift
WARNING: shift/reduce conflict for OUT in state 406 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 406 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 406 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 406 resolved as shift
WARNING: shift/reduce conflict for CONST in state 406 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 406 resolved as shift
WARNING: shift/reduce conflict for EOF in state 406 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 406 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 406 resolved as shift
WARNING: shift/reduce conflict for NULL in state 406 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 406 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 406 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 406 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 406 resolved as shift
WARNING: shift/reduce conflict for THIS in state 406 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 406 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 406 resolved as shift
WARNING: shift/reduce conflict for LONG in state 406 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 406 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 406 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 406 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 406 resolved as shift
WARNING: shift/reduce conflict for IF in state 406 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 406 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 406 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 406 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 406 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 406 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 406 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 406 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 406 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 406 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 406 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 406 resolved as shift
WARNING: shift/reduce conflict for NOT in state 406 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 406 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 407 resolved as shift
WARNING: shift/reduce conflict for FUN in state 407 resolved as shift
WARNING: shift/reduce conflict for FOR in state 407 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 407 resolved as shift
WARNING: shift/reduce conflict for DO in state 407 resolved as shift
WARNING: shift/reduce conflict for VAR in state 407 resolved as shift
WARNING: shift/reduce conflict for VAL in state 407 resolved as shift
WARNING: shift/reduce conflict for ID in state 407 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 407 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 407 resolved as shift
WARNING: shift/reduce conflict for INIT in state 407 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 407 resolved as shift
WARNING: shift/reduce conflict for OUT in state 407 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 407 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 407 resolved as shift
WARNING: shift/reduce conflict for OBJECT in state 407 resolved as shift
WARNING: shift/reduce conflict for CONST in state 407 resolved as shift
WARNING: shift/reduce conflict for CONSTRUCTOR in state 407 resolved as shift
WARNING: shift/reduce conflict for EOF in state 407 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 407 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 407 resolved as shift
WARNING: shift/reduce conflict for NULL in state 407 resolved as shift
WARNING: shift/reduce conflict for NULLABLE in state 407 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 407 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 407 resolved as shift
WARNING: shift/reduce conflict for SMARTCAST in state 407 resolved as shift
WARNING: shift/reduce conflict for THIS in state 407 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 407 resolved as shift
WARNING: shift/reduce conflict for WHEN in state 407 resolved as shift
WARNING: shift/reduce conflict for LONG in state 407 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 407 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 407 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 407 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 407 resolved as shift
WARNING: shift/reduce conflict for IF in state 407 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 407 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 407 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 407 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 407 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 407 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 407 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 407 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 407 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 407 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 407 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 407 resolved as shift
WARNING: shift/reduce conflict for NOT in state 407 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 407 resolved as shift
WARNING: reduce/reduce conflict in state 60 resolved using rule (statement -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 60
WARNING: reduce/reduce conflict in state 62 resolved using rule (optionalTypeModifiers -> <empty>)
WARNING: rejected rule (optionalTypePonto -> <empty>) in state 62
WARNING: reduce/reduce conflict in state 63 resolved using rule (directlyAssignableExpression -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 63
WARNING: reduce/reduce conflict in state 63 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 63
WARNING: reduce/reduce conflict in state 74 resolved using rule (asExpression -> prefixUnaryExpression)
WARNING: rejected rule (assignableExpression -> prefixUnaryExpression) in state 74
WARNING: reduce/reduce conflict in state 81 resolved using rule (varOrVal -> VAR)
WARNING: rejected rule (simpleIdentifier -> VAR) in state 81
WARNING: reduce/reduce conflict in state 82 resolved using rule (varOrVal -> VAL)
WARNING: rejected rule (simpleIdentifier -> VAL) in state 82
WARNING: reduce/reduce conflict in state 83 resolved using rule (postfixUnaryExpression -> primaryExpression)
WARNING: rejected rule (optionalTypeArguments -> <empty>) in state 83
WARNING: reduce/reduce conflict in state 133 resolved using rule (functionValueParameter -> parameter ATRIBUICAO expression)
WARNING: rejected rule (jumpExpression -> expression) in state 133
WARNING: reduce/reduce conflict in state 134 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 134
WARNING: reduce/reduce conflict in state 138 resolved using rule (optionalTypeModifiers -> <empty>)
WARNING: rejected rule (optionalTypePonto -> <empty>) in state 138
WARNING: reduce/reduce conflict in state 148 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 148
WARNING: reduce/reduce conflict in state 186 resolved using rule (postfixUnaryExpressionRecursive -> postfixUnarySuffix)
WARNING: rejected rule (optionalTypeArguments -> <empty>) in state 186
WARNING: reduce/reduce conflict in state 188 resolved using rule (postfixUnarySuffix -> typeArguments)
WARNING: rejected rule (optionalTypeArguments -> typeArguments) in state 188
WARNING: reduce/reduce conflict in state 195 resolved using rule (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression)
WARNING: rejected rule (prefixUnaryExpression -> postfixUnaryExpression) in state 195
WARNING: reduce/reduce conflict in state 208 resolved using rule (collectionLiteralRecursive -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 208
WARNING: reduce/reduce conflict in state 210 resolved using rule (jumpExpression -> RETURN expression)
WARNING: rejected rule (jumpExpression -> expression) in state 210
WARNING: reduce/reduce conflict in state 211 resolved using rule (jumpExpression -> RETURN_AT expression)
WARNING: rejected rule (jumpExpression -> expression) in state 211
WARNING: reduce/reduce conflict in state 252 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (directlyAssignableExpression -> simpleIdentifier) in state 252
WARNING: reduce/reduce conflict in state 252 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 252
WARNING: reduce/reduce conflict in state 252 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 252
WARNING: reduce/reduce conflict in state 256 resolved using rule (assignment -> directlyAssignableExpression ATRIBUICAO expression)
WARNING: rejected rule (jumpExpression -> expression) in state 256
WARNING: reduce/reduce conflict in state 257 resolved using rule (assignment -> assignableExpression assignmentAndOperator expression)
WARNING: rejected rule (jumpExpression -> expression) in state 257
WARNING: reduce/reduce conflict in state 276 resolved using rule (indexingSuffixRecursive -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 276
WARNING: reduce/reduce conflict in state 289 resolved using rule (expression -> disjunction)
WARNING: rejected rule (disjunction -> conjunction OR disjunction) in state 289
WARNING: reduce/reduce conflict in state 294 resolved using rule (disjunction -> conjunction)
WARNING: rejected rule (conjunction -> equality AND conjunction) in state 294
WARNING: reduce/reduce conflict in state 295 resolved using rule (conjunction -> equality)
WARNING: rejected rule (equality -> comparison equalityOperator equality) in state 295
WARNING: reduce/reduce conflict in state 302 resolved using rule (comparison -> infixOperation)
WARNING: rejected rule (comparison -> infixOperation comparisonOperator infixOperation) in state 302
WARNING: reduce/reduce conflict in state 304 resolved using rule (infixOperation -> elvisExpression)
WARNING: rejected rule (elvisOrType -> elvisExpression) in state 304
WARNING: reduce/reduce conflict in state 308 resolved using rule (infixOperation -> elvisExpression)
WARNING: rejected rule (elvisExpression -> infixFunctionCall ELVIS elvisExpression) in state 308
WARNING: reduce/reduce conflict in state 309 resolved using rule (elvisExpression -> infixFunctionCall)
WARNING: rejected rule (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall) in state 309
WARNING: reduce/reduce conflict in state 310 resolved using rule (infixFunctionCall -> rangeExpression)
WARNING: rejected rule (rangeExpression -> additiveExpression PONTOPONTO rangeExpression) in state 310
WARNING: reduce/reduce conflict in state 311 resolved using rule (rangeExpression -> additiveExpression)
WARNING: rejected rule (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression) in state 311
WARNING: reduce/reduce conflict in state 312 resolved using rule (additiveExpression -> multiplicativeExpression)
WARNING: rejected rule (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression) in state 312
WARNING: reduce/reduce conflict in state 340 resolved using rule (optionalTypeModifiers -> <empty>)
WARNING: rejected rule (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers) in state 340
WARNING: reduce/reduce conflict in state 356 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 356
WARNING: reduce/reduce conflict in state 357 resolved using rule (valueArgument -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 357
WARNING: reduce/reduce conflict in state 363 resolved using rule (parameterOrTypeRecursive -> COMMA optionalParameterOrType)
WARNING: rejected rule (parameterOrTypeRecursive -> <empty>) in state 363
WARNING: reduce/reduce conflict in state 373 resolved using rule (optionalPv -> <empty>)
WARNING: rejected rule (jumpExpression -> expression) in state 373
WARNING: reduce/reduce conflict in state 384 resolved using rule (doWhileStatement -> DO WHILE LPAREN expression RPAREN)
WARNING: rejected rule (optionalReceiverType -> <empty>) in state 384
WARNING: reduce/reduce conflict in state 390 resolved using rule (controlStructureBodyOrPV -> controlStructureBody)
WARNING: rejected rule (optionalControlStructureBody -> controlStructureBody) in state 390
WARNING: reduce/reduce conflict in state 406 resolved using rule (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN)
WARNING: rejected rule (optionalReceiverType -> <empty>) in state 406
WARNING: reduce/reduce conflict in state 407 resolved using rule (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN)
WARNING: rejected rule (optionalReceiverType -> <empty>) in state 407
WARNING: reduce/reduce conflict in state 411 resolved using rule (valueArgument -> simpleIdentifier IGUALDADE expression)
WARNING: rejected rule (jumpExpression -> expression) in state 411
WARNING: reduce/reduce conflict in state 414 resolved using rule (functionBody -> ATRIBUICAO expression)
WARNING: rejected rule (jumpExpression -> expression) in state 414
WARNING: reduce/reduce conflict in state 419 resolved using rule (valueArgument -> simpleIdentifier IGUALDADE MULT expression)
WARNING: rejected rule (jumpExpression -> expression) in state 419
WARNING: Rule (optionalTypePonto -> <empty>) is never reduced
WARNING: Rule (assignableExpression -> prefixUnaryExpression) is never reduced
WARNING: Rule (optionalTypeArguments -> <empty>) is never reduced
WARNING: Rule (optionalTypeArguments -> typeArguments) is never reduced
WARNING: Rule (disjunction -> conjunction OR disjunction) is never reduced
WARNING: Rule (conjunction -> equality AND conjunction) is never reduced
WARNING: Rule (equality -> comparison equalityOperator equality) is never reduced
WARNING: Rule (comparison -> infixOperation comparisonOperator infixOperation) is never reduced
WARNING: Rule (elvisOrType -> elvisExpression) is never reduced
WARNING: Rule (elvisExpression -> infixFunctionCall ELVIS elvisExpression) is never reduced
WARNING: Rule (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall) is never reduced
WARNING: Rule (rangeExpression -> additiveExpression PONTOPONTO rangeExpression) is never reduced
WARNING: Rule (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression) is never reduced
WARNING: Rule (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression) is never reduced
WARNING: Rule (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers) is never reduced
WARNING: Rule (optionalControlStructureBody -> controlStructureBody) is never reduced
