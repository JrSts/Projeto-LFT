Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    BOOLEAN
    CHAR
    CONST
    CONSTRUCTOR
    DOUBLE
    EOF
    FALSE
    FLOAT
    FUNCTION
    INT
    NULL
    NULLABLE
    NUMBER
    OBJECT
    OPERATOR
    SMARTCAST
    STRING
    THIS
    TRUE
    VAL
    VAR
    WHEN

Grammar

Rule 0     S' -> kotlinFile
Rule 1     kotlinFile -> functionDeclaration kotlinFile
Rule 2     kotlinFile -> functionDeclaration
Rule 3     functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
Rule 4     fd1 -> typeParameters
Rule 5     fd1 -> <empty>
Rule 6     fd2 -> receiverType PONTO
Rule 7     fd2 -> <empty>
Rule 8     fd3 -> DOISP type
Rule 9     fd3 -> <empty>
Rule 10    fd5 -> functionBody
Rule 11    fd5 -> <empty>
Rule 12    typeParameters -> MENOR tps MAIOR
Rule 13    tps -> typeParameter
Rule 14    tps -> typeParameter COMMA tps
Rule 15    tps -> <empty>
Rule 16    typeParameter -> simpleIdentifier DOISP type
Rule 17    typeParameter -> simpleIdentifier
Rule 18    functionBody -> block
Rule 19    functionBody -> ATRIBUICAO expression
Rule 20    functionValueParameters -> LPAREN fvps RPAREN
Rule 21    functionValueParameters -> LPAREN RPAREN
Rule 22    fvps -> functionValueParameter
Rule 23    fvps -> functionValueParameter COMMA fvps
Rule 24    fvps -> <empty>
Rule 25    functionValueParameter -> parameter ATRIBUICAO expression
Rule 26    functionValueParameter -> parameter
Rule 27    variableDeclaration -> simpleIdentifier DOISP type
Rule 28    variableDeclaration -> simpleIdentifier
Rule 29    multiVariableDeclaration -> LPAREN mvd RPAREN
Rule 30    mvd -> variableDeclaration
Rule 31    mvd -> variableDeclaration COMMA mvd
Rule 32    mvd -> <empty>
Rule 33    parameter -> simpleIdentifier DOISP type
Rule 34    type -> typeModifiers optype
Rule 35    type -> optype
Rule 36    optype -> parenthesizedType
Rule 37    optype -> functionType
Rule 38    optype -> userType
Rule 39    typeModifiers -> typeModifier
Rule 40    typeModifiers -> typeModifier typeModifiers
Rule 41    typeModifier -> SUSPEND
Rule 42    typeProjectionModifier -> varianceModifier
Rule 43    varianceModifier -> IN
Rule 44    varianceModifier -> OUT
Rule 45    userType -> simpleUserType
Rule 46    simpleUserType -> simpleIdentifier typeArguments
Rule 47    simpleUserType -> simpleIdentifier
Rule 48    typeProjection -> typeProjectionModifiers type
Rule 49    typeProjection -> type
Rule 50    typeProjectionModifiers -> typeProjection
Rule 51    typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers
Rule 52    functionType -> receiverType PONTO functionTypeParameters SETA type
Rule 53    functionType -> functionTypeParameters SETA type
Rule 54    functionTypeParameters -> LPAREN parameter ftp RPAREN
Rule 55    functionTypeParameters -> LPAREN parameter ftp COMMA RPAREN
Rule 56    functionTypeParameters -> LPAREN type ftp RPAREN
Rule 57    functionTypeParameters -> LPAREN type ftp COMMA RPAREN
Rule 58    ftp -> COMMA parameter
Rule 59    ftp -> COMMA type
Rule 60    ftp -> <empty>
Rule 61    parenthesizedType -> LPAREN type RPAREN
Rule 62    receiverType -> typeModifier rt
Rule 63    rt -> parenthesizedType
Rule 64    statements -> statement
Rule 65    statements -> statement statements
Rule 66    statements -> <empty>
Rule 67    statement -> functionDeclaration
Rule 68    statement -> assignment
Rule 69    statement -> loopStatement
Rule 70    statement -> expression
Rule 71    controlStructureBody -> block
Rule 72    controlStructureBody -> statement
Rule 73    block -> LCHAVE statements RCHAVE
Rule 74    loopStatement -> forStatement_MD
Rule 75    loopStatement -> forStatement_VD
Rule 76    loopStatement -> whileStatement
Rule 77    loopStatement -> doWhileStatement
Rule 78    forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
Rule 79    forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN
Rule 80    forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
Rule 81    forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN
Rule 82    whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody
Rule 83    whileStatement -> WHILE LPAREN expression RPAREN PV
Rule 84    doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN
Rule 85    doWhileStatement -> DO WHILE LPAREN expression RPAREN
Rule 86    assignment -> directlyAssignableExpression IGUALDADE expression
Rule 87    assignment -> assignableExpression assignmentAndOperator expression
Rule 88    expression -> disjunction
Rule 89    disjunction -> conjunction
Rule 90    disjunction -> conjunction OR disjunction
Rule 91    conjunction -> equality
Rule 92    conjunction -> equality AND conjunction
Rule 93    equality -> comparison
Rule 94    equality -> comparison equalityOperator equality
Rule 95    comparison -> infixOperation
Rule 96    comparison -> infixOperation comparisonOperator infixOperation
Rule 97    infixOperation -> elvisExpression io
Rule 98    io -> inOperator elvisExpression
Rule 99    io -> isOperator type
Rule 100   io -> <empty>
Rule 101   elvisExpression -> infixFunctionCall
Rule 102   elvisExpression -> infixFunctionCall ELVIS elvisExpression
Rule 103   elvisExpression -> <empty>
Rule 104   infixFunctionCall -> rangeExpression
Rule 105   infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall
Rule 106   rangeExpression -> additiveExpression
Rule 107   rangeExpression -> additiveExpression PONTOPONTO rangeExpression
Rule 108   additiveExpression -> multiplicativeExpression
Rule 109   additiveExpression -> multiplicativeExpression additiveOperator additiveExpression
Rule 110   multiplicativeExpression -> asExpression
Rule 111   multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression
Rule 112   asExpression -> prefixUnaryExpression
Rule 113   asExpression -> prefixUnaryExpression asOperator type
Rule 114   prefixUnaryExpression -> preue postfixUnaryExpression
Rule 115   preue -> unaryPrefix
Rule 116   preue -> unaryPrefix preue
Rule 117   preue -> <empty>
Rule 118   unaryPrefix -> label
Rule 119   unaryPrefix -> prefixUnaryOperator
Rule 120   label -> simpleIdentifier
Rule 121   postfixUnaryExpression -> primaryExpression
Rule 122   postfixUnaryExpression -> primaryExpression posue
Rule 123   posue -> postfixUnarySuffix
Rule 124   posue -> postfixUnarySuffix posue
Rule 125   postfixUnarySuffix -> postfixUnaryOperator
Rule 126   postfixUnarySuffix -> typeArguments
Rule 127   postfixUnarySuffix -> callSuffix
Rule 128   postfixUnarySuffix -> indexingSuffix
Rule 129   postfixUnarySuffix -> navigationSuffix
Rule 130   directlyAssignableExpression -> postfixUnaryExpression assignableSuffix
Rule 131   directlyAssignableExpression -> simpleIdentifier
Rule 132   directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression
Rule 133   parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN
Rule 134   assignableExpression -> prefixUnaryExpression
Rule 135   assignableExpression -> parenthesizedAssignableExpression
Rule 136   parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN
Rule 137   assignableSuffix -> typeArguments
Rule 138   assignableSuffix -> indexingSuffix
Rule 139   assignableSuffix -> navigationSuffix
Rule 140   indexingSuffix -> LCCT isuf RCCT
Rule 141   isuf -> expression
Rule 142   isuf -> expression COMMA isuf
Rule 143   isuf -> <empty>
Rule 144   navigationSuffix -> memberAccessOperator simpleIdentifier CLASS
Rule 145   navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS
Rule 146   callSuffix -> typeArguments valueArguments annotatedLambda
Rule 147   callSuffix -> valueArguments annotatedLambda
Rule 148   callSuffix -> typeArguments annotatedLambda
Rule 149   callSuffix -> annotatedLambda
Rule 150   callSuffix -> typeArguments valueArguments
Rule 151   callSuffix -> valueArguments
Rule 152   annotatedLambda -> lambdaLiteral
Rule 153   typeArguments -> MENOR ta MAIOR
Rule 154   ta -> typeProjection
Rule 155   ta -> typeProjection COMMA ta
Rule 156   ta -> <empty>
Rule 157   valueArguments -> LPAREN RPAREN
Rule 158   valueArguments -> LPAREN vas RPAREN
Rule 159   vas -> valueArgument
Rule 160   vas -> valueArgument COMMA vas
Rule 161   valueArgument -> simpleIdentifier IGUALDADE MULT expression
Rule 162   valueArgument -> simpleIdentifier IGUALDADE expression
Rule 163   valueArgument -> expression
Rule 164   primaryExpression -> parenthesizedExpression
Rule 165   primaryExpression -> simpleIdentifier
Rule 166   primaryExpression -> LITERAL_STRING
Rule 167   primaryExpression -> callableReference
Rule 168   primaryExpression -> functionLiteral
Rule 169   primaryExpression -> collectionLiteral
Rule 170   primaryExpression -> ifExpression
Rule 171   primaryExpression -> jumpExpression
Rule 172   parenthesizedExpression -> LPAREN expression RPAREN
Rule 173   collectionLiteral -> LCCT cl RCCT
Rule 174   collectionLiteral -> LCCT RCCT
Rule 175   cl -> expression
Rule 176   cl -> expression COMMA cl
Rule 177   parametersWithOptionalType -> LPAREN pwot RPAREN
Rule 178   pwot -> parameterWithOptionalType
Rule 179   pwot -> parameterWithOptionalType COMMA pwot COMMA
Rule 180   pwot -> <empty>
Rule 181   parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP type
Rule 182   parameterWithOptionalType -> simpleIdentifier DOISP type
Rule 183   parameterWithOptionalType -> parameterModifiers simpleIdentifier
Rule 184   parameterWithOptionalType -> simpleIdentifier
Rule 185   parameterModifiers -> VARARG
Rule 186   parameterModifiers -> NOINLINE
Rule 187   parameterModifiers -> CROSSINLINE
Rule 188   lambdaLiteral -> RCHAVE ll LCHAVE
Rule 189   ll -> statements
Rule 190   ll -> lambdaParameters SETA statements
Rule 191   ll -> SETA statements
Rule 192   lambdaParameters -> lambdaParameter
Rule 193   lambdaParameters -> lambdaParameter COMMA lambdaParameters
Rule 194   lambdaParameter -> variableDeclaration
Rule 195   lambdaParameter -> multiVariableDeclaration DOISP type
Rule 196   lambdaParameter -> multiVariableDeclaration
Rule 197   anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1
Rule 198   af1 -> functionBody
Rule 199   af1 -> <empty>
Rule 200   anonymousFunction -> WHERE af
Rule 201   af -> typeConstraint
Rule 202   af -> typeConstraint COMMA af
Rule 203   typeConstraint -> simpleIdentifier DOISP type
Rule 204   af3 -> DOISP type
Rule 205   af3 -> <empty>
Rule 206   af4 -> type PONTO
Rule 207   af4 -> <empty>
Rule 208   functionLiteral -> lambdaLiteral
Rule 209   functionLiteral -> anonymousFunction
Rule 210   ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV
Rule 211   ifExpression -> IF LPAREN expression RPAREN controlStructureBody
Rule 212   ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
Rule 213   ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
Rule 214   ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
Rule 215   ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
Rule 216   ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
Rule 217   ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody
Rule 218   ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV
Rule 219   ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody
Rule 220   jumpExpression -> RETURN expression
Rule 221   jumpExpression -> RETURN_AT expression
Rule 222   jumpExpression -> expression
Rule 223   jumpExpression -> CONTINUE
Rule 224   jumpExpression -> CONTINUE_AT
Rule 225   jumpExpression -> BREAK
Rule 226   jumpExpression -> BREAK_AT
Rule 227   callableReference -> receiverType DOISP DOISP simpleIdentifier
Rule 228   callableReference -> DOISP DOISP simpleIdentifier
Rule 229   callableReference -> receiverType DOISP DOISP CLASS
Rule 230   callableReference -> DOISP DOISP CLASS
Rule 231   assignmentAndOperator -> MAIORIGUAL
Rule 232   assignmentAndOperator -> MENORIGUAL
Rule 233   assignmentAndOperator -> MULTIGUAL
Rule 234   assignmentAndOperator -> DIVIGUAL
Rule 235   assignmentAndOperator -> MODIGUAL
Rule 236   equalityOperator -> DIFERENTE
Rule 237   equalityOperator -> IDENTIDADE
Rule 238   equalityOperator -> IGUALDADE
Rule 239   equalityOperator -> SEMIDENTIDADE
Rule 240   comparisonOperator -> MENOR
Rule 241   comparisonOperator -> MAIOR
Rule 242   comparisonOperator -> MENORIGUAL
Rule 243   comparisonOperator -> MAIORIGUAL
Rule 244   inOperator -> IN
Rule 245   inOperator -> NOT_IN
Rule 246   isOperator -> IS
Rule 247   isOperator -> NOT_IS
Rule 248   additiveOperator -> PLUS
Rule 249   additiveOperator -> MINUS
Rule 250   multiplicativeOperator -> MULT
Rule 251   multiplicativeOperator -> DIVIDE
Rule 252   multiplicativeOperator -> MOD
Rule 253   asOperator -> AS
Rule 254   asOperator -> AS asOperator
Rule 255   prefixUnaryOperator -> INCREMENTO
Rule 256   prefixUnaryOperator -> DECREMENTO
Rule 257   prefixUnaryOperator -> MINUS
Rule 258   prefixUnaryOperator -> PLUS
Rule 259   prefixUnaryOperator -> NOT
Rule 260   postfixUnaryOperator -> INCREMENTO
Rule 261   postfixUnaryOperator -> DECREMENTO
Rule 262   memberAccessOperator -> PONTO
Rule 263   memberAccessOperator -> safeNav
Rule 264   memberAccessOperator -> COLONCOLON
Rule 265   safeNav -> PONTO
Rule 266   simpleIdentifier -> ID
Rule 267   simpleIdentifier -> CROSSINLINE
Rule 268   simpleIdentifier -> IMPORT
Rule 269   simpleIdentifier -> INIT
Rule 270   simpleIdentifier -> NOINLINE
Rule 271   simpleIdentifier -> OUT
Rule 272   simpleIdentifier -> VARARG
Rule 273   simpleIdentifier -> WHERE

Terminals, with rules where they appear

AND                  : 92
ARRAY                : 
AS                   : 253 254
ATRIBUICAO           : 19 25
BOOLEAN              : 
BREAK                : 225
BREAK_AT             : 226
CHAR                 : 
CLASS                : 144 145 229 230
COLONCOLON           : 264
COMMA                : 14 23 31 55 57 58 59 142 155 160 176 179 179 193 202
CONST                : 
CONSTRUCTOR          : 
CONTINUE             : 223
CONTINUE_AT          : 224
CROSSINLINE          : 187 267
DECREMENTO           : 256 261
DIFERENTE            : 236
DIVIDE               : 251
DIVIGUAL             : 234
DO                   : 84 85
DOISP                : 8 16 27 33 181 182 195 203 204 227 227 228 228 229 229 230 230
DOUBLE               : 
ELSE                 : 212 213 214 215 216 217 218 219
ELVIS                : 102
EOF                  : 
FALSE                : 
FLOAT                : 
FOR                  : 78 79 80 81
FUN                  : 3 197
FUNCTION             : 
ID                   : 266
IDENTIDADE           : 237
IF                   : 210 211 212 213 214 215 216 217 218 219
IGUALDADE            : 86 161 162 238
IMPORT               : 268
IN                   : 43 78 79 80 81 244
INCREMENTO           : 255 260
INIT                 : 269
INT                  : 
IS                   : 246
LCCT                 : 140 173 174
LCHAVE               : 73 188
LITERAL_STRING       : 166
LPAREN               : 20 21 29 54 55 56 57 61 78 79 80 81 82 83 84 85 133 136 157 158 172 177 210 211 212 213 214 215 216 217 218 219
MAIOR                : 12 153 241
MAIORIGUAL           : 231 243
MENOR                : 12 153 240
MENORIGUAL           : 232 242
MINUS                : 249 257
MOD                  : 252
MODIGUAL             : 235
MULT                 : 161 250
MULTIGUAL            : 233
NOINLINE             : 186 270
NOT                  : 259
NOT_IN               : 245
NOT_IS               : 247
NULL                 : 
NULLABLE             : 
NUMBER               : 
OBJECT               : 
OPERATOR             : 
OR                   : 90
OUT                  : 44 271
PLUS                 : 248 258
PONTO                : 6 52 206 262 265
PONTOPONTO           : 107
PV                   : 83 210 212 212 213 214 216 216 217 218
RCCT                 : 140 173 174
RCHAVE               : 73 188
RETURN               : 220
RETURN_AT            : 221
RPAREN               : 20 21 29 54 55 56 57 61 78 79 80 81 82 83 84 85 133 136 157 158 172 177 210 211 212 213 214 215 216 217 218 219
SEMIDENTIDADE        : 239
SETA                 : 52 53 190 191
SMARTCAST            : 
STRING               : 
SUSPEND              : 41
THIS                 : 
TRUE                 : 
VAL                  : 
VAR                  : 
VARARG               : 185 272
WHEN                 : 
WHERE                : 200 273
WHILE                : 82 83 84 85
error                : 

Nonterminals, with rules where they appear

additiveExpression   : 106 107 109
additiveOperator     : 109
af                   : 200 202
af1                  : 197
af3                  : 197
af4                  : 197
annotatedLambda      : 146 147 148 149
anonymousFunction    : 209
asExpression         : 110 111
asOperator           : 113 254
assignableExpression : 87 136
assignableSuffix     : 130
assignment           : 68
assignmentAndOperator : 87
block                : 18 71
callSuffix           : 127
callableReference    : 167
cl                   : 173 176
collectionLiteral    : 169
comparison           : 93 94
comparisonOperator   : 96
conjunction          : 89 90 92
controlStructureBody : 78 80 82 84 210 211 212 212 213 213 214 214 215 215 216 217 218 219
directlyAssignableExpression : 86 133
disjunction          : 88 90
doWhileStatement     : 77
elvisExpression      : 97 98 102
equality             : 91 92 94
equalityOperator     : 94
expression           : 19 25 70 78 79 80 81 82 83 84 85 86 87 141 142 161 162 163 172 175 176 210 211 212 213 214 215 216 217 218 219 220 221 222
fd1                  : 3
fd2                  : 3
fd3                  : 3
fd5                  : 3
forStatement_MD      : 74
forStatement_VD      : 75
ftp                  : 54 55 56 57
functionBody         : 10 198
functionDeclaration  : 1 2 67
functionLiteral      : 168
functionType         : 37
functionTypeParameters : 52 53
functionValueParameter : 22 23
functionValueParameters : 3
fvps                 : 20 23
ifExpression         : 170
inOperator           : 98
indexingSuffix       : 128 138
infixFunctionCall    : 101 102 105
infixOperation       : 95 96 96
io                   : 97
isOperator           : 99
isuf                 : 140 142
jumpExpression       : 171
kotlinFile           : 1 0
label                : 118
lambdaLiteral        : 152 208
lambdaParameter      : 192 193
lambdaParameters     : 190 193
ll                   : 188
loopStatement        : 69
memberAccessOperator : 144 145
multiVariableDeclaration : 78 79 195 196
multiplicativeExpression : 108 109 111
multiplicativeOperator : 111
mvd                  : 29 31
navigationSuffix     : 129 139
optype               : 34 35
parameter            : 25 26 54 55 58
parameterModifiers   : 181 183
parameterWithOptionalType : 178 179
parametersWithOptionalType : 197
parenthesizedAssignableExpression : 135
parenthesizedDirectlyAssignableExpression : 132
parenthesizedExpression : 145 164
parenthesizedType    : 36 63
postfixUnaryExpression : 114 130
postfixUnaryOperator : 125
postfixUnarySuffix   : 123 124
posue                : 122 124
prefixUnaryExpression : 112 113 134
prefixUnaryOperator  : 119
preue                : 114 116
primaryExpression    : 121 122
pwot                 : 177 179
rangeExpression      : 104 105 107
receiverType         : 6 52 227 229
rt                   : 62
safeNav              : 263
simpleIdentifier     : 3 16 17 27 28 33 46 47 105 120 131 144 161 162 165 181 182 183 184 203 227 228
simpleUserType       : 45
statement            : 64 65 72
statements           : 65 73 189 190 191
ta                   : 153 155
tps                  : 12 14
type                 : 8 16 27 33 48 49 52 53 56 57 59 61 99 113 181 182 195 203 204 206
typeArguments        : 46 126 137 146 148 150
typeConstraint       : 201 202
typeModifier         : 39 40 62
typeModifiers        : 34 40
typeParameter        : 13 14
typeParameters       : 4
typeProjection       : 50 154 155
typeProjectionModifier : 51
typeProjectionModifiers : 48 51
unaryPrefix          : 115 116
userType             : 38
valueArgument        : 159 160
valueArguments       : 146 147 150 151
variableDeclaration  : 30 31 80 81 194
varianceModifier     : 42
vas                  : 158 160
whileStatement       : 76

Parsing method: LALR

state 0

    (0) S' -> . kotlinFile
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5

    FUN             shift and go to state 3

    kotlinFile                     shift and go to state 1
    functionDeclaration            shift and go to state 2

state 1

    (0) S' -> kotlinFile .



state 2

    (1) kotlinFile -> functionDeclaration . kotlinFile
    (2) kotlinFile -> functionDeclaration .
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5

    $end            reduce using rule 2 (kotlinFile -> functionDeclaration .)
    FUN             shift and go to state 3

    functionDeclaration            shift and go to state 2
    kotlinFile                     shift and go to state 4

state 3

    (3) functionDeclaration -> FUN . fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (4) fd1 -> . typeParameters
    (5) fd1 -> .
    (12) typeParameters -> . MENOR tps MAIOR

    SUSPEND         reduce using rule 5 (fd1 -> .)
    ID              reduce using rule 5 (fd1 -> .)
    CROSSINLINE     reduce using rule 5 (fd1 -> .)
    IMPORT          reduce using rule 5 (fd1 -> .)
    INIT            reduce using rule 5 (fd1 -> .)
    NOINLINE        reduce using rule 5 (fd1 -> .)
    OUT             reduce using rule 5 (fd1 -> .)
    VARARG          reduce using rule 5 (fd1 -> .)
    WHERE           reduce using rule 5 (fd1 -> .)
    MENOR           shift and go to state 7

    fd1                            shift and go to state 5
    typeParameters                 shift and go to state 6

state 4

    (1) kotlinFile -> functionDeclaration kotlinFile .

    $end            reduce using rule 1 (kotlinFile -> functionDeclaration kotlinFile .)


state 5

    (3) functionDeclaration -> FUN fd1 . fd2 simpleIdentifier functionValueParameters fd3 fd5
    (6) fd2 -> . receiverType PONTO
    (7) fd2 -> .
    (62) receiverType -> . typeModifier rt
    (41) typeModifier -> . SUSPEND

    ID              reduce using rule 7 (fd2 -> .)
    CROSSINLINE     reduce using rule 7 (fd2 -> .)
    IMPORT          reduce using rule 7 (fd2 -> .)
    INIT            reduce using rule 7 (fd2 -> .)
    NOINLINE        reduce using rule 7 (fd2 -> .)
    OUT             reduce using rule 7 (fd2 -> .)
    VARARG          reduce using rule 7 (fd2 -> .)
    WHERE           reduce using rule 7 (fd2 -> .)
    SUSPEND         shift and go to state 11

    fd2                            shift and go to state 8
    receiverType                   shift and go to state 9
    typeModifier                   shift and go to state 10

state 6

    (4) fd1 -> typeParameters .

    SUSPEND         reduce using rule 4 (fd1 -> typeParameters .)
    ID              reduce using rule 4 (fd1 -> typeParameters .)
    CROSSINLINE     reduce using rule 4 (fd1 -> typeParameters .)
    IMPORT          reduce using rule 4 (fd1 -> typeParameters .)
    INIT            reduce using rule 4 (fd1 -> typeParameters .)
    NOINLINE        reduce using rule 4 (fd1 -> typeParameters .)
    OUT             reduce using rule 4 (fd1 -> typeParameters .)
    VARARG          reduce using rule 4 (fd1 -> typeParameters .)
    WHERE           reduce using rule 4 (fd1 -> typeParameters .)


state 7

    (12) typeParameters -> MENOR . tps MAIOR
    (13) tps -> . typeParameter
    (14) tps -> . typeParameter COMMA tps
    (15) tps -> .
    (16) typeParameter -> . simpleIdentifier DOISP type
    (17) typeParameter -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    MAIOR           reduce using rule 15 (tps -> .)
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    tps                            shift and go to state 12
    typeParameter                  shift and go to state 13
    simpleIdentifier               shift and go to state 14

state 8

    (3) functionDeclaration -> FUN fd1 fd2 . simpleIdentifier functionValueParameters fd3 fd5
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    simpleIdentifier               shift and go to state 23

state 9

    (6) fd2 -> receiverType . PONTO

    PONTO           shift and go to state 24


state 10

    (62) receiverType -> typeModifier . rt
    (63) rt -> . parenthesizedType
    (61) parenthesizedType -> . LPAREN type RPAREN

    LPAREN          shift and go to state 27

    rt                             shift and go to state 25
    parenthesizedType              shift and go to state 26

state 11

    (41) typeModifier -> SUSPEND .

    LPAREN          reduce using rule 41 (typeModifier -> SUSPEND .)
    SUSPEND         reduce using rule 41 (typeModifier -> SUSPEND .)
    ID              reduce using rule 41 (typeModifier -> SUSPEND .)
    CROSSINLINE     reduce using rule 41 (typeModifier -> SUSPEND .)
    IMPORT          reduce using rule 41 (typeModifier -> SUSPEND .)
    INIT            reduce using rule 41 (typeModifier -> SUSPEND .)
    NOINLINE        reduce using rule 41 (typeModifier -> SUSPEND .)
    OUT             reduce using rule 41 (typeModifier -> SUSPEND .)
    VARARG          reduce using rule 41 (typeModifier -> SUSPEND .)
    WHERE           reduce using rule 41 (typeModifier -> SUSPEND .)


state 12

    (12) typeParameters -> MENOR tps . MAIOR

    MAIOR           shift and go to state 28


state 13

    (13) tps -> typeParameter .
    (14) tps -> typeParameter . COMMA tps

    MAIOR           reduce using rule 13 (tps -> typeParameter .)
    COMMA           shift and go to state 29


state 14

    (16) typeParameter -> simpleIdentifier . DOISP type
    (17) typeParameter -> simpleIdentifier .

    DOISP           shift and go to state 30
    COMMA           reduce using rule 17 (typeParameter -> simpleIdentifier .)
    MAIOR           reduce using rule 17 (typeParameter -> simpleIdentifier .)


state 15

    (266) simpleIdentifier -> ID .

    DOISP           reduce using rule 266 (simpleIdentifier -> ID .)
    COMMA           reduce using rule 266 (simpleIdentifier -> ID .)
    MAIOR           reduce using rule 266 (simpleIdentifier -> ID .)
    LPAREN          reduce using rule 266 (simpleIdentifier -> ID .)
    MENOR           reduce using rule 266 (simpleIdentifier -> ID .)
    RPAREN          reduce using rule 266 (simpleIdentifier -> ID .)
    ATRIBUICAO      reduce using rule 266 (simpleIdentifier -> ID .)
    LCHAVE          reduce using rule 266 (simpleIdentifier -> ID .)
    FUN             reduce using rule 266 (simpleIdentifier -> ID .)
    $end            reduce using rule 266 (simpleIdentifier -> ID .)
    FOR             reduce using rule 266 (simpleIdentifier -> ID .)
    WHILE           reduce using rule 266 (simpleIdentifier -> ID .)
    DO              reduce using rule 266 (simpleIdentifier -> ID .)
    ID              reduce using rule 266 (simpleIdentifier -> ID .)
    CROSSINLINE     reduce using rule 266 (simpleIdentifier -> ID .)
    IMPORT          reduce using rule 266 (simpleIdentifier -> ID .)
    INIT            reduce using rule 266 (simpleIdentifier -> ID .)
    NOINLINE        reduce using rule 266 (simpleIdentifier -> ID .)
    OUT             reduce using rule 266 (simpleIdentifier -> ID .)
    VARARG          reduce using rule 266 (simpleIdentifier -> ID .)
    WHERE           reduce using rule 266 (simpleIdentifier -> ID .)
    LITERAL_STRING  reduce using rule 266 (simpleIdentifier -> ID .)
    LCCT            reduce using rule 266 (simpleIdentifier -> ID .)
    IF              reduce using rule 266 (simpleIdentifier -> ID .)
    RETURN          reduce using rule 266 (simpleIdentifier -> ID .)
    RETURN_AT       reduce using rule 266 (simpleIdentifier -> ID .)
    CONTINUE        reduce using rule 266 (simpleIdentifier -> ID .)
    CONTINUE_AT     reduce using rule 266 (simpleIdentifier -> ID .)
    BREAK           reduce using rule 266 (simpleIdentifier -> ID .)
    BREAK_AT        reduce using rule 266 (simpleIdentifier -> ID .)
    RCHAVE          reduce using rule 266 (simpleIdentifier -> ID .)
    INCREMENTO      reduce using rule 266 (simpleIdentifier -> ID .)
    DECREMENTO      reduce using rule 266 (simpleIdentifier -> ID .)
    MINUS           reduce using rule 266 (simpleIdentifier -> ID .)
    PLUS            reduce using rule 266 (simpleIdentifier -> ID .)
    NOT             reduce using rule 266 (simpleIdentifier -> ID .)
    SUSPEND         reduce using rule 266 (simpleIdentifier -> ID .)
    MAIORIGUAL      reduce using rule 266 (simpleIdentifier -> ID .)
    MENORIGUAL      reduce using rule 266 (simpleIdentifier -> ID .)
    MULTIGUAL       reduce using rule 266 (simpleIdentifier -> ID .)
    DIVIGUAL        reduce using rule 266 (simpleIdentifier -> ID .)
    MODIGUAL        reduce using rule 266 (simpleIdentifier -> ID .)
    PONTO           reduce using rule 266 (simpleIdentifier -> ID .)
    COLONCOLON      reduce using rule 266 (simpleIdentifier -> ID .)
    AS              reduce using rule 266 (simpleIdentifier -> ID .)
    OR              reduce using rule 266 (simpleIdentifier -> ID .)
    AND             reduce using rule 266 (simpleIdentifier -> ID .)
    DIFERENTE       reduce using rule 266 (simpleIdentifier -> ID .)
    IDENTIDADE      reduce using rule 266 (simpleIdentifier -> ID .)
    IGUALDADE       reduce using rule 266 (simpleIdentifier -> ID .)
    SEMIDENTIDADE   reduce using rule 266 (simpleIdentifier -> ID .)
    IN              reduce using rule 266 (simpleIdentifier -> ID .)
    NOT_IN          reduce using rule 266 (simpleIdentifier -> ID .)
    IS              reduce using rule 266 (simpleIdentifier -> ID .)
    NOT_IS          reduce using rule 266 (simpleIdentifier -> ID .)
    ELVIS           reduce using rule 266 (simpleIdentifier -> ID .)
    PONTOPONTO      reduce using rule 266 (simpleIdentifier -> ID .)
    MULT            reduce using rule 266 (simpleIdentifier -> ID .)
    DIVIDE          reduce using rule 266 (simpleIdentifier -> ID .)
    MOD             reduce using rule 266 (simpleIdentifier -> ID .)
    PV              reduce using rule 266 (simpleIdentifier -> ID .)
    ELSE            reduce using rule 266 (simpleIdentifier -> ID .)
    RCCT            reduce using rule 266 (simpleIdentifier -> ID .)
    SETA            reduce using rule 266 (simpleIdentifier -> ID .)
    CLASS           reduce using rule 266 (simpleIdentifier -> ID .)


state 16

    (267) simpleIdentifier -> CROSSINLINE .

    DOISP           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    COMMA           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    MAIOR           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    LPAREN          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    MENOR           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    RPAREN          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    ATRIBUICAO      reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    LCHAVE          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    FUN             reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    $end            reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    FOR             reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    WHILE           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    DO              reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    ID              reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    IMPORT          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    INIT            reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    NOINLINE        reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    OUT             reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    VARARG          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    WHERE           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    LITERAL_STRING  reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    LCCT            reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    IF              reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    RETURN          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    RETURN_AT       reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE        reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE_AT     reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    BREAK           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    BREAK_AT        reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    RCHAVE          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    INCREMENTO      reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    DECREMENTO      reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    MINUS           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    PLUS            reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    NOT             reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    SUSPEND         reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    MAIORIGUAL      reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    MENORIGUAL      reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    MULTIGUAL       reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    DIVIGUAL        reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    MODIGUAL        reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    PONTO           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    COLONCOLON      reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    AS              reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    OR              reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    AND             reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    DIFERENTE       reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    IDENTIDADE      reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    IGUALDADE       reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    SEMIDENTIDADE   reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    IN              reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    NOT_IN          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    IS              reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    NOT_IS          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    ELVIS           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    PONTOPONTO      reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    MULT            reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    DIVIDE          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    MOD             reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    PV              reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    ELSE            reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    RCCT            reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    SETA            reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    CLASS           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)


state 17

    (268) simpleIdentifier -> IMPORT .

    DOISP           reduce using rule 268 (simpleIdentifier -> IMPORT .)
    COMMA           reduce using rule 268 (simpleIdentifier -> IMPORT .)
    MAIOR           reduce using rule 268 (simpleIdentifier -> IMPORT .)
    LPAREN          reduce using rule 268 (simpleIdentifier -> IMPORT .)
    MENOR           reduce using rule 268 (simpleIdentifier -> IMPORT .)
    RPAREN          reduce using rule 268 (simpleIdentifier -> IMPORT .)
    ATRIBUICAO      reduce using rule 268 (simpleIdentifier -> IMPORT .)
    LCHAVE          reduce using rule 268 (simpleIdentifier -> IMPORT .)
    FUN             reduce using rule 268 (simpleIdentifier -> IMPORT .)
    $end            reduce using rule 268 (simpleIdentifier -> IMPORT .)
    FOR             reduce using rule 268 (simpleIdentifier -> IMPORT .)
    WHILE           reduce using rule 268 (simpleIdentifier -> IMPORT .)
    DO              reduce using rule 268 (simpleIdentifier -> IMPORT .)
    ID              reduce using rule 268 (simpleIdentifier -> IMPORT .)
    CROSSINLINE     reduce using rule 268 (simpleIdentifier -> IMPORT .)
    IMPORT          reduce using rule 268 (simpleIdentifier -> IMPORT .)
    INIT            reduce using rule 268 (simpleIdentifier -> IMPORT .)
    NOINLINE        reduce using rule 268 (simpleIdentifier -> IMPORT .)
    OUT             reduce using rule 268 (simpleIdentifier -> IMPORT .)
    VARARG          reduce using rule 268 (simpleIdentifier -> IMPORT .)
    WHERE           reduce using rule 268 (simpleIdentifier -> IMPORT .)
    LITERAL_STRING  reduce using rule 268 (simpleIdentifier -> IMPORT .)
    LCCT            reduce using rule 268 (simpleIdentifier -> IMPORT .)
    IF              reduce using rule 268 (simpleIdentifier -> IMPORT .)
    RETURN          reduce using rule 268 (simpleIdentifier -> IMPORT .)
    RETURN_AT       reduce using rule 268 (simpleIdentifier -> IMPORT .)
    CONTINUE        reduce using rule 268 (simpleIdentifier -> IMPORT .)
    CONTINUE_AT     reduce using rule 268 (simpleIdentifier -> IMPORT .)
    BREAK           reduce using rule 268 (simpleIdentifier -> IMPORT .)
    BREAK_AT        reduce using rule 268 (simpleIdentifier -> IMPORT .)
    RCHAVE          reduce using rule 268 (simpleIdentifier -> IMPORT .)
    INCREMENTO      reduce using rule 268 (simpleIdentifier -> IMPORT .)
    DECREMENTO      reduce using rule 268 (simpleIdentifier -> IMPORT .)
    MINUS           reduce using rule 268 (simpleIdentifier -> IMPORT .)
    PLUS            reduce using rule 268 (simpleIdentifier -> IMPORT .)
    NOT             reduce using rule 268 (simpleIdentifier -> IMPORT .)
    SUSPEND         reduce using rule 268 (simpleIdentifier -> IMPORT .)
    MAIORIGUAL      reduce using rule 268 (simpleIdentifier -> IMPORT .)
    MENORIGUAL      reduce using rule 268 (simpleIdentifier -> IMPORT .)
    MULTIGUAL       reduce using rule 268 (simpleIdentifier -> IMPORT .)
    DIVIGUAL        reduce using rule 268 (simpleIdentifier -> IMPORT .)
    MODIGUAL        reduce using rule 268 (simpleIdentifier -> IMPORT .)
    PONTO           reduce using rule 268 (simpleIdentifier -> IMPORT .)
    COLONCOLON      reduce using rule 268 (simpleIdentifier -> IMPORT .)
    AS              reduce using rule 268 (simpleIdentifier -> IMPORT .)
    OR              reduce using rule 268 (simpleIdentifier -> IMPORT .)
    AND             reduce using rule 268 (simpleIdentifier -> IMPORT .)
    DIFERENTE       reduce using rule 268 (simpleIdentifier -> IMPORT .)
    IDENTIDADE      reduce using rule 268 (simpleIdentifier -> IMPORT .)
    IGUALDADE       reduce using rule 268 (simpleIdentifier -> IMPORT .)
    SEMIDENTIDADE   reduce using rule 268 (simpleIdentifier -> IMPORT .)
    IN              reduce using rule 268 (simpleIdentifier -> IMPORT .)
    NOT_IN          reduce using rule 268 (simpleIdentifier -> IMPORT .)
    IS              reduce using rule 268 (simpleIdentifier -> IMPORT .)
    NOT_IS          reduce using rule 268 (simpleIdentifier -> IMPORT .)
    ELVIS           reduce using rule 268 (simpleIdentifier -> IMPORT .)
    PONTOPONTO      reduce using rule 268 (simpleIdentifier -> IMPORT .)
    MULT            reduce using rule 268 (simpleIdentifier -> IMPORT .)
    DIVIDE          reduce using rule 268 (simpleIdentifier -> IMPORT .)
    MOD             reduce using rule 268 (simpleIdentifier -> IMPORT .)
    PV              reduce using rule 268 (simpleIdentifier -> IMPORT .)
    ELSE            reduce using rule 268 (simpleIdentifier -> IMPORT .)
    RCCT            reduce using rule 268 (simpleIdentifier -> IMPORT .)
    SETA            reduce using rule 268 (simpleIdentifier -> IMPORT .)
    CLASS           reduce using rule 268 (simpleIdentifier -> IMPORT .)


state 18

    (269) simpleIdentifier -> INIT .

    DOISP           reduce using rule 269 (simpleIdentifier -> INIT .)
    COMMA           reduce using rule 269 (simpleIdentifier -> INIT .)
    MAIOR           reduce using rule 269 (simpleIdentifier -> INIT .)
    LPAREN          reduce using rule 269 (simpleIdentifier -> INIT .)
    MENOR           reduce using rule 269 (simpleIdentifier -> INIT .)
    RPAREN          reduce using rule 269 (simpleIdentifier -> INIT .)
    ATRIBUICAO      reduce using rule 269 (simpleIdentifier -> INIT .)
    LCHAVE          reduce using rule 269 (simpleIdentifier -> INIT .)
    FUN             reduce using rule 269 (simpleIdentifier -> INIT .)
    $end            reduce using rule 269 (simpleIdentifier -> INIT .)
    FOR             reduce using rule 269 (simpleIdentifier -> INIT .)
    WHILE           reduce using rule 269 (simpleIdentifier -> INIT .)
    DO              reduce using rule 269 (simpleIdentifier -> INIT .)
    ID              reduce using rule 269 (simpleIdentifier -> INIT .)
    CROSSINLINE     reduce using rule 269 (simpleIdentifier -> INIT .)
    IMPORT          reduce using rule 269 (simpleIdentifier -> INIT .)
    INIT            reduce using rule 269 (simpleIdentifier -> INIT .)
    NOINLINE        reduce using rule 269 (simpleIdentifier -> INIT .)
    OUT             reduce using rule 269 (simpleIdentifier -> INIT .)
    VARARG          reduce using rule 269 (simpleIdentifier -> INIT .)
    WHERE           reduce using rule 269 (simpleIdentifier -> INIT .)
    LITERAL_STRING  reduce using rule 269 (simpleIdentifier -> INIT .)
    LCCT            reduce using rule 269 (simpleIdentifier -> INIT .)
    IF              reduce using rule 269 (simpleIdentifier -> INIT .)
    RETURN          reduce using rule 269 (simpleIdentifier -> INIT .)
    RETURN_AT       reduce using rule 269 (simpleIdentifier -> INIT .)
    CONTINUE        reduce using rule 269 (simpleIdentifier -> INIT .)
    CONTINUE_AT     reduce using rule 269 (simpleIdentifier -> INIT .)
    BREAK           reduce using rule 269 (simpleIdentifier -> INIT .)
    BREAK_AT        reduce using rule 269 (simpleIdentifier -> INIT .)
    RCHAVE          reduce using rule 269 (simpleIdentifier -> INIT .)
    INCREMENTO      reduce using rule 269 (simpleIdentifier -> INIT .)
    DECREMENTO      reduce using rule 269 (simpleIdentifier -> INIT .)
    MINUS           reduce using rule 269 (simpleIdentifier -> INIT .)
    PLUS            reduce using rule 269 (simpleIdentifier -> INIT .)
    NOT             reduce using rule 269 (simpleIdentifier -> INIT .)
    SUSPEND         reduce using rule 269 (simpleIdentifier -> INIT .)
    MAIORIGUAL      reduce using rule 269 (simpleIdentifier -> INIT .)
    MENORIGUAL      reduce using rule 269 (simpleIdentifier -> INIT .)
    MULTIGUAL       reduce using rule 269 (simpleIdentifier -> INIT .)
    DIVIGUAL        reduce using rule 269 (simpleIdentifier -> INIT .)
    MODIGUAL        reduce using rule 269 (simpleIdentifier -> INIT .)
    PONTO           reduce using rule 269 (simpleIdentifier -> INIT .)
    COLONCOLON      reduce using rule 269 (simpleIdentifier -> INIT .)
    AS              reduce using rule 269 (simpleIdentifier -> INIT .)
    OR              reduce using rule 269 (simpleIdentifier -> INIT .)
    AND             reduce using rule 269 (simpleIdentifier -> INIT .)
    DIFERENTE       reduce using rule 269 (simpleIdentifier -> INIT .)
    IDENTIDADE      reduce using rule 269 (simpleIdentifier -> INIT .)
    IGUALDADE       reduce using rule 269 (simpleIdentifier -> INIT .)
    SEMIDENTIDADE   reduce using rule 269 (simpleIdentifier -> INIT .)
    IN              reduce using rule 269 (simpleIdentifier -> INIT .)
    NOT_IN          reduce using rule 269 (simpleIdentifier -> INIT .)
    IS              reduce using rule 269 (simpleIdentifier -> INIT .)
    NOT_IS          reduce using rule 269 (simpleIdentifier -> INIT .)
    ELVIS           reduce using rule 269 (simpleIdentifier -> INIT .)
    PONTOPONTO      reduce using rule 269 (simpleIdentifier -> INIT .)
    MULT            reduce using rule 269 (simpleIdentifier -> INIT .)
    DIVIDE          reduce using rule 269 (simpleIdentifier -> INIT .)
    MOD             reduce using rule 269 (simpleIdentifier -> INIT .)
    PV              reduce using rule 269 (simpleIdentifier -> INIT .)
    ELSE            reduce using rule 269 (simpleIdentifier -> INIT .)
    RCCT            reduce using rule 269 (simpleIdentifier -> INIT .)
    SETA            reduce using rule 269 (simpleIdentifier -> INIT .)
    CLASS           reduce using rule 269 (simpleIdentifier -> INIT .)


state 19

    (270) simpleIdentifier -> NOINLINE .

    DOISP           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    COMMA           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    MAIOR           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    LPAREN          reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    MENOR           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    RPAREN          reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    ATRIBUICAO      reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    LCHAVE          reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    FUN             reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    $end            reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    FOR             reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    WHILE           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    DO              reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    ID              reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    CROSSINLINE     reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    IMPORT          reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    INIT            reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    NOINLINE        reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    OUT             reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    VARARG          reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    WHERE           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    LITERAL_STRING  reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    LCCT            reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    IF              reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    RETURN          reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    RETURN_AT       reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    CONTINUE        reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    CONTINUE_AT     reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    BREAK           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    BREAK_AT        reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    RCHAVE          reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    INCREMENTO      reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    DECREMENTO      reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    MINUS           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    PLUS            reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    NOT             reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    SUSPEND         reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    MAIORIGUAL      reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    MENORIGUAL      reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    MULTIGUAL       reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    DIVIGUAL        reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    MODIGUAL        reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    PONTO           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    COLONCOLON      reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    AS              reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    OR              reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    AND             reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    DIFERENTE       reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    IDENTIDADE      reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    IGUALDADE       reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    SEMIDENTIDADE   reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    IN              reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    NOT_IN          reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    IS              reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    NOT_IS          reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    ELVIS           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    PONTOPONTO      reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    MULT            reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    DIVIDE          reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    MOD             reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    PV              reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    ELSE            reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    RCCT            reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    SETA            reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    CLASS           reduce using rule 270 (simpleIdentifier -> NOINLINE .)


state 20

    (271) simpleIdentifier -> OUT .

    DOISP           reduce using rule 271 (simpleIdentifier -> OUT .)
    COMMA           reduce using rule 271 (simpleIdentifier -> OUT .)
    MAIOR           reduce using rule 271 (simpleIdentifier -> OUT .)
    LPAREN          reduce using rule 271 (simpleIdentifier -> OUT .)
    MENOR           reduce using rule 271 (simpleIdentifier -> OUT .)
    RPAREN          reduce using rule 271 (simpleIdentifier -> OUT .)
    ATRIBUICAO      reduce using rule 271 (simpleIdentifier -> OUT .)
    LCHAVE          reduce using rule 271 (simpleIdentifier -> OUT .)
    FUN             reduce using rule 271 (simpleIdentifier -> OUT .)
    $end            reduce using rule 271 (simpleIdentifier -> OUT .)
    FOR             reduce using rule 271 (simpleIdentifier -> OUT .)
    WHILE           reduce using rule 271 (simpleIdentifier -> OUT .)
    DO              reduce using rule 271 (simpleIdentifier -> OUT .)
    ID              reduce using rule 271 (simpleIdentifier -> OUT .)
    CROSSINLINE     reduce using rule 271 (simpleIdentifier -> OUT .)
    IMPORT          reduce using rule 271 (simpleIdentifier -> OUT .)
    INIT            reduce using rule 271 (simpleIdentifier -> OUT .)
    NOINLINE        reduce using rule 271 (simpleIdentifier -> OUT .)
    OUT             reduce using rule 271 (simpleIdentifier -> OUT .)
    VARARG          reduce using rule 271 (simpleIdentifier -> OUT .)
    WHERE           reduce using rule 271 (simpleIdentifier -> OUT .)
    LITERAL_STRING  reduce using rule 271 (simpleIdentifier -> OUT .)
    LCCT            reduce using rule 271 (simpleIdentifier -> OUT .)
    IF              reduce using rule 271 (simpleIdentifier -> OUT .)
    RETURN          reduce using rule 271 (simpleIdentifier -> OUT .)
    RETURN_AT       reduce using rule 271 (simpleIdentifier -> OUT .)
    CONTINUE        reduce using rule 271 (simpleIdentifier -> OUT .)
    CONTINUE_AT     reduce using rule 271 (simpleIdentifier -> OUT .)
    BREAK           reduce using rule 271 (simpleIdentifier -> OUT .)
    BREAK_AT        reduce using rule 271 (simpleIdentifier -> OUT .)
    RCHAVE          reduce using rule 271 (simpleIdentifier -> OUT .)
    INCREMENTO      reduce using rule 271 (simpleIdentifier -> OUT .)
    DECREMENTO      reduce using rule 271 (simpleIdentifier -> OUT .)
    MINUS           reduce using rule 271 (simpleIdentifier -> OUT .)
    PLUS            reduce using rule 271 (simpleIdentifier -> OUT .)
    NOT             reduce using rule 271 (simpleIdentifier -> OUT .)
    SUSPEND         reduce using rule 271 (simpleIdentifier -> OUT .)
    MAIORIGUAL      reduce using rule 271 (simpleIdentifier -> OUT .)
    MENORIGUAL      reduce using rule 271 (simpleIdentifier -> OUT .)
    MULTIGUAL       reduce using rule 271 (simpleIdentifier -> OUT .)
    DIVIGUAL        reduce using rule 271 (simpleIdentifier -> OUT .)
    MODIGUAL        reduce using rule 271 (simpleIdentifier -> OUT .)
    PONTO           reduce using rule 271 (simpleIdentifier -> OUT .)
    COLONCOLON      reduce using rule 271 (simpleIdentifier -> OUT .)
    AS              reduce using rule 271 (simpleIdentifier -> OUT .)
    OR              reduce using rule 271 (simpleIdentifier -> OUT .)
    AND             reduce using rule 271 (simpleIdentifier -> OUT .)
    DIFERENTE       reduce using rule 271 (simpleIdentifier -> OUT .)
    IDENTIDADE      reduce using rule 271 (simpleIdentifier -> OUT .)
    IGUALDADE       reduce using rule 271 (simpleIdentifier -> OUT .)
    SEMIDENTIDADE   reduce using rule 271 (simpleIdentifier -> OUT .)
    IN              reduce using rule 271 (simpleIdentifier -> OUT .)
    NOT_IN          reduce using rule 271 (simpleIdentifier -> OUT .)
    IS              reduce using rule 271 (simpleIdentifier -> OUT .)
    NOT_IS          reduce using rule 271 (simpleIdentifier -> OUT .)
    ELVIS           reduce using rule 271 (simpleIdentifier -> OUT .)
    PONTOPONTO      reduce using rule 271 (simpleIdentifier -> OUT .)
    MULT            reduce using rule 271 (simpleIdentifier -> OUT .)
    DIVIDE          reduce using rule 271 (simpleIdentifier -> OUT .)
    MOD             reduce using rule 271 (simpleIdentifier -> OUT .)
    PV              reduce using rule 271 (simpleIdentifier -> OUT .)
    ELSE            reduce using rule 271 (simpleIdentifier -> OUT .)
    RCCT            reduce using rule 271 (simpleIdentifier -> OUT .)
    SETA            reduce using rule 271 (simpleIdentifier -> OUT .)
    CLASS           reduce using rule 271 (simpleIdentifier -> OUT .)


state 21

    (272) simpleIdentifier -> VARARG .

    DOISP           reduce using rule 272 (simpleIdentifier -> VARARG .)
    COMMA           reduce using rule 272 (simpleIdentifier -> VARARG .)
    MAIOR           reduce using rule 272 (simpleIdentifier -> VARARG .)
    LPAREN          reduce using rule 272 (simpleIdentifier -> VARARG .)
    MENOR           reduce using rule 272 (simpleIdentifier -> VARARG .)
    RPAREN          reduce using rule 272 (simpleIdentifier -> VARARG .)
    ATRIBUICAO      reduce using rule 272 (simpleIdentifier -> VARARG .)
    LCHAVE          reduce using rule 272 (simpleIdentifier -> VARARG .)
    FUN             reduce using rule 272 (simpleIdentifier -> VARARG .)
    $end            reduce using rule 272 (simpleIdentifier -> VARARG .)
    FOR             reduce using rule 272 (simpleIdentifier -> VARARG .)
    WHILE           reduce using rule 272 (simpleIdentifier -> VARARG .)
    DO              reduce using rule 272 (simpleIdentifier -> VARARG .)
    ID              reduce using rule 272 (simpleIdentifier -> VARARG .)
    CROSSINLINE     reduce using rule 272 (simpleIdentifier -> VARARG .)
    IMPORT          reduce using rule 272 (simpleIdentifier -> VARARG .)
    INIT            reduce using rule 272 (simpleIdentifier -> VARARG .)
    NOINLINE        reduce using rule 272 (simpleIdentifier -> VARARG .)
    OUT             reduce using rule 272 (simpleIdentifier -> VARARG .)
    VARARG          reduce using rule 272 (simpleIdentifier -> VARARG .)
    WHERE           reduce using rule 272 (simpleIdentifier -> VARARG .)
    LITERAL_STRING  reduce using rule 272 (simpleIdentifier -> VARARG .)
    LCCT            reduce using rule 272 (simpleIdentifier -> VARARG .)
    IF              reduce using rule 272 (simpleIdentifier -> VARARG .)
    RETURN          reduce using rule 272 (simpleIdentifier -> VARARG .)
    RETURN_AT       reduce using rule 272 (simpleIdentifier -> VARARG .)
    CONTINUE        reduce using rule 272 (simpleIdentifier -> VARARG .)
    CONTINUE_AT     reduce using rule 272 (simpleIdentifier -> VARARG .)
    BREAK           reduce using rule 272 (simpleIdentifier -> VARARG .)
    BREAK_AT        reduce using rule 272 (simpleIdentifier -> VARARG .)
    RCHAVE          reduce using rule 272 (simpleIdentifier -> VARARG .)
    INCREMENTO      reduce using rule 272 (simpleIdentifier -> VARARG .)
    DECREMENTO      reduce using rule 272 (simpleIdentifier -> VARARG .)
    MINUS           reduce using rule 272 (simpleIdentifier -> VARARG .)
    PLUS            reduce using rule 272 (simpleIdentifier -> VARARG .)
    NOT             reduce using rule 272 (simpleIdentifier -> VARARG .)
    SUSPEND         reduce using rule 272 (simpleIdentifier -> VARARG .)
    MAIORIGUAL      reduce using rule 272 (simpleIdentifier -> VARARG .)
    MENORIGUAL      reduce using rule 272 (simpleIdentifier -> VARARG .)
    MULTIGUAL       reduce using rule 272 (simpleIdentifier -> VARARG .)
    DIVIGUAL        reduce using rule 272 (simpleIdentifier -> VARARG .)
    MODIGUAL        reduce using rule 272 (simpleIdentifier -> VARARG .)
    PONTO           reduce using rule 272 (simpleIdentifier -> VARARG .)
    COLONCOLON      reduce using rule 272 (simpleIdentifier -> VARARG .)
    AS              reduce using rule 272 (simpleIdentifier -> VARARG .)
    OR              reduce using rule 272 (simpleIdentifier -> VARARG .)
    AND             reduce using rule 272 (simpleIdentifier -> VARARG .)
    DIFERENTE       reduce using rule 272 (simpleIdentifier -> VARARG .)
    IDENTIDADE      reduce using rule 272 (simpleIdentifier -> VARARG .)
    IGUALDADE       reduce using rule 272 (simpleIdentifier -> VARARG .)
    SEMIDENTIDADE   reduce using rule 272 (simpleIdentifier -> VARARG .)
    IN              reduce using rule 272 (simpleIdentifier -> VARARG .)
    NOT_IN          reduce using rule 272 (simpleIdentifier -> VARARG .)
    IS              reduce using rule 272 (simpleIdentifier -> VARARG .)
    NOT_IS          reduce using rule 272 (simpleIdentifier -> VARARG .)
    ELVIS           reduce using rule 272 (simpleIdentifier -> VARARG .)
    PONTOPONTO      reduce using rule 272 (simpleIdentifier -> VARARG .)
    MULT            reduce using rule 272 (simpleIdentifier -> VARARG .)
    DIVIDE          reduce using rule 272 (simpleIdentifier -> VARARG .)
    MOD             reduce using rule 272 (simpleIdentifier -> VARARG .)
    PV              reduce using rule 272 (simpleIdentifier -> VARARG .)
    ELSE            reduce using rule 272 (simpleIdentifier -> VARARG .)
    RCCT            reduce using rule 272 (simpleIdentifier -> VARARG .)
    SETA            reduce using rule 272 (simpleIdentifier -> VARARG .)
    CLASS           reduce using rule 272 (simpleIdentifier -> VARARG .)


state 22

    (273) simpleIdentifier -> WHERE .

    DOISP           reduce using rule 273 (simpleIdentifier -> WHERE .)
    COMMA           reduce using rule 273 (simpleIdentifier -> WHERE .)
    MAIOR           reduce using rule 273 (simpleIdentifier -> WHERE .)
    LPAREN          reduce using rule 273 (simpleIdentifier -> WHERE .)
    MENOR           reduce using rule 273 (simpleIdentifier -> WHERE .)
    RPAREN          reduce using rule 273 (simpleIdentifier -> WHERE .)
    ATRIBUICAO      reduce using rule 273 (simpleIdentifier -> WHERE .)
    LCHAVE          reduce using rule 273 (simpleIdentifier -> WHERE .)
    FUN             reduce using rule 273 (simpleIdentifier -> WHERE .)
    $end            reduce using rule 273 (simpleIdentifier -> WHERE .)
    FOR             reduce using rule 273 (simpleIdentifier -> WHERE .)
    WHILE           reduce using rule 273 (simpleIdentifier -> WHERE .)
    DO              reduce using rule 273 (simpleIdentifier -> WHERE .)
    ID              reduce using rule 273 (simpleIdentifier -> WHERE .)
    CROSSINLINE     reduce using rule 273 (simpleIdentifier -> WHERE .)
    IMPORT          reduce using rule 273 (simpleIdentifier -> WHERE .)
    INIT            reduce using rule 273 (simpleIdentifier -> WHERE .)
    NOINLINE        reduce using rule 273 (simpleIdentifier -> WHERE .)
    OUT             reduce using rule 273 (simpleIdentifier -> WHERE .)
    VARARG          reduce using rule 273 (simpleIdentifier -> WHERE .)
    WHERE           reduce using rule 273 (simpleIdentifier -> WHERE .)
    LITERAL_STRING  reduce using rule 273 (simpleIdentifier -> WHERE .)
    LCCT            reduce using rule 273 (simpleIdentifier -> WHERE .)
    IF              reduce using rule 273 (simpleIdentifier -> WHERE .)
    RETURN          reduce using rule 273 (simpleIdentifier -> WHERE .)
    RETURN_AT       reduce using rule 273 (simpleIdentifier -> WHERE .)
    CONTINUE        reduce using rule 273 (simpleIdentifier -> WHERE .)
    CONTINUE_AT     reduce using rule 273 (simpleIdentifier -> WHERE .)
    BREAK           reduce using rule 273 (simpleIdentifier -> WHERE .)
    BREAK_AT        reduce using rule 273 (simpleIdentifier -> WHERE .)
    RCHAVE          reduce using rule 273 (simpleIdentifier -> WHERE .)
    INCREMENTO      reduce using rule 273 (simpleIdentifier -> WHERE .)
    DECREMENTO      reduce using rule 273 (simpleIdentifier -> WHERE .)
    MINUS           reduce using rule 273 (simpleIdentifier -> WHERE .)
    PLUS            reduce using rule 273 (simpleIdentifier -> WHERE .)
    NOT             reduce using rule 273 (simpleIdentifier -> WHERE .)
    SUSPEND         reduce using rule 273 (simpleIdentifier -> WHERE .)
    MAIORIGUAL      reduce using rule 273 (simpleIdentifier -> WHERE .)
    MENORIGUAL      reduce using rule 273 (simpleIdentifier -> WHERE .)
    MULTIGUAL       reduce using rule 273 (simpleIdentifier -> WHERE .)
    DIVIGUAL        reduce using rule 273 (simpleIdentifier -> WHERE .)
    MODIGUAL        reduce using rule 273 (simpleIdentifier -> WHERE .)
    PONTO           reduce using rule 273 (simpleIdentifier -> WHERE .)
    COLONCOLON      reduce using rule 273 (simpleIdentifier -> WHERE .)
    AS              reduce using rule 273 (simpleIdentifier -> WHERE .)
    OR              reduce using rule 273 (simpleIdentifier -> WHERE .)
    AND             reduce using rule 273 (simpleIdentifier -> WHERE .)
    DIFERENTE       reduce using rule 273 (simpleIdentifier -> WHERE .)
    IDENTIDADE      reduce using rule 273 (simpleIdentifier -> WHERE .)
    IGUALDADE       reduce using rule 273 (simpleIdentifier -> WHERE .)
    SEMIDENTIDADE   reduce using rule 273 (simpleIdentifier -> WHERE .)
    IN              reduce using rule 273 (simpleIdentifier -> WHERE .)
    NOT_IN          reduce using rule 273 (simpleIdentifier -> WHERE .)
    IS              reduce using rule 273 (simpleIdentifier -> WHERE .)
    NOT_IS          reduce using rule 273 (simpleIdentifier -> WHERE .)
    ELVIS           reduce using rule 273 (simpleIdentifier -> WHERE .)
    PONTOPONTO      reduce using rule 273 (simpleIdentifier -> WHERE .)
    MULT            reduce using rule 273 (simpleIdentifier -> WHERE .)
    DIVIDE          reduce using rule 273 (simpleIdentifier -> WHERE .)
    MOD             reduce using rule 273 (simpleIdentifier -> WHERE .)
    PV              reduce using rule 273 (simpleIdentifier -> WHERE .)
    ELSE            reduce using rule 273 (simpleIdentifier -> WHERE .)
    RCCT            reduce using rule 273 (simpleIdentifier -> WHERE .)
    SETA            reduce using rule 273 (simpleIdentifier -> WHERE .)
    CLASS           reduce using rule 273 (simpleIdentifier -> WHERE .)


state 23

    (3) functionDeclaration -> FUN fd1 fd2 simpleIdentifier . functionValueParameters fd3 fd5
    (20) functionValueParameters -> . LPAREN fvps RPAREN
    (21) functionValueParameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 32

    functionValueParameters        shift and go to state 31

state 24

    (6) fd2 -> receiverType PONTO .

    ID              reduce using rule 6 (fd2 -> receiverType PONTO .)
    CROSSINLINE     reduce using rule 6 (fd2 -> receiverType PONTO .)
    IMPORT          reduce using rule 6 (fd2 -> receiverType PONTO .)
    INIT            reduce using rule 6 (fd2 -> receiverType PONTO .)
    NOINLINE        reduce using rule 6 (fd2 -> receiverType PONTO .)
    OUT             reduce using rule 6 (fd2 -> receiverType PONTO .)
    VARARG          reduce using rule 6 (fd2 -> receiverType PONTO .)
    WHERE           reduce using rule 6 (fd2 -> receiverType PONTO .)


state 25

    (62) receiverType -> typeModifier rt .

    PONTO           reduce using rule 62 (receiverType -> typeModifier rt .)
    DOISP           reduce using rule 62 (receiverType -> typeModifier rt .)


state 26

    (63) rt -> parenthesizedType .

    PONTO           reduce using rule 63 (rt -> parenthesizedType .)
    DOISP           reduce using rule 63 (rt -> parenthesizedType .)


state 27

    (61) parenthesizedType -> LPAREN . type RPAREN
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    type                           shift and go to state 34
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 28

    (12) typeParameters -> MENOR tps MAIOR .

    SUSPEND         reduce using rule 12 (typeParameters -> MENOR tps MAIOR .)
    ID              reduce using rule 12 (typeParameters -> MENOR tps MAIOR .)
    CROSSINLINE     reduce using rule 12 (typeParameters -> MENOR tps MAIOR .)
    IMPORT          reduce using rule 12 (typeParameters -> MENOR tps MAIOR .)
    INIT            reduce using rule 12 (typeParameters -> MENOR tps MAIOR .)
    NOINLINE        reduce using rule 12 (typeParameters -> MENOR tps MAIOR .)
    OUT             reduce using rule 12 (typeParameters -> MENOR tps MAIOR .)
    VARARG          reduce using rule 12 (typeParameters -> MENOR tps MAIOR .)
    WHERE           reduce using rule 12 (typeParameters -> MENOR tps MAIOR .)


state 29

    (14) tps -> typeParameter COMMA . tps
    (13) tps -> . typeParameter
    (14) tps -> . typeParameter COMMA tps
    (15) tps -> .
    (16) typeParameter -> . simpleIdentifier DOISP type
    (17) typeParameter -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    MAIOR           reduce using rule 15 (tps -> .)
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    typeParameter                  shift and go to state 13
    tps                            shift and go to state 45
    simpleIdentifier               shift and go to state 14

state 30

    (16) typeParameter -> simpleIdentifier DOISP . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    simpleIdentifier               shift and go to state 44
    type                           shift and go to state 46
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43

state 31

    (3) functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters . fd3 fd5
    (8) fd3 -> . DOISP type
    (9) fd3 -> .

  ! shift/reduce conflict for DOISP resolved as shift
    DOISP           shift and go to state 48
    ATRIBUICAO      reduce using rule 9 (fd3 -> .)
    LCHAVE          reduce using rule 9 (fd3 -> .)
    FUN             reduce using rule 9 (fd3 -> .)
    $end            reduce using rule 9 (fd3 -> .)
    FOR             reduce using rule 9 (fd3 -> .)
    WHILE           reduce using rule 9 (fd3 -> .)
    DO              reduce using rule 9 (fd3 -> .)
    ID              reduce using rule 9 (fd3 -> .)
    CROSSINLINE     reduce using rule 9 (fd3 -> .)
    IMPORT          reduce using rule 9 (fd3 -> .)
    INIT            reduce using rule 9 (fd3 -> .)
    NOINLINE        reduce using rule 9 (fd3 -> .)
    OUT             reduce using rule 9 (fd3 -> .)
    VARARG          reduce using rule 9 (fd3 -> .)
    WHERE           reduce using rule 9 (fd3 -> .)
    LPAREN          reduce using rule 9 (fd3 -> .)
    LITERAL_STRING  reduce using rule 9 (fd3 -> .)
    LCCT            reduce using rule 9 (fd3 -> .)
    IF              reduce using rule 9 (fd3 -> .)
    RETURN          reduce using rule 9 (fd3 -> .)
    RETURN_AT       reduce using rule 9 (fd3 -> .)
    CONTINUE        reduce using rule 9 (fd3 -> .)
    CONTINUE_AT     reduce using rule 9 (fd3 -> .)
    BREAK           reduce using rule 9 (fd3 -> .)
    BREAK_AT        reduce using rule 9 (fd3 -> .)
    RCHAVE          reduce using rule 9 (fd3 -> .)
    INCREMENTO      reduce using rule 9 (fd3 -> .)
    DECREMENTO      reduce using rule 9 (fd3 -> .)
    MINUS           reduce using rule 9 (fd3 -> .)
    PLUS            reduce using rule 9 (fd3 -> .)
    NOT             reduce using rule 9 (fd3 -> .)
    SUSPEND         reduce using rule 9 (fd3 -> .)
    MAIORIGUAL      reduce using rule 9 (fd3 -> .)
    MENORIGUAL      reduce using rule 9 (fd3 -> .)
    MULTIGUAL       reduce using rule 9 (fd3 -> .)
    DIVIGUAL        reduce using rule 9 (fd3 -> .)
    MODIGUAL        reduce using rule 9 (fd3 -> .)
    MENOR           reduce using rule 9 (fd3 -> .)
    PONTO           reduce using rule 9 (fd3 -> .)
    COLONCOLON      reduce using rule 9 (fd3 -> .)
    AS              reduce using rule 9 (fd3 -> .)
    OR              reduce using rule 9 (fd3 -> .)
    AND             reduce using rule 9 (fd3 -> .)
    DIFERENTE       reduce using rule 9 (fd3 -> .)
    IDENTIDADE      reduce using rule 9 (fd3 -> .)
    IGUALDADE       reduce using rule 9 (fd3 -> .)
    SEMIDENTIDADE   reduce using rule 9 (fd3 -> .)
    MAIOR           reduce using rule 9 (fd3 -> .)
    IN              reduce using rule 9 (fd3 -> .)
    NOT_IN          reduce using rule 9 (fd3 -> .)
    IS              reduce using rule 9 (fd3 -> .)
    NOT_IS          reduce using rule 9 (fd3 -> .)
    ELVIS           reduce using rule 9 (fd3 -> .)
    PONTOPONTO      reduce using rule 9 (fd3 -> .)
    MULT            reduce using rule 9 (fd3 -> .)
    DIVIDE          reduce using rule 9 (fd3 -> .)
    MOD             reduce using rule 9 (fd3 -> .)
    PV              reduce using rule 9 (fd3 -> .)
    ELSE            reduce using rule 9 (fd3 -> .)
    COMMA           reduce using rule 9 (fd3 -> .)
    RPAREN          reduce using rule 9 (fd3 -> .)
    RCCT            reduce using rule 9 (fd3 -> .)

  ! DOISP           [ reduce using rule 9 (fd3 -> .) ]

    fd3                            shift and go to state 47

state 32

    (20) functionValueParameters -> LPAREN . fvps RPAREN
    (21) functionValueParameters -> LPAREN . RPAREN
    (22) fvps -> . functionValueParameter
    (23) fvps -> . functionValueParameter COMMA fvps
    (24) fvps -> .
    (25) functionValueParameter -> . parameter ATRIBUICAO expression
    (26) functionValueParameter -> . parameter
    (33) parameter -> . simpleIdentifier DOISP type
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 50
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! RPAREN          [ reduce using rule 24 (fvps -> .) ]

    fvps                           shift and go to state 49
    functionValueParameter         shift and go to state 51
    parameter                      shift and go to state 52
    simpleIdentifier               shift and go to state 53

state 33

    (61) parenthesizedType -> LPAREN . type RPAREN
    (54) functionTypeParameters -> LPAREN . parameter ftp RPAREN
    (55) functionTypeParameters -> LPAREN . parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> LPAREN . type ftp RPAREN
    (57) functionTypeParameters -> LPAREN . type ftp COMMA RPAREN
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (33) parameter -> . simpleIdentifier DOISP type
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier

    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22
    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33

    type                           shift and go to state 54
    parameter                      shift and go to state 55
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    simpleIdentifier               shift and go to state 56
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43

state 34

    (61) parenthesizedType -> LPAREN type . RPAREN

    RPAREN          shift and go to state 57


state 35

    (34) type -> typeModifiers . optype
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (41) typeModifier -> . SUSPEND
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    LPAREN          shift and go to state 33
    SUSPEND         shift and go to state 11
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    optype                         shift and go to state 58
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    typeModifier                   shift and go to state 10
    simpleIdentifier               shift and go to state 44

state 36

    (35) type -> optype .

    RPAREN          reduce using rule 35 (type -> optype .)
    COMMA           reduce using rule 35 (type -> optype .)
    MAIOR           reduce using rule 35 (type -> optype .)
    ATRIBUICAO      reduce using rule 35 (type -> optype .)
    LCHAVE          reduce using rule 35 (type -> optype .)
    FUN             reduce using rule 35 (type -> optype .)
    $end            reduce using rule 35 (type -> optype .)
    FOR             reduce using rule 35 (type -> optype .)
    WHILE           reduce using rule 35 (type -> optype .)
    DO              reduce using rule 35 (type -> optype .)
    ID              reduce using rule 35 (type -> optype .)
    CROSSINLINE     reduce using rule 35 (type -> optype .)
    IMPORT          reduce using rule 35 (type -> optype .)
    INIT            reduce using rule 35 (type -> optype .)
    NOINLINE        reduce using rule 35 (type -> optype .)
    OUT             reduce using rule 35 (type -> optype .)
    VARARG          reduce using rule 35 (type -> optype .)
    WHERE           reduce using rule 35 (type -> optype .)
    LPAREN          reduce using rule 35 (type -> optype .)
    LITERAL_STRING  reduce using rule 35 (type -> optype .)
    DOISP           reduce using rule 35 (type -> optype .)
    LCCT            reduce using rule 35 (type -> optype .)
    IF              reduce using rule 35 (type -> optype .)
    RETURN          reduce using rule 35 (type -> optype .)
    RETURN_AT       reduce using rule 35 (type -> optype .)
    CONTINUE        reduce using rule 35 (type -> optype .)
    CONTINUE_AT     reduce using rule 35 (type -> optype .)
    BREAK           reduce using rule 35 (type -> optype .)
    BREAK_AT        reduce using rule 35 (type -> optype .)
    RCHAVE          reduce using rule 35 (type -> optype .)
    INCREMENTO      reduce using rule 35 (type -> optype .)
    DECREMENTO      reduce using rule 35 (type -> optype .)
    MINUS           reduce using rule 35 (type -> optype .)
    PLUS            reduce using rule 35 (type -> optype .)
    NOT             reduce using rule 35 (type -> optype .)
    SUSPEND         reduce using rule 35 (type -> optype .)
    MAIORIGUAL      reduce using rule 35 (type -> optype .)
    MENORIGUAL      reduce using rule 35 (type -> optype .)
    MULTIGUAL       reduce using rule 35 (type -> optype .)
    DIVIGUAL        reduce using rule 35 (type -> optype .)
    MODIGUAL        reduce using rule 35 (type -> optype .)
    MENOR           reduce using rule 35 (type -> optype .)
    PONTO           reduce using rule 35 (type -> optype .)
    COLONCOLON      reduce using rule 35 (type -> optype .)
    AS              reduce using rule 35 (type -> optype .)
    OR              reduce using rule 35 (type -> optype .)
    AND             reduce using rule 35 (type -> optype .)
    DIFERENTE       reduce using rule 35 (type -> optype .)
    IDENTIDADE      reduce using rule 35 (type -> optype .)
    IGUALDADE       reduce using rule 35 (type -> optype .)
    SEMIDENTIDADE   reduce using rule 35 (type -> optype .)
    IN              reduce using rule 35 (type -> optype .)
    NOT_IN          reduce using rule 35 (type -> optype .)
    IS              reduce using rule 35 (type -> optype .)
    NOT_IS          reduce using rule 35 (type -> optype .)
    ELVIS           reduce using rule 35 (type -> optype .)
    PONTOPONTO      reduce using rule 35 (type -> optype .)
    MULT            reduce using rule 35 (type -> optype .)
    DIVIDE          reduce using rule 35 (type -> optype .)
    MOD             reduce using rule 35 (type -> optype .)
    PV              reduce using rule 35 (type -> optype .)
    ELSE            reduce using rule 35 (type -> optype .)
    RCCT            reduce using rule 35 (type -> optype .)
    SETA            reduce using rule 35 (type -> optype .)


state 37

    (39) typeModifiers -> typeModifier .
    (40) typeModifiers -> typeModifier . typeModifiers
    (62) receiverType -> typeModifier . rt
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (63) rt -> . parenthesizedType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN

  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              reduce using rule 39 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 39 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 39 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 39 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 39 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 39 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 39 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 39 (typeModifiers -> typeModifier .)
    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 27

  ! LPAREN          [ reduce using rule 39 (typeModifiers -> typeModifier .) ]
  ! SUSPEND         [ reduce using rule 39 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 59
    typeModifiers                  shift and go to state 60
    rt                             shift and go to state 25
    parenthesizedType              shift and go to state 26

state 38

    (36) optype -> parenthesizedType .

    RPAREN          reduce using rule 36 (optype -> parenthesizedType .)
    COMMA           reduce using rule 36 (optype -> parenthesizedType .)
    MAIOR           reduce using rule 36 (optype -> parenthesizedType .)
    ATRIBUICAO      reduce using rule 36 (optype -> parenthesizedType .)
    LCHAVE          reduce using rule 36 (optype -> parenthesizedType .)
    FUN             reduce using rule 36 (optype -> parenthesizedType .)
    $end            reduce using rule 36 (optype -> parenthesizedType .)
    FOR             reduce using rule 36 (optype -> parenthesizedType .)
    WHILE           reduce using rule 36 (optype -> parenthesizedType .)
    DO              reduce using rule 36 (optype -> parenthesizedType .)
    ID              reduce using rule 36 (optype -> parenthesizedType .)
    CROSSINLINE     reduce using rule 36 (optype -> parenthesizedType .)
    IMPORT          reduce using rule 36 (optype -> parenthesizedType .)
    INIT            reduce using rule 36 (optype -> parenthesizedType .)
    NOINLINE        reduce using rule 36 (optype -> parenthesizedType .)
    OUT             reduce using rule 36 (optype -> parenthesizedType .)
    VARARG          reduce using rule 36 (optype -> parenthesizedType .)
    WHERE           reduce using rule 36 (optype -> parenthesizedType .)
    LPAREN          reduce using rule 36 (optype -> parenthesizedType .)
    LITERAL_STRING  reduce using rule 36 (optype -> parenthesizedType .)
    DOISP           reduce using rule 36 (optype -> parenthesizedType .)
    LCCT            reduce using rule 36 (optype -> parenthesizedType .)
    IF              reduce using rule 36 (optype -> parenthesizedType .)
    RETURN          reduce using rule 36 (optype -> parenthesizedType .)
    RETURN_AT       reduce using rule 36 (optype -> parenthesizedType .)
    CONTINUE        reduce using rule 36 (optype -> parenthesizedType .)
    CONTINUE_AT     reduce using rule 36 (optype -> parenthesizedType .)
    BREAK           reduce using rule 36 (optype -> parenthesizedType .)
    BREAK_AT        reduce using rule 36 (optype -> parenthesizedType .)
    RCHAVE          reduce using rule 36 (optype -> parenthesizedType .)
    INCREMENTO      reduce using rule 36 (optype -> parenthesizedType .)
    DECREMENTO      reduce using rule 36 (optype -> parenthesizedType .)
    MINUS           reduce using rule 36 (optype -> parenthesizedType .)
    PLUS            reduce using rule 36 (optype -> parenthesizedType .)
    NOT             reduce using rule 36 (optype -> parenthesizedType .)
    SUSPEND         reduce using rule 36 (optype -> parenthesizedType .)
    MAIORIGUAL      reduce using rule 36 (optype -> parenthesizedType .)
    MENORIGUAL      reduce using rule 36 (optype -> parenthesizedType .)
    MULTIGUAL       reduce using rule 36 (optype -> parenthesizedType .)
    DIVIGUAL        reduce using rule 36 (optype -> parenthesizedType .)
    MODIGUAL        reduce using rule 36 (optype -> parenthesizedType .)
    MENOR           reduce using rule 36 (optype -> parenthesizedType .)
    PONTO           reduce using rule 36 (optype -> parenthesizedType .)
    COLONCOLON      reduce using rule 36 (optype -> parenthesizedType .)
    AS              reduce using rule 36 (optype -> parenthesizedType .)
    OR              reduce using rule 36 (optype -> parenthesizedType .)
    AND             reduce using rule 36 (optype -> parenthesizedType .)
    DIFERENTE       reduce using rule 36 (optype -> parenthesizedType .)
    IDENTIDADE      reduce using rule 36 (optype -> parenthesizedType .)
    IGUALDADE       reduce using rule 36 (optype -> parenthesizedType .)
    SEMIDENTIDADE   reduce using rule 36 (optype -> parenthesizedType .)
    IN              reduce using rule 36 (optype -> parenthesizedType .)
    NOT_IN          reduce using rule 36 (optype -> parenthesizedType .)
    IS              reduce using rule 36 (optype -> parenthesizedType .)
    NOT_IS          reduce using rule 36 (optype -> parenthesizedType .)
    ELVIS           reduce using rule 36 (optype -> parenthesizedType .)
    PONTOPONTO      reduce using rule 36 (optype -> parenthesizedType .)
    MULT            reduce using rule 36 (optype -> parenthesizedType .)
    DIVIDE          reduce using rule 36 (optype -> parenthesizedType .)
    MOD             reduce using rule 36 (optype -> parenthesizedType .)
    PV              reduce using rule 36 (optype -> parenthesizedType .)
    ELSE            reduce using rule 36 (optype -> parenthesizedType .)
    RCCT            reduce using rule 36 (optype -> parenthesizedType .)
    SETA            reduce using rule 36 (optype -> parenthesizedType .)


state 39

    (37) optype -> functionType .

    RPAREN          reduce using rule 37 (optype -> functionType .)
    COMMA           reduce using rule 37 (optype -> functionType .)
    MAIOR           reduce using rule 37 (optype -> functionType .)
    ATRIBUICAO      reduce using rule 37 (optype -> functionType .)
    LCHAVE          reduce using rule 37 (optype -> functionType .)
    FUN             reduce using rule 37 (optype -> functionType .)
    $end            reduce using rule 37 (optype -> functionType .)
    FOR             reduce using rule 37 (optype -> functionType .)
    WHILE           reduce using rule 37 (optype -> functionType .)
    DO              reduce using rule 37 (optype -> functionType .)
    ID              reduce using rule 37 (optype -> functionType .)
    CROSSINLINE     reduce using rule 37 (optype -> functionType .)
    IMPORT          reduce using rule 37 (optype -> functionType .)
    INIT            reduce using rule 37 (optype -> functionType .)
    NOINLINE        reduce using rule 37 (optype -> functionType .)
    OUT             reduce using rule 37 (optype -> functionType .)
    VARARG          reduce using rule 37 (optype -> functionType .)
    WHERE           reduce using rule 37 (optype -> functionType .)
    LPAREN          reduce using rule 37 (optype -> functionType .)
    LITERAL_STRING  reduce using rule 37 (optype -> functionType .)
    DOISP           reduce using rule 37 (optype -> functionType .)
    LCCT            reduce using rule 37 (optype -> functionType .)
    IF              reduce using rule 37 (optype -> functionType .)
    RETURN          reduce using rule 37 (optype -> functionType .)
    RETURN_AT       reduce using rule 37 (optype -> functionType .)
    CONTINUE        reduce using rule 37 (optype -> functionType .)
    CONTINUE_AT     reduce using rule 37 (optype -> functionType .)
    BREAK           reduce using rule 37 (optype -> functionType .)
    BREAK_AT        reduce using rule 37 (optype -> functionType .)
    RCHAVE          reduce using rule 37 (optype -> functionType .)
    INCREMENTO      reduce using rule 37 (optype -> functionType .)
    DECREMENTO      reduce using rule 37 (optype -> functionType .)
    MINUS           reduce using rule 37 (optype -> functionType .)
    PLUS            reduce using rule 37 (optype -> functionType .)
    NOT             reduce using rule 37 (optype -> functionType .)
    SUSPEND         reduce using rule 37 (optype -> functionType .)
    MAIORIGUAL      reduce using rule 37 (optype -> functionType .)
    MENORIGUAL      reduce using rule 37 (optype -> functionType .)
    MULTIGUAL       reduce using rule 37 (optype -> functionType .)
    DIVIGUAL        reduce using rule 37 (optype -> functionType .)
    MODIGUAL        reduce using rule 37 (optype -> functionType .)
    MENOR           reduce using rule 37 (optype -> functionType .)
    PONTO           reduce using rule 37 (optype -> functionType .)
    COLONCOLON      reduce using rule 37 (optype -> functionType .)
    AS              reduce using rule 37 (optype -> functionType .)
    OR              reduce using rule 37 (optype -> functionType .)
    AND             reduce using rule 37 (optype -> functionType .)
    DIFERENTE       reduce using rule 37 (optype -> functionType .)
    IDENTIDADE      reduce using rule 37 (optype -> functionType .)
    IGUALDADE       reduce using rule 37 (optype -> functionType .)
    SEMIDENTIDADE   reduce using rule 37 (optype -> functionType .)
    IN              reduce using rule 37 (optype -> functionType .)
    NOT_IN          reduce using rule 37 (optype -> functionType .)
    IS              reduce using rule 37 (optype -> functionType .)
    NOT_IS          reduce using rule 37 (optype -> functionType .)
    ELVIS           reduce using rule 37 (optype -> functionType .)
    PONTOPONTO      reduce using rule 37 (optype -> functionType .)
    MULT            reduce using rule 37 (optype -> functionType .)
    DIVIDE          reduce using rule 37 (optype -> functionType .)
    MOD             reduce using rule 37 (optype -> functionType .)
    PV              reduce using rule 37 (optype -> functionType .)
    ELSE            reduce using rule 37 (optype -> functionType .)
    RCCT            reduce using rule 37 (optype -> functionType .)
    SETA            reduce using rule 37 (optype -> functionType .)


state 40

    (38) optype -> userType .

    RPAREN          reduce using rule 38 (optype -> userType .)
    COMMA           reduce using rule 38 (optype -> userType .)
    MAIOR           reduce using rule 38 (optype -> userType .)
    ATRIBUICAO      reduce using rule 38 (optype -> userType .)
    LCHAVE          reduce using rule 38 (optype -> userType .)
    FUN             reduce using rule 38 (optype -> userType .)
    $end            reduce using rule 38 (optype -> userType .)
    FOR             reduce using rule 38 (optype -> userType .)
    WHILE           reduce using rule 38 (optype -> userType .)
    DO              reduce using rule 38 (optype -> userType .)
    ID              reduce using rule 38 (optype -> userType .)
    CROSSINLINE     reduce using rule 38 (optype -> userType .)
    IMPORT          reduce using rule 38 (optype -> userType .)
    INIT            reduce using rule 38 (optype -> userType .)
    NOINLINE        reduce using rule 38 (optype -> userType .)
    OUT             reduce using rule 38 (optype -> userType .)
    VARARG          reduce using rule 38 (optype -> userType .)
    WHERE           reduce using rule 38 (optype -> userType .)
    LPAREN          reduce using rule 38 (optype -> userType .)
    LITERAL_STRING  reduce using rule 38 (optype -> userType .)
    DOISP           reduce using rule 38 (optype -> userType .)
    LCCT            reduce using rule 38 (optype -> userType .)
    IF              reduce using rule 38 (optype -> userType .)
    RETURN          reduce using rule 38 (optype -> userType .)
    RETURN_AT       reduce using rule 38 (optype -> userType .)
    CONTINUE        reduce using rule 38 (optype -> userType .)
    CONTINUE_AT     reduce using rule 38 (optype -> userType .)
    BREAK           reduce using rule 38 (optype -> userType .)
    BREAK_AT        reduce using rule 38 (optype -> userType .)
    RCHAVE          reduce using rule 38 (optype -> userType .)
    INCREMENTO      reduce using rule 38 (optype -> userType .)
    DECREMENTO      reduce using rule 38 (optype -> userType .)
    MINUS           reduce using rule 38 (optype -> userType .)
    PLUS            reduce using rule 38 (optype -> userType .)
    NOT             reduce using rule 38 (optype -> userType .)
    SUSPEND         reduce using rule 38 (optype -> userType .)
    MAIORIGUAL      reduce using rule 38 (optype -> userType .)
    MENORIGUAL      reduce using rule 38 (optype -> userType .)
    MULTIGUAL       reduce using rule 38 (optype -> userType .)
    DIVIGUAL        reduce using rule 38 (optype -> userType .)
    MODIGUAL        reduce using rule 38 (optype -> userType .)
    MENOR           reduce using rule 38 (optype -> userType .)
    PONTO           reduce using rule 38 (optype -> userType .)
    COLONCOLON      reduce using rule 38 (optype -> userType .)
    AS              reduce using rule 38 (optype -> userType .)
    OR              reduce using rule 38 (optype -> userType .)
    AND             reduce using rule 38 (optype -> userType .)
    DIFERENTE       reduce using rule 38 (optype -> userType .)
    IDENTIDADE      reduce using rule 38 (optype -> userType .)
    IGUALDADE       reduce using rule 38 (optype -> userType .)
    SEMIDENTIDADE   reduce using rule 38 (optype -> userType .)
    IN              reduce using rule 38 (optype -> userType .)
    NOT_IN          reduce using rule 38 (optype -> userType .)
    IS              reduce using rule 38 (optype -> userType .)
    NOT_IS          reduce using rule 38 (optype -> userType .)
    ELVIS           reduce using rule 38 (optype -> userType .)
    PONTOPONTO      reduce using rule 38 (optype -> userType .)
    MULT            reduce using rule 38 (optype -> userType .)
    DIVIDE          reduce using rule 38 (optype -> userType .)
    MOD             reduce using rule 38 (optype -> userType .)
    PV              reduce using rule 38 (optype -> userType .)
    ELSE            reduce using rule 38 (optype -> userType .)
    RCCT            reduce using rule 38 (optype -> userType .)
    SETA            reduce using rule 38 (optype -> userType .)


state 41

    (52) functionType -> receiverType . PONTO functionTypeParameters SETA type

    PONTO           shift and go to state 61


state 42

    (53) functionType -> functionTypeParameters . SETA type

    SETA            shift and go to state 62


state 43

    (45) userType -> simpleUserType .

    RPAREN          reduce using rule 45 (userType -> simpleUserType .)
    COMMA           reduce using rule 45 (userType -> simpleUserType .)
    MAIOR           reduce using rule 45 (userType -> simpleUserType .)
    ATRIBUICAO      reduce using rule 45 (userType -> simpleUserType .)
    LCHAVE          reduce using rule 45 (userType -> simpleUserType .)
    FUN             reduce using rule 45 (userType -> simpleUserType .)
    $end            reduce using rule 45 (userType -> simpleUserType .)
    FOR             reduce using rule 45 (userType -> simpleUserType .)
    WHILE           reduce using rule 45 (userType -> simpleUserType .)
    DO              reduce using rule 45 (userType -> simpleUserType .)
    ID              reduce using rule 45 (userType -> simpleUserType .)
    CROSSINLINE     reduce using rule 45 (userType -> simpleUserType .)
    IMPORT          reduce using rule 45 (userType -> simpleUserType .)
    INIT            reduce using rule 45 (userType -> simpleUserType .)
    NOINLINE        reduce using rule 45 (userType -> simpleUserType .)
    OUT             reduce using rule 45 (userType -> simpleUserType .)
    VARARG          reduce using rule 45 (userType -> simpleUserType .)
    WHERE           reduce using rule 45 (userType -> simpleUserType .)
    LPAREN          reduce using rule 45 (userType -> simpleUserType .)
    LITERAL_STRING  reduce using rule 45 (userType -> simpleUserType .)
    DOISP           reduce using rule 45 (userType -> simpleUserType .)
    LCCT            reduce using rule 45 (userType -> simpleUserType .)
    IF              reduce using rule 45 (userType -> simpleUserType .)
    RETURN          reduce using rule 45 (userType -> simpleUserType .)
    RETURN_AT       reduce using rule 45 (userType -> simpleUserType .)
    CONTINUE        reduce using rule 45 (userType -> simpleUserType .)
    CONTINUE_AT     reduce using rule 45 (userType -> simpleUserType .)
    BREAK           reduce using rule 45 (userType -> simpleUserType .)
    BREAK_AT        reduce using rule 45 (userType -> simpleUserType .)
    RCHAVE          reduce using rule 45 (userType -> simpleUserType .)
    INCREMENTO      reduce using rule 45 (userType -> simpleUserType .)
    DECREMENTO      reduce using rule 45 (userType -> simpleUserType .)
    MINUS           reduce using rule 45 (userType -> simpleUserType .)
    PLUS            reduce using rule 45 (userType -> simpleUserType .)
    NOT             reduce using rule 45 (userType -> simpleUserType .)
    SUSPEND         reduce using rule 45 (userType -> simpleUserType .)
    MAIORIGUAL      reduce using rule 45 (userType -> simpleUserType .)
    MENORIGUAL      reduce using rule 45 (userType -> simpleUserType .)
    MULTIGUAL       reduce using rule 45 (userType -> simpleUserType .)
    DIVIGUAL        reduce using rule 45 (userType -> simpleUserType .)
    MODIGUAL        reduce using rule 45 (userType -> simpleUserType .)
    MENOR           reduce using rule 45 (userType -> simpleUserType .)
    PONTO           reduce using rule 45 (userType -> simpleUserType .)
    COLONCOLON      reduce using rule 45 (userType -> simpleUserType .)
    AS              reduce using rule 45 (userType -> simpleUserType .)
    OR              reduce using rule 45 (userType -> simpleUserType .)
    AND             reduce using rule 45 (userType -> simpleUserType .)
    DIFERENTE       reduce using rule 45 (userType -> simpleUserType .)
    IDENTIDADE      reduce using rule 45 (userType -> simpleUserType .)
    IGUALDADE       reduce using rule 45 (userType -> simpleUserType .)
    SEMIDENTIDADE   reduce using rule 45 (userType -> simpleUserType .)
    IN              reduce using rule 45 (userType -> simpleUserType .)
    NOT_IN          reduce using rule 45 (userType -> simpleUserType .)
    IS              reduce using rule 45 (userType -> simpleUserType .)
    NOT_IS          reduce using rule 45 (userType -> simpleUserType .)
    ELVIS           reduce using rule 45 (userType -> simpleUserType .)
    PONTOPONTO      reduce using rule 45 (userType -> simpleUserType .)
    MULT            reduce using rule 45 (userType -> simpleUserType .)
    DIVIDE          reduce using rule 45 (userType -> simpleUserType .)
    MOD             reduce using rule 45 (userType -> simpleUserType .)
    PV              reduce using rule 45 (userType -> simpleUserType .)
    ELSE            reduce using rule 45 (userType -> simpleUserType .)
    RCCT            reduce using rule 45 (userType -> simpleUserType .)
    SETA            reduce using rule 45 (userType -> simpleUserType .)


state 44

    (46) simpleUserType -> simpleIdentifier . typeArguments
    (47) simpleUserType -> simpleIdentifier .
    (153) typeArguments -> . MENOR ta MAIOR

  ! shift/reduce conflict for MENOR resolved as shift
    RPAREN          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    MAIOR           reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    LCHAVE          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    FUN             reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    $end            reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    FOR             reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    WHILE           reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    DO              reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    ID              reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    IMPORT          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    INIT            reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    NOINLINE        reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    OUT             reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    VARARG          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    WHERE           reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    LPAREN          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    DOISP           reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    LCCT            reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    IF              reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    RETURN          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    RETURN_AT       reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    CONTINUE        reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    BREAK           reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    BREAK_AT        reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    RCHAVE          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    INCREMENTO      reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    DECREMENTO      reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    MINUS           reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    PLUS            reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    NOT             reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    SUSPEND         reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    MODIGUAL        reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    PONTO           reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    COLONCOLON      reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    AS              reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    OR              reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    AND             reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    DIFERENTE       reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    IGUALDADE       reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    IN              reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    NOT_IN          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    IS              reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    NOT_IS          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    ELVIS           reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    MULT            reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    DIVIDE          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    MOD             reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    PV              reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    ELSE            reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    RCCT            reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    SETA            reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 64

  ! MENOR           [ reduce using rule 47 (simpleUserType -> simpleIdentifier .) ]

    typeArguments                  shift and go to state 63

state 45

    (14) tps -> typeParameter COMMA tps .

    MAIOR           reduce using rule 14 (tps -> typeParameter COMMA tps .)


state 46

    (16) typeParameter -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 16 (typeParameter -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 16 (typeParameter -> simpleIdentifier DOISP type .)


state 47

    (3) functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 . fd5
    (10) fd5 -> . functionBody
    (11) fd5 -> .
    (18) functionBody -> . block
    (19) functionBody -> . ATRIBUICAO expression
    (73) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 11 (fd5 -> .)
    FOR             reduce using rule 11 (fd5 -> .)
    WHILE           reduce using rule 11 (fd5 -> .)
    DO              reduce using rule 11 (fd5 -> .)
    ID              reduce using rule 11 (fd5 -> .)
    CROSSINLINE     reduce using rule 11 (fd5 -> .)
    IMPORT          reduce using rule 11 (fd5 -> .)
    INIT            reduce using rule 11 (fd5 -> .)
    NOINLINE        reduce using rule 11 (fd5 -> .)
    OUT             reduce using rule 11 (fd5 -> .)
    VARARG          reduce using rule 11 (fd5 -> .)
    WHERE           reduce using rule 11 (fd5 -> .)
    LPAREN          reduce using rule 11 (fd5 -> .)
    LITERAL_STRING  reduce using rule 11 (fd5 -> .)
    DOISP           reduce using rule 11 (fd5 -> .)
    LCCT            reduce using rule 11 (fd5 -> .)
    IF              reduce using rule 11 (fd5 -> .)
    RETURN          reduce using rule 11 (fd5 -> .)
    RETURN_AT       reduce using rule 11 (fd5 -> .)
    CONTINUE        reduce using rule 11 (fd5 -> .)
    CONTINUE_AT     reduce using rule 11 (fd5 -> .)
    BREAK           reduce using rule 11 (fd5 -> .)
    BREAK_AT        reduce using rule 11 (fd5 -> .)
    RCHAVE          reduce using rule 11 (fd5 -> .)
    INCREMENTO      reduce using rule 11 (fd5 -> .)
    DECREMENTO      reduce using rule 11 (fd5 -> .)
    MINUS           reduce using rule 11 (fd5 -> .)
    PLUS            reduce using rule 11 (fd5 -> .)
    NOT             reduce using rule 11 (fd5 -> .)
    SUSPEND         reduce using rule 11 (fd5 -> .)
    MAIORIGUAL      reduce using rule 11 (fd5 -> .)
    MENORIGUAL      reduce using rule 11 (fd5 -> .)
    MULTIGUAL       reduce using rule 11 (fd5 -> .)
    DIVIGUAL        reduce using rule 11 (fd5 -> .)
    MODIGUAL        reduce using rule 11 (fd5 -> .)
    MENOR           reduce using rule 11 (fd5 -> .)
    PONTO           reduce using rule 11 (fd5 -> .)
    COLONCOLON      reduce using rule 11 (fd5 -> .)
    AS              reduce using rule 11 (fd5 -> .)
    OR              reduce using rule 11 (fd5 -> .)
    AND             reduce using rule 11 (fd5 -> .)
    DIFERENTE       reduce using rule 11 (fd5 -> .)
    IDENTIDADE      reduce using rule 11 (fd5 -> .)
    IGUALDADE       reduce using rule 11 (fd5 -> .)
    SEMIDENTIDADE   reduce using rule 11 (fd5 -> .)
    MAIOR           reduce using rule 11 (fd5 -> .)
    IN              reduce using rule 11 (fd5 -> .)
    NOT_IN          reduce using rule 11 (fd5 -> .)
    IS              reduce using rule 11 (fd5 -> .)
    NOT_IS          reduce using rule 11 (fd5 -> .)
    ELVIS           reduce using rule 11 (fd5 -> .)
    PONTOPONTO      reduce using rule 11 (fd5 -> .)
    MULT            reduce using rule 11 (fd5 -> .)
    DIVIDE          reduce using rule 11 (fd5 -> .)
    MOD             reduce using rule 11 (fd5 -> .)
    PV              reduce using rule 11 (fd5 -> .)
    ELSE            reduce using rule 11 (fd5 -> .)
    $end            reduce using rule 11 (fd5 -> .)
    COMMA           reduce using rule 11 (fd5 -> .)
    RPAREN          reduce using rule 11 (fd5 -> .)
    RCCT            reduce using rule 11 (fd5 -> .)
    ATRIBUICAO      shift and go to state 68
    LCHAVE          shift and go to state 69

  ! LCHAVE          [ reduce using rule 11 (fd5 -> .) ]

    fd5                            shift and go to state 65
    functionBody                   shift and go to state 66
    block                          shift and go to state 67

state 48

    (8) fd3 -> DOISP . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    type                           shift and go to state 70
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 49

    (20) functionValueParameters -> LPAREN fvps . RPAREN

    RPAREN          shift and go to state 71


state 50

    (21) functionValueParameters -> LPAREN RPAREN .

    DOISP           reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    FUN             reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    $end            reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    FOR             reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    WHILE           reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    DO              reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    ID              reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    IMPORT          reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    INIT            reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    OUT             reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    VARARG          reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    WHERE           reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    LPAREN          reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    LCCT            reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    IF              reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    RETURN          reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    BREAK           reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    MINUS           reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    PLUS            reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    NOT             reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    MENOR           reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    PONTO           reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    AS              reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    OR              reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    AND             reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    MAIOR           reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    IN              reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    IS              reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    ELVIS           reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    MULT            reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    MOD             reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    PV              reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    ELSE            reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    COMMA           reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    RPAREN          reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)
    RCCT            reduce using rule 21 (functionValueParameters -> LPAREN RPAREN .)


state 51

    (22) fvps -> functionValueParameter .
    (23) fvps -> functionValueParameter . COMMA fvps

    RPAREN          reduce using rule 22 (fvps -> functionValueParameter .)
    COMMA           shift and go to state 72


state 52

    (25) functionValueParameter -> parameter . ATRIBUICAO expression
    (26) functionValueParameter -> parameter .

    ATRIBUICAO      shift and go to state 73
    COMMA           reduce using rule 26 (functionValueParameter -> parameter .)
    RPAREN          reduce using rule 26 (functionValueParameter -> parameter .)


state 53

    (33) parameter -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 74


state 54

    (61) parenthesizedType -> LPAREN type . RPAREN
    (56) functionTypeParameters -> LPAREN type . ftp RPAREN
    (57) functionTypeParameters -> LPAREN type . ftp COMMA RPAREN
    (58) ftp -> . COMMA parameter
    (59) ftp -> . COMMA type
    (60) ftp -> .

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          shift and go to state 57
    COMMA           shift and go to state 76

  ! RPAREN          [ reduce using rule 60 (ftp -> .) ]
  ! COMMA           [ reduce using rule 60 (ftp -> .) ]

    ftp                            shift and go to state 75

state 55

    (54) functionTypeParameters -> LPAREN parameter . ftp RPAREN
    (55) functionTypeParameters -> LPAREN parameter . ftp COMMA RPAREN
    (58) ftp -> . COMMA parameter
    (59) ftp -> . COMMA type
    (60) ftp -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 76
    RPAREN          reduce using rule 60 (ftp -> .)

  ! COMMA           [ reduce using rule 60 (ftp -> .) ]

    ftp                            shift and go to state 77

state 56

    (33) parameter -> simpleIdentifier . DOISP type
    (46) simpleUserType -> simpleIdentifier . typeArguments
    (47) simpleUserType -> simpleIdentifier .
    (153) typeArguments -> . MENOR ta MAIOR

    DOISP           shift and go to state 74
    RPAREN          reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 47 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 64

    typeArguments                  shift and go to state 63

state 57

    (61) parenthesizedType -> LPAREN type RPAREN .

    PONTO           reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    DOISP           reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    COMMA           reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    MAIOR           reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    ATRIBUICAO      reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    LCHAVE          reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    FUN             reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    $end            reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    FOR             reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    WHILE           reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    DO              reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    ID              reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    CROSSINLINE     reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    IMPORT          reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    INIT            reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    NOINLINE        reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    OUT             reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    VARARG          reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    WHERE           reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    LITERAL_STRING  reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    LCCT            reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    IF              reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN          reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN_AT       reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE        reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE_AT     reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK           reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK_AT        reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    RCHAVE          reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    INCREMENTO      reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    DECREMENTO      reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    MINUS           reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    PLUS            reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    NOT             reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    SUSPEND         reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    MAIORIGUAL      reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    MENORIGUAL      reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    MULTIGUAL       reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIGUAL        reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    MODIGUAL        reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    MENOR           reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    COLONCOLON      reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    AS              reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    OR              reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    AND             reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    DIFERENTE       reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    IDENTIDADE      reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    IGUALDADE       reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    SEMIDENTIDADE   reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    IN              reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IN          reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    IS              reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IS          reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    ELVIS           reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    PONTOPONTO      reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    MULT            reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIDE          reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    MOD             reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    PV              reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    ELSE            reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    RCCT            reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)
    SETA            reduce using rule 61 (parenthesizedType -> LPAREN type RPAREN .)


state 58

    (34) type -> typeModifiers optype .

    RPAREN          reduce using rule 34 (type -> typeModifiers optype .)
    COMMA           reduce using rule 34 (type -> typeModifiers optype .)
    MAIOR           reduce using rule 34 (type -> typeModifiers optype .)
    ATRIBUICAO      reduce using rule 34 (type -> typeModifiers optype .)
    LCHAVE          reduce using rule 34 (type -> typeModifiers optype .)
    FUN             reduce using rule 34 (type -> typeModifiers optype .)
    $end            reduce using rule 34 (type -> typeModifiers optype .)
    FOR             reduce using rule 34 (type -> typeModifiers optype .)
    WHILE           reduce using rule 34 (type -> typeModifiers optype .)
    DO              reduce using rule 34 (type -> typeModifiers optype .)
    ID              reduce using rule 34 (type -> typeModifiers optype .)
    CROSSINLINE     reduce using rule 34 (type -> typeModifiers optype .)
    IMPORT          reduce using rule 34 (type -> typeModifiers optype .)
    INIT            reduce using rule 34 (type -> typeModifiers optype .)
    NOINLINE        reduce using rule 34 (type -> typeModifiers optype .)
    OUT             reduce using rule 34 (type -> typeModifiers optype .)
    VARARG          reduce using rule 34 (type -> typeModifiers optype .)
    WHERE           reduce using rule 34 (type -> typeModifiers optype .)
    LPAREN          reduce using rule 34 (type -> typeModifiers optype .)
    LITERAL_STRING  reduce using rule 34 (type -> typeModifiers optype .)
    DOISP           reduce using rule 34 (type -> typeModifiers optype .)
    LCCT            reduce using rule 34 (type -> typeModifiers optype .)
    IF              reduce using rule 34 (type -> typeModifiers optype .)
    RETURN          reduce using rule 34 (type -> typeModifiers optype .)
    RETURN_AT       reduce using rule 34 (type -> typeModifiers optype .)
    CONTINUE        reduce using rule 34 (type -> typeModifiers optype .)
    CONTINUE_AT     reduce using rule 34 (type -> typeModifiers optype .)
    BREAK           reduce using rule 34 (type -> typeModifiers optype .)
    BREAK_AT        reduce using rule 34 (type -> typeModifiers optype .)
    RCHAVE          reduce using rule 34 (type -> typeModifiers optype .)
    INCREMENTO      reduce using rule 34 (type -> typeModifiers optype .)
    DECREMENTO      reduce using rule 34 (type -> typeModifiers optype .)
    MINUS           reduce using rule 34 (type -> typeModifiers optype .)
    PLUS            reduce using rule 34 (type -> typeModifiers optype .)
    NOT             reduce using rule 34 (type -> typeModifiers optype .)
    SUSPEND         reduce using rule 34 (type -> typeModifiers optype .)
    MAIORIGUAL      reduce using rule 34 (type -> typeModifiers optype .)
    MENORIGUAL      reduce using rule 34 (type -> typeModifiers optype .)
    MULTIGUAL       reduce using rule 34 (type -> typeModifiers optype .)
    DIVIGUAL        reduce using rule 34 (type -> typeModifiers optype .)
    MODIGUAL        reduce using rule 34 (type -> typeModifiers optype .)
    MENOR           reduce using rule 34 (type -> typeModifiers optype .)
    PONTO           reduce using rule 34 (type -> typeModifiers optype .)
    COLONCOLON      reduce using rule 34 (type -> typeModifiers optype .)
    AS              reduce using rule 34 (type -> typeModifiers optype .)
    OR              reduce using rule 34 (type -> typeModifiers optype .)
    AND             reduce using rule 34 (type -> typeModifiers optype .)
    DIFERENTE       reduce using rule 34 (type -> typeModifiers optype .)
    IDENTIDADE      reduce using rule 34 (type -> typeModifiers optype .)
    IGUALDADE       reduce using rule 34 (type -> typeModifiers optype .)
    SEMIDENTIDADE   reduce using rule 34 (type -> typeModifiers optype .)
    IN              reduce using rule 34 (type -> typeModifiers optype .)
    NOT_IN          reduce using rule 34 (type -> typeModifiers optype .)
    IS              reduce using rule 34 (type -> typeModifiers optype .)
    NOT_IS          reduce using rule 34 (type -> typeModifiers optype .)
    ELVIS           reduce using rule 34 (type -> typeModifiers optype .)
    PONTOPONTO      reduce using rule 34 (type -> typeModifiers optype .)
    MULT            reduce using rule 34 (type -> typeModifiers optype .)
    DIVIDE          reduce using rule 34 (type -> typeModifiers optype .)
    MOD             reduce using rule 34 (type -> typeModifiers optype .)
    PV              reduce using rule 34 (type -> typeModifiers optype .)
    ELSE            reduce using rule 34 (type -> typeModifiers optype .)
    RCCT            reduce using rule 34 (type -> typeModifiers optype .)
    SETA            reduce using rule 34 (type -> typeModifiers optype .)


state 59

    (39) typeModifiers -> typeModifier .
    (40) typeModifiers -> typeModifier . typeModifiers
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (41) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 39 (typeModifiers -> typeModifier .)
    ID              reduce using rule 39 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 39 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 39 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 39 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 39 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 39 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 39 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 39 (typeModifiers -> typeModifier .)
    SUSPEND         shift and go to state 11

  ! SUSPEND         [ reduce using rule 39 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 59
    typeModifiers                  shift and go to state 60

state 60

    (40) typeModifiers -> typeModifier typeModifiers .

    LPAREN          reduce using rule 40 (typeModifiers -> typeModifier typeModifiers .)
    SUSPEND         reduce using rule 40 (typeModifiers -> typeModifier typeModifiers .)
    ID              reduce using rule 40 (typeModifiers -> typeModifier typeModifiers .)
    CROSSINLINE     reduce using rule 40 (typeModifiers -> typeModifier typeModifiers .)
    IMPORT          reduce using rule 40 (typeModifiers -> typeModifier typeModifiers .)
    INIT            reduce using rule 40 (typeModifiers -> typeModifier typeModifiers .)
    NOINLINE        reduce using rule 40 (typeModifiers -> typeModifier typeModifiers .)
    OUT             reduce using rule 40 (typeModifiers -> typeModifier typeModifiers .)
    VARARG          reduce using rule 40 (typeModifiers -> typeModifier typeModifiers .)
    WHERE           reduce using rule 40 (typeModifiers -> typeModifier typeModifiers .)


state 61

    (52) functionType -> receiverType PONTO . functionTypeParameters SETA type
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN

    LPAREN          shift and go to state 79

    functionTypeParameters         shift and go to state 78

state 62

    (53) functionType -> functionTypeParameters SETA . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    functionTypeParameters         shift and go to state 42
    type                           shift and go to state 80
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 63

    (46) simpleUserType -> simpleIdentifier typeArguments .

    RPAREN          reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    COMMA           reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIOR           reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    ATRIBUICAO      reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    LCHAVE          reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    FUN             reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    $end            reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    FOR             reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    WHILE           reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    DO              reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    ID              reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    CROSSINLINE     reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    IMPORT          reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    INIT            reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    NOINLINE        reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    OUT             reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    VARARG          reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    WHERE           reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    LPAREN          reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    LITERAL_STRING  reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    DOISP           reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    LCCT            reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    IF              reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN          reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN_AT       reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE        reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE_AT     reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK           reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK_AT        reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    RCHAVE          reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    INCREMENTO      reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    DECREMENTO      reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    MINUS           reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    PLUS            reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT             reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    SUSPEND         reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIORIGUAL      reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    MENORIGUAL      reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    MULTIGUAL       reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIGUAL        reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    MODIGUAL        reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOR           reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTO           reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    COLONCOLON      reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    AS              reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    OR              reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    AND             reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    DIFERENTE       reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    IDENTIDADE      reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    IGUALDADE       reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    SEMIDENTIDADE   reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    IN              reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IN          reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    IS              reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IS          reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    ELVIS           reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTOPONTO      reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    MULT            reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIDE          reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    MOD             reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    PV              reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    ELSE            reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    RCCT            reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)
    SETA            reduce using rule 46 (simpleUserType -> simpleIdentifier typeArguments .)


state 64

    (153) typeArguments -> MENOR . ta MAIOR
    (154) ta -> . typeProjection
    (155) ta -> . typeProjection COMMA ta
    (156) ta -> .
    (48) typeProjection -> . typeProjectionModifiers type
    (49) typeProjection -> . type
    (50) typeProjectionModifiers -> . typeProjection
    (51) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (42) typeProjectionModifier -> . varianceModifier
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (43) varianceModifier -> . IN
    (44) varianceModifier -> . OUT
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    MAIOR           reduce using rule 156 (ta -> .)
    IN              shift and go to state 87
    OUT             shift and go to state 88
    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    ta                             shift and go to state 81
    typeProjection                 shift and go to state 82
    typeProjectionModifiers        shift and go to state 83
    type                           shift and go to state 84
    typeProjectionModifier         shift and go to state 85
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    varianceModifier               shift and go to state 86
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 65

    (3) functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .

    FUN             reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    $end            reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    FOR             reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    WHILE           reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    DO              reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    ID              reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    CROSSINLINE     reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    IMPORT          reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    INIT            reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    NOINLINE        reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    OUT             reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    VARARG          reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    WHERE           reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    LPAREN          reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    LITERAL_STRING  reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    DOISP           reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    LCCT            reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    IF              reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    RETURN          reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    RETURN_AT       reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    CONTINUE        reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    CONTINUE_AT     reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    BREAK           reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    BREAK_AT        reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    RCHAVE          reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    INCREMENTO      reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    DECREMENTO      reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    MINUS           reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    PLUS            reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    NOT             reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    SUSPEND         reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    MAIORIGUAL      reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    MENORIGUAL      reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    MULTIGUAL       reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    DIVIGUAL        reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    MODIGUAL        reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    MENOR           reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    PONTO           reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    COLONCOLON      reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    AS              reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    OR              reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    AND             reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    DIFERENTE       reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    IDENTIDADE      reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    IGUALDADE       reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    SEMIDENTIDADE   reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    MAIOR           reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    IN              reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    NOT_IN          reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    IS              reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    NOT_IS          reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    ELVIS           reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    PONTOPONTO      reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    MULT            reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    DIVIDE          reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    MOD             reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    LCHAVE          reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    PV              reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    ELSE            reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    COMMA           reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    RPAREN          reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)
    RCCT            reduce using rule 3 (functionDeclaration -> FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5 .)


state 66

    (10) fd5 -> functionBody .

    FUN             reduce using rule 10 (fd5 -> functionBody .)
    FOR             reduce using rule 10 (fd5 -> functionBody .)
    WHILE           reduce using rule 10 (fd5 -> functionBody .)
    DO              reduce using rule 10 (fd5 -> functionBody .)
    ID              reduce using rule 10 (fd5 -> functionBody .)
    CROSSINLINE     reduce using rule 10 (fd5 -> functionBody .)
    IMPORT          reduce using rule 10 (fd5 -> functionBody .)
    INIT            reduce using rule 10 (fd5 -> functionBody .)
    NOINLINE        reduce using rule 10 (fd5 -> functionBody .)
    OUT             reduce using rule 10 (fd5 -> functionBody .)
    VARARG          reduce using rule 10 (fd5 -> functionBody .)
    WHERE           reduce using rule 10 (fd5 -> functionBody .)
    LPAREN          reduce using rule 10 (fd5 -> functionBody .)
    LITERAL_STRING  reduce using rule 10 (fd5 -> functionBody .)
    DOISP           reduce using rule 10 (fd5 -> functionBody .)
    LCCT            reduce using rule 10 (fd5 -> functionBody .)
    IF              reduce using rule 10 (fd5 -> functionBody .)
    RETURN          reduce using rule 10 (fd5 -> functionBody .)
    RETURN_AT       reduce using rule 10 (fd5 -> functionBody .)
    CONTINUE        reduce using rule 10 (fd5 -> functionBody .)
    CONTINUE_AT     reduce using rule 10 (fd5 -> functionBody .)
    BREAK           reduce using rule 10 (fd5 -> functionBody .)
    BREAK_AT        reduce using rule 10 (fd5 -> functionBody .)
    RCHAVE          reduce using rule 10 (fd5 -> functionBody .)
    INCREMENTO      reduce using rule 10 (fd5 -> functionBody .)
    DECREMENTO      reduce using rule 10 (fd5 -> functionBody .)
    MINUS           reduce using rule 10 (fd5 -> functionBody .)
    PLUS            reduce using rule 10 (fd5 -> functionBody .)
    NOT             reduce using rule 10 (fd5 -> functionBody .)
    SUSPEND         reduce using rule 10 (fd5 -> functionBody .)
    MAIORIGUAL      reduce using rule 10 (fd5 -> functionBody .)
    MENORIGUAL      reduce using rule 10 (fd5 -> functionBody .)
    MULTIGUAL       reduce using rule 10 (fd5 -> functionBody .)
    DIVIGUAL        reduce using rule 10 (fd5 -> functionBody .)
    MODIGUAL        reduce using rule 10 (fd5 -> functionBody .)
    MENOR           reduce using rule 10 (fd5 -> functionBody .)
    PONTO           reduce using rule 10 (fd5 -> functionBody .)
    COLONCOLON      reduce using rule 10 (fd5 -> functionBody .)
    AS              reduce using rule 10 (fd5 -> functionBody .)
    OR              reduce using rule 10 (fd5 -> functionBody .)
    AND             reduce using rule 10 (fd5 -> functionBody .)
    DIFERENTE       reduce using rule 10 (fd5 -> functionBody .)
    IDENTIDADE      reduce using rule 10 (fd5 -> functionBody .)
    IGUALDADE       reduce using rule 10 (fd5 -> functionBody .)
    SEMIDENTIDADE   reduce using rule 10 (fd5 -> functionBody .)
    MAIOR           reduce using rule 10 (fd5 -> functionBody .)
    IN              reduce using rule 10 (fd5 -> functionBody .)
    NOT_IN          reduce using rule 10 (fd5 -> functionBody .)
    IS              reduce using rule 10 (fd5 -> functionBody .)
    NOT_IS          reduce using rule 10 (fd5 -> functionBody .)
    ELVIS           reduce using rule 10 (fd5 -> functionBody .)
    PONTOPONTO      reduce using rule 10 (fd5 -> functionBody .)
    MULT            reduce using rule 10 (fd5 -> functionBody .)
    DIVIDE          reduce using rule 10 (fd5 -> functionBody .)
    MOD             reduce using rule 10 (fd5 -> functionBody .)
    LCHAVE          reduce using rule 10 (fd5 -> functionBody .)
    PV              reduce using rule 10 (fd5 -> functionBody .)
    ELSE            reduce using rule 10 (fd5 -> functionBody .)
    $end            reduce using rule 10 (fd5 -> functionBody .)
    COMMA           reduce using rule 10 (fd5 -> functionBody .)
    RPAREN          reduce using rule 10 (fd5 -> functionBody .)
    RCCT            reduce using rule 10 (fd5 -> functionBody .)


state 67

    (18) functionBody -> block .

    FUN             reduce using rule 18 (functionBody -> block .)
    FOR             reduce using rule 18 (functionBody -> block .)
    WHILE           reduce using rule 18 (functionBody -> block .)
    DO              reduce using rule 18 (functionBody -> block .)
    ID              reduce using rule 18 (functionBody -> block .)
    CROSSINLINE     reduce using rule 18 (functionBody -> block .)
    IMPORT          reduce using rule 18 (functionBody -> block .)
    INIT            reduce using rule 18 (functionBody -> block .)
    NOINLINE        reduce using rule 18 (functionBody -> block .)
    OUT             reduce using rule 18 (functionBody -> block .)
    VARARG          reduce using rule 18 (functionBody -> block .)
    WHERE           reduce using rule 18 (functionBody -> block .)
    LPAREN          reduce using rule 18 (functionBody -> block .)
    LITERAL_STRING  reduce using rule 18 (functionBody -> block .)
    DOISP           reduce using rule 18 (functionBody -> block .)
    LCCT            reduce using rule 18 (functionBody -> block .)
    IF              reduce using rule 18 (functionBody -> block .)
    RETURN          reduce using rule 18 (functionBody -> block .)
    RETURN_AT       reduce using rule 18 (functionBody -> block .)
    CONTINUE        reduce using rule 18 (functionBody -> block .)
    CONTINUE_AT     reduce using rule 18 (functionBody -> block .)
    BREAK           reduce using rule 18 (functionBody -> block .)
    BREAK_AT        reduce using rule 18 (functionBody -> block .)
    RCHAVE          reduce using rule 18 (functionBody -> block .)
    INCREMENTO      reduce using rule 18 (functionBody -> block .)
    DECREMENTO      reduce using rule 18 (functionBody -> block .)
    MINUS           reduce using rule 18 (functionBody -> block .)
    PLUS            reduce using rule 18 (functionBody -> block .)
    NOT             reduce using rule 18 (functionBody -> block .)
    SUSPEND         reduce using rule 18 (functionBody -> block .)
    MAIORIGUAL      reduce using rule 18 (functionBody -> block .)
    MENORIGUAL      reduce using rule 18 (functionBody -> block .)
    MULTIGUAL       reduce using rule 18 (functionBody -> block .)
    DIVIGUAL        reduce using rule 18 (functionBody -> block .)
    MODIGUAL        reduce using rule 18 (functionBody -> block .)
    MENOR           reduce using rule 18 (functionBody -> block .)
    PONTO           reduce using rule 18 (functionBody -> block .)
    COLONCOLON      reduce using rule 18 (functionBody -> block .)
    AS              reduce using rule 18 (functionBody -> block .)
    OR              reduce using rule 18 (functionBody -> block .)
    AND             reduce using rule 18 (functionBody -> block .)
    DIFERENTE       reduce using rule 18 (functionBody -> block .)
    IDENTIDADE      reduce using rule 18 (functionBody -> block .)
    IGUALDADE       reduce using rule 18 (functionBody -> block .)
    SEMIDENTIDADE   reduce using rule 18 (functionBody -> block .)
    MAIOR           reduce using rule 18 (functionBody -> block .)
    IN              reduce using rule 18 (functionBody -> block .)
    NOT_IN          reduce using rule 18 (functionBody -> block .)
    IS              reduce using rule 18 (functionBody -> block .)
    NOT_IS          reduce using rule 18 (functionBody -> block .)
    ELVIS           reduce using rule 18 (functionBody -> block .)
    PONTOPONTO      reduce using rule 18 (functionBody -> block .)
    MULT            reduce using rule 18 (functionBody -> block .)
    DIVIDE          reduce using rule 18 (functionBody -> block .)
    MOD             reduce using rule 18 (functionBody -> block .)
    LCHAVE          reduce using rule 18 (functionBody -> block .)
    PV              reduce using rule 18 (functionBody -> block .)
    ELSE            reduce using rule 18 (functionBody -> block .)
    $end            reduce using rule 18 (functionBody -> block .)
    COMMA           reduce using rule 18 (functionBody -> block .)
    RPAREN          reduce using rule 18 (functionBody -> block .)
    RCCT            reduce using rule 18 (functionBody -> block .)


state 68

    (19) functionBody -> ATRIBUICAO . expression
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 89
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 69

    (73) block -> LCHAVE . statements RCHAVE
    (64) statements -> . statement
    (65) statements -> . statement statements
    (66) statements -> .
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! reduce/reduce conflict for RCHAVE resolved using rule 66 (statements -> .)
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)

  ! RCHAVE          [ reduce using rule 66 (statements -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]

    statements                     shift and go to state 112
    statement                      shift and go to state 114
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    expression                     shift and go to state 118
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 70

    (8) fd3 -> DOISP type .

    ATRIBUICAO      reduce using rule 8 (fd3 -> DOISP type .)
    LCHAVE          reduce using rule 8 (fd3 -> DOISP type .)
    FUN             reduce using rule 8 (fd3 -> DOISP type .)
    $end            reduce using rule 8 (fd3 -> DOISP type .)
    FOR             reduce using rule 8 (fd3 -> DOISP type .)
    WHILE           reduce using rule 8 (fd3 -> DOISP type .)
    DO              reduce using rule 8 (fd3 -> DOISP type .)
    ID              reduce using rule 8 (fd3 -> DOISP type .)
    CROSSINLINE     reduce using rule 8 (fd3 -> DOISP type .)
    IMPORT          reduce using rule 8 (fd3 -> DOISP type .)
    INIT            reduce using rule 8 (fd3 -> DOISP type .)
    NOINLINE        reduce using rule 8 (fd3 -> DOISP type .)
    OUT             reduce using rule 8 (fd3 -> DOISP type .)
    VARARG          reduce using rule 8 (fd3 -> DOISP type .)
    WHERE           reduce using rule 8 (fd3 -> DOISP type .)
    LPAREN          reduce using rule 8 (fd3 -> DOISP type .)
    LITERAL_STRING  reduce using rule 8 (fd3 -> DOISP type .)
    DOISP           reduce using rule 8 (fd3 -> DOISP type .)
    LCCT            reduce using rule 8 (fd3 -> DOISP type .)
    IF              reduce using rule 8 (fd3 -> DOISP type .)
    RETURN          reduce using rule 8 (fd3 -> DOISP type .)
    RETURN_AT       reduce using rule 8 (fd3 -> DOISP type .)
    CONTINUE        reduce using rule 8 (fd3 -> DOISP type .)
    CONTINUE_AT     reduce using rule 8 (fd3 -> DOISP type .)
    BREAK           reduce using rule 8 (fd3 -> DOISP type .)
    BREAK_AT        reduce using rule 8 (fd3 -> DOISP type .)
    RCHAVE          reduce using rule 8 (fd3 -> DOISP type .)
    INCREMENTO      reduce using rule 8 (fd3 -> DOISP type .)
    DECREMENTO      reduce using rule 8 (fd3 -> DOISP type .)
    MINUS           reduce using rule 8 (fd3 -> DOISP type .)
    PLUS            reduce using rule 8 (fd3 -> DOISP type .)
    NOT             reduce using rule 8 (fd3 -> DOISP type .)
    SUSPEND         reduce using rule 8 (fd3 -> DOISP type .)
    MAIORIGUAL      reduce using rule 8 (fd3 -> DOISP type .)
    MENORIGUAL      reduce using rule 8 (fd3 -> DOISP type .)
    MULTIGUAL       reduce using rule 8 (fd3 -> DOISP type .)
    DIVIGUAL        reduce using rule 8 (fd3 -> DOISP type .)
    MODIGUAL        reduce using rule 8 (fd3 -> DOISP type .)
    MENOR           reduce using rule 8 (fd3 -> DOISP type .)
    PONTO           reduce using rule 8 (fd3 -> DOISP type .)
    COLONCOLON      reduce using rule 8 (fd3 -> DOISP type .)
    AS              reduce using rule 8 (fd3 -> DOISP type .)
    OR              reduce using rule 8 (fd3 -> DOISP type .)
    AND             reduce using rule 8 (fd3 -> DOISP type .)
    DIFERENTE       reduce using rule 8 (fd3 -> DOISP type .)
    IDENTIDADE      reduce using rule 8 (fd3 -> DOISP type .)
    IGUALDADE       reduce using rule 8 (fd3 -> DOISP type .)
    SEMIDENTIDADE   reduce using rule 8 (fd3 -> DOISP type .)
    MAIOR           reduce using rule 8 (fd3 -> DOISP type .)
    IN              reduce using rule 8 (fd3 -> DOISP type .)
    NOT_IN          reduce using rule 8 (fd3 -> DOISP type .)
    IS              reduce using rule 8 (fd3 -> DOISP type .)
    NOT_IS          reduce using rule 8 (fd3 -> DOISP type .)
    ELVIS           reduce using rule 8 (fd3 -> DOISP type .)
    PONTOPONTO      reduce using rule 8 (fd3 -> DOISP type .)
    MULT            reduce using rule 8 (fd3 -> DOISP type .)
    DIVIDE          reduce using rule 8 (fd3 -> DOISP type .)
    MOD             reduce using rule 8 (fd3 -> DOISP type .)
    PV              reduce using rule 8 (fd3 -> DOISP type .)
    ELSE            reduce using rule 8 (fd3 -> DOISP type .)
    COMMA           reduce using rule 8 (fd3 -> DOISP type .)
    RPAREN          reduce using rule 8 (fd3 -> DOISP type .)
    RCCT            reduce using rule 8 (fd3 -> DOISP type .)


state 71

    (20) functionValueParameters -> LPAREN fvps RPAREN .

    DOISP           reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    ATRIBUICAO      reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    LCHAVE          reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    FUN             reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    $end            reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    FOR             reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    WHILE           reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    DO              reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    ID              reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    CROSSINLINE     reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    IMPORT          reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    INIT            reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    NOINLINE        reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    OUT             reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    VARARG          reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    WHERE           reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    LPAREN          reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    LITERAL_STRING  reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    LCCT            reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    IF              reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    RETURN          reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    RETURN_AT       reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    CONTINUE        reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    CONTINUE_AT     reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    BREAK           reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    BREAK_AT        reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    RCHAVE          reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    INCREMENTO      reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    DECREMENTO      reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    MINUS           reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    PLUS            reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    NOT             reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    SUSPEND         reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    MAIORIGUAL      reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    MENORIGUAL      reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    MULTIGUAL       reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    DIVIGUAL        reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    MODIGUAL        reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    MENOR           reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    PONTO           reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    COLONCOLON      reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    AS              reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    OR              reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    AND             reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    DIFERENTE       reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    IDENTIDADE      reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    IGUALDADE       reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    SEMIDENTIDADE   reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    MAIOR           reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    IN              reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    NOT_IN          reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    IS              reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    NOT_IS          reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    ELVIS           reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    PONTOPONTO      reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    MULT            reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    DIVIDE          reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    MOD             reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    PV              reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    ELSE            reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    COMMA           reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    RPAREN          reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)
    RCCT            reduce using rule 20 (functionValueParameters -> LPAREN fvps RPAREN .)


state 72

    (23) fvps -> functionValueParameter COMMA . fvps
    (22) fvps -> . functionValueParameter
    (23) fvps -> . functionValueParameter COMMA fvps
    (24) fvps -> .
    (25) functionValueParameter -> . parameter ATRIBUICAO expression
    (26) functionValueParameter -> . parameter
    (33) parameter -> . simpleIdentifier DOISP type
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    RPAREN          reduce using rule 24 (fvps -> .)
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    functionValueParameter         shift and go to state 51
    fvps                           shift and go to state 156
    parameter                      shift and go to state 52
    simpleIdentifier               shift and go to state 53

state 73

    (25) functionValueParameter -> parameter ATRIBUICAO . expression
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 157
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 74

    (33) parameter -> simpleIdentifier DOISP . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    simpleIdentifier               shift and go to state 44
    type                           shift and go to state 158
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43

state 75

    (56) functionTypeParameters -> LPAREN type ftp . RPAREN
    (57) functionTypeParameters -> LPAREN type ftp . COMMA RPAREN

    RPAREN          shift and go to state 159
    COMMA           shift and go to state 160


state 76

    (58) ftp -> COMMA . parameter
    (59) ftp -> COMMA . type
    (33) parameter -> . simpleIdentifier DOISP type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier

    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22
    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33

    parameter                      shift and go to state 161
    type                           shift and go to state 162
    simpleIdentifier               shift and go to state 56
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43

state 77

    (54) functionTypeParameters -> LPAREN parameter ftp . RPAREN
    (55) functionTypeParameters -> LPAREN parameter ftp . COMMA RPAREN

    RPAREN          shift and go to state 163
    COMMA           shift and go to state 164


state 78

    (52) functionType -> receiverType PONTO functionTypeParameters . SETA type

    SETA            shift and go to state 165


state 79

    (54) functionTypeParameters -> LPAREN . parameter ftp RPAREN
    (55) functionTypeParameters -> LPAREN . parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> LPAREN . type ftp RPAREN
    (57) functionTypeParameters -> LPAREN . type ftp COMMA RPAREN
    (33) parameter -> . simpleIdentifier DOISP type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier

    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22
    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33

    parameter                      shift and go to state 55
    type                           shift and go to state 166
    simpleIdentifier               shift and go to state 56
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43

state 80

    (53) functionType -> functionTypeParameters SETA type .

    RPAREN          reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    COMMA           reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    MAIOR           reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    ATRIBUICAO      reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    LCHAVE          reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    FUN             reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    $end            reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    FOR             reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    WHILE           reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    DO              reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    ID              reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    IMPORT          reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    INIT            reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    OUT             reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    VARARG          reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    WHERE           reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    LPAREN          reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    DOISP           reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    LCCT            reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    IF              reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    RETURN          reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    BREAK           reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    MINUS           reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    PLUS            reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    NOT             reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    MENOR           reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    PONTO           reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    AS              reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    OR              reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    AND             reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    IN              reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    IS              reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    ELVIS           reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    MULT            reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    MOD             reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    PV              reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    ELSE            reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    RCCT            reduce using rule 53 (functionType -> functionTypeParameters SETA type .)
    SETA            reduce using rule 53 (functionType -> functionTypeParameters SETA type .)


state 81

    (153) typeArguments -> MENOR ta . MAIOR

    MAIOR           shift and go to state 167


state 82

    (154) ta -> typeProjection .
    (155) ta -> typeProjection . COMMA ta
    (50) typeProjectionModifiers -> typeProjection .

    MAIOR           reduce using rule 154 (ta -> typeProjection .)
    COMMA           shift and go to state 168
    SUSPEND         reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 50 (typeProjectionModifiers -> typeProjection .)


state 83

    (48) typeProjection -> typeProjectionModifiers . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    type                           shift and go to state 169
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 84

    (49) typeProjection -> type .

    COMMA           reduce using rule 49 (typeProjection -> type .)
    MAIOR           reduce using rule 49 (typeProjection -> type .)
    SUSPEND         reduce using rule 49 (typeProjection -> type .)
    LPAREN          reduce using rule 49 (typeProjection -> type .)
    ID              reduce using rule 49 (typeProjection -> type .)
    CROSSINLINE     reduce using rule 49 (typeProjection -> type .)
    IMPORT          reduce using rule 49 (typeProjection -> type .)
    INIT            reduce using rule 49 (typeProjection -> type .)
    NOINLINE        reduce using rule 49 (typeProjection -> type .)
    OUT             reduce using rule 49 (typeProjection -> type .)
    VARARG          reduce using rule 49 (typeProjection -> type .)
    WHERE           reduce using rule 49 (typeProjection -> type .)


state 85

    (51) typeProjectionModifiers -> typeProjectionModifier . typeProjectionModifiers
    (50) typeProjectionModifiers -> . typeProjection
    (51) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (48) typeProjection -> . typeProjectionModifiers type
    (49) typeProjection -> . type
    (42) typeProjectionModifier -> . varianceModifier
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (43) varianceModifier -> . IN
    (44) varianceModifier -> . OUT
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    IN              shift and go to state 87
    OUT             shift and go to state 88
    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    typeProjectionModifier         shift and go to state 85
    typeProjectionModifiers        shift and go to state 170
    typeProjection                 shift and go to state 171
    type                           shift and go to state 84
    varianceModifier               shift and go to state 86
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 86

    (42) typeProjectionModifier -> varianceModifier .

    IN              reduce using rule 42 (typeProjectionModifier -> varianceModifier .)
    OUT             reduce using rule 42 (typeProjectionModifier -> varianceModifier .)
    SUSPEND         reduce using rule 42 (typeProjectionModifier -> varianceModifier .)
    LPAREN          reduce using rule 42 (typeProjectionModifier -> varianceModifier .)
    ID              reduce using rule 42 (typeProjectionModifier -> varianceModifier .)
    CROSSINLINE     reduce using rule 42 (typeProjectionModifier -> varianceModifier .)
    IMPORT          reduce using rule 42 (typeProjectionModifier -> varianceModifier .)
    INIT            reduce using rule 42 (typeProjectionModifier -> varianceModifier .)
    NOINLINE        reduce using rule 42 (typeProjectionModifier -> varianceModifier .)
    VARARG          reduce using rule 42 (typeProjectionModifier -> varianceModifier .)
    WHERE           reduce using rule 42 (typeProjectionModifier -> varianceModifier .)


state 87

    (43) varianceModifier -> IN .

    IN              reduce using rule 43 (varianceModifier -> IN .)
    OUT             reduce using rule 43 (varianceModifier -> IN .)
    SUSPEND         reduce using rule 43 (varianceModifier -> IN .)
    LPAREN          reduce using rule 43 (varianceModifier -> IN .)
    ID              reduce using rule 43 (varianceModifier -> IN .)
    CROSSINLINE     reduce using rule 43 (varianceModifier -> IN .)
    IMPORT          reduce using rule 43 (varianceModifier -> IN .)
    INIT            reduce using rule 43 (varianceModifier -> IN .)
    NOINLINE        reduce using rule 43 (varianceModifier -> IN .)
    VARARG          reduce using rule 43 (varianceModifier -> IN .)
    WHERE           reduce using rule 43 (varianceModifier -> IN .)


state 88

    (44) varianceModifier -> OUT .
    (271) simpleIdentifier -> OUT .

  ! reduce/reduce conflict for SUSPEND resolved using rule 44 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 44 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for ID resolved using rule 44 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 44 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for IMPORT resolved using rule 44 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for INIT resolved using rule 44 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 44 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for OUT resolved using rule 44 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for VARARG resolved using rule 44 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for WHERE resolved using rule 44 (varianceModifier -> OUT .)
    IN              reduce using rule 44 (varianceModifier -> OUT .)
    OUT             reduce using rule 44 (varianceModifier -> OUT .)
    SUSPEND         reduce using rule 44 (varianceModifier -> OUT .)
    LPAREN          reduce using rule 44 (varianceModifier -> OUT .)
    ID              reduce using rule 44 (varianceModifier -> OUT .)
    CROSSINLINE     reduce using rule 44 (varianceModifier -> OUT .)
    IMPORT          reduce using rule 44 (varianceModifier -> OUT .)
    INIT            reduce using rule 44 (varianceModifier -> OUT .)
    NOINLINE        reduce using rule 44 (varianceModifier -> OUT .)
    VARARG          reduce using rule 44 (varianceModifier -> OUT .)
    WHERE           reduce using rule 44 (varianceModifier -> OUT .)
    MENOR           reduce using rule 271 (simpleIdentifier -> OUT .)
    COMMA           reduce using rule 271 (simpleIdentifier -> OUT .)
    MAIOR           reduce using rule 271 (simpleIdentifier -> OUT .)

  ! SUSPEND         [ reduce using rule 271 (simpleIdentifier -> OUT .) ]
  ! LPAREN          [ reduce using rule 271 (simpleIdentifier -> OUT .) ]
  ! ID              [ reduce using rule 271 (simpleIdentifier -> OUT .) ]
  ! CROSSINLINE     [ reduce using rule 271 (simpleIdentifier -> OUT .) ]
  ! IMPORT          [ reduce using rule 271 (simpleIdentifier -> OUT .) ]
  ! INIT            [ reduce using rule 271 (simpleIdentifier -> OUT .) ]
  ! NOINLINE        [ reduce using rule 271 (simpleIdentifier -> OUT .) ]
  ! OUT             [ reduce using rule 271 (simpleIdentifier -> OUT .) ]
  ! VARARG          [ reduce using rule 271 (simpleIdentifier -> OUT .) ]
  ! WHERE           [ reduce using rule 271 (simpleIdentifier -> OUT .) ]


state 89

    (19) functionBody -> ATRIBUICAO expression .

    FUN             reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    FOR             reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    WHILE           reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    DO              reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    ID              reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    IMPORT          reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    INIT            reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    NOINLINE        reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    OUT             reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    VARARG          reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    WHERE           reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    LPAREN          reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    DOISP           reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    LCCT            reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    IF              reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    RETURN          reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    CONTINUE        reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    BREAK           reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    RCHAVE          reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    MINUS           reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    PLUS            reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    NOT             reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    SUSPEND         reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    MENOR           reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    PONTO           reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    AS              reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    OR              reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    AND             reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    MAIOR           reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    IN              reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    NOT_IN          reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    IS              reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    NOT_IS          reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    ELVIS           reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    MULT            reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    DIVIDE          reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    MOD             reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    LCHAVE          reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    PV              reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    ELSE            reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    $end            reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    COMMA           reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    RPAREN          reduce using rule 19 (functionBody -> ATRIBUICAO expression .)
    RCCT            reduce using rule 19 (functionBody -> ATRIBUICAO expression .)


state 90

    (88) expression -> disjunction .

    FUN             reduce using rule 88 (expression -> disjunction .)
    FOR             reduce using rule 88 (expression -> disjunction .)
    WHILE           reduce using rule 88 (expression -> disjunction .)
    DO              reduce using rule 88 (expression -> disjunction .)
    ID              reduce using rule 88 (expression -> disjunction .)
    CROSSINLINE     reduce using rule 88 (expression -> disjunction .)
    IMPORT          reduce using rule 88 (expression -> disjunction .)
    INIT            reduce using rule 88 (expression -> disjunction .)
    NOINLINE        reduce using rule 88 (expression -> disjunction .)
    OUT             reduce using rule 88 (expression -> disjunction .)
    VARARG          reduce using rule 88 (expression -> disjunction .)
    WHERE           reduce using rule 88 (expression -> disjunction .)
    LPAREN          reduce using rule 88 (expression -> disjunction .)
    LITERAL_STRING  reduce using rule 88 (expression -> disjunction .)
    DOISP           reduce using rule 88 (expression -> disjunction .)
    LCCT            reduce using rule 88 (expression -> disjunction .)
    IF              reduce using rule 88 (expression -> disjunction .)
    RETURN          reduce using rule 88 (expression -> disjunction .)
    RETURN_AT       reduce using rule 88 (expression -> disjunction .)
    CONTINUE        reduce using rule 88 (expression -> disjunction .)
    CONTINUE_AT     reduce using rule 88 (expression -> disjunction .)
    BREAK           reduce using rule 88 (expression -> disjunction .)
    BREAK_AT        reduce using rule 88 (expression -> disjunction .)
    RCHAVE          reduce using rule 88 (expression -> disjunction .)
    INCREMENTO      reduce using rule 88 (expression -> disjunction .)
    DECREMENTO      reduce using rule 88 (expression -> disjunction .)
    MINUS           reduce using rule 88 (expression -> disjunction .)
    PLUS            reduce using rule 88 (expression -> disjunction .)
    NOT             reduce using rule 88 (expression -> disjunction .)
    SUSPEND         reduce using rule 88 (expression -> disjunction .)
    MAIORIGUAL      reduce using rule 88 (expression -> disjunction .)
    MENORIGUAL      reduce using rule 88 (expression -> disjunction .)
    MULTIGUAL       reduce using rule 88 (expression -> disjunction .)
    DIVIGUAL        reduce using rule 88 (expression -> disjunction .)
    MODIGUAL        reduce using rule 88 (expression -> disjunction .)
    MENOR           reduce using rule 88 (expression -> disjunction .)
    PONTO           reduce using rule 88 (expression -> disjunction .)
    COLONCOLON      reduce using rule 88 (expression -> disjunction .)
    AS              reduce using rule 88 (expression -> disjunction .)
    OR              reduce using rule 88 (expression -> disjunction .)
    AND             reduce using rule 88 (expression -> disjunction .)
    DIFERENTE       reduce using rule 88 (expression -> disjunction .)
    IDENTIDADE      reduce using rule 88 (expression -> disjunction .)
    IGUALDADE       reduce using rule 88 (expression -> disjunction .)
    SEMIDENTIDADE   reduce using rule 88 (expression -> disjunction .)
    MAIOR           reduce using rule 88 (expression -> disjunction .)
    IN              reduce using rule 88 (expression -> disjunction .)
    NOT_IN          reduce using rule 88 (expression -> disjunction .)
    IS              reduce using rule 88 (expression -> disjunction .)
    NOT_IS          reduce using rule 88 (expression -> disjunction .)
    ELVIS           reduce using rule 88 (expression -> disjunction .)
    PONTOPONTO      reduce using rule 88 (expression -> disjunction .)
    MULT            reduce using rule 88 (expression -> disjunction .)
    DIVIDE          reduce using rule 88 (expression -> disjunction .)
    MOD             reduce using rule 88 (expression -> disjunction .)
    LCHAVE          reduce using rule 88 (expression -> disjunction .)
    PV              reduce using rule 88 (expression -> disjunction .)
    ELSE            reduce using rule 88 (expression -> disjunction .)
    $end            reduce using rule 88 (expression -> disjunction .)
    COMMA           reduce using rule 88 (expression -> disjunction .)
    RPAREN          reduce using rule 88 (expression -> disjunction .)
    RCCT            reduce using rule 88 (expression -> disjunction .)


state 91

    (89) disjunction -> conjunction .
    (90) disjunction -> conjunction . OR disjunction

  ! shift/reduce conflict for OR resolved as shift
    FUN             reduce using rule 89 (disjunction -> conjunction .)
    FOR             reduce using rule 89 (disjunction -> conjunction .)
    WHILE           reduce using rule 89 (disjunction -> conjunction .)
    DO              reduce using rule 89 (disjunction -> conjunction .)
    ID              reduce using rule 89 (disjunction -> conjunction .)
    CROSSINLINE     reduce using rule 89 (disjunction -> conjunction .)
    IMPORT          reduce using rule 89 (disjunction -> conjunction .)
    INIT            reduce using rule 89 (disjunction -> conjunction .)
    NOINLINE        reduce using rule 89 (disjunction -> conjunction .)
    OUT             reduce using rule 89 (disjunction -> conjunction .)
    VARARG          reduce using rule 89 (disjunction -> conjunction .)
    WHERE           reduce using rule 89 (disjunction -> conjunction .)
    LPAREN          reduce using rule 89 (disjunction -> conjunction .)
    LITERAL_STRING  reduce using rule 89 (disjunction -> conjunction .)
    DOISP           reduce using rule 89 (disjunction -> conjunction .)
    LCCT            reduce using rule 89 (disjunction -> conjunction .)
    IF              reduce using rule 89 (disjunction -> conjunction .)
    RETURN          reduce using rule 89 (disjunction -> conjunction .)
    RETURN_AT       reduce using rule 89 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 89 (disjunction -> conjunction .)
    CONTINUE_AT     reduce using rule 89 (disjunction -> conjunction .)
    BREAK           reduce using rule 89 (disjunction -> conjunction .)
    BREAK_AT        reduce using rule 89 (disjunction -> conjunction .)
    RCHAVE          reduce using rule 89 (disjunction -> conjunction .)
    INCREMENTO      reduce using rule 89 (disjunction -> conjunction .)
    DECREMENTO      reduce using rule 89 (disjunction -> conjunction .)
    MINUS           reduce using rule 89 (disjunction -> conjunction .)
    PLUS            reduce using rule 89 (disjunction -> conjunction .)
    NOT             reduce using rule 89 (disjunction -> conjunction .)
    SUSPEND         reduce using rule 89 (disjunction -> conjunction .)
    MAIORIGUAL      reduce using rule 89 (disjunction -> conjunction .)
    MENORIGUAL      reduce using rule 89 (disjunction -> conjunction .)
    MULTIGUAL       reduce using rule 89 (disjunction -> conjunction .)
    DIVIGUAL        reduce using rule 89 (disjunction -> conjunction .)
    MODIGUAL        reduce using rule 89 (disjunction -> conjunction .)
    MENOR           reduce using rule 89 (disjunction -> conjunction .)
    PONTO           reduce using rule 89 (disjunction -> conjunction .)
    COLONCOLON      reduce using rule 89 (disjunction -> conjunction .)
    AS              reduce using rule 89 (disjunction -> conjunction .)
    AND             reduce using rule 89 (disjunction -> conjunction .)
    DIFERENTE       reduce using rule 89 (disjunction -> conjunction .)
    IDENTIDADE      reduce using rule 89 (disjunction -> conjunction .)
    IGUALDADE       reduce using rule 89 (disjunction -> conjunction .)
    SEMIDENTIDADE   reduce using rule 89 (disjunction -> conjunction .)
    MAIOR           reduce using rule 89 (disjunction -> conjunction .)
    IN              reduce using rule 89 (disjunction -> conjunction .)
    NOT_IN          reduce using rule 89 (disjunction -> conjunction .)
    IS              reduce using rule 89 (disjunction -> conjunction .)
    NOT_IS          reduce using rule 89 (disjunction -> conjunction .)
    ELVIS           reduce using rule 89 (disjunction -> conjunction .)
    PONTOPONTO      reduce using rule 89 (disjunction -> conjunction .)
    MULT            reduce using rule 89 (disjunction -> conjunction .)
    DIVIDE          reduce using rule 89 (disjunction -> conjunction .)
    MOD             reduce using rule 89 (disjunction -> conjunction .)
    LCHAVE          reduce using rule 89 (disjunction -> conjunction .)
    PV              reduce using rule 89 (disjunction -> conjunction .)
    ELSE            reduce using rule 89 (disjunction -> conjunction .)
    $end            reduce using rule 89 (disjunction -> conjunction .)
    COMMA           reduce using rule 89 (disjunction -> conjunction .)
    RPAREN          reduce using rule 89 (disjunction -> conjunction .)
    RCCT            reduce using rule 89 (disjunction -> conjunction .)
    OR              shift and go to state 172

  ! OR              [ reduce using rule 89 (disjunction -> conjunction .) ]


state 92

    (91) conjunction -> equality .
    (92) conjunction -> equality . AND conjunction

  ! shift/reduce conflict for AND resolved as shift
    FUN             reduce using rule 91 (conjunction -> equality .)
    FOR             reduce using rule 91 (conjunction -> equality .)
    WHILE           reduce using rule 91 (conjunction -> equality .)
    DO              reduce using rule 91 (conjunction -> equality .)
    ID              reduce using rule 91 (conjunction -> equality .)
    CROSSINLINE     reduce using rule 91 (conjunction -> equality .)
    IMPORT          reduce using rule 91 (conjunction -> equality .)
    INIT            reduce using rule 91 (conjunction -> equality .)
    NOINLINE        reduce using rule 91 (conjunction -> equality .)
    OUT             reduce using rule 91 (conjunction -> equality .)
    VARARG          reduce using rule 91 (conjunction -> equality .)
    WHERE           reduce using rule 91 (conjunction -> equality .)
    LPAREN          reduce using rule 91 (conjunction -> equality .)
    LITERAL_STRING  reduce using rule 91 (conjunction -> equality .)
    DOISP           reduce using rule 91 (conjunction -> equality .)
    LCCT            reduce using rule 91 (conjunction -> equality .)
    IF              reduce using rule 91 (conjunction -> equality .)
    RETURN          reduce using rule 91 (conjunction -> equality .)
    RETURN_AT       reduce using rule 91 (conjunction -> equality .)
    CONTINUE        reduce using rule 91 (conjunction -> equality .)
    CONTINUE_AT     reduce using rule 91 (conjunction -> equality .)
    BREAK           reduce using rule 91 (conjunction -> equality .)
    BREAK_AT        reduce using rule 91 (conjunction -> equality .)
    RCHAVE          reduce using rule 91 (conjunction -> equality .)
    INCREMENTO      reduce using rule 91 (conjunction -> equality .)
    DECREMENTO      reduce using rule 91 (conjunction -> equality .)
    MINUS           reduce using rule 91 (conjunction -> equality .)
    PLUS            reduce using rule 91 (conjunction -> equality .)
    NOT             reduce using rule 91 (conjunction -> equality .)
    SUSPEND         reduce using rule 91 (conjunction -> equality .)
    MAIORIGUAL      reduce using rule 91 (conjunction -> equality .)
    MENORIGUAL      reduce using rule 91 (conjunction -> equality .)
    MULTIGUAL       reduce using rule 91 (conjunction -> equality .)
    DIVIGUAL        reduce using rule 91 (conjunction -> equality .)
    MODIGUAL        reduce using rule 91 (conjunction -> equality .)
    MENOR           reduce using rule 91 (conjunction -> equality .)
    PONTO           reduce using rule 91 (conjunction -> equality .)
    COLONCOLON      reduce using rule 91 (conjunction -> equality .)
    AS              reduce using rule 91 (conjunction -> equality .)
    OR              reduce using rule 91 (conjunction -> equality .)
    DIFERENTE       reduce using rule 91 (conjunction -> equality .)
    IDENTIDADE      reduce using rule 91 (conjunction -> equality .)
    IGUALDADE       reduce using rule 91 (conjunction -> equality .)
    SEMIDENTIDADE   reduce using rule 91 (conjunction -> equality .)
    MAIOR           reduce using rule 91 (conjunction -> equality .)
    IN              reduce using rule 91 (conjunction -> equality .)
    NOT_IN          reduce using rule 91 (conjunction -> equality .)
    IS              reduce using rule 91 (conjunction -> equality .)
    NOT_IS          reduce using rule 91 (conjunction -> equality .)
    ELVIS           reduce using rule 91 (conjunction -> equality .)
    PONTOPONTO      reduce using rule 91 (conjunction -> equality .)
    MULT            reduce using rule 91 (conjunction -> equality .)
    DIVIDE          reduce using rule 91 (conjunction -> equality .)
    MOD             reduce using rule 91 (conjunction -> equality .)
    LCHAVE          reduce using rule 91 (conjunction -> equality .)
    PV              reduce using rule 91 (conjunction -> equality .)
    ELSE            reduce using rule 91 (conjunction -> equality .)
    $end            reduce using rule 91 (conjunction -> equality .)
    COMMA           reduce using rule 91 (conjunction -> equality .)
    RPAREN          reduce using rule 91 (conjunction -> equality .)
    RCCT            reduce using rule 91 (conjunction -> equality .)
    AND             shift and go to state 173

  ! AND             [ reduce using rule 91 (conjunction -> equality .) ]


state 93

    (93) equality -> comparison .
    (94) equality -> comparison . equalityOperator equality
    (236) equalityOperator -> . DIFERENTE
    (237) equalityOperator -> . IDENTIDADE
    (238) equalityOperator -> . IGUALDADE
    (239) equalityOperator -> . SEMIDENTIDADE

  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for IDENTIDADE resolved as shift
  ! shift/reduce conflict for IGUALDADE resolved as shift
  ! shift/reduce conflict for SEMIDENTIDADE resolved as shift
    FUN             reduce using rule 93 (equality -> comparison .)
    FOR             reduce using rule 93 (equality -> comparison .)
    WHILE           reduce using rule 93 (equality -> comparison .)
    DO              reduce using rule 93 (equality -> comparison .)
    ID              reduce using rule 93 (equality -> comparison .)
    CROSSINLINE     reduce using rule 93 (equality -> comparison .)
    IMPORT          reduce using rule 93 (equality -> comparison .)
    INIT            reduce using rule 93 (equality -> comparison .)
    NOINLINE        reduce using rule 93 (equality -> comparison .)
    OUT             reduce using rule 93 (equality -> comparison .)
    VARARG          reduce using rule 93 (equality -> comparison .)
    WHERE           reduce using rule 93 (equality -> comparison .)
    LPAREN          reduce using rule 93 (equality -> comparison .)
    LITERAL_STRING  reduce using rule 93 (equality -> comparison .)
    DOISP           reduce using rule 93 (equality -> comparison .)
    LCCT            reduce using rule 93 (equality -> comparison .)
    IF              reduce using rule 93 (equality -> comparison .)
    RETURN          reduce using rule 93 (equality -> comparison .)
    RETURN_AT       reduce using rule 93 (equality -> comparison .)
    CONTINUE        reduce using rule 93 (equality -> comparison .)
    CONTINUE_AT     reduce using rule 93 (equality -> comparison .)
    BREAK           reduce using rule 93 (equality -> comparison .)
    BREAK_AT        reduce using rule 93 (equality -> comparison .)
    RCHAVE          reduce using rule 93 (equality -> comparison .)
    INCREMENTO      reduce using rule 93 (equality -> comparison .)
    DECREMENTO      reduce using rule 93 (equality -> comparison .)
    MINUS           reduce using rule 93 (equality -> comparison .)
    PLUS            reduce using rule 93 (equality -> comparison .)
    NOT             reduce using rule 93 (equality -> comparison .)
    SUSPEND         reduce using rule 93 (equality -> comparison .)
    MAIORIGUAL      reduce using rule 93 (equality -> comparison .)
    MENORIGUAL      reduce using rule 93 (equality -> comparison .)
    MULTIGUAL       reduce using rule 93 (equality -> comparison .)
    DIVIGUAL        reduce using rule 93 (equality -> comparison .)
    MODIGUAL        reduce using rule 93 (equality -> comparison .)
    MENOR           reduce using rule 93 (equality -> comparison .)
    PONTO           reduce using rule 93 (equality -> comparison .)
    COLONCOLON      reduce using rule 93 (equality -> comparison .)
    AS              reduce using rule 93 (equality -> comparison .)
    OR              reduce using rule 93 (equality -> comparison .)
    AND             reduce using rule 93 (equality -> comparison .)
    MAIOR           reduce using rule 93 (equality -> comparison .)
    IN              reduce using rule 93 (equality -> comparison .)
    NOT_IN          reduce using rule 93 (equality -> comparison .)
    IS              reduce using rule 93 (equality -> comparison .)
    NOT_IS          reduce using rule 93 (equality -> comparison .)
    ELVIS           reduce using rule 93 (equality -> comparison .)
    PONTOPONTO      reduce using rule 93 (equality -> comparison .)
    MULT            reduce using rule 93 (equality -> comparison .)
    DIVIDE          reduce using rule 93 (equality -> comparison .)
    MOD             reduce using rule 93 (equality -> comparison .)
    LCHAVE          reduce using rule 93 (equality -> comparison .)
    PV              reduce using rule 93 (equality -> comparison .)
    ELSE            reduce using rule 93 (equality -> comparison .)
    $end            reduce using rule 93 (equality -> comparison .)
    COMMA           reduce using rule 93 (equality -> comparison .)
    RPAREN          reduce using rule 93 (equality -> comparison .)
    RCCT            reduce using rule 93 (equality -> comparison .)
    DIFERENTE       shift and go to state 175
    IDENTIDADE      shift and go to state 176
    IGUALDADE       shift and go to state 177
    SEMIDENTIDADE   shift and go to state 178

  ! DIFERENTE       [ reduce using rule 93 (equality -> comparison .) ]
  ! IDENTIDADE      [ reduce using rule 93 (equality -> comparison .) ]
  ! IGUALDADE       [ reduce using rule 93 (equality -> comparison .) ]
  ! SEMIDENTIDADE   [ reduce using rule 93 (equality -> comparison .) ]

    equalityOperator               shift and go to state 174

state 94

    (95) comparison -> infixOperation .
    (96) comparison -> infixOperation . comparisonOperator infixOperation
    (240) comparisonOperator -> . MENOR
    (241) comparisonOperator -> . MAIOR
    (242) comparisonOperator -> . MENORIGUAL
    (243) comparisonOperator -> . MAIORIGUAL

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
    FUN             reduce using rule 95 (comparison -> infixOperation .)
    FOR             reduce using rule 95 (comparison -> infixOperation .)
    WHILE           reduce using rule 95 (comparison -> infixOperation .)
    DO              reduce using rule 95 (comparison -> infixOperation .)
    ID              reduce using rule 95 (comparison -> infixOperation .)
    CROSSINLINE     reduce using rule 95 (comparison -> infixOperation .)
    IMPORT          reduce using rule 95 (comparison -> infixOperation .)
    INIT            reduce using rule 95 (comparison -> infixOperation .)
    NOINLINE        reduce using rule 95 (comparison -> infixOperation .)
    OUT             reduce using rule 95 (comparison -> infixOperation .)
    VARARG          reduce using rule 95 (comparison -> infixOperation .)
    WHERE           reduce using rule 95 (comparison -> infixOperation .)
    LPAREN          reduce using rule 95 (comparison -> infixOperation .)
    LITERAL_STRING  reduce using rule 95 (comparison -> infixOperation .)
    DOISP           reduce using rule 95 (comparison -> infixOperation .)
    LCCT            reduce using rule 95 (comparison -> infixOperation .)
    IF              reduce using rule 95 (comparison -> infixOperation .)
    RETURN          reduce using rule 95 (comparison -> infixOperation .)
    RETURN_AT       reduce using rule 95 (comparison -> infixOperation .)
    CONTINUE        reduce using rule 95 (comparison -> infixOperation .)
    CONTINUE_AT     reduce using rule 95 (comparison -> infixOperation .)
    BREAK           reduce using rule 95 (comparison -> infixOperation .)
    BREAK_AT        reduce using rule 95 (comparison -> infixOperation .)
    RCHAVE          reduce using rule 95 (comparison -> infixOperation .)
    INCREMENTO      reduce using rule 95 (comparison -> infixOperation .)
    DECREMENTO      reduce using rule 95 (comparison -> infixOperation .)
    MINUS           reduce using rule 95 (comparison -> infixOperation .)
    PLUS            reduce using rule 95 (comparison -> infixOperation .)
    NOT             reduce using rule 95 (comparison -> infixOperation .)
    SUSPEND         reduce using rule 95 (comparison -> infixOperation .)
    MULTIGUAL       reduce using rule 95 (comparison -> infixOperation .)
    DIVIGUAL        reduce using rule 95 (comparison -> infixOperation .)
    MODIGUAL        reduce using rule 95 (comparison -> infixOperation .)
    PONTO           reduce using rule 95 (comparison -> infixOperation .)
    COLONCOLON      reduce using rule 95 (comparison -> infixOperation .)
    AS              reduce using rule 95 (comparison -> infixOperation .)
    OR              reduce using rule 95 (comparison -> infixOperation .)
    AND             reduce using rule 95 (comparison -> infixOperation .)
    DIFERENTE       reduce using rule 95 (comparison -> infixOperation .)
    IDENTIDADE      reduce using rule 95 (comparison -> infixOperation .)
    IGUALDADE       reduce using rule 95 (comparison -> infixOperation .)
    SEMIDENTIDADE   reduce using rule 95 (comparison -> infixOperation .)
    IN              reduce using rule 95 (comparison -> infixOperation .)
    NOT_IN          reduce using rule 95 (comparison -> infixOperation .)
    IS              reduce using rule 95 (comparison -> infixOperation .)
    NOT_IS          reduce using rule 95 (comparison -> infixOperation .)
    ELVIS           reduce using rule 95 (comparison -> infixOperation .)
    PONTOPONTO      reduce using rule 95 (comparison -> infixOperation .)
    MULT            reduce using rule 95 (comparison -> infixOperation .)
    DIVIDE          reduce using rule 95 (comparison -> infixOperation .)
    MOD             reduce using rule 95 (comparison -> infixOperation .)
    LCHAVE          reduce using rule 95 (comparison -> infixOperation .)
    PV              reduce using rule 95 (comparison -> infixOperation .)
    ELSE            reduce using rule 95 (comparison -> infixOperation .)
    $end            reduce using rule 95 (comparison -> infixOperation .)
    COMMA           reduce using rule 95 (comparison -> infixOperation .)
    RPAREN          reduce using rule 95 (comparison -> infixOperation .)
    RCCT            reduce using rule 95 (comparison -> infixOperation .)
    MENOR           shift and go to state 180
    MAIOR           shift and go to state 181
    MENORIGUAL      shift and go to state 182
    MAIORIGUAL      shift and go to state 183

  ! MAIORIGUAL      [ reduce using rule 95 (comparison -> infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 95 (comparison -> infixOperation .) ]
  ! MENOR           [ reduce using rule 95 (comparison -> infixOperation .) ]
  ! MAIOR           [ reduce using rule 95 (comparison -> infixOperation .) ]

    comparisonOperator             shift and go to state 179

state 95

    (97) infixOperation -> elvisExpression . io
    (98) io -> . inOperator elvisExpression
    (99) io -> . isOperator type
    (100) io -> .
    (244) inOperator -> . IN
    (245) inOperator -> . NOT_IN
    (246) isOperator -> . IS
    (247) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    FUN             reduce using rule 100 (io -> .)
    FOR             reduce using rule 100 (io -> .)
    WHILE           reduce using rule 100 (io -> .)
    DO              reduce using rule 100 (io -> .)
    ID              reduce using rule 100 (io -> .)
    CROSSINLINE     reduce using rule 100 (io -> .)
    IMPORT          reduce using rule 100 (io -> .)
    INIT            reduce using rule 100 (io -> .)
    NOINLINE        reduce using rule 100 (io -> .)
    OUT             reduce using rule 100 (io -> .)
    VARARG          reduce using rule 100 (io -> .)
    WHERE           reduce using rule 100 (io -> .)
    LPAREN          reduce using rule 100 (io -> .)
    LITERAL_STRING  reduce using rule 100 (io -> .)
    DOISP           reduce using rule 100 (io -> .)
    LCCT            reduce using rule 100 (io -> .)
    IF              reduce using rule 100 (io -> .)
    RETURN          reduce using rule 100 (io -> .)
    RETURN_AT       reduce using rule 100 (io -> .)
    CONTINUE        reduce using rule 100 (io -> .)
    CONTINUE_AT     reduce using rule 100 (io -> .)
    BREAK           reduce using rule 100 (io -> .)
    BREAK_AT        reduce using rule 100 (io -> .)
    RCHAVE          reduce using rule 100 (io -> .)
    INCREMENTO      reduce using rule 100 (io -> .)
    DECREMENTO      reduce using rule 100 (io -> .)
    MINUS           reduce using rule 100 (io -> .)
    PLUS            reduce using rule 100 (io -> .)
    NOT             reduce using rule 100 (io -> .)
    SUSPEND         reduce using rule 100 (io -> .)
    MAIORIGUAL      reduce using rule 100 (io -> .)
    MENORIGUAL      reduce using rule 100 (io -> .)
    MULTIGUAL       reduce using rule 100 (io -> .)
    DIVIGUAL        reduce using rule 100 (io -> .)
    MODIGUAL        reduce using rule 100 (io -> .)
    MENOR           reduce using rule 100 (io -> .)
    PONTO           reduce using rule 100 (io -> .)
    COLONCOLON      reduce using rule 100 (io -> .)
    AS              reduce using rule 100 (io -> .)
    OR              reduce using rule 100 (io -> .)
    AND             reduce using rule 100 (io -> .)
    DIFERENTE       reduce using rule 100 (io -> .)
    IDENTIDADE      reduce using rule 100 (io -> .)
    IGUALDADE       reduce using rule 100 (io -> .)
    SEMIDENTIDADE   reduce using rule 100 (io -> .)
    MAIOR           reduce using rule 100 (io -> .)
    ELVIS           reduce using rule 100 (io -> .)
    PONTOPONTO      reduce using rule 100 (io -> .)
    MULT            reduce using rule 100 (io -> .)
    DIVIDE          reduce using rule 100 (io -> .)
    MOD             reduce using rule 100 (io -> .)
    LCHAVE          reduce using rule 100 (io -> .)
    PV              reduce using rule 100 (io -> .)
    ELSE            reduce using rule 100 (io -> .)
    $end            reduce using rule 100 (io -> .)
    COMMA           reduce using rule 100 (io -> .)
    RPAREN          reduce using rule 100 (io -> .)
    RCCT            reduce using rule 100 (io -> .)
    IN              shift and go to state 187
    NOT_IN          shift and go to state 188
    IS              shift and go to state 189
    NOT_IS          shift and go to state 190

  ! IN              [ reduce using rule 100 (io -> .) ]
  ! NOT_IN          [ reduce using rule 100 (io -> .) ]
  ! IS              [ reduce using rule 100 (io -> .) ]
  ! NOT_IS          [ reduce using rule 100 (io -> .) ]

    io                             shift and go to state 184
    inOperator                     shift and go to state 185
    isOperator                     shift and go to state 186

state 96

    (101) elvisExpression -> infixFunctionCall .
    (102) elvisExpression -> infixFunctionCall . ELVIS elvisExpression

  ! shift/reduce conflict for ELVIS resolved as shift
    FUN             reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    FOR             reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    WHILE           reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    DO              reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    ID              reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    CROSSINLINE     reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    IMPORT          reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    INIT            reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    NOINLINE        reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    OUT             reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    VARARG          reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    WHERE           reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    LPAREN          reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    LITERAL_STRING  reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    DOISP           reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    LCCT            reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    IF              reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    RETURN          reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    RETURN_AT       reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    CONTINUE        reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    CONTINUE_AT     reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    BREAK           reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    BREAK_AT        reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    RCHAVE          reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    INCREMENTO      reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    DECREMENTO      reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    MINUS           reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    PLUS            reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    NOT             reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    SUSPEND         reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    MAIORIGUAL      reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    MENORIGUAL      reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    MULTIGUAL       reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    DIVIGUAL        reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    MODIGUAL        reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    MENOR           reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    PONTO           reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    COLONCOLON      reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    AS              reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    OR              reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    AND             reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    DIFERENTE       reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    IDENTIDADE      reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    IGUALDADE       reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    MAIOR           reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    IN              reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    NOT_IN          reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    IS              reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    NOT_IS          reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    PONTOPONTO      reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    MULT            reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    DIVIDE          reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    MOD             reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    LCHAVE          reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    PV              reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    ELSE            reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    $end            reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    COMMA           reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    RPAREN          reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    RCCT            reduce using rule 101 (elvisExpression -> infixFunctionCall .)
    ELVIS           shift and go to state 191

  ! ELVIS           [ reduce using rule 101 (elvisExpression -> infixFunctionCall .) ]


state 97

    (104) infixFunctionCall -> rangeExpression .
    (105) infixFunctionCall -> rangeExpression . simpleIdentifier infixFunctionCall
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    FOR             reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    WHILE           reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    DO              reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    LPAREN          reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    LITERAL_STRING  reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    DOISP           reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    LCCT            reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    IF              reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    RETURN          reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    RETURN_AT       reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    CONTINUE        reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    CONTINUE_AT     reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    BREAK           reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    BREAK_AT        reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    RCHAVE          reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    INCREMENTO      reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    DECREMENTO      reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    MINUS           reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    PLUS            reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    NOT             reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    SUSPEND         reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    MAIORIGUAL      reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    MENORIGUAL      reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    MULTIGUAL       reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    DIVIGUAL        reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    MODIGUAL        reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    MENOR           reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    PONTO           reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    COLONCOLON      reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    AS              reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    OR              reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    AND             reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    DIFERENTE       reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    IDENTIDADE      reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    IGUALDADE       reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    SEMIDENTIDADE   reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    MAIOR           reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    IN              reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    NOT_IN          reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    IS              reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    NOT_IS          reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    ELVIS           reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    PONTOPONTO      reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    MULT            reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    DIVIDE          reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    MOD             reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    LCHAVE          reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    PV              reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    ELSE            reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    $end            reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    COMMA           reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    RPAREN          reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    RCCT            reduce using rule 104 (infixFunctionCall -> rangeExpression .)
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 104 (infixFunctionCall -> rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 104 (infixFunctionCall -> rangeExpression .) ]
  ! IMPORT          [ reduce using rule 104 (infixFunctionCall -> rangeExpression .) ]
  ! INIT            [ reduce using rule 104 (infixFunctionCall -> rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 104 (infixFunctionCall -> rangeExpression .) ]
  ! OUT             [ reduce using rule 104 (infixFunctionCall -> rangeExpression .) ]
  ! VARARG          [ reduce using rule 104 (infixFunctionCall -> rangeExpression .) ]
  ! WHERE           [ reduce using rule 104 (infixFunctionCall -> rangeExpression .) ]

    simpleIdentifier               shift and go to state 192

state 98

    (120) label -> simpleIdentifier .

    INCREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    MINUS           reduce using rule 120 (label -> simpleIdentifier .)
    PLUS            reduce using rule 120 (label -> simpleIdentifier .)
    NOT             reduce using rule 120 (label -> simpleIdentifier .)
    ID              reduce using rule 120 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 120 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 120 (label -> simpleIdentifier .)
    INIT            reduce using rule 120 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 120 (label -> simpleIdentifier .)
    OUT             reduce using rule 120 (label -> simpleIdentifier .)
    VARARG          reduce using rule 120 (label -> simpleIdentifier .)
    WHERE           reduce using rule 120 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 120 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 120 (label -> simpleIdentifier .)
    DOISP           reduce using rule 120 (label -> simpleIdentifier .)
    LCCT            reduce using rule 120 (label -> simpleIdentifier .)
    IF              reduce using rule 120 (label -> simpleIdentifier .)
    RETURN          reduce using rule 120 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 120 (label -> simpleIdentifier .)
    BREAK           reduce using rule 120 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 120 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 120 (label -> simpleIdentifier .)
    FUN             reduce using rule 120 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 120 (label -> simpleIdentifier .)
    MENOR           reduce using rule 120 (label -> simpleIdentifier .)
    PONTO           reduce using rule 120 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 120 (label -> simpleIdentifier .)
    OR              reduce using rule 120 (label -> simpleIdentifier .)
    AND             reduce using rule 120 (label -> simpleIdentifier .)
    DIFERENTE       reduce using rule 120 (label -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 120 (label -> simpleIdentifier .)
    IGUALDADE       reduce using rule 120 (label -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 120 (label -> simpleIdentifier .)
    MAIOR           reduce using rule 120 (label -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    IN              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IN          reduce using rule 120 (label -> simpleIdentifier .)
    IS              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IS          reduce using rule 120 (label -> simpleIdentifier .)
    ELVIS           reduce using rule 120 (label -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 120 (label -> simpleIdentifier .)
    MULT            reduce using rule 120 (label -> simpleIdentifier .)
    DIVIDE          reduce using rule 120 (label -> simpleIdentifier .)
    MOD             reduce using rule 120 (label -> simpleIdentifier .)
    AS              reduce using rule 120 (label -> simpleIdentifier .)
    FOR             reduce using rule 120 (label -> simpleIdentifier .)
    WHILE           reduce using rule 120 (label -> simpleIdentifier .)
    DO              reduce using rule 120 (label -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 120 (label -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 120 (label -> simpleIdentifier .)
    MODIGUAL        reduce using rule 120 (label -> simpleIdentifier .)
    LCHAVE          reduce using rule 120 (label -> simpleIdentifier .)
    PV              reduce using rule 120 (label -> simpleIdentifier .)
    ELSE            reduce using rule 120 (label -> simpleIdentifier .)
    $end            reduce using rule 120 (label -> simpleIdentifier .)
    COMMA           reduce using rule 120 (label -> simpleIdentifier .)
    RPAREN          reduce using rule 120 (label -> simpleIdentifier .)
    RCCT            reduce using rule 120 (label -> simpleIdentifier .)


state 99

    (106) rangeExpression -> additiveExpression .
    (107) rangeExpression -> additiveExpression . PONTOPONTO rangeExpression

  ! shift/reduce conflict for PONTOPONTO resolved as shift
    FUN             reduce using rule 106 (rangeExpression -> additiveExpression .)
    FOR             reduce using rule 106 (rangeExpression -> additiveExpression .)
    WHILE           reduce using rule 106 (rangeExpression -> additiveExpression .)
    DO              reduce using rule 106 (rangeExpression -> additiveExpression .)
    ID              reduce using rule 106 (rangeExpression -> additiveExpression .)
    CROSSINLINE     reduce using rule 106 (rangeExpression -> additiveExpression .)
    IMPORT          reduce using rule 106 (rangeExpression -> additiveExpression .)
    INIT            reduce using rule 106 (rangeExpression -> additiveExpression .)
    NOINLINE        reduce using rule 106 (rangeExpression -> additiveExpression .)
    OUT             reduce using rule 106 (rangeExpression -> additiveExpression .)
    VARARG          reduce using rule 106 (rangeExpression -> additiveExpression .)
    WHERE           reduce using rule 106 (rangeExpression -> additiveExpression .)
    LPAREN          reduce using rule 106 (rangeExpression -> additiveExpression .)
    LITERAL_STRING  reduce using rule 106 (rangeExpression -> additiveExpression .)
    DOISP           reduce using rule 106 (rangeExpression -> additiveExpression .)
    LCCT            reduce using rule 106 (rangeExpression -> additiveExpression .)
    IF              reduce using rule 106 (rangeExpression -> additiveExpression .)
    RETURN          reduce using rule 106 (rangeExpression -> additiveExpression .)
    RETURN_AT       reduce using rule 106 (rangeExpression -> additiveExpression .)
    CONTINUE        reduce using rule 106 (rangeExpression -> additiveExpression .)
    CONTINUE_AT     reduce using rule 106 (rangeExpression -> additiveExpression .)
    BREAK           reduce using rule 106 (rangeExpression -> additiveExpression .)
    BREAK_AT        reduce using rule 106 (rangeExpression -> additiveExpression .)
    RCHAVE          reduce using rule 106 (rangeExpression -> additiveExpression .)
    INCREMENTO      reduce using rule 106 (rangeExpression -> additiveExpression .)
    DECREMENTO      reduce using rule 106 (rangeExpression -> additiveExpression .)
    MINUS           reduce using rule 106 (rangeExpression -> additiveExpression .)
    PLUS            reduce using rule 106 (rangeExpression -> additiveExpression .)
    NOT             reduce using rule 106 (rangeExpression -> additiveExpression .)
    SUSPEND         reduce using rule 106 (rangeExpression -> additiveExpression .)
    MAIORIGUAL      reduce using rule 106 (rangeExpression -> additiveExpression .)
    MENORIGUAL      reduce using rule 106 (rangeExpression -> additiveExpression .)
    MULTIGUAL       reduce using rule 106 (rangeExpression -> additiveExpression .)
    DIVIGUAL        reduce using rule 106 (rangeExpression -> additiveExpression .)
    MODIGUAL        reduce using rule 106 (rangeExpression -> additiveExpression .)
    MENOR           reduce using rule 106 (rangeExpression -> additiveExpression .)
    PONTO           reduce using rule 106 (rangeExpression -> additiveExpression .)
    COLONCOLON      reduce using rule 106 (rangeExpression -> additiveExpression .)
    AS              reduce using rule 106 (rangeExpression -> additiveExpression .)
    OR              reduce using rule 106 (rangeExpression -> additiveExpression .)
    AND             reduce using rule 106 (rangeExpression -> additiveExpression .)
    DIFERENTE       reduce using rule 106 (rangeExpression -> additiveExpression .)
    IDENTIDADE      reduce using rule 106 (rangeExpression -> additiveExpression .)
    IGUALDADE       reduce using rule 106 (rangeExpression -> additiveExpression .)
    SEMIDENTIDADE   reduce using rule 106 (rangeExpression -> additiveExpression .)
    MAIOR           reduce using rule 106 (rangeExpression -> additiveExpression .)
    IN              reduce using rule 106 (rangeExpression -> additiveExpression .)
    NOT_IN          reduce using rule 106 (rangeExpression -> additiveExpression .)
    IS              reduce using rule 106 (rangeExpression -> additiveExpression .)
    NOT_IS          reduce using rule 106 (rangeExpression -> additiveExpression .)
    ELVIS           reduce using rule 106 (rangeExpression -> additiveExpression .)
    MULT            reduce using rule 106 (rangeExpression -> additiveExpression .)
    DIVIDE          reduce using rule 106 (rangeExpression -> additiveExpression .)
    MOD             reduce using rule 106 (rangeExpression -> additiveExpression .)
    LCHAVE          reduce using rule 106 (rangeExpression -> additiveExpression .)
    PV              reduce using rule 106 (rangeExpression -> additiveExpression .)
    ELSE            reduce using rule 106 (rangeExpression -> additiveExpression .)
    $end            reduce using rule 106 (rangeExpression -> additiveExpression .)
    COMMA           reduce using rule 106 (rangeExpression -> additiveExpression .)
    RPAREN          reduce using rule 106 (rangeExpression -> additiveExpression .)
    RCCT            reduce using rule 106 (rangeExpression -> additiveExpression .)
    PONTOPONTO      shift and go to state 193

  ! PONTOPONTO      [ reduce using rule 106 (rangeExpression -> additiveExpression .) ]


state 100

    (108) additiveExpression -> multiplicativeExpression .
    (109) additiveExpression -> multiplicativeExpression . additiveOperator additiveExpression
    (248) additiveOperator -> . PLUS
    (249) additiveOperator -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    FUN             reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    FOR             reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    WHILE           reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    DO              reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    ID              reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    CROSSINLINE     reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    IMPORT          reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    INIT            reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    NOINLINE        reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    OUT             reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    VARARG          reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    WHERE           reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    LPAREN          reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    DOISP           reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    LCCT            reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    IF              reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    RETURN          reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    RETURN_AT       reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    CONTINUE        reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    BREAK           reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    BREAK_AT        reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    RCHAVE          reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    INCREMENTO      reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    DECREMENTO      reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    NOT             reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    SUSPEND         reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    MENORIGUAL      reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    MULTIGUAL       reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    DIVIGUAL        reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    MODIGUAL        reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    MENOR           reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    PONTO           reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    COLONCOLON      reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    AS              reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    DIFERENTE       reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    IDENTIDADE      reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    IGUALDADE       reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    MAIOR           reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    IN              reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    NOT_IN          reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    IS              reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    NOT_IS          reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    ELVIS           reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    PONTOPONTO      reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    MULT            reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    DIVIDE          reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    MOD             reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    LCHAVE          reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    PV              reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    ELSE            reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    $end            reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    COMMA           reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    RCCT            reduce using rule 108 (additiveExpression -> multiplicativeExpression .)
    PLUS            shift and go to state 195
    MINUS           shift and go to state 196

  ! MINUS           [ reduce using rule 108 (additiveExpression -> multiplicativeExpression .) ]
  ! PLUS            [ reduce using rule 108 (additiveExpression -> multiplicativeExpression .) ]

    additiveOperator               shift and go to state 194

state 101

    (110) multiplicativeExpression -> asExpression .
    (111) multiplicativeExpression -> asExpression . multiplicativeOperator multiplicativeExpression
    (250) multiplicativeOperator -> . MULT
    (251) multiplicativeOperator -> . DIVIDE
    (252) multiplicativeOperator -> . MOD

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    FUN             reduce using rule 110 (multiplicativeExpression -> asExpression .)
    FOR             reduce using rule 110 (multiplicativeExpression -> asExpression .)
    WHILE           reduce using rule 110 (multiplicativeExpression -> asExpression .)
    DO              reduce using rule 110 (multiplicativeExpression -> asExpression .)
    ID              reduce using rule 110 (multiplicativeExpression -> asExpression .)
    CROSSINLINE     reduce using rule 110 (multiplicativeExpression -> asExpression .)
    IMPORT          reduce using rule 110 (multiplicativeExpression -> asExpression .)
    INIT            reduce using rule 110 (multiplicativeExpression -> asExpression .)
    NOINLINE        reduce using rule 110 (multiplicativeExpression -> asExpression .)
    OUT             reduce using rule 110 (multiplicativeExpression -> asExpression .)
    VARARG          reduce using rule 110 (multiplicativeExpression -> asExpression .)
    WHERE           reduce using rule 110 (multiplicativeExpression -> asExpression .)
    LPAREN          reduce using rule 110 (multiplicativeExpression -> asExpression .)
    LITERAL_STRING  reduce using rule 110 (multiplicativeExpression -> asExpression .)
    DOISP           reduce using rule 110 (multiplicativeExpression -> asExpression .)
    LCCT            reduce using rule 110 (multiplicativeExpression -> asExpression .)
    IF              reduce using rule 110 (multiplicativeExpression -> asExpression .)
    RETURN          reduce using rule 110 (multiplicativeExpression -> asExpression .)
    RETURN_AT       reduce using rule 110 (multiplicativeExpression -> asExpression .)
    CONTINUE        reduce using rule 110 (multiplicativeExpression -> asExpression .)
    CONTINUE_AT     reduce using rule 110 (multiplicativeExpression -> asExpression .)
    BREAK           reduce using rule 110 (multiplicativeExpression -> asExpression .)
    BREAK_AT        reduce using rule 110 (multiplicativeExpression -> asExpression .)
    RCHAVE          reduce using rule 110 (multiplicativeExpression -> asExpression .)
    INCREMENTO      reduce using rule 110 (multiplicativeExpression -> asExpression .)
    DECREMENTO      reduce using rule 110 (multiplicativeExpression -> asExpression .)
    MINUS           reduce using rule 110 (multiplicativeExpression -> asExpression .)
    PLUS            reduce using rule 110 (multiplicativeExpression -> asExpression .)
    NOT             reduce using rule 110 (multiplicativeExpression -> asExpression .)
    SUSPEND         reduce using rule 110 (multiplicativeExpression -> asExpression .)
    MAIORIGUAL      reduce using rule 110 (multiplicativeExpression -> asExpression .)
    MENORIGUAL      reduce using rule 110 (multiplicativeExpression -> asExpression .)
    MULTIGUAL       reduce using rule 110 (multiplicativeExpression -> asExpression .)
    DIVIGUAL        reduce using rule 110 (multiplicativeExpression -> asExpression .)
    MODIGUAL        reduce using rule 110 (multiplicativeExpression -> asExpression .)
    MENOR           reduce using rule 110 (multiplicativeExpression -> asExpression .)
    PONTO           reduce using rule 110 (multiplicativeExpression -> asExpression .)
    COLONCOLON      reduce using rule 110 (multiplicativeExpression -> asExpression .)
    AS              reduce using rule 110 (multiplicativeExpression -> asExpression .)
    OR              reduce using rule 110 (multiplicativeExpression -> asExpression .)
    AND             reduce using rule 110 (multiplicativeExpression -> asExpression .)
    DIFERENTE       reduce using rule 110 (multiplicativeExpression -> asExpression .)
    IDENTIDADE      reduce using rule 110 (multiplicativeExpression -> asExpression .)
    IGUALDADE       reduce using rule 110 (multiplicativeExpression -> asExpression .)
    SEMIDENTIDADE   reduce using rule 110 (multiplicativeExpression -> asExpression .)
    MAIOR           reduce using rule 110 (multiplicativeExpression -> asExpression .)
    IN              reduce using rule 110 (multiplicativeExpression -> asExpression .)
    NOT_IN          reduce using rule 110 (multiplicativeExpression -> asExpression .)
    IS              reduce using rule 110 (multiplicativeExpression -> asExpression .)
    NOT_IS          reduce using rule 110 (multiplicativeExpression -> asExpression .)
    ELVIS           reduce using rule 110 (multiplicativeExpression -> asExpression .)
    PONTOPONTO      reduce using rule 110 (multiplicativeExpression -> asExpression .)
    LCHAVE          reduce using rule 110 (multiplicativeExpression -> asExpression .)
    PV              reduce using rule 110 (multiplicativeExpression -> asExpression .)
    ELSE            reduce using rule 110 (multiplicativeExpression -> asExpression .)
    $end            reduce using rule 110 (multiplicativeExpression -> asExpression .)
    COMMA           reduce using rule 110 (multiplicativeExpression -> asExpression .)
    RPAREN          reduce using rule 110 (multiplicativeExpression -> asExpression .)
    RCCT            reduce using rule 110 (multiplicativeExpression -> asExpression .)
    MULT            shift and go to state 198
    DIVIDE          shift and go to state 199
    MOD             shift and go to state 200

  ! MULT            [ reduce using rule 110 (multiplicativeExpression -> asExpression .) ]
  ! DIVIDE          [ reduce using rule 110 (multiplicativeExpression -> asExpression .) ]
  ! MOD             [ reduce using rule 110 (multiplicativeExpression -> asExpression .) ]

    multiplicativeOperator         shift and go to state 197

state 102

    (112) asExpression -> prefixUnaryExpression .
    (113) asExpression -> prefixUnaryExpression . asOperator type
    (253) asOperator -> . AS
    (254) asOperator -> . AS asOperator

  ! shift/reduce conflict for AS resolved as shift
    FUN             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    FOR             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    WHILE           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DO              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    ID              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    CROSSINLINE     reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IMPORT          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    INIT            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    NOINLINE        reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    OUT             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    VARARG          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    WHERE           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    LPAREN          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    LITERAL_STRING  reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DOISP           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    LCCT            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IF              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    RETURN          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    RETURN_AT       reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    CONTINUE        reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    CONTINUE_AT     reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    BREAK           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    BREAK_AT        reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    RCHAVE          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    INCREMENTO      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DECREMENTO      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MINUS           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    PLUS            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    NOT             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    SUSPEND         reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MAIORIGUAL      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MENORIGUAL      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MULTIGUAL       reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DIVIGUAL        reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MODIGUAL        reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MENOR           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    PONTO           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    COLONCOLON      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    OR              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    AND             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DIFERENTE       reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IDENTIDADE      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IGUALDADE       reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MAIOR           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IN              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    NOT_IN          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IS              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    NOT_IS          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    ELVIS           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    PONTOPONTO      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MULT            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DIVIDE          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MOD             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    LCHAVE          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    PV              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    ELSE            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    $end            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    RPAREN          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    RCCT            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    AS              shift and go to state 202

  ! AS              [ reduce using rule 112 (asExpression -> prefixUnaryExpression .) ]

    asOperator                     shift and go to state 201

state 103

    (114) prefixUnaryExpression -> preue . postfixUnaryExpression
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (88) expression -> . disjunction
    (41) typeModifier -> . SUSPEND
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT

  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    LITERAL_STRING  shift and go to state 138
    LPAREN          shift and go to state 205
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    FUN             shift and go to state 207
    SUSPEND         shift and go to state 11
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111

  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    preue                          shift and go to state 103
    postfixUnaryExpression         shift and go to state 203
    primaryExpression              shift and go to state 135
    parenthesizedExpression        shift and go to state 137
    simpleIdentifier               shift and go to state 204
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    expression                     shift and go to state 206
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    typeModifier                   shift and go to state 10
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 104

    (115) preue -> unaryPrefix .
    (116) preue -> unaryPrefix . preue
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for LPAREN resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for ID resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for IMPORT resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for INIT resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for OUT resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for VARARG resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for WHERE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for DOISP resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for LCCT resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for IF resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for RETURN resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for BREAK resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for FUN resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for MINUS resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for PLUS resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for NOT resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for MENOR resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for PONTO resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for OR resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for AND resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for MAIOR resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for IN resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for IS resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for ELVIS resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for MULT resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for MOD resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for AS resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for FOR resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for WHILE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for DO resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for PV resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for ELSE resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for $end resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for COMMA resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for RPAREN resolved using rule 115 (preue -> unaryPrefix .)
  ! reduce/reduce conflict for RCCT resolved using rule 115 (preue -> unaryPrefix .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    LITERAL_STRING  reduce using rule 115 (preue -> unaryPrefix .)
    LPAREN          reduce using rule 115 (preue -> unaryPrefix .)
    DOISP           reduce using rule 115 (preue -> unaryPrefix .)
    LCCT            reduce using rule 115 (preue -> unaryPrefix .)
    IF              reduce using rule 115 (preue -> unaryPrefix .)
    RETURN          reduce using rule 115 (preue -> unaryPrefix .)
    RETURN_AT       reduce using rule 115 (preue -> unaryPrefix .)
    CONTINUE        reduce using rule 115 (preue -> unaryPrefix .)
    CONTINUE_AT     reduce using rule 115 (preue -> unaryPrefix .)
    BREAK           reduce using rule 115 (preue -> unaryPrefix .)
    BREAK_AT        reduce using rule 115 (preue -> unaryPrefix .)
    RCHAVE          reduce using rule 115 (preue -> unaryPrefix .)
    FUN             reduce using rule 115 (preue -> unaryPrefix .)
    SUSPEND         reduce using rule 115 (preue -> unaryPrefix .)
    MENOR           reduce using rule 115 (preue -> unaryPrefix .)
    PONTO           reduce using rule 115 (preue -> unaryPrefix .)
    COLONCOLON      reduce using rule 115 (preue -> unaryPrefix .)
    OR              reduce using rule 115 (preue -> unaryPrefix .)
    AND             reduce using rule 115 (preue -> unaryPrefix .)
    DIFERENTE       reduce using rule 115 (preue -> unaryPrefix .)
    IDENTIDADE      reduce using rule 115 (preue -> unaryPrefix .)
    IGUALDADE       reduce using rule 115 (preue -> unaryPrefix .)
    SEMIDENTIDADE   reduce using rule 115 (preue -> unaryPrefix .)
    MAIOR           reduce using rule 115 (preue -> unaryPrefix .)
    MENORIGUAL      reduce using rule 115 (preue -> unaryPrefix .)
    MAIORIGUAL      reduce using rule 115 (preue -> unaryPrefix .)
    IN              reduce using rule 115 (preue -> unaryPrefix .)
    NOT_IN          reduce using rule 115 (preue -> unaryPrefix .)
    IS              reduce using rule 115 (preue -> unaryPrefix .)
    NOT_IS          reduce using rule 115 (preue -> unaryPrefix .)
    ELVIS           reduce using rule 115 (preue -> unaryPrefix .)
    PONTOPONTO      reduce using rule 115 (preue -> unaryPrefix .)
    MULT            reduce using rule 115 (preue -> unaryPrefix .)
    DIVIDE          reduce using rule 115 (preue -> unaryPrefix .)
    MOD             reduce using rule 115 (preue -> unaryPrefix .)
    AS              reduce using rule 115 (preue -> unaryPrefix .)
    FOR             reduce using rule 115 (preue -> unaryPrefix .)
    WHILE           reduce using rule 115 (preue -> unaryPrefix .)
    DO              reduce using rule 115 (preue -> unaryPrefix .)
    MULTIGUAL       reduce using rule 115 (preue -> unaryPrefix .)
    DIVIGUAL        reduce using rule 115 (preue -> unaryPrefix .)
    MODIGUAL        reduce using rule 115 (preue -> unaryPrefix .)
    LCHAVE          reduce using rule 115 (preue -> unaryPrefix .)
    PV              reduce using rule 115 (preue -> unaryPrefix .)
    ELSE            reduce using rule 115 (preue -> unaryPrefix .)
    $end            reduce using rule 115 (preue -> unaryPrefix .)
    COMMA           reduce using rule 115 (preue -> unaryPrefix .)
    RPAREN          reduce using rule 115 (preue -> unaryPrefix .)
    RCCT            reduce using rule 115 (preue -> unaryPrefix .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! CROSSINLINE     [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! IMPORT          [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! INIT            [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! NOINLINE        [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! OUT             [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! VARARG          [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! WHERE           [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! INCREMENTO      [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! DECREMENTO      [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! MINUS           [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! PLUS            [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! NOT             [ reduce using rule 115 (preue -> unaryPrefix .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    unaryPrefix                    shift and go to state 104
    preue                          shift and go to state 208
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    simpleIdentifier               shift and go to state 98

state 105

    (118) unaryPrefix -> label .

    INCREMENTO      reduce using rule 118 (unaryPrefix -> label .)
    DECREMENTO      reduce using rule 118 (unaryPrefix -> label .)
    MINUS           reduce using rule 118 (unaryPrefix -> label .)
    PLUS            reduce using rule 118 (unaryPrefix -> label .)
    NOT             reduce using rule 118 (unaryPrefix -> label .)
    ID              reduce using rule 118 (unaryPrefix -> label .)
    CROSSINLINE     reduce using rule 118 (unaryPrefix -> label .)
    IMPORT          reduce using rule 118 (unaryPrefix -> label .)
    INIT            reduce using rule 118 (unaryPrefix -> label .)
    NOINLINE        reduce using rule 118 (unaryPrefix -> label .)
    OUT             reduce using rule 118 (unaryPrefix -> label .)
    VARARG          reduce using rule 118 (unaryPrefix -> label .)
    WHERE           reduce using rule 118 (unaryPrefix -> label .)
    LITERAL_STRING  reduce using rule 118 (unaryPrefix -> label .)
    LPAREN          reduce using rule 118 (unaryPrefix -> label .)
    DOISP           reduce using rule 118 (unaryPrefix -> label .)
    LCCT            reduce using rule 118 (unaryPrefix -> label .)
    IF              reduce using rule 118 (unaryPrefix -> label .)
    RETURN          reduce using rule 118 (unaryPrefix -> label .)
    RETURN_AT       reduce using rule 118 (unaryPrefix -> label .)
    CONTINUE        reduce using rule 118 (unaryPrefix -> label .)
    CONTINUE_AT     reduce using rule 118 (unaryPrefix -> label .)
    BREAK           reduce using rule 118 (unaryPrefix -> label .)
    BREAK_AT        reduce using rule 118 (unaryPrefix -> label .)
    RCHAVE          reduce using rule 118 (unaryPrefix -> label .)
    FUN             reduce using rule 118 (unaryPrefix -> label .)
    SUSPEND         reduce using rule 118 (unaryPrefix -> label .)
    MENOR           reduce using rule 118 (unaryPrefix -> label .)
    PONTO           reduce using rule 118 (unaryPrefix -> label .)
    COLONCOLON      reduce using rule 118 (unaryPrefix -> label .)
    OR              reduce using rule 118 (unaryPrefix -> label .)
    AND             reduce using rule 118 (unaryPrefix -> label .)
    DIFERENTE       reduce using rule 118 (unaryPrefix -> label .)
    IDENTIDADE      reduce using rule 118 (unaryPrefix -> label .)
    IGUALDADE       reduce using rule 118 (unaryPrefix -> label .)
    SEMIDENTIDADE   reduce using rule 118 (unaryPrefix -> label .)
    MAIOR           reduce using rule 118 (unaryPrefix -> label .)
    MENORIGUAL      reduce using rule 118 (unaryPrefix -> label .)
    MAIORIGUAL      reduce using rule 118 (unaryPrefix -> label .)
    IN              reduce using rule 118 (unaryPrefix -> label .)
    NOT_IN          reduce using rule 118 (unaryPrefix -> label .)
    IS              reduce using rule 118 (unaryPrefix -> label .)
    NOT_IS          reduce using rule 118 (unaryPrefix -> label .)
    ELVIS           reduce using rule 118 (unaryPrefix -> label .)
    PONTOPONTO      reduce using rule 118 (unaryPrefix -> label .)
    MULT            reduce using rule 118 (unaryPrefix -> label .)
    DIVIDE          reduce using rule 118 (unaryPrefix -> label .)
    MOD             reduce using rule 118 (unaryPrefix -> label .)
    AS              reduce using rule 118 (unaryPrefix -> label .)
    FOR             reduce using rule 118 (unaryPrefix -> label .)
    WHILE           reduce using rule 118 (unaryPrefix -> label .)
    DO              reduce using rule 118 (unaryPrefix -> label .)
    MULTIGUAL       reduce using rule 118 (unaryPrefix -> label .)
    DIVIGUAL        reduce using rule 118 (unaryPrefix -> label .)
    MODIGUAL        reduce using rule 118 (unaryPrefix -> label .)
    LCHAVE          reduce using rule 118 (unaryPrefix -> label .)
    PV              reduce using rule 118 (unaryPrefix -> label .)
    ELSE            reduce using rule 118 (unaryPrefix -> label .)
    $end            reduce using rule 118 (unaryPrefix -> label .)
    COMMA           reduce using rule 118 (unaryPrefix -> label .)
    RPAREN          reduce using rule 118 (unaryPrefix -> label .)
    RCCT            reduce using rule 118 (unaryPrefix -> label .)


state 106

    (119) unaryPrefix -> prefixUnaryOperator .

    INCREMENTO      reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    DECREMENTO      reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    MINUS           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    PLUS            reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    NOT             reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    ID              reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    CROSSINLINE     reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    IMPORT          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    INIT            reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    NOINLINE        reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    OUT             reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    VARARG          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    WHERE           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    LITERAL_STRING  reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    LPAREN          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    DOISP           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    LCCT            reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    IF              reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    RETURN          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    RETURN_AT       reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE        reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE_AT     reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    BREAK           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    BREAK_AT        reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    RCHAVE          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    FUN             reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    SUSPEND         reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    MENOR           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    PONTO           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    COLONCOLON      reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    OR              reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    AND             reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    DIFERENTE       reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    IDENTIDADE      reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    IGUALDADE       reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    SEMIDENTIDADE   reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    MAIOR           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    MENORIGUAL      reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    MAIORIGUAL      reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    IN              reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    NOT_IN          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    IS              reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    NOT_IS          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    ELVIS           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    PONTOPONTO      reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    MULT            reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    DIVIDE          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    MOD             reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    AS              reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    FOR             reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    WHILE           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    DO              reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    MULTIGUAL       reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    DIVIGUAL        reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    MODIGUAL        reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    LCHAVE          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    PV              reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    ELSE            reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    $end            reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    COMMA           reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    RPAREN          reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)
    RCCT            reduce using rule 119 (unaryPrefix -> prefixUnaryOperator .)


state 107

    (255) prefixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    DOISP           reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    MENOR           reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    PONTO           reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    OR              reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    AND             reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    DIFERENTE       reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    IDENTIDADE      reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    IGUALDADE       reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    SEMIDENTIDADE   reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    MAIOR           reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    MENORIGUAL      reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    MAIORIGUAL      reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    IN              reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    NOT_IN          reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    IS              reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    NOT_IS          reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    ELVIS           reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    PONTOPONTO      reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    MULT            reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    DIVIDE          reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    MOD             reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    AS              reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    FOR             reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    WHILE           reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    DO              reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    MULTIGUAL       reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    DIVIGUAL        reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    MODIGUAL        reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    LCHAVE          reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    PV              reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    ELSE            reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    $end            reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    COMMA           reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    RPAREN          reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)
    RCCT            reduce using rule 255 (prefixUnaryOperator -> INCREMENTO .)


state 108

    (256) prefixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    DOISP           reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    MENOR           reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    PONTO           reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    OR              reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    AND             reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    DIFERENTE       reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    IDENTIDADE      reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    IGUALDADE       reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    SEMIDENTIDADE   reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    MAIOR           reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    MENORIGUAL      reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    MAIORIGUAL      reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    IN              reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    NOT_IN          reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    IS              reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    NOT_IS          reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    ELVIS           reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    PONTOPONTO      reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    MULT            reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    DIVIDE          reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    MOD             reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    AS              reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    FOR             reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    WHILE           reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    DO              reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    MULTIGUAL       reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    DIVIGUAL        reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    MODIGUAL        reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    LCHAVE          reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    PV              reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    ELSE            reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    $end            reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    COMMA           reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    RPAREN          reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)
    RCCT            reduce using rule 256 (prefixUnaryOperator -> DECREMENTO .)


state 109

    (257) prefixUnaryOperator -> MINUS .

    INCREMENTO      reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    DECREMENTO      reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    MINUS           reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    PLUS            reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    NOT             reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    ID              reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    CROSSINLINE     reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    IMPORT          reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    INIT            reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    NOINLINE        reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    OUT             reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    VARARG          reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    WHERE           reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    LITERAL_STRING  reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    LPAREN          reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    DOISP           reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    LCCT            reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    IF              reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    RETURN          reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    RETURN_AT       reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    CONTINUE        reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    BREAK           reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    BREAK_AT        reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    RCHAVE          reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    FUN             reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    SUSPEND         reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    MENOR           reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    PONTO           reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    COLONCOLON      reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    OR              reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    AND             reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    DIFERENTE       reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    IDENTIDADE      reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    IGUALDADE       reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    SEMIDENTIDADE   reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    MAIOR           reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    MENORIGUAL      reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    MAIORIGUAL      reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    IN              reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    NOT_IN          reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    IS              reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    NOT_IS          reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    ELVIS           reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    PONTOPONTO      reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    MULT            reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    DIVIDE          reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    MOD             reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    AS              reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    FOR             reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    WHILE           reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    DO              reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    MULTIGUAL       reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    DIVIGUAL        reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    MODIGUAL        reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    LCHAVE          reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    PV              reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    ELSE            reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    $end            reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    COMMA           reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    RPAREN          reduce using rule 257 (prefixUnaryOperator -> MINUS .)
    RCCT            reduce using rule 257 (prefixUnaryOperator -> MINUS .)


state 110

    (258) prefixUnaryOperator -> PLUS .

    INCREMENTO      reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    DECREMENTO      reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    MINUS           reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    PLUS            reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    NOT             reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    ID              reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    CROSSINLINE     reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    IMPORT          reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    INIT            reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    NOINLINE        reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    OUT             reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    VARARG          reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    WHERE           reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    LITERAL_STRING  reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    LPAREN          reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    DOISP           reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    LCCT            reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    IF              reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    RETURN          reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    RETURN_AT       reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    CONTINUE        reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    BREAK           reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    BREAK_AT        reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    RCHAVE          reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    FUN             reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    SUSPEND         reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    MENOR           reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    PONTO           reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    COLONCOLON      reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    OR              reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    AND             reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    DIFERENTE       reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    IDENTIDADE      reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    IGUALDADE       reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    SEMIDENTIDADE   reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    MAIOR           reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    MENORIGUAL      reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    MAIORIGUAL      reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    IN              reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    NOT_IN          reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    IS              reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    NOT_IS          reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    ELVIS           reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    PONTOPONTO      reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    MULT            reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    DIVIDE          reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    MOD             reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    AS              reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    FOR             reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    WHILE           reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    DO              reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    MULTIGUAL       reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    DIVIGUAL        reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    MODIGUAL        reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    LCHAVE          reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    PV              reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    ELSE            reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    $end            reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    COMMA           reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    RPAREN          reduce using rule 258 (prefixUnaryOperator -> PLUS .)
    RCCT            reduce using rule 258 (prefixUnaryOperator -> PLUS .)


state 111

    (259) prefixUnaryOperator -> NOT .

    INCREMENTO      reduce using rule 259 (prefixUnaryOperator -> NOT .)
    DECREMENTO      reduce using rule 259 (prefixUnaryOperator -> NOT .)
    MINUS           reduce using rule 259 (prefixUnaryOperator -> NOT .)
    PLUS            reduce using rule 259 (prefixUnaryOperator -> NOT .)
    NOT             reduce using rule 259 (prefixUnaryOperator -> NOT .)
    ID              reduce using rule 259 (prefixUnaryOperator -> NOT .)
    CROSSINLINE     reduce using rule 259 (prefixUnaryOperator -> NOT .)
    IMPORT          reduce using rule 259 (prefixUnaryOperator -> NOT .)
    INIT            reduce using rule 259 (prefixUnaryOperator -> NOT .)
    NOINLINE        reduce using rule 259 (prefixUnaryOperator -> NOT .)
    OUT             reduce using rule 259 (prefixUnaryOperator -> NOT .)
    VARARG          reduce using rule 259 (prefixUnaryOperator -> NOT .)
    WHERE           reduce using rule 259 (prefixUnaryOperator -> NOT .)
    LITERAL_STRING  reduce using rule 259 (prefixUnaryOperator -> NOT .)
    LPAREN          reduce using rule 259 (prefixUnaryOperator -> NOT .)
    DOISP           reduce using rule 259 (prefixUnaryOperator -> NOT .)
    LCCT            reduce using rule 259 (prefixUnaryOperator -> NOT .)
    IF              reduce using rule 259 (prefixUnaryOperator -> NOT .)
    RETURN          reduce using rule 259 (prefixUnaryOperator -> NOT .)
    RETURN_AT       reduce using rule 259 (prefixUnaryOperator -> NOT .)
    CONTINUE        reduce using rule 259 (prefixUnaryOperator -> NOT .)
    CONTINUE_AT     reduce using rule 259 (prefixUnaryOperator -> NOT .)
    BREAK           reduce using rule 259 (prefixUnaryOperator -> NOT .)
    BREAK_AT        reduce using rule 259 (prefixUnaryOperator -> NOT .)
    RCHAVE          reduce using rule 259 (prefixUnaryOperator -> NOT .)
    FUN             reduce using rule 259 (prefixUnaryOperator -> NOT .)
    SUSPEND         reduce using rule 259 (prefixUnaryOperator -> NOT .)
    MENOR           reduce using rule 259 (prefixUnaryOperator -> NOT .)
    PONTO           reduce using rule 259 (prefixUnaryOperator -> NOT .)
    COLONCOLON      reduce using rule 259 (prefixUnaryOperator -> NOT .)
    OR              reduce using rule 259 (prefixUnaryOperator -> NOT .)
    AND             reduce using rule 259 (prefixUnaryOperator -> NOT .)
    DIFERENTE       reduce using rule 259 (prefixUnaryOperator -> NOT .)
    IDENTIDADE      reduce using rule 259 (prefixUnaryOperator -> NOT .)
    IGUALDADE       reduce using rule 259 (prefixUnaryOperator -> NOT .)
    SEMIDENTIDADE   reduce using rule 259 (prefixUnaryOperator -> NOT .)
    MAIOR           reduce using rule 259 (prefixUnaryOperator -> NOT .)
    MENORIGUAL      reduce using rule 259 (prefixUnaryOperator -> NOT .)
    MAIORIGUAL      reduce using rule 259 (prefixUnaryOperator -> NOT .)
    IN              reduce using rule 259 (prefixUnaryOperator -> NOT .)
    NOT_IN          reduce using rule 259 (prefixUnaryOperator -> NOT .)
    IS              reduce using rule 259 (prefixUnaryOperator -> NOT .)
    NOT_IS          reduce using rule 259 (prefixUnaryOperator -> NOT .)
    ELVIS           reduce using rule 259 (prefixUnaryOperator -> NOT .)
    PONTOPONTO      reduce using rule 259 (prefixUnaryOperator -> NOT .)
    MULT            reduce using rule 259 (prefixUnaryOperator -> NOT .)
    DIVIDE          reduce using rule 259 (prefixUnaryOperator -> NOT .)
    MOD             reduce using rule 259 (prefixUnaryOperator -> NOT .)
    AS              reduce using rule 259 (prefixUnaryOperator -> NOT .)
    FOR             reduce using rule 259 (prefixUnaryOperator -> NOT .)
    WHILE           reduce using rule 259 (prefixUnaryOperator -> NOT .)
    DO              reduce using rule 259 (prefixUnaryOperator -> NOT .)
    MULTIGUAL       reduce using rule 259 (prefixUnaryOperator -> NOT .)
    DIVIGUAL        reduce using rule 259 (prefixUnaryOperator -> NOT .)
    MODIGUAL        reduce using rule 259 (prefixUnaryOperator -> NOT .)
    LCHAVE          reduce using rule 259 (prefixUnaryOperator -> NOT .)
    PV              reduce using rule 259 (prefixUnaryOperator -> NOT .)
    ELSE            reduce using rule 259 (prefixUnaryOperator -> NOT .)
    $end            reduce using rule 259 (prefixUnaryOperator -> NOT .)
    COMMA           reduce using rule 259 (prefixUnaryOperator -> NOT .)
    RPAREN          reduce using rule 259 (prefixUnaryOperator -> NOT .)
    RCCT            reduce using rule 259 (prefixUnaryOperator -> NOT .)


state 112

    (73) block -> LCHAVE statements . RCHAVE

    RCHAVE          shift and go to state 209


state 113

    (188) lambdaLiteral -> RCHAVE . ll LCHAVE
    (189) ll -> . statements
    (190) ll -> . lambdaParameters SETA statements
    (191) ll -> . SETA statements
    (64) statements -> . statement
    (65) statements -> . statement statements
    (66) statements -> .
    (192) lambdaParameters -> . lambdaParameter
    (193) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (194) lambdaParameter -> . variableDeclaration
    (195) lambdaParameter -> . multiVariableDeclaration DOISP type
    (196) lambdaParameter -> . multiVariableDeclaration
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (27) variableDeclaration -> . simpleIdentifier DOISP type
    (28) variableDeclaration -> . simpleIdentifier
    (29) multiVariableDeclaration -> . LPAREN mvd RPAREN
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! reduce/reduce conflict for LCHAVE resolved using rule 66 (statements -> .)
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 66 (statements -> .)
    SETA            shift and go to state 213
    LCHAVE          reduce using rule 66 (statements -> .)
    FUN             shift and go to state 119
    LPAREN          shift and go to state 218
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    ll                             shift and go to state 210
    statements                     shift and go to state 211
    lambdaParameters               shift and go to state 212
    statement                      shift and go to state 114
    lambdaParameter                shift and go to state 214
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    expression                     shift and go to state 118
    variableDeclaration            shift and go to state 215
    multiVariableDeclaration       shift and go to state 216
    simpleIdentifier               shift and go to state 217
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 114

    (64) statements -> statement .
    (65) statements -> statement . statements
    (64) statements -> . statement
    (65) statements -> . statement statements
    (66) statements -> .
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! reduce/reduce conflict for RCHAVE resolved using rule 64 (statements -> statement .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 64 (statements -> statement .)
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! reduce/reduce conflict for RCHAVE resolved using rule 64 (statements -> statement .)
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! reduce/reduce conflict for LCHAVE resolved using rule 64 (statements -> statement .)
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 64 (statements -> statement .)
    LCHAVE          reduce using rule 64 (statements -> statement .)
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)

  ! RCHAVE          [ reduce using rule 64 (statements -> statement .) ]
  ! RCHAVE          [ reduce using rule 66 (statements -> .) ]
  ! LCHAVE          [ reduce using rule 66 (statements -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    statement                      shift and go to state 114
    statements                     shift and go to state 219
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    expression                     shift and go to state 118
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 115

    (67) statement -> functionDeclaration .

    FUN             reduce using rule 67 (statement -> functionDeclaration .)
    FOR             reduce using rule 67 (statement -> functionDeclaration .)
    WHILE           reduce using rule 67 (statement -> functionDeclaration .)
    DO              reduce using rule 67 (statement -> functionDeclaration .)
    ID              reduce using rule 67 (statement -> functionDeclaration .)
    CROSSINLINE     reduce using rule 67 (statement -> functionDeclaration .)
    IMPORT          reduce using rule 67 (statement -> functionDeclaration .)
    INIT            reduce using rule 67 (statement -> functionDeclaration .)
    NOINLINE        reduce using rule 67 (statement -> functionDeclaration .)
    OUT             reduce using rule 67 (statement -> functionDeclaration .)
    VARARG          reduce using rule 67 (statement -> functionDeclaration .)
    WHERE           reduce using rule 67 (statement -> functionDeclaration .)
    LPAREN          reduce using rule 67 (statement -> functionDeclaration .)
    LITERAL_STRING  reduce using rule 67 (statement -> functionDeclaration .)
    DOISP           reduce using rule 67 (statement -> functionDeclaration .)
    LCCT            reduce using rule 67 (statement -> functionDeclaration .)
    IF              reduce using rule 67 (statement -> functionDeclaration .)
    RETURN          reduce using rule 67 (statement -> functionDeclaration .)
    RETURN_AT       reduce using rule 67 (statement -> functionDeclaration .)
    CONTINUE        reduce using rule 67 (statement -> functionDeclaration .)
    CONTINUE_AT     reduce using rule 67 (statement -> functionDeclaration .)
    BREAK           reduce using rule 67 (statement -> functionDeclaration .)
    BREAK_AT        reduce using rule 67 (statement -> functionDeclaration .)
    RCHAVE          reduce using rule 67 (statement -> functionDeclaration .)
    INCREMENTO      reduce using rule 67 (statement -> functionDeclaration .)
    DECREMENTO      reduce using rule 67 (statement -> functionDeclaration .)
    MINUS           reduce using rule 67 (statement -> functionDeclaration .)
    PLUS            reduce using rule 67 (statement -> functionDeclaration .)
    NOT             reduce using rule 67 (statement -> functionDeclaration .)
    SUSPEND         reduce using rule 67 (statement -> functionDeclaration .)
    MAIORIGUAL      reduce using rule 67 (statement -> functionDeclaration .)
    MENORIGUAL      reduce using rule 67 (statement -> functionDeclaration .)
    MULTIGUAL       reduce using rule 67 (statement -> functionDeclaration .)
    DIVIGUAL        reduce using rule 67 (statement -> functionDeclaration .)
    MODIGUAL        reduce using rule 67 (statement -> functionDeclaration .)
    MENOR           reduce using rule 67 (statement -> functionDeclaration .)
    PONTO           reduce using rule 67 (statement -> functionDeclaration .)
    COLONCOLON      reduce using rule 67 (statement -> functionDeclaration .)
    AS              reduce using rule 67 (statement -> functionDeclaration .)
    OR              reduce using rule 67 (statement -> functionDeclaration .)
    AND             reduce using rule 67 (statement -> functionDeclaration .)
    DIFERENTE       reduce using rule 67 (statement -> functionDeclaration .)
    IDENTIDADE      reduce using rule 67 (statement -> functionDeclaration .)
    IGUALDADE       reduce using rule 67 (statement -> functionDeclaration .)
    SEMIDENTIDADE   reduce using rule 67 (statement -> functionDeclaration .)
    MAIOR           reduce using rule 67 (statement -> functionDeclaration .)
    IN              reduce using rule 67 (statement -> functionDeclaration .)
    NOT_IN          reduce using rule 67 (statement -> functionDeclaration .)
    IS              reduce using rule 67 (statement -> functionDeclaration .)
    NOT_IS          reduce using rule 67 (statement -> functionDeclaration .)
    ELVIS           reduce using rule 67 (statement -> functionDeclaration .)
    PONTOPONTO      reduce using rule 67 (statement -> functionDeclaration .)
    MULT            reduce using rule 67 (statement -> functionDeclaration .)
    DIVIDE          reduce using rule 67 (statement -> functionDeclaration .)
    MOD             reduce using rule 67 (statement -> functionDeclaration .)
    LCHAVE          reduce using rule 67 (statement -> functionDeclaration .)
    PV              reduce using rule 67 (statement -> functionDeclaration .)
    ELSE            reduce using rule 67 (statement -> functionDeclaration .)
    $end            reduce using rule 67 (statement -> functionDeclaration .)
    COMMA           reduce using rule 67 (statement -> functionDeclaration .)
    RPAREN          reduce using rule 67 (statement -> functionDeclaration .)
    RCCT            reduce using rule 67 (statement -> functionDeclaration .)


state 116

    (68) statement -> assignment .

    FUN             reduce using rule 68 (statement -> assignment .)
    FOR             reduce using rule 68 (statement -> assignment .)
    WHILE           reduce using rule 68 (statement -> assignment .)
    DO              reduce using rule 68 (statement -> assignment .)
    ID              reduce using rule 68 (statement -> assignment .)
    CROSSINLINE     reduce using rule 68 (statement -> assignment .)
    IMPORT          reduce using rule 68 (statement -> assignment .)
    INIT            reduce using rule 68 (statement -> assignment .)
    NOINLINE        reduce using rule 68 (statement -> assignment .)
    OUT             reduce using rule 68 (statement -> assignment .)
    VARARG          reduce using rule 68 (statement -> assignment .)
    WHERE           reduce using rule 68 (statement -> assignment .)
    LPAREN          reduce using rule 68 (statement -> assignment .)
    LITERAL_STRING  reduce using rule 68 (statement -> assignment .)
    DOISP           reduce using rule 68 (statement -> assignment .)
    LCCT            reduce using rule 68 (statement -> assignment .)
    IF              reduce using rule 68 (statement -> assignment .)
    RETURN          reduce using rule 68 (statement -> assignment .)
    RETURN_AT       reduce using rule 68 (statement -> assignment .)
    CONTINUE        reduce using rule 68 (statement -> assignment .)
    CONTINUE_AT     reduce using rule 68 (statement -> assignment .)
    BREAK           reduce using rule 68 (statement -> assignment .)
    BREAK_AT        reduce using rule 68 (statement -> assignment .)
    RCHAVE          reduce using rule 68 (statement -> assignment .)
    INCREMENTO      reduce using rule 68 (statement -> assignment .)
    DECREMENTO      reduce using rule 68 (statement -> assignment .)
    MINUS           reduce using rule 68 (statement -> assignment .)
    PLUS            reduce using rule 68 (statement -> assignment .)
    NOT             reduce using rule 68 (statement -> assignment .)
    SUSPEND         reduce using rule 68 (statement -> assignment .)
    MAIORIGUAL      reduce using rule 68 (statement -> assignment .)
    MENORIGUAL      reduce using rule 68 (statement -> assignment .)
    MULTIGUAL       reduce using rule 68 (statement -> assignment .)
    DIVIGUAL        reduce using rule 68 (statement -> assignment .)
    MODIGUAL        reduce using rule 68 (statement -> assignment .)
    MENOR           reduce using rule 68 (statement -> assignment .)
    PONTO           reduce using rule 68 (statement -> assignment .)
    COLONCOLON      reduce using rule 68 (statement -> assignment .)
    AS              reduce using rule 68 (statement -> assignment .)
    OR              reduce using rule 68 (statement -> assignment .)
    AND             reduce using rule 68 (statement -> assignment .)
    DIFERENTE       reduce using rule 68 (statement -> assignment .)
    IDENTIDADE      reduce using rule 68 (statement -> assignment .)
    IGUALDADE       reduce using rule 68 (statement -> assignment .)
    SEMIDENTIDADE   reduce using rule 68 (statement -> assignment .)
    MAIOR           reduce using rule 68 (statement -> assignment .)
    IN              reduce using rule 68 (statement -> assignment .)
    NOT_IN          reduce using rule 68 (statement -> assignment .)
    IS              reduce using rule 68 (statement -> assignment .)
    NOT_IS          reduce using rule 68 (statement -> assignment .)
    ELVIS           reduce using rule 68 (statement -> assignment .)
    PONTOPONTO      reduce using rule 68 (statement -> assignment .)
    MULT            reduce using rule 68 (statement -> assignment .)
    DIVIDE          reduce using rule 68 (statement -> assignment .)
    MOD             reduce using rule 68 (statement -> assignment .)
    LCHAVE          reduce using rule 68 (statement -> assignment .)
    PV              reduce using rule 68 (statement -> assignment .)
    ELSE            reduce using rule 68 (statement -> assignment .)
    $end            reduce using rule 68 (statement -> assignment .)
    COMMA           reduce using rule 68 (statement -> assignment .)
    RPAREN          reduce using rule 68 (statement -> assignment .)
    RCCT            reduce using rule 68 (statement -> assignment .)


state 117

    (69) statement -> loopStatement .

    FUN             reduce using rule 69 (statement -> loopStatement .)
    FOR             reduce using rule 69 (statement -> loopStatement .)
    WHILE           reduce using rule 69 (statement -> loopStatement .)
    DO              reduce using rule 69 (statement -> loopStatement .)
    ID              reduce using rule 69 (statement -> loopStatement .)
    CROSSINLINE     reduce using rule 69 (statement -> loopStatement .)
    IMPORT          reduce using rule 69 (statement -> loopStatement .)
    INIT            reduce using rule 69 (statement -> loopStatement .)
    NOINLINE        reduce using rule 69 (statement -> loopStatement .)
    OUT             reduce using rule 69 (statement -> loopStatement .)
    VARARG          reduce using rule 69 (statement -> loopStatement .)
    WHERE           reduce using rule 69 (statement -> loopStatement .)
    LPAREN          reduce using rule 69 (statement -> loopStatement .)
    LITERAL_STRING  reduce using rule 69 (statement -> loopStatement .)
    DOISP           reduce using rule 69 (statement -> loopStatement .)
    LCCT            reduce using rule 69 (statement -> loopStatement .)
    IF              reduce using rule 69 (statement -> loopStatement .)
    RETURN          reduce using rule 69 (statement -> loopStatement .)
    RETURN_AT       reduce using rule 69 (statement -> loopStatement .)
    CONTINUE        reduce using rule 69 (statement -> loopStatement .)
    CONTINUE_AT     reduce using rule 69 (statement -> loopStatement .)
    BREAK           reduce using rule 69 (statement -> loopStatement .)
    BREAK_AT        reduce using rule 69 (statement -> loopStatement .)
    RCHAVE          reduce using rule 69 (statement -> loopStatement .)
    INCREMENTO      reduce using rule 69 (statement -> loopStatement .)
    DECREMENTO      reduce using rule 69 (statement -> loopStatement .)
    MINUS           reduce using rule 69 (statement -> loopStatement .)
    PLUS            reduce using rule 69 (statement -> loopStatement .)
    NOT             reduce using rule 69 (statement -> loopStatement .)
    SUSPEND         reduce using rule 69 (statement -> loopStatement .)
    MAIORIGUAL      reduce using rule 69 (statement -> loopStatement .)
    MENORIGUAL      reduce using rule 69 (statement -> loopStatement .)
    MULTIGUAL       reduce using rule 69 (statement -> loopStatement .)
    DIVIGUAL        reduce using rule 69 (statement -> loopStatement .)
    MODIGUAL        reduce using rule 69 (statement -> loopStatement .)
    MENOR           reduce using rule 69 (statement -> loopStatement .)
    PONTO           reduce using rule 69 (statement -> loopStatement .)
    COLONCOLON      reduce using rule 69 (statement -> loopStatement .)
    AS              reduce using rule 69 (statement -> loopStatement .)
    OR              reduce using rule 69 (statement -> loopStatement .)
    AND             reduce using rule 69 (statement -> loopStatement .)
    DIFERENTE       reduce using rule 69 (statement -> loopStatement .)
    IDENTIDADE      reduce using rule 69 (statement -> loopStatement .)
    IGUALDADE       reduce using rule 69 (statement -> loopStatement .)
    SEMIDENTIDADE   reduce using rule 69 (statement -> loopStatement .)
    MAIOR           reduce using rule 69 (statement -> loopStatement .)
    IN              reduce using rule 69 (statement -> loopStatement .)
    NOT_IN          reduce using rule 69 (statement -> loopStatement .)
    IS              reduce using rule 69 (statement -> loopStatement .)
    NOT_IS          reduce using rule 69 (statement -> loopStatement .)
    ELVIS           reduce using rule 69 (statement -> loopStatement .)
    PONTOPONTO      reduce using rule 69 (statement -> loopStatement .)
    MULT            reduce using rule 69 (statement -> loopStatement .)
    DIVIDE          reduce using rule 69 (statement -> loopStatement .)
    MOD             reduce using rule 69 (statement -> loopStatement .)
    LCHAVE          reduce using rule 69 (statement -> loopStatement .)
    PV              reduce using rule 69 (statement -> loopStatement .)
    ELSE            reduce using rule 69 (statement -> loopStatement .)
    $end            reduce using rule 69 (statement -> loopStatement .)
    COMMA           reduce using rule 69 (statement -> loopStatement .)
    RPAREN          reduce using rule 69 (statement -> loopStatement .)
    RCCT            reduce using rule 69 (statement -> loopStatement .)


state 118

    (70) statement -> expression .
    (222) jumpExpression -> expression .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 70 (statement -> expression .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 70 (statement -> expression .)
  ! reduce/reduce conflict for MENOR resolved using rule 70 (statement -> expression .)
  ! reduce/reduce conflict for LCCT resolved using rule 70 (statement -> expression .)
  ! reduce/reduce conflict for LPAREN resolved using rule 70 (statement -> expression .)
  ! reduce/reduce conflict for PONTO resolved using rule 70 (statement -> expression .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 70 (statement -> expression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 70 (statement -> expression .)
    FUN             reduce using rule 70 (statement -> expression .)
    FOR             reduce using rule 70 (statement -> expression .)
    WHILE           reduce using rule 70 (statement -> expression .)
    DO              reduce using rule 70 (statement -> expression .)
    ID              reduce using rule 70 (statement -> expression .)
    CROSSINLINE     reduce using rule 70 (statement -> expression .)
    IMPORT          reduce using rule 70 (statement -> expression .)
    INIT            reduce using rule 70 (statement -> expression .)
    NOINLINE        reduce using rule 70 (statement -> expression .)
    OUT             reduce using rule 70 (statement -> expression .)
    VARARG          reduce using rule 70 (statement -> expression .)
    WHERE           reduce using rule 70 (statement -> expression .)
    LPAREN          reduce using rule 70 (statement -> expression .)
    LITERAL_STRING  reduce using rule 70 (statement -> expression .)
    DOISP           reduce using rule 70 (statement -> expression .)
    LCCT            reduce using rule 70 (statement -> expression .)
    IF              reduce using rule 70 (statement -> expression .)
    RETURN          reduce using rule 70 (statement -> expression .)
    RETURN_AT       reduce using rule 70 (statement -> expression .)
    CONTINUE        reduce using rule 70 (statement -> expression .)
    CONTINUE_AT     reduce using rule 70 (statement -> expression .)
    BREAK           reduce using rule 70 (statement -> expression .)
    BREAK_AT        reduce using rule 70 (statement -> expression .)
    RCHAVE          reduce using rule 70 (statement -> expression .)
    INCREMENTO      reduce using rule 70 (statement -> expression .)
    DECREMENTO      reduce using rule 70 (statement -> expression .)
    MINUS           reduce using rule 70 (statement -> expression .)
    PLUS            reduce using rule 70 (statement -> expression .)
    NOT             reduce using rule 70 (statement -> expression .)
    SUSPEND         reduce using rule 70 (statement -> expression .)
    MAIORIGUAL      reduce using rule 70 (statement -> expression .)
    MENORIGUAL      reduce using rule 70 (statement -> expression .)
    MULTIGUAL       reduce using rule 70 (statement -> expression .)
    DIVIGUAL        reduce using rule 70 (statement -> expression .)
    MODIGUAL        reduce using rule 70 (statement -> expression .)
    MENOR           reduce using rule 70 (statement -> expression .)
    PONTO           reduce using rule 70 (statement -> expression .)
    COLONCOLON      reduce using rule 70 (statement -> expression .)
    AS              reduce using rule 70 (statement -> expression .)
    OR              reduce using rule 70 (statement -> expression .)
    AND             reduce using rule 70 (statement -> expression .)
    DIFERENTE       reduce using rule 70 (statement -> expression .)
    IDENTIDADE      reduce using rule 70 (statement -> expression .)
    IGUALDADE       reduce using rule 70 (statement -> expression .)
    SEMIDENTIDADE   reduce using rule 70 (statement -> expression .)
    MAIOR           reduce using rule 70 (statement -> expression .)
    IN              reduce using rule 70 (statement -> expression .)
    NOT_IN          reduce using rule 70 (statement -> expression .)
    IS              reduce using rule 70 (statement -> expression .)
    NOT_IS          reduce using rule 70 (statement -> expression .)
    ELVIS           reduce using rule 70 (statement -> expression .)
    PONTOPONTO      reduce using rule 70 (statement -> expression .)
    MULT            reduce using rule 70 (statement -> expression .)
    DIVIDE          reduce using rule 70 (statement -> expression .)
    MOD             reduce using rule 70 (statement -> expression .)
    LCHAVE          reduce using rule 70 (statement -> expression .)
    PV              reduce using rule 70 (statement -> expression .)
    ELSE            reduce using rule 70 (statement -> expression .)
    $end            reduce using rule 70 (statement -> expression .)
    COMMA           reduce using rule 70 (statement -> expression .)
    RPAREN          reduce using rule 70 (statement -> expression .)
    RCCT            reduce using rule 70 (statement -> expression .)

  ! INCREMENTO      [ reduce using rule 222 (jumpExpression -> expression .) ]
  ! DECREMENTO      [ reduce using rule 222 (jumpExpression -> expression .) ]
  ! MENOR           [ reduce using rule 222 (jumpExpression -> expression .) ]
  ! LCCT            [ reduce using rule 222 (jumpExpression -> expression .) ]
  ! LPAREN          [ reduce using rule 222 (jumpExpression -> expression .) ]
  ! PONTO           [ reduce using rule 222 (jumpExpression -> expression .) ]
  ! COLONCOLON      [ reduce using rule 222 (jumpExpression -> expression .) ]
  ! RCHAVE          [ reduce using rule 222 (jumpExpression -> expression .) ]


state 119

    (3) functionDeclaration -> FUN . fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (197) anonymousFunction -> FUN . af4 parametersWithOptionalType af3 af1
    (4) fd1 -> . typeParameters
    (5) fd1 -> .
    (206) af4 -> . type PONTO
    (207) af4 -> .
    (12) typeParameters -> . MENOR tps MAIOR
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    MENOR           shift and go to state 7
    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! SUSPEND         [ reduce using rule 5 (fd1 -> .) ]
  ! ID              [ reduce using rule 5 (fd1 -> .) ]
  ! CROSSINLINE     [ reduce using rule 5 (fd1 -> .) ]
  ! IMPORT          [ reduce using rule 5 (fd1 -> .) ]
  ! INIT            [ reduce using rule 5 (fd1 -> .) ]
  ! NOINLINE        [ reduce using rule 5 (fd1 -> .) ]
  ! OUT             [ reduce using rule 5 (fd1 -> .) ]
  ! VARARG          [ reduce using rule 5 (fd1 -> .) ]
  ! WHERE           [ reduce using rule 5 (fd1 -> .) ]
  ! LPAREN          [ reduce using rule 207 (af4 -> .) ]

    fd1                            shift and go to state 5
    simpleIdentifier               shift and go to state 44
    af4                            shift and go to state 220
    typeParameters                 shift and go to state 6
    type                           shift and go to state 221
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43

state 120

    (131) directlyAssignableExpression -> simpleIdentifier .
    (165) primaryExpression -> simpleIdentifier .
    (120) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MENOR resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PONTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 120 (label -> simpleIdentifier .)
    INCREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    MINUS           reduce using rule 120 (label -> simpleIdentifier .)
    PLUS            reduce using rule 120 (label -> simpleIdentifier .)
    NOT             reduce using rule 120 (label -> simpleIdentifier .)
    ID              reduce using rule 120 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 120 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 120 (label -> simpleIdentifier .)
    INIT            reduce using rule 120 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 120 (label -> simpleIdentifier .)
    OUT             reduce using rule 120 (label -> simpleIdentifier .)
    VARARG          reduce using rule 120 (label -> simpleIdentifier .)
    WHERE           reduce using rule 120 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 120 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 120 (label -> simpleIdentifier .)
    DOISP           reduce using rule 120 (label -> simpleIdentifier .)
    LCCT            reduce using rule 120 (label -> simpleIdentifier .)
    IF              reduce using rule 120 (label -> simpleIdentifier .)
    RETURN          reduce using rule 120 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 120 (label -> simpleIdentifier .)
    BREAK           reduce using rule 120 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 120 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 120 (label -> simpleIdentifier .)
    FUN             reduce using rule 120 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 120 (label -> simpleIdentifier .)
    MENOR           reduce using rule 120 (label -> simpleIdentifier .)
    PONTO           reduce using rule 120 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 120 (label -> simpleIdentifier .)
    OR              reduce using rule 120 (label -> simpleIdentifier .)
    AND             reduce using rule 120 (label -> simpleIdentifier .)
    DIFERENTE       reduce using rule 120 (label -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 120 (label -> simpleIdentifier .)
    IGUALDADE       reduce using rule 120 (label -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 120 (label -> simpleIdentifier .)
    MAIOR           reduce using rule 120 (label -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    IN              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IN          reduce using rule 120 (label -> simpleIdentifier .)
    IS              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IS          reduce using rule 120 (label -> simpleIdentifier .)
    ELVIS           reduce using rule 120 (label -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 120 (label -> simpleIdentifier .)
    MULT            reduce using rule 120 (label -> simpleIdentifier .)
    DIVIDE          reduce using rule 120 (label -> simpleIdentifier .)
    MOD             reduce using rule 120 (label -> simpleIdentifier .)
    AS              reduce using rule 120 (label -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 120 (label -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 120 (label -> simpleIdentifier .)
    MODIGUAL        reduce using rule 120 (label -> simpleIdentifier .)
    FOR             reduce using rule 120 (label -> simpleIdentifier .)
    WHILE           reduce using rule 120 (label -> simpleIdentifier .)
    DO              reduce using rule 120 (label -> simpleIdentifier .)
    LCHAVE          reduce using rule 120 (label -> simpleIdentifier .)
    RPAREN          reduce using rule 120 (label -> simpleIdentifier .)
    PV              reduce using rule 120 (label -> simpleIdentifier .)
    ELSE            reduce using rule 120 (label -> simpleIdentifier .)
    $end            reduce using rule 120 (label -> simpleIdentifier .)
    COMMA           reduce using rule 120 (label -> simpleIdentifier .)
    RCCT            reduce using rule 120 (label -> simpleIdentifier .)

  ! IGUALDADE       [ reduce using rule 131 (directlyAssignableExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 131 (directlyAssignableExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MENOR           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PONTO           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]


state 121

    (86) assignment -> directlyAssignableExpression . IGUALDADE expression

    IGUALDADE       shift and go to state 222


state 122

    (87) assignment -> assignableExpression . assignmentAndOperator expression
    (231) assignmentAndOperator -> . MAIORIGUAL
    (232) assignmentAndOperator -> . MENORIGUAL
    (233) assignmentAndOperator -> . MULTIGUAL
    (234) assignmentAndOperator -> . DIVIGUAL
    (235) assignmentAndOperator -> . MODIGUAL

    MAIORIGUAL      shift and go to state 224
    MENORIGUAL      shift and go to state 225
    MULTIGUAL       shift and go to state 226
    DIVIGUAL        shift and go to state 227
    MODIGUAL        shift and go to state 228

    assignmentAndOperator          shift and go to state 223

state 123

    (74) loopStatement -> forStatement_MD .

    FUN             reduce using rule 74 (loopStatement -> forStatement_MD .)
    FOR             reduce using rule 74 (loopStatement -> forStatement_MD .)
    WHILE           reduce using rule 74 (loopStatement -> forStatement_MD .)
    DO              reduce using rule 74 (loopStatement -> forStatement_MD .)
    ID              reduce using rule 74 (loopStatement -> forStatement_MD .)
    CROSSINLINE     reduce using rule 74 (loopStatement -> forStatement_MD .)
    IMPORT          reduce using rule 74 (loopStatement -> forStatement_MD .)
    INIT            reduce using rule 74 (loopStatement -> forStatement_MD .)
    NOINLINE        reduce using rule 74 (loopStatement -> forStatement_MD .)
    OUT             reduce using rule 74 (loopStatement -> forStatement_MD .)
    VARARG          reduce using rule 74 (loopStatement -> forStatement_MD .)
    WHERE           reduce using rule 74 (loopStatement -> forStatement_MD .)
    LPAREN          reduce using rule 74 (loopStatement -> forStatement_MD .)
    LITERAL_STRING  reduce using rule 74 (loopStatement -> forStatement_MD .)
    DOISP           reduce using rule 74 (loopStatement -> forStatement_MD .)
    LCCT            reduce using rule 74 (loopStatement -> forStatement_MD .)
    IF              reduce using rule 74 (loopStatement -> forStatement_MD .)
    RETURN          reduce using rule 74 (loopStatement -> forStatement_MD .)
    RETURN_AT       reduce using rule 74 (loopStatement -> forStatement_MD .)
    CONTINUE        reduce using rule 74 (loopStatement -> forStatement_MD .)
    CONTINUE_AT     reduce using rule 74 (loopStatement -> forStatement_MD .)
    BREAK           reduce using rule 74 (loopStatement -> forStatement_MD .)
    BREAK_AT        reduce using rule 74 (loopStatement -> forStatement_MD .)
    RCHAVE          reduce using rule 74 (loopStatement -> forStatement_MD .)
    INCREMENTO      reduce using rule 74 (loopStatement -> forStatement_MD .)
    DECREMENTO      reduce using rule 74 (loopStatement -> forStatement_MD .)
    MINUS           reduce using rule 74 (loopStatement -> forStatement_MD .)
    PLUS            reduce using rule 74 (loopStatement -> forStatement_MD .)
    NOT             reduce using rule 74 (loopStatement -> forStatement_MD .)
    SUSPEND         reduce using rule 74 (loopStatement -> forStatement_MD .)
    MAIORIGUAL      reduce using rule 74 (loopStatement -> forStatement_MD .)
    MENORIGUAL      reduce using rule 74 (loopStatement -> forStatement_MD .)
    MULTIGUAL       reduce using rule 74 (loopStatement -> forStatement_MD .)
    DIVIGUAL        reduce using rule 74 (loopStatement -> forStatement_MD .)
    MODIGUAL        reduce using rule 74 (loopStatement -> forStatement_MD .)
    MENOR           reduce using rule 74 (loopStatement -> forStatement_MD .)
    PONTO           reduce using rule 74 (loopStatement -> forStatement_MD .)
    COLONCOLON      reduce using rule 74 (loopStatement -> forStatement_MD .)
    AS              reduce using rule 74 (loopStatement -> forStatement_MD .)
    OR              reduce using rule 74 (loopStatement -> forStatement_MD .)
    AND             reduce using rule 74 (loopStatement -> forStatement_MD .)
    DIFERENTE       reduce using rule 74 (loopStatement -> forStatement_MD .)
    IDENTIDADE      reduce using rule 74 (loopStatement -> forStatement_MD .)
    IGUALDADE       reduce using rule 74 (loopStatement -> forStatement_MD .)
    SEMIDENTIDADE   reduce using rule 74 (loopStatement -> forStatement_MD .)
    MAIOR           reduce using rule 74 (loopStatement -> forStatement_MD .)
    IN              reduce using rule 74 (loopStatement -> forStatement_MD .)
    NOT_IN          reduce using rule 74 (loopStatement -> forStatement_MD .)
    IS              reduce using rule 74 (loopStatement -> forStatement_MD .)
    NOT_IS          reduce using rule 74 (loopStatement -> forStatement_MD .)
    ELVIS           reduce using rule 74 (loopStatement -> forStatement_MD .)
    PONTOPONTO      reduce using rule 74 (loopStatement -> forStatement_MD .)
    MULT            reduce using rule 74 (loopStatement -> forStatement_MD .)
    DIVIDE          reduce using rule 74 (loopStatement -> forStatement_MD .)
    MOD             reduce using rule 74 (loopStatement -> forStatement_MD .)
    LCHAVE          reduce using rule 74 (loopStatement -> forStatement_MD .)
    PV              reduce using rule 74 (loopStatement -> forStatement_MD .)
    ELSE            reduce using rule 74 (loopStatement -> forStatement_MD .)
    $end            reduce using rule 74 (loopStatement -> forStatement_MD .)
    COMMA           reduce using rule 74 (loopStatement -> forStatement_MD .)
    RPAREN          reduce using rule 74 (loopStatement -> forStatement_MD .)
    RCCT            reduce using rule 74 (loopStatement -> forStatement_MD .)


state 124

    (75) loopStatement -> forStatement_VD .

    FUN             reduce using rule 75 (loopStatement -> forStatement_VD .)
    FOR             reduce using rule 75 (loopStatement -> forStatement_VD .)
    WHILE           reduce using rule 75 (loopStatement -> forStatement_VD .)
    DO              reduce using rule 75 (loopStatement -> forStatement_VD .)
    ID              reduce using rule 75 (loopStatement -> forStatement_VD .)
    CROSSINLINE     reduce using rule 75 (loopStatement -> forStatement_VD .)
    IMPORT          reduce using rule 75 (loopStatement -> forStatement_VD .)
    INIT            reduce using rule 75 (loopStatement -> forStatement_VD .)
    NOINLINE        reduce using rule 75 (loopStatement -> forStatement_VD .)
    OUT             reduce using rule 75 (loopStatement -> forStatement_VD .)
    VARARG          reduce using rule 75 (loopStatement -> forStatement_VD .)
    WHERE           reduce using rule 75 (loopStatement -> forStatement_VD .)
    LPAREN          reduce using rule 75 (loopStatement -> forStatement_VD .)
    LITERAL_STRING  reduce using rule 75 (loopStatement -> forStatement_VD .)
    DOISP           reduce using rule 75 (loopStatement -> forStatement_VD .)
    LCCT            reduce using rule 75 (loopStatement -> forStatement_VD .)
    IF              reduce using rule 75 (loopStatement -> forStatement_VD .)
    RETURN          reduce using rule 75 (loopStatement -> forStatement_VD .)
    RETURN_AT       reduce using rule 75 (loopStatement -> forStatement_VD .)
    CONTINUE        reduce using rule 75 (loopStatement -> forStatement_VD .)
    CONTINUE_AT     reduce using rule 75 (loopStatement -> forStatement_VD .)
    BREAK           reduce using rule 75 (loopStatement -> forStatement_VD .)
    BREAK_AT        reduce using rule 75 (loopStatement -> forStatement_VD .)
    RCHAVE          reduce using rule 75 (loopStatement -> forStatement_VD .)
    INCREMENTO      reduce using rule 75 (loopStatement -> forStatement_VD .)
    DECREMENTO      reduce using rule 75 (loopStatement -> forStatement_VD .)
    MINUS           reduce using rule 75 (loopStatement -> forStatement_VD .)
    PLUS            reduce using rule 75 (loopStatement -> forStatement_VD .)
    NOT             reduce using rule 75 (loopStatement -> forStatement_VD .)
    SUSPEND         reduce using rule 75 (loopStatement -> forStatement_VD .)
    MAIORIGUAL      reduce using rule 75 (loopStatement -> forStatement_VD .)
    MENORIGUAL      reduce using rule 75 (loopStatement -> forStatement_VD .)
    MULTIGUAL       reduce using rule 75 (loopStatement -> forStatement_VD .)
    DIVIGUAL        reduce using rule 75 (loopStatement -> forStatement_VD .)
    MODIGUAL        reduce using rule 75 (loopStatement -> forStatement_VD .)
    MENOR           reduce using rule 75 (loopStatement -> forStatement_VD .)
    PONTO           reduce using rule 75 (loopStatement -> forStatement_VD .)
    COLONCOLON      reduce using rule 75 (loopStatement -> forStatement_VD .)
    AS              reduce using rule 75 (loopStatement -> forStatement_VD .)
    OR              reduce using rule 75 (loopStatement -> forStatement_VD .)
    AND             reduce using rule 75 (loopStatement -> forStatement_VD .)
    DIFERENTE       reduce using rule 75 (loopStatement -> forStatement_VD .)
    IDENTIDADE      reduce using rule 75 (loopStatement -> forStatement_VD .)
    IGUALDADE       reduce using rule 75 (loopStatement -> forStatement_VD .)
    SEMIDENTIDADE   reduce using rule 75 (loopStatement -> forStatement_VD .)
    MAIOR           reduce using rule 75 (loopStatement -> forStatement_VD .)
    IN              reduce using rule 75 (loopStatement -> forStatement_VD .)
    NOT_IN          reduce using rule 75 (loopStatement -> forStatement_VD .)
    IS              reduce using rule 75 (loopStatement -> forStatement_VD .)
    NOT_IS          reduce using rule 75 (loopStatement -> forStatement_VD .)
    ELVIS           reduce using rule 75 (loopStatement -> forStatement_VD .)
    PONTOPONTO      reduce using rule 75 (loopStatement -> forStatement_VD .)
    MULT            reduce using rule 75 (loopStatement -> forStatement_VD .)
    DIVIDE          reduce using rule 75 (loopStatement -> forStatement_VD .)
    MOD             reduce using rule 75 (loopStatement -> forStatement_VD .)
    LCHAVE          reduce using rule 75 (loopStatement -> forStatement_VD .)
    PV              reduce using rule 75 (loopStatement -> forStatement_VD .)
    ELSE            reduce using rule 75 (loopStatement -> forStatement_VD .)
    $end            reduce using rule 75 (loopStatement -> forStatement_VD .)
    COMMA           reduce using rule 75 (loopStatement -> forStatement_VD .)
    RPAREN          reduce using rule 75 (loopStatement -> forStatement_VD .)
    RCCT            reduce using rule 75 (loopStatement -> forStatement_VD .)


state 125

    (76) loopStatement -> whileStatement .

    FUN             reduce using rule 76 (loopStatement -> whileStatement .)
    FOR             reduce using rule 76 (loopStatement -> whileStatement .)
    WHILE           reduce using rule 76 (loopStatement -> whileStatement .)
    DO              reduce using rule 76 (loopStatement -> whileStatement .)
    ID              reduce using rule 76 (loopStatement -> whileStatement .)
    CROSSINLINE     reduce using rule 76 (loopStatement -> whileStatement .)
    IMPORT          reduce using rule 76 (loopStatement -> whileStatement .)
    INIT            reduce using rule 76 (loopStatement -> whileStatement .)
    NOINLINE        reduce using rule 76 (loopStatement -> whileStatement .)
    OUT             reduce using rule 76 (loopStatement -> whileStatement .)
    VARARG          reduce using rule 76 (loopStatement -> whileStatement .)
    WHERE           reduce using rule 76 (loopStatement -> whileStatement .)
    LPAREN          reduce using rule 76 (loopStatement -> whileStatement .)
    LITERAL_STRING  reduce using rule 76 (loopStatement -> whileStatement .)
    DOISP           reduce using rule 76 (loopStatement -> whileStatement .)
    LCCT            reduce using rule 76 (loopStatement -> whileStatement .)
    IF              reduce using rule 76 (loopStatement -> whileStatement .)
    RETURN          reduce using rule 76 (loopStatement -> whileStatement .)
    RETURN_AT       reduce using rule 76 (loopStatement -> whileStatement .)
    CONTINUE        reduce using rule 76 (loopStatement -> whileStatement .)
    CONTINUE_AT     reduce using rule 76 (loopStatement -> whileStatement .)
    BREAK           reduce using rule 76 (loopStatement -> whileStatement .)
    BREAK_AT        reduce using rule 76 (loopStatement -> whileStatement .)
    RCHAVE          reduce using rule 76 (loopStatement -> whileStatement .)
    INCREMENTO      reduce using rule 76 (loopStatement -> whileStatement .)
    DECREMENTO      reduce using rule 76 (loopStatement -> whileStatement .)
    MINUS           reduce using rule 76 (loopStatement -> whileStatement .)
    PLUS            reduce using rule 76 (loopStatement -> whileStatement .)
    NOT             reduce using rule 76 (loopStatement -> whileStatement .)
    SUSPEND         reduce using rule 76 (loopStatement -> whileStatement .)
    MAIORIGUAL      reduce using rule 76 (loopStatement -> whileStatement .)
    MENORIGUAL      reduce using rule 76 (loopStatement -> whileStatement .)
    MULTIGUAL       reduce using rule 76 (loopStatement -> whileStatement .)
    DIVIGUAL        reduce using rule 76 (loopStatement -> whileStatement .)
    MODIGUAL        reduce using rule 76 (loopStatement -> whileStatement .)
    MENOR           reduce using rule 76 (loopStatement -> whileStatement .)
    PONTO           reduce using rule 76 (loopStatement -> whileStatement .)
    COLONCOLON      reduce using rule 76 (loopStatement -> whileStatement .)
    AS              reduce using rule 76 (loopStatement -> whileStatement .)
    OR              reduce using rule 76 (loopStatement -> whileStatement .)
    AND             reduce using rule 76 (loopStatement -> whileStatement .)
    DIFERENTE       reduce using rule 76 (loopStatement -> whileStatement .)
    IDENTIDADE      reduce using rule 76 (loopStatement -> whileStatement .)
    IGUALDADE       reduce using rule 76 (loopStatement -> whileStatement .)
    SEMIDENTIDADE   reduce using rule 76 (loopStatement -> whileStatement .)
    MAIOR           reduce using rule 76 (loopStatement -> whileStatement .)
    IN              reduce using rule 76 (loopStatement -> whileStatement .)
    NOT_IN          reduce using rule 76 (loopStatement -> whileStatement .)
    IS              reduce using rule 76 (loopStatement -> whileStatement .)
    NOT_IS          reduce using rule 76 (loopStatement -> whileStatement .)
    ELVIS           reduce using rule 76 (loopStatement -> whileStatement .)
    PONTOPONTO      reduce using rule 76 (loopStatement -> whileStatement .)
    MULT            reduce using rule 76 (loopStatement -> whileStatement .)
    DIVIDE          reduce using rule 76 (loopStatement -> whileStatement .)
    MOD             reduce using rule 76 (loopStatement -> whileStatement .)
    LCHAVE          reduce using rule 76 (loopStatement -> whileStatement .)
    PV              reduce using rule 76 (loopStatement -> whileStatement .)
    ELSE            reduce using rule 76 (loopStatement -> whileStatement .)
    $end            reduce using rule 76 (loopStatement -> whileStatement .)
    COMMA           reduce using rule 76 (loopStatement -> whileStatement .)
    RPAREN          reduce using rule 76 (loopStatement -> whileStatement .)
    RCCT            reduce using rule 76 (loopStatement -> whileStatement .)


state 126

    (77) loopStatement -> doWhileStatement .

    FUN             reduce using rule 77 (loopStatement -> doWhileStatement .)
    FOR             reduce using rule 77 (loopStatement -> doWhileStatement .)
    WHILE           reduce using rule 77 (loopStatement -> doWhileStatement .)
    DO              reduce using rule 77 (loopStatement -> doWhileStatement .)
    ID              reduce using rule 77 (loopStatement -> doWhileStatement .)
    CROSSINLINE     reduce using rule 77 (loopStatement -> doWhileStatement .)
    IMPORT          reduce using rule 77 (loopStatement -> doWhileStatement .)
    INIT            reduce using rule 77 (loopStatement -> doWhileStatement .)
    NOINLINE        reduce using rule 77 (loopStatement -> doWhileStatement .)
    OUT             reduce using rule 77 (loopStatement -> doWhileStatement .)
    VARARG          reduce using rule 77 (loopStatement -> doWhileStatement .)
    WHERE           reduce using rule 77 (loopStatement -> doWhileStatement .)
    LPAREN          reduce using rule 77 (loopStatement -> doWhileStatement .)
    LITERAL_STRING  reduce using rule 77 (loopStatement -> doWhileStatement .)
    DOISP           reduce using rule 77 (loopStatement -> doWhileStatement .)
    LCCT            reduce using rule 77 (loopStatement -> doWhileStatement .)
    IF              reduce using rule 77 (loopStatement -> doWhileStatement .)
    RETURN          reduce using rule 77 (loopStatement -> doWhileStatement .)
    RETURN_AT       reduce using rule 77 (loopStatement -> doWhileStatement .)
    CONTINUE        reduce using rule 77 (loopStatement -> doWhileStatement .)
    CONTINUE_AT     reduce using rule 77 (loopStatement -> doWhileStatement .)
    BREAK           reduce using rule 77 (loopStatement -> doWhileStatement .)
    BREAK_AT        reduce using rule 77 (loopStatement -> doWhileStatement .)
    RCHAVE          reduce using rule 77 (loopStatement -> doWhileStatement .)
    INCREMENTO      reduce using rule 77 (loopStatement -> doWhileStatement .)
    DECREMENTO      reduce using rule 77 (loopStatement -> doWhileStatement .)
    MINUS           reduce using rule 77 (loopStatement -> doWhileStatement .)
    PLUS            reduce using rule 77 (loopStatement -> doWhileStatement .)
    NOT             reduce using rule 77 (loopStatement -> doWhileStatement .)
    SUSPEND         reduce using rule 77 (loopStatement -> doWhileStatement .)
    MAIORIGUAL      reduce using rule 77 (loopStatement -> doWhileStatement .)
    MENORIGUAL      reduce using rule 77 (loopStatement -> doWhileStatement .)
    MULTIGUAL       reduce using rule 77 (loopStatement -> doWhileStatement .)
    DIVIGUAL        reduce using rule 77 (loopStatement -> doWhileStatement .)
    MODIGUAL        reduce using rule 77 (loopStatement -> doWhileStatement .)
    MENOR           reduce using rule 77 (loopStatement -> doWhileStatement .)
    PONTO           reduce using rule 77 (loopStatement -> doWhileStatement .)
    COLONCOLON      reduce using rule 77 (loopStatement -> doWhileStatement .)
    AS              reduce using rule 77 (loopStatement -> doWhileStatement .)
    OR              reduce using rule 77 (loopStatement -> doWhileStatement .)
    AND             reduce using rule 77 (loopStatement -> doWhileStatement .)
    DIFERENTE       reduce using rule 77 (loopStatement -> doWhileStatement .)
    IDENTIDADE      reduce using rule 77 (loopStatement -> doWhileStatement .)
    IGUALDADE       reduce using rule 77 (loopStatement -> doWhileStatement .)
    SEMIDENTIDADE   reduce using rule 77 (loopStatement -> doWhileStatement .)
    MAIOR           reduce using rule 77 (loopStatement -> doWhileStatement .)
    IN              reduce using rule 77 (loopStatement -> doWhileStatement .)
    NOT_IN          reduce using rule 77 (loopStatement -> doWhileStatement .)
    IS              reduce using rule 77 (loopStatement -> doWhileStatement .)
    NOT_IS          reduce using rule 77 (loopStatement -> doWhileStatement .)
    ELVIS           reduce using rule 77 (loopStatement -> doWhileStatement .)
    PONTOPONTO      reduce using rule 77 (loopStatement -> doWhileStatement .)
    MULT            reduce using rule 77 (loopStatement -> doWhileStatement .)
    DIVIDE          reduce using rule 77 (loopStatement -> doWhileStatement .)
    MOD             reduce using rule 77 (loopStatement -> doWhileStatement .)
    LCHAVE          reduce using rule 77 (loopStatement -> doWhileStatement .)
    PV              reduce using rule 77 (loopStatement -> doWhileStatement .)
    ELSE            reduce using rule 77 (loopStatement -> doWhileStatement .)
    $end            reduce using rule 77 (loopStatement -> doWhileStatement .)
    COMMA           reduce using rule 77 (loopStatement -> doWhileStatement .)
    RPAREN          reduce using rule 77 (loopStatement -> doWhileStatement .)
    RCCT            reduce using rule 77 (loopStatement -> doWhileStatement .)


state 127

    (130) directlyAssignableExpression -> postfixUnaryExpression . assignableSuffix
    (137) assignableSuffix -> . typeArguments
    (138) assignableSuffix -> . indexingSuffix
    (139) assignableSuffix -> . navigationSuffix
    (153) typeArguments -> . MENOR ta MAIOR
    (140) indexingSuffix -> . LCCT isuf RCCT
    (144) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (145) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (262) memberAccessOperator -> . PONTO
    (263) memberAccessOperator -> . safeNav
    (264) memberAccessOperator -> . COLONCOLON
    (265) safeNav -> . PONTO

    MENOR           shift and go to state 64
    LCCT            shift and go to state 233
    PONTO           shift and go to state 235
    COLONCOLON      shift and go to state 237

    assignableSuffix               shift and go to state 229
    typeArguments                  shift and go to state 230
    indexingSuffix                 shift and go to state 231
    navigationSuffix               shift and go to state 232
    memberAccessOperator           shift and go to state 234
    safeNav                        shift and go to state 236

state 128

    (132) directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .

    IGUALDADE       reduce using rule 132 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)
    RPAREN          reduce using rule 132 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)


state 129

    (134) assignableExpression -> prefixUnaryExpression .
    (112) asExpression -> prefixUnaryExpression .
    (113) asExpression -> prefixUnaryExpression . asOperator type
    (253) asOperator -> . AS
    (254) asOperator -> . AS asOperator

  ! reduce/reduce conflict for MENORIGUAL resolved using rule 112 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 112 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 112 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 112 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 112 (asExpression -> prefixUnaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 112 (asExpression -> prefixUnaryExpression .)
  ! shift/reduce conflict for AS resolved as shift
    MULT            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DIVIDE          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MOD             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    PLUS            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MINUS           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    PONTOPONTO      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    ID              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    CROSSINLINE     reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IMPORT          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    INIT            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    NOINLINE        reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    OUT             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    VARARG          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    WHERE           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    ELVIS           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IN              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    NOT_IN          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IS              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    NOT_IS          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MENOR           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MAIOR           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MENORIGUAL      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MAIORIGUAL      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DIFERENTE       reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IDENTIDADE      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IGUALDADE       reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    AND             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    OR              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    FUN             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    FOR             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    WHILE           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DO              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    LPAREN          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    LITERAL_STRING  reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DOISP           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    LCCT            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    IF              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    RETURN          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    RETURN_AT       reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    CONTINUE        reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    CONTINUE_AT     reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    BREAK           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    BREAK_AT        reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    RCHAVE          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    INCREMENTO      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DECREMENTO      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    NOT             reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    SUSPEND         reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MULTIGUAL       reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    DIVIGUAL        reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    MODIGUAL        reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    PONTO           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    COLONCOLON      reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    LCHAVE          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    RPAREN          reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    PV              reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    ELSE            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    $end            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    RCCT            reduce using rule 112 (asExpression -> prefixUnaryExpression .)
    AS              shift and go to state 202

  ! MAIORIGUAL      [ reduce using rule 134 (assignableExpression -> prefixUnaryExpression .) ]
  ! MENORIGUAL      [ reduce using rule 134 (assignableExpression -> prefixUnaryExpression .) ]
  ! MULTIGUAL       [ reduce using rule 134 (assignableExpression -> prefixUnaryExpression .) ]
  ! DIVIGUAL        [ reduce using rule 134 (assignableExpression -> prefixUnaryExpression .) ]
  ! MODIGUAL        [ reduce using rule 134 (assignableExpression -> prefixUnaryExpression .) ]
  ! RPAREN          [ reduce using rule 134 (assignableExpression -> prefixUnaryExpression .) ]
  ! AS              [ reduce using rule 112 (asExpression -> prefixUnaryExpression .) ]

    asOperator                     shift and go to state 201

state 130

    (135) assignableExpression -> parenthesizedAssignableExpression .

    MAIORIGUAL      reduce using rule 135 (assignableExpression -> parenthesizedAssignableExpression .)
    MENORIGUAL      reduce using rule 135 (assignableExpression -> parenthesizedAssignableExpression .)
    MULTIGUAL       reduce using rule 135 (assignableExpression -> parenthesizedAssignableExpression .)
    DIVIGUAL        reduce using rule 135 (assignableExpression -> parenthesizedAssignableExpression .)
    MODIGUAL        reduce using rule 135 (assignableExpression -> parenthesizedAssignableExpression .)
    RPAREN          reduce using rule 135 (assignableExpression -> parenthesizedAssignableExpression .)


state 131

    (78) forStatement_MD -> FOR . LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> FOR . LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> FOR . LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> FOR . LPAREN variableDeclaration IN expression RPAREN

    LPAREN          shift and go to state 238


state 132

    (133) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (136) parenthesizedAssignableExpression -> LPAREN . assignableExpression RPAREN
    (172) parenthesizedExpression -> LPAREN . expression RPAREN
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (88) expression -> . disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (41) typeModifier -> . SUSPEND
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for RCHAVE resolved as shift
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    FUN             shift and go to state 207
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    directlyAssignableExpression   shift and go to state 239
    assignableExpression           shift and go to state 240
    expression                     shift and go to state 241
    postfixUnaryExpression         shift and go to state 127
    simpleIdentifier               shift and go to state 120
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    disjunction                    shift and go to state 90
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    conjunction                    shift and go to state 91
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    equality                       shift and go to state 92
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    comparison                     shift and go to state 93
    typeModifier                   shift and go to state 10
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 133

    (82) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 242


state 134

    (84) doWhileStatement -> DO . controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> DO . WHILE LPAREN expression RPAREN
    (71) controlStructureBody -> . block
    (72) controlStructureBody -> . statement
    (73) block -> . LCHAVE statements RCHAVE
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for RCHAVE resolved as shift
    WHILE           shift and go to state 244
    LCHAVE          shift and go to state 69
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    MULTIGUAL       reduce using rule 117 (preue -> .)
    DIVIGUAL        reduce using rule 117 (preue -> .)
    MODIGUAL        reduce using rule 117 (preue -> .)
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    controlStructureBody           shift and go to state 243
    expression                     shift and go to state 118
    block                          shift and go to state 245
    statement                      shift and go to state 246
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 135

    (121) postfixUnaryExpression -> primaryExpression .
    (122) postfixUnaryExpression -> primaryExpression . posue
    (123) posue -> . postfixUnarySuffix
    (124) posue -> . postfixUnarySuffix posue
    (125) postfixUnarySuffix -> . postfixUnaryOperator
    (126) postfixUnarySuffix -> . typeArguments
    (127) postfixUnarySuffix -> . callSuffix
    (128) postfixUnarySuffix -> . indexingSuffix
    (129) postfixUnarySuffix -> . navigationSuffix
    (260) postfixUnaryOperator -> . INCREMENTO
    (261) postfixUnaryOperator -> . DECREMENTO
    (153) typeArguments -> . MENOR ta MAIOR
    (146) callSuffix -> . typeArguments valueArguments annotatedLambda
    (147) callSuffix -> . valueArguments annotatedLambda
    (148) callSuffix -> . typeArguments annotatedLambda
    (149) callSuffix -> . annotatedLambda
    (150) callSuffix -> . typeArguments valueArguments
    (151) callSuffix -> . valueArguments
    (140) indexingSuffix -> . LCCT isuf RCCT
    (144) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (145) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (157) valueArguments -> . LPAREN RPAREN
    (158) valueArguments -> . LPAREN vas RPAREN
    (152) annotatedLambda -> . lambdaLiteral
    (262) memberAccessOperator -> . PONTO
    (263) memberAccessOperator -> . safeNav
    (264) memberAccessOperator -> . COLONCOLON
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (265) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
    FUN             reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    FOR             reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    WHILE           reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    DO              reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    ID              reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    CROSSINLINE     reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    IMPORT          reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    INIT            reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    NOINLINE        reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    OUT             reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    VARARG          reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    WHERE           reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    LITERAL_STRING  reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    DOISP           reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    IF              reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    RETURN          reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    RETURN_AT       reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE        reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE_AT     reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    BREAK           reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    BREAK_AT        reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    MINUS           reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    PLUS            reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    NOT             reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    SUSPEND         reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    MAIORIGUAL      reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    MENORIGUAL      reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    MULTIGUAL       reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    DIVIGUAL        reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    MODIGUAL        reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    AS              reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    OR              reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    AND             reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    DIFERENTE       reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    IDENTIDADE      reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    IGUALDADE       reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    SEMIDENTIDADE   reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    MAIOR           reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    IN              reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    NOT_IN          reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    IS              reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    NOT_IS          reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    ELVIS           reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    PONTOPONTO      reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    MULT            reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    DIVIDE          reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    MOD             reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    LCHAVE          reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    PV              reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    ELSE            reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    $end            reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    COMMA           reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    RPAREN          reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    RCCT            reduce using rule 121 (postfixUnaryExpression -> primaryExpression .)
    INCREMENTO      shift and go to state 254
    DECREMENTO      shift and go to state 255
    MENOR           shift and go to state 64
    LCCT            shift and go to state 233
    LPAREN          shift and go to state 258
    PONTO           shift and go to state 235
    COLONCOLON      shift and go to state 237
    RCHAVE          shift and go to state 113

  ! MENOR           [ reduce using rule 121 (postfixUnaryExpression -> primaryExpression .) ]
  ! LCCT            [ reduce using rule 121 (postfixUnaryExpression -> primaryExpression .) ]
  ! PONTO           [ reduce using rule 121 (postfixUnaryExpression -> primaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 121 (postfixUnaryExpression -> primaryExpression .) ]
  ! LPAREN          [ reduce using rule 121 (postfixUnaryExpression -> primaryExpression .) ]
  ! RCHAVE          [ reduce using rule 121 (postfixUnaryExpression -> primaryExpression .) ]
  ! INCREMENTO      [ reduce using rule 121 (postfixUnaryExpression -> primaryExpression .) ]
  ! DECREMENTO      [ reduce using rule 121 (postfixUnaryExpression -> primaryExpression .) ]

    posue                          shift and go to state 247
    postfixUnarySuffix             shift and go to state 248
    postfixUnaryOperator           shift and go to state 249
    typeArguments                  shift and go to state 250
    callSuffix                     shift and go to state 251
    indexingSuffix                 shift and go to state 252
    navigationSuffix               shift and go to state 253
    valueArguments                 shift and go to state 256
    annotatedLambda                shift and go to state 257
    memberAccessOperator           shift and go to state 234
    lambdaLiteral                  shift and go to state 259
    safeNav                        shift and go to state 236

state 136

    (273) simpleIdentifier -> WHERE .
    (200) anonymousFunction -> WHERE . af
    (201) af -> . typeConstraint
    (202) af -> . typeConstraint COMMA af
    (203) typeConstraint -> . simpleIdentifier DOISP type
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IGUALDADE       reduce using rule 273 (simpleIdentifier -> WHERE .)
    INCREMENTO      reduce using rule 273 (simpleIdentifier -> WHERE .)
    DECREMENTO      reduce using rule 273 (simpleIdentifier -> WHERE .)
    MENOR           reduce using rule 273 (simpleIdentifier -> WHERE .)
    LCCT            reduce using rule 273 (simpleIdentifier -> WHERE .)
    LPAREN          reduce using rule 273 (simpleIdentifier -> WHERE .)
    PONTO           reduce using rule 273 (simpleIdentifier -> WHERE .)
    COLONCOLON      reduce using rule 273 (simpleIdentifier -> WHERE .)
    RCHAVE          reduce using rule 273 (simpleIdentifier -> WHERE .)
    MINUS           reduce using rule 273 (simpleIdentifier -> WHERE .)
    PLUS            reduce using rule 273 (simpleIdentifier -> WHERE .)
    NOT             reduce using rule 273 (simpleIdentifier -> WHERE .)
    LITERAL_STRING  reduce using rule 273 (simpleIdentifier -> WHERE .)
    DOISP           reduce using rule 273 (simpleIdentifier -> WHERE .)
    IF              reduce using rule 273 (simpleIdentifier -> WHERE .)
    RETURN          reduce using rule 273 (simpleIdentifier -> WHERE .)
    RETURN_AT       reduce using rule 273 (simpleIdentifier -> WHERE .)
    CONTINUE        reduce using rule 273 (simpleIdentifier -> WHERE .)
    CONTINUE_AT     reduce using rule 273 (simpleIdentifier -> WHERE .)
    BREAK           reduce using rule 273 (simpleIdentifier -> WHERE .)
    BREAK_AT        reduce using rule 273 (simpleIdentifier -> WHERE .)
    FUN             reduce using rule 273 (simpleIdentifier -> WHERE .)
    SUSPEND         reduce using rule 273 (simpleIdentifier -> WHERE .)
    OR              reduce using rule 273 (simpleIdentifier -> WHERE .)
    AND             reduce using rule 273 (simpleIdentifier -> WHERE .)
    DIFERENTE       reduce using rule 273 (simpleIdentifier -> WHERE .)
    IDENTIDADE      reduce using rule 273 (simpleIdentifier -> WHERE .)
    SEMIDENTIDADE   reduce using rule 273 (simpleIdentifier -> WHERE .)
    MAIOR           reduce using rule 273 (simpleIdentifier -> WHERE .)
    MENORIGUAL      reduce using rule 273 (simpleIdentifier -> WHERE .)
    MAIORIGUAL      reduce using rule 273 (simpleIdentifier -> WHERE .)
    IN              reduce using rule 273 (simpleIdentifier -> WHERE .)
    NOT_IN          reduce using rule 273 (simpleIdentifier -> WHERE .)
    IS              reduce using rule 273 (simpleIdentifier -> WHERE .)
    NOT_IS          reduce using rule 273 (simpleIdentifier -> WHERE .)
    ELVIS           reduce using rule 273 (simpleIdentifier -> WHERE .)
    PONTOPONTO      reduce using rule 273 (simpleIdentifier -> WHERE .)
    MULT            reduce using rule 273 (simpleIdentifier -> WHERE .)
    DIVIDE          reduce using rule 273 (simpleIdentifier -> WHERE .)
    MOD             reduce using rule 273 (simpleIdentifier -> WHERE .)
    AS              reduce using rule 273 (simpleIdentifier -> WHERE .)
    MULTIGUAL       reduce using rule 273 (simpleIdentifier -> WHERE .)
    DIVIGUAL        reduce using rule 273 (simpleIdentifier -> WHERE .)
    MODIGUAL        reduce using rule 273 (simpleIdentifier -> WHERE .)
    FOR             reduce using rule 273 (simpleIdentifier -> WHERE .)
    WHILE           reduce using rule 273 (simpleIdentifier -> WHERE .)
    DO              reduce using rule 273 (simpleIdentifier -> WHERE .)
    LCHAVE          reduce using rule 273 (simpleIdentifier -> WHERE .)
    PV              reduce using rule 273 (simpleIdentifier -> WHERE .)
    ELSE            reduce using rule 273 (simpleIdentifier -> WHERE .)
    $end            reduce using rule 273 (simpleIdentifier -> WHERE .)
    COMMA           reduce using rule 273 (simpleIdentifier -> WHERE .)
    RPAREN          reduce using rule 273 (simpleIdentifier -> WHERE .)
    RCCT            reduce using rule 273 (simpleIdentifier -> WHERE .)
    SETA            reduce using rule 273 (simpleIdentifier -> WHERE .)
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 273 (simpleIdentifier -> WHERE .) ]
  ! CROSSINLINE     [ reduce using rule 273 (simpleIdentifier -> WHERE .) ]
  ! IMPORT          [ reduce using rule 273 (simpleIdentifier -> WHERE .) ]
  ! INIT            [ reduce using rule 273 (simpleIdentifier -> WHERE .) ]
  ! NOINLINE        [ reduce using rule 273 (simpleIdentifier -> WHERE .) ]
  ! OUT             [ reduce using rule 273 (simpleIdentifier -> WHERE .) ]
  ! VARARG          [ reduce using rule 273 (simpleIdentifier -> WHERE .) ]
  ! WHERE           [ reduce using rule 273 (simpleIdentifier -> WHERE .) ]

    af                             shift and go to state 260
    typeConstraint                 shift and go to state 261
    simpleIdentifier               shift and go to state 262

state 137

    (164) primaryExpression -> parenthesizedExpression .

    INCREMENTO      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DECREMENTO      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MENOR           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    LCCT            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    LPAREN          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    PONTO           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    COLONCOLON      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    RCHAVE          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    FUN             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    FOR             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    WHILE           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DO              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    ID              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    CROSSINLINE     reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IMPORT          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    INIT            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    NOINLINE        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    OUT             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    VARARG          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    WHERE           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    LITERAL_STRING  reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DOISP           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IF              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    RETURN          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    RETURN_AT       reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    CONTINUE        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    CONTINUE_AT     reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    BREAK           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    BREAK_AT        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MINUS           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    PLUS            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    NOT             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    SUSPEND         reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MAIORIGUAL      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MENORIGUAL      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MULTIGUAL       reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DIVIGUAL        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MODIGUAL        reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    AS              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    OR              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    AND             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DIFERENTE       reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IDENTIDADE      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IGUALDADE       reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    SEMIDENTIDADE   reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MAIOR           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IN              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    NOT_IN          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    IS              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    NOT_IS          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    ELVIS           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    PONTOPONTO      reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MULT            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    DIVIDE          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    MOD             reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    LCHAVE          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    PV              reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    ELSE            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    $end            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    COMMA           reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    RPAREN          reduce using rule 164 (primaryExpression -> parenthesizedExpression .)
    RCCT            reduce using rule 164 (primaryExpression -> parenthesizedExpression .)


state 138

    (166) primaryExpression -> LITERAL_STRING .

    INCREMENTO      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DECREMENTO      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MENOR           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    LCCT            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    LPAREN          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    PONTO           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    COLONCOLON      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    RCHAVE          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    FUN             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    FOR             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    WHILE           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DO              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    ID              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    CROSSINLINE     reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IMPORT          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    INIT            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    NOINLINE        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    OUT             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    VARARG          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    WHERE           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    LITERAL_STRING  reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DOISP           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IF              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    RETURN          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    RETURN_AT       reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    CONTINUE        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    CONTINUE_AT     reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    BREAK           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    BREAK_AT        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MINUS           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    PLUS            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    NOT             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    SUSPEND         reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MAIORIGUAL      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MENORIGUAL      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MULTIGUAL       reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DIVIGUAL        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MODIGUAL        reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    AS              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    OR              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    AND             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DIFERENTE       reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IDENTIDADE      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IGUALDADE       reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    SEMIDENTIDADE   reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MAIOR           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IN              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    NOT_IN          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    IS              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    NOT_IS          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    ELVIS           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    PONTOPONTO      reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MULT            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    DIVIDE          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    MOD             reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    LCHAVE          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    PV              reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    ELSE            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    $end            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    COMMA           reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    RPAREN          reduce using rule 166 (primaryExpression -> LITERAL_STRING .)
    RCCT            reduce using rule 166 (primaryExpression -> LITERAL_STRING .)


state 139

    (167) primaryExpression -> callableReference .

    INCREMENTO      reduce using rule 167 (primaryExpression -> callableReference .)
    DECREMENTO      reduce using rule 167 (primaryExpression -> callableReference .)
    MENOR           reduce using rule 167 (primaryExpression -> callableReference .)
    LCCT            reduce using rule 167 (primaryExpression -> callableReference .)
    LPAREN          reduce using rule 167 (primaryExpression -> callableReference .)
    PONTO           reduce using rule 167 (primaryExpression -> callableReference .)
    COLONCOLON      reduce using rule 167 (primaryExpression -> callableReference .)
    RCHAVE          reduce using rule 167 (primaryExpression -> callableReference .)
    FUN             reduce using rule 167 (primaryExpression -> callableReference .)
    FOR             reduce using rule 167 (primaryExpression -> callableReference .)
    WHILE           reduce using rule 167 (primaryExpression -> callableReference .)
    DO              reduce using rule 167 (primaryExpression -> callableReference .)
    ID              reduce using rule 167 (primaryExpression -> callableReference .)
    CROSSINLINE     reduce using rule 167 (primaryExpression -> callableReference .)
    IMPORT          reduce using rule 167 (primaryExpression -> callableReference .)
    INIT            reduce using rule 167 (primaryExpression -> callableReference .)
    NOINLINE        reduce using rule 167 (primaryExpression -> callableReference .)
    OUT             reduce using rule 167 (primaryExpression -> callableReference .)
    VARARG          reduce using rule 167 (primaryExpression -> callableReference .)
    WHERE           reduce using rule 167 (primaryExpression -> callableReference .)
    LITERAL_STRING  reduce using rule 167 (primaryExpression -> callableReference .)
    DOISP           reduce using rule 167 (primaryExpression -> callableReference .)
    IF              reduce using rule 167 (primaryExpression -> callableReference .)
    RETURN          reduce using rule 167 (primaryExpression -> callableReference .)
    RETURN_AT       reduce using rule 167 (primaryExpression -> callableReference .)
    CONTINUE        reduce using rule 167 (primaryExpression -> callableReference .)
    CONTINUE_AT     reduce using rule 167 (primaryExpression -> callableReference .)
    BREAK           reduce using rule 167 (primaryExpression -> callableReference .)
    BREAK_AT        reduce using rule 167 (primaryExpression -> callableReference .)
    MINUS           reduce using rule 167 (primaryExpression -> callableReference .)
    PLUS            reduce using rule 167 (primaryExpression -> callableReference .)
    NOT             reduce using rule 167 (primaryExpression -> callableReference .)
    SUSPEND         reduce using rule 167 (primaryExpression -> callableReference .)
    MAIORIGUAL      reduce using rule 167 (primaryExpression -> callableReference .)
    MENORIGUAL      reduce using rule 167 (primaryExpression -> callableReference .)
    MULTIGUAL       reduce using rule 167 (primaryExpression -> callableReference .)
    DIVIGUAL        reduce using rule 167 (primaryExpression -> callableReference .)
    MODIGUAL        reduce using rule 167 (primaryExpression -> callableReference .)
    AS              reduce using rule 167 (primaryExpression -> callableReference .)
    OR              reduce using rule 167 (primaryExpression -> callableReference .)
    AND             reduce using rule 167 (primaryExpression -> callableReference .)
    DIFERENTE       reduce using rule 167 (primaryExpression -> callableReference .)
    IDENTIDADE      reduce using rule 167 (primaryExpression -> callableReference .)
    IGUALDADE       reduce using rule 167 (primaryExpression -> callableReference .)
    SEMIDENTIDADE   reduce using rule 167 (primaryExpression -> callableReference .)
    MAIOR           reduce using rule 167 (primaryExpression -> callableReference .)
    IN              reduce using rule 167 (primaryExpression -> callableReference .)
    NOT_IN          reduce using rule 167 (primaryExpression -> callableReference .)
    IS              reduce using rule 167 (primaryExpression -> callableReference .)
    NOT_IS          reduce using rule 167 (primaryExpression -> callableReference .)
    ELVIS           reduce using rule 167 (primaryExpression -> callableReference .)
    PONTOPONTO      reduce using rule 167 (primaryExpression -> callableReference .)
    MULT            reduce using rule 167 (primaryExpression -> callableReference .)
    DIVIDE          reduce using rule 167 (primaryExpression -> callableReference .)
    MOD             reduce using rule 167 (primaryExpression -> callableReference .)
    LCHAVE          reduce using rule 167 (primaryExpression -> callableReference .)
    PV              reduce using rule 167 (primaryExpression -> callableReference .)
    ELSE            reduce using rule 167 (primaryExpression -> callableReference .)
    $end            reduce using rule 167 (primaryExpression -> callableReference .)
    COMMA           reduce using rule 167 (primaryExpression -> callableReference .)
    RPAREN          reduce using rule 167 (primaryExpression -> callableReference .)
    RCCT            reduce using rule 167 (primaryExpression -> callableReference .)


state 140

    (168) primaryExpression -> functionLiteral .

    INCREMENTO      reduce using rule 168 (primaryExpression -> functionLiteral .)
    DECREMENTO      reduce using rule 168 (primaryExpression -> functionLiteral .)
    MENOR           reduce using rule 168 (primaryExpression -> functionLiteral .)
    LCCT            reduce using rule 168 (primaryExpression -> functionLiteral .)
    LPAREN          reduce using rule 168 (primaryExpression -> functionLiteral .)
    PONTO           reduce using rule 168 (primaryExpression -> functionLiteral .)
    COLONCOLON      reduce using rule 168 (primaryExpression -> functionLiteral .)
    RCHAVE          reduce using rule 168 (primaryExpression -> functionLiteral .)
    FUN             reduce using rule 168 (primaryExpression -> functionLiteral .)
    FOR             reduce using rule 168 (primaryExpression -> functionLiteral .)
    WHILE           reduce using rule 168 (primaryExpression -> functionLiteral .)
    DO              reduce using rule 168 (primaryExpression -> functionLiteral .)
    ID              reduce using rule 168 (primaryExpression -> functionLiteral .)
    CROSSINLINE     reduce using rule 168 (primaryExpression -> functionLiteral .)
    IMPORT          reduce using rule 168 (primaryExpression -> functionLiteral .)
    INIT            reduce using rule 168 (primaryExpression -> functionLiteral .)
    NOINLINE        reduce using rule 168 (primaryExpression -> functionLiteral .)
    OUT             reduce using rule 168 (primaryExpression -> functionLiteral .)
    VARARG          reduce using rule 168 (primaryExpression -> functionLiteral .)
    WHERE           reduce using rule 168 (primaryExpression -> functionLiteral .)
    LITERAL_STRING  reduce using rule 168 (primaryExpression -> functionLiteral .)
    DOISP           reduce using rule 168 (primaryExpression -> functionLiteral .)
    IF              reduce using rule 168 (primaryExpression -> functionLiteral .)
    RETURN          reduce using rule 168 (primaryExpression -> functionLiteral .)
    RETURN_AT       reduce using rule 168 (primaryExpression -> functionLiteral .)
    CONTINUE        reduce using rule 168 (primaryExpression -> functionLiteral .)
    CONTINUE_AT     reduce using rule 168 (primaryExpression -> functionLiteral .)
    BREAK           reduce using rule 168 (primaryExpression -> functionLiteral .)
    BREAK_AT        reduce using rule 168 (primaryExpression -> functionLiteral .)
    MINUS           reduce using rule 168 (primaryExpression -> functionLiteral .)
    PLUS            reduce using rule 168 (primaryExpression -> functionLiteral .)
    NOT             reduce using rule 168 (primaryExpression -> functionLiteral .)
    SUSPEND         reduce using rule 168 (primaryExpression -> functionLiteral .)
    MAIORIGUAL      reduce using rule 168 (primaryExpression -> functionLiteral .)
    MENORIGUAL      reduce using rule 168 (primaryExpression -> functionLiteral .)
    MULTIGUAL       reduce using rule 168 (primaryExpression -> functionLiteral .)
    DIVIGUAL        reduce using rule 168 (primaryExpression -> functionLiteral .)
    MODIGUAL        reduce using rule 168 (primaryExpression -> functionLiteral .)
    AS              reduce using rule 168 (primaryExpression -> functionLiteral .)
    OR              reduce using rule 168 (primaryExpression -> functionLiteral .)
    AND             reduce using rule 168 (primaryExpression -> functionLiteral .)
    DIFERENTE       reduce using rule 168 (primaryExpression -> functionLiteral .)
    IDENTIDADE      reduce using rule 168 (primaryExpression -> functionLiteral .)
    IGUALDADE       reduce using rule 168 (primaryExpression -> functionLiteral .)
    SEMIDENTIDADE   reduce using rule 168 (primaryExpression -> functionLiteral .)
    MAIOR           reduce using rule 168 (primaryExpression -> functionLiteral .)
    IN              reduce using rule 168 (primaryExpression -> functionLiteral .)
    NOT_IN          reduce using rule 168 (primaryExpression -> functionLiteral .)
    IS              reduce using rule 168 (primaryExpression -> functionLiteral .)
    NOT_IS          reduce using rule 168 (primaryExpression -> functionLiteral .)
    ELVIS           reduce using rule 168 (primaryExpression -> functionLiteral .)
    PONTOPONTO      reduce using rule 168 (primaryExpression -> functionLiteral .)
    MULT            reduce using rule 168 (primaryExpression -> functionLiteral .)
    DIVIDE          reduce using rule 168 (primaryExpression -> functionLiteral .)
    MOD             reduce using rule 168 (primaryExpression -> functionLiteral .)
    LCHAVE          reduce using rule 168 (primaryExpression -> functionLiteral .)
    PV              reduce using rule 168 (primaryExpression -> functionLiteral .)
    ELSE            reduce using rule 168 (primaryExpression -> functionLiteral .)
    $end            reduce using rule 168 (primaryExpression -> functionLiteral .)
    COMMA           reduce using rule 168 (primaryExpression -> functionLiteral .)
    RPAREN          reduce using rule 168 (primaryExpression -> functionLiteral .)
    RCCT            reduce using rule 168 (primaryExpression -> functionLiteral .)


state 141

    (169) primaryExpression -> collectionLiteral .

    INCREMENTO      reduce using rule 169 (primaryExpression -> collectionLiteral .)
    DECREMENTO      reduce using rule 169 (primaryExpression -> collectionLiteral .)
    MENOR           reduce using rule 169 (primaryExpression -> collectionLiteral .)
    LCCT            reduce using rule 169 (primaryExpression -> collectionLiteral .)
    LPAREN          reduce using rule 169 (primaryExpression -> collectionLiteral .)
    PONTO           reduce using rule 169 (primaryExpression -> collectionLiteral .)
    COLONCOLON      reduce using rule 169 (primaryExpression -> collectionLiteral .)
    RCHAVE          reduce using rule 169 (primaryExpression -> collectionLiteral .)
    FUN             reduce using rule 169 (primaryExpression -> collectionLiteral .)
    FOR             reduce using rule 169 (primaryExpression -> collectionLiteral .)
    WHILE           reduce using rule 169 (primaryExpression -> collectionLiteral .)
    DO              reduce using rule 169 (primaryExpression -> collectionLiteral .)
    ID              reduce using rule 169 (primaryExpression -> collectionLiteral .)
    CROSSINLINE     reduce using rule 169 (primaryExpression -> collectionLiteral .)
    IMPORT          reduce using rule 169 (primaryExpression -> collectionLiteral .)
    INIT            reduce using rule 169 (primaryExpression -> collectionLiteral .)
    NOINLINE        reduce using rule 169 (primaryExpression -> collectionLiteral .)
    OUT             reduce using rule 169 (primaryExpression -> collectionLiteral .)
    VARARG          reduce using rule 169 (primaryExpression -> collectionLiteral .)
    WHERE           reduce using rule 169 (primaryExpression -> collectionLiteral .)
    LITERAL_STRING  reduce using rule 169 (primaryExpression -> collectionLiteral .)
    DOISP           reduce using rule 169 (primaryExpression -> collectionLiteral .)
    IF              reduce using rule 169 (primaryExpression -> collectionLiteral .)
    RETURN          reduce using rule 169 (primaryExpression -> collectionLiteral .)
    RETURN_AT       reduce using rule 169 (primaryExpression -> collectionLiteral .)
    CONTINUE        reduce using rule 169 (primaryExpression -> collectionLiteral .)
    CONTINUE_AT     reduce using rule 169 (primaryExpression -> collectionLiteral .)
    BREAK           reduce using rule 169 (primaryExpression -> collectionLiteral .)
    BREAK_AT        reduce using rule 169 (primaryExpression -> collectionLiteral .)
    MINUS           reduce using rule 169 (primaryExpression -> collectionLiteral .)
    PLUS            reduce using rule 169 (primaryExpression -> collectionLiteral .)
    NOT             reduce using rule 169 (primaryExpression -> collectionLiteral .)
    SUSPEND         reduce using rule 169 (primaryExpression -> collectionLiteral .)
    MAIORIGUAL      reduce using rule 169 (primaryExpression -> collectionLiteral .)
    MENORIGUAL      reduce using rule 169 (primaryExpression -> collectionLiteral .)
    MULTIGUAL       reduce using rule 169 (primaryExpression -> collectionLiteral .)
    DIVIGUAL        reduce using rule 169 (primaryExpression -> collectionLiteral .)
    MODIGUAL        reduce using rule 169 (primaryExpression -> collectionLiteral .)
    AS              reduce using rule 169 (primaryExpression -> collectionLiteral .)
    OR              reduce using rule 169 (primaryExpression -> collectionLiteral .)
    AND             reduce using rule 169 (primaryExpression -> collectionLiteral .)
    DIFERENTE       reduce using rule 169 (primaryExpression -> collectionLiteral .)
    IDENTIDADE      reduce using rule 169 (primaryExpression -> collectionLiteral .)
    IGUALDADE       reduce using rule 169 (primaryExpression -> collectionLiteral .)
    SEMIDENTIDADE   reduce using rule 169 (primaryExpression -> collectionLiteral .)
    MAIOR           reduce using rule 169 (primaryExpression -> collectionLiteral .)
    IN              reduce using rule 169 (primaryExpression -> collectionLiteral .)
    NOT_IN          reduce using rule 169 (primaryExpression -> collectionLiteral .)
    IS              reduce using rule 169 (primaryExpression -> collectionLiteral .)
    NOT_IS          reduce using rule 169 (primaryExpression -> collectionLiteral .)
    ELVIS           reduce using rule 169 (primaryExpression -> collectionLiteral .)
    PONTOPONTO      reduce using rule 169 (primaryExpression -> collectionLiteral .)
    MULT            reduce using rule 169 (primaryExpression -> collectionLiteral .)
    DIVIDE          reduce using rule 169 (primaryExpression -> collectionLiteral .)
    MOD             reduce using rule 169 (primaryExpression -> collectionLiteral .)
    LCHAVE          reduce using rule 169 (primaryExpression -> collectionLiteral .)
    PV              reduce using rule 169 (primaryExpression -> collectionLiteral .)
    ELSE            reduce using rule 169 (primaryExpression -> collectionLiteral .)
    $end            reduce using rule 169 (primaryExpression -> collectionLiteral .)
    COMMA           reduce using rule 169 (primaryExpression -> collectionLiteral .)
    RPAREN          reduce using rule 169 (primaryExpression -> collectionLiteral .)
    RCCT            reduce using rule 169 (primaryExpression -> collectionLiteral .)


state 142

    (170) primaryExpression -> ifExpression .

    INCREMENTO      reduce using rule 170 (primaryExpression -> ifExpression .)
    DECREMENTO      reduce using rule 170 (primaryExpression -> ifExpression .)
    MENOR           reduce using rule 170 (primaryExpression -> ifExpression .)
    LCCT            reduce using rule 170 (primaryExpression -> ifExpression .)
    LPAREN          reduce using rule 170 (primaryExpression -> ifExpression .)
    PONTO           reduce using rule 170 (primaryExpression -> ifExpression .)
    COLONCOLON      reduce using rule 170 (primaryExpression -> ifExpression .)
    RCHAVE          reduce using rule 170 (primaryExpression -> ifExpression .)
    FUN             reduce using rule 170 (primaryExpression -> ifExpression .)
    FOR             reduce using rule 170 (primaryExpression -> ifExpression .)
    WHILE           reduce using rule 170 (primaryExpression -> ifExpression .)
    DO              reduce using rule 170 (primaryExpression -> ifExpression .)
    ID              reduce using rule 170 (primaryExpression -> ifExpression .)
    CROSSINLINE     reduce using rule 170 (primaryExpression -> ifExpression .)
    IMPORT          reduce using rule 170 (primaryExpression -> ifExpression .)
    INIT            reduce using rule 170 (primaryExpression -> ifExpression .)
    NOINLINE        reduce using rule 170 (primaryExpression -> ifExpression .)
    OUT             reduce using rule 170 (primaryExpression -> ifExpression .)
    VARARG          reduce using rule 170 (primaryExpression -> ifExpression .)
    WHERE           reduce using rule 170 (primaryExpression -> ifExpression .)
    LITERAL_STRING  reduce using rule 170 (primaryExpression -> ifExpression .)
    DOISP           reduce using rule 170 (primaryExpression -> ifExpression .)
    IF              reduce using rule 170 (primaryExpression -> ifExpression .)
    RETURN          reduce using rule 170 (primaryExpression -> ifExpression .)
    RETURN_AT       reduce using rule 170 (primaryExpression -> ifExpression .)
    CONTINUE        reduce using rule 170 (primaryExpression -> ifExpression .)
    CONTINUE_AT     reduce using rule 170 (primaryExpression -> ifExpression .)
    BREAK           reduce using rule 170 (primaryExpression -> ifExpression .)
    BREAK_AT        reduce using rule 170 (primaryExpression -> ifExpression .)
    MINUS           reduce using rule 170 (primaryExpression -> ifExpression .)
    PLUS            reduce using rule 170 (primaryExpression -> ifExpression .)
    NOT             reduce using rule 170 (primaryExpression -> ifExpression .)
    SUSPEND         reduce using rule 170 (primaryExpression -> ifExpression .)
    MAIORIGUAL      reduce using rule 170 (primaryExpression -> ifExpression .)
    MENORIGUAL      reduce using rule 170 (primaryExpression -> ifExpression .)
    MULTIGUAL       reduce using rule 170 (primaryExpression -> ifExpression .)
    DIVIGUAL        reduce using rule 170 (primaryExpression -> ifExpression .)
    MODIGUAL        reduce using rule 170 (primaryExpression -> ifExpression .)
    AS              reduce using rule 170 (primaryExpression -> ifExpression .)
    OR              reduce using rule 170 (primaryExpression -> ifExpression .)
    AND             reduce using rule 170 (primaryExpression -> ifExpression .)
    DIFERENTE       reduce using rule 170 (primaryExpression -> ifExpression .)
    IDENTIDADE      reduce using rule 170 (primaryExpression -> ifExpression .)
    IGUALDADE       reduce using rule 170 (primaryExpression -> ifExpression .)
    SEMIDENTIDADE   reduce using rule 170 (primaryExpression -> ifExpression .)
    MAIOR           reduce using rule 170 (primaryExpression -> ifExpression .)
    IN              reduce using rule 170 (primaryExpression -> ifExpression .)
    NOT_IN          reduce using rule 170 (primaryExpression -> ifExpression .)
    IS              reduce using rule 170 (primaryExpression -> ifExpression .)
    NOT_IS          reduce using rule 170 (primaryExpression -> ifExpression .)
    ELVIS           reduce using rule 170 (primaryExpression -> ifExpression .)
    PONTOPONTO      reduce using rule 170 (primaryExpression -> ifExpression .)
    MULT            reduce using rule 170 (primaryExpression -> ifExpression .)
    DIVIDE          reduce using rule 170 (primaryExpression -> ifExpression .)
    MOD             reduce using rule 170 (primaryExpression -> ifExpression .)
    LCHAVE          reduce using rule 170 (primaryExpression -> ifExpression .)
    PV              reduce using rule 170 (primaryExpression -> ifExpression .)
    ELSE            reduce using rule 170 (primaryExpression -> ifExpression .)
    $end            reduce using rule 170 (primaryExpression -> ifExpression .)
    COMMA           reduce using rule 170 (primaryExpression -> ifExpression .)
    RPAREN          reduce using rule 170 (primaryExpression -> ifExpression .)
    RCCT            reduce using rule 170 (primaryExpression -> ifExpression .)


state 143

    (171) primaryExpression -> jumpExpression .

    INCREMENTO      reduce using rule 171 (primaryExpression -> jumpExpression .)
    DECREMENTO      reduce using rule 171 (primaryExpression -> jumpExpression .)
    MENOR           reduce using rule 171 (primaryExpression -> jumpExpression .)
    LCCT            reduce using rule 171 (primaryExpression -> jumpExpression .)
    LPAREN          reduce using rule 171 (primaryExpression -> jumpExpression .)
    PONTO           reduce using rule 171 (primaryExpression -> jumpExpression .)
    COLONCOLON      reduce using rule 171 (primaryExpression -> jumpExpression .)
    RCHAVE          reduce using rule 171 (primaryExpression -> jumpExpression .)
    FUN             reduce using rule 171 (primaryExpression -> jumpExpression .)
    FOR             reduce using rule 171 (primaryExpression -> jumpExpression .)
    WHILE           reduce using rule 171 (primaryExpression -> jumpExpression .)
    DO              reduce using rule 171 (primaryExpression -> jumpExpression .)
    ID              reduce using rule 171 (primaryExpression -> jumpExpression .)
    CROSSINLINE     reduce using rule 171 (primaryExpression -> jumpExpression .)
    IMPORT          reduce using rule 171 (primaryExpression -> jumpExpression .)
    INIT            reduce using rule 171 (primaryExpression -> jumpExpression .)
    NOINLINE        reduce using rule 171 (primaryExpression -> jumpExpression .)
    OUT             reduce using rule 171 (primaryExpression -> jumpExpression .)
    VARARG          reduce using rule 171 (primaryExpression -> jumpExpression .)
    WHERE           reduce using rule 171 (primaryExpression -> jumpExpression .)
    LITERAL_STRING  reduce using rule 171 (primaryExpression -> jumpExpression .)
    DOISP           reduce using rule 171 (primaryExpression -> jumpExpression .)
    IF              reduce using rule 171 (primaryExpression -> jumpExpression .)
    RETURN          reduce using rule 171 (primaryExpression -> jumpExpression .)
    RETURN_AT       reduce using rule 171 (primaryExpression -> jumpExpression .)
    CONTINUE        reduce using rule 171 (primaryExpression -> jumpExpression .)
    CONTINUE_AT     reduce using rule 171 (primaryExpression -> jumpExpression .)
    BREAK           reduce using rule 171 (primaryExpression -> jumpExpression .)
    BREAK_AT        reduce using rule 171 (primaryExpression -> jumpExpression .)
    MINUS           reduce using rule 171 (primaryExpression -> jumpExpression .)
    PLUS            reduce using rule 171 (primaryExpression -> jumpExpression .)
    NOT             reduce using rule 171 (primaryExpression -> jumpExpression .)
    SUSPEND         reduce using rule 171 (primaryExpression -> jumpExpression .)
    MAIORIGUAL      reduce using rule 171 (primaryExpression -> jumpExpression .)
    MENORIGUAL      reduce using rule 171 (primaryExpression -> jumpExpression .)
    MULTIGUAL       reduce using rule 171 (primaryExpression -> jumpExpression .)
    DIVIGUAL        reduce using rule 171 (primaryExpression -> jumpExpression .)
    MODIGUAL        reduce using rule 171 (primaryExpression -> jumpExpression .)
    AS              reduce using rule 171 (primaryExpression -> jumpExpression .)
    OR              reduce using rule 171 (primaryExpression -> jumpExpression .)
    AND             reduce using rule 171 (primaryExpression -> jumpExpression .)
    DIFERENTE       reduce using rule 171 (primaryExpression -> jumpExpression .)
    IDENTIDADE      reduce using rule 171 (primaryExpression -> jumpExpression .)
    IGUALDADE       reduce using rule 171 (primaryExpression -> jumpExpression .)
    SEMIDENTIDADE   reduce using rule 171 (primaryExpression -> jumpExpression .)
    MAIOR           reduce using rule 171 (primaryExpression -> jumpExpression .)
    IN              reduce using rule 171 (primaryExpression -> jumpExpression .)
    NOT_IN          reduce using rule 171 (primaryExpression -> jumpExpression .)
    IS              reduce using rule 171 (primaryExpression -> jumpExpression .)
    NOT_IS          reduce using rule 171 (primaryExpression -> jumpExpression .)
    ELVIS           reduce using rule 171 (primaryExpression -> jumpExpression .)
    PONTOPONTO      reduce using rule 171 (primaryExpression -> jumpExpression .)
    MULT            reduce using rule 171 (primaryExpression -> jumpExpression .)
    DIVIDE          reduce using rule 171 (primaryExpression -> jumpExpression .)
    MOD             reduce using rule 171 (primaryExpression -> jumpExpression .)
    LCHAVE          reduce using rule 171 (primaryExpression -> jumpExpression .)
    PV              reduce using rule 171 (primaryExpression -> jumpExpression .)
    ELSE            reduce using rule 171 (primaryExpression -> jumpExpression .)
    $end            reduce using rule 171 (primaryExpression -> jumpExpression .)
    COMMA           reduce using rule 171 (primaryExpression -> jumpExpression .)
    RPAREN          reduce using rule 171 (primaryExpression -> jumpExpression .)
    RCCT            reduce using rule 171 (primaryExpression -> jumpExpression .)


state 144

    (227) callableReference -> receiverType . DOISP DOISP simpleIdentifier
    (229) callableReference -> receiverType . DOISP DOISP CLASS

    DOISP           shift and go to state 263


state 145

    (228) callableReference -> DOISP . DOISP simpleIdentifier
    (230) callableReference -> DOISP . DOISP CLASS

    DOISP           shift and go to state 264


state 146

    (208) functionLiteral -> lambdaLiteral .

    INCREMENTO      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DECREMENTO      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MENOR           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    LCCT            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    LPAREN          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    PONTO           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    COLONCOLON      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    RCHAVE          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    FUN             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    FOR             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    WHILE           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DO              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    ID              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IMPORT          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    INIT            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NOINLINE        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    OUT             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    VARARG          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    WHERE           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DOISP           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IF              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    RETURN          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    RETURN_AT       reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    CONTINUE        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    BREAK           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    BREAK_AT        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MINUS           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    PLUS            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NOT             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    SUSPEND         reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MODIGUAL        reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    AS              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    OR              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    AND             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DIFERENTE       reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IGUALDADE       reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MAIOR           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IN              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NOT_IN          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    IS              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    NOT_IS          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    ELVIS           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MULT            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    DIVIDE          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    MOD             reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    LCHAVE          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    PV              reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    ELSE            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    $end            reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    COMMA           reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    RPAREN          reduce using rule 208 (functionLiteral -> lambdaLiteral .)
    RCCT            reduce using rule 208 (functionLiteral -> lambdaLiteral .)


state 147

    (209) functionLiteral -> anonymousFunction .

    INCREMENTO      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DECREMENTO      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MENOR           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    LCCT            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    LPAREN          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    PONTO           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    COLONCOLON      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    RCHAVE          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    FUN             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    FOR             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    WHILE           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DO              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    ID              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    CROSSINLINE     reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IMPORT          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    INIT            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NOINLINE        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    OUT             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    VARARG          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    WHERE           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    LITERAL_STRING  reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DOISP           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IF              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    RETURN          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    RETURN_AT       reduce using rule 209 (functionLiteral -> anonymousFunction .)
    CONTINUE        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    CONTINUE_AT     reduce using rule 209 (functionLiteral -> anonymousFunction .)
    BREAK           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    BREAK_AT        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MINUS           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    PLUS            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NOT             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    SUSPEND         reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MAIORIGUAL      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MENORIGUAL      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MULTIGUAL       reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DIVIGUAL        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MODIGUAL        reduce using rule 209 (functionLiteral -> anonymousFunction .)
    AS              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    OR              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    AND             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DIFERENTE       reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IDENTIDADE      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IGUALDADE       reduce using rule 209 (functionLiteral -> anonymousFunction .)
    SEMIDENTIDADE   reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MAIOR           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IN              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NOT_IN          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    IS              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    NOT_IS          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    ELVIS           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    PONTOPONTO      reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MULT            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    DIVIDE          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    MOD             reduce using rule 209 (functionLiteral -> anonymousFunction .)
    LCHAVE          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    PV              reduce using rule 209 (functionLiteral -> anonymousFunction .)
    ELSE            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    $end            reduce using rule 209 (functionLiteral -> anonymousFunction .)
    COMMA           reduce using rule 209 (functionLiteral -> anonymousFunction .)
    RPAREN          reduce using rule 209 (functionLiteral -> anonymousFunction .)
    RCCT            reduce using rule 209 (functionLiteral -> anonymousFunction .)


state 148

    (173) collectionLiteral -> LCCT . cl RCCT
    (174) collectionLiteral -> LCCT . RCCT
    (175) cl -> . expression
    (176) cl -> . expression COMMA cl
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for RCCT resolved as shift
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for RCCT resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    RCCT            shift and go to state 266
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! RCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    cl                             shift and go to state 265
    expression                     shift and go to state 267
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 149

    (210) ifExpression -> IF . LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> IF . LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> IF . LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> IF . LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> IF . LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> IF . LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> IF . LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> IF . LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> IF . LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> IF . LPAREN expression RPAREN ELSE controlStructureBody

    LPAREN          shift and go to state 268


state 150

    (220) jumpExpression -> RETURN . expression
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 269
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 151

    (221) jumpExpression -> RETURN_AT . expression
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 270
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 152

    (223) jumpExpression -> CONTINUE .

    INCREMENTO      reduce using rule 223 (jumpExpression -> CONTINUE .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> CONTINUE .)
    MENOR           reduce using rule 223 (jumpExpression -> CONTINUE .)
    LCCT            reduce using rule 223 (jumpExpression -> CONTINUE .)
    LPAREN          reduce using rule 223 (jumpExpression -> CONTINUE .)
    PONTO           reduce using rule 223 (jumpExpression -> CONTINUE .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> CONTINUE .)
    RCHAVE          reduce using rule 223 (jumpExpression -> CONTINUE .)
    FUN             reduce using rule 223 (jumpExpression -> CONTINUE .)
    FOR             reduce using rule 223 (jumpExpression -> CONTINUE .)
    WHILE           reduce using rule 223 (jumpExpression -> CONTINUE .)
    DO              reduce using rule 223 (jumpExpression -> CONTINUE .)
    ID              reduce using rule 223 (jumpExpression -> CONTINUE .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> CONTINUE .)
    IMPORT          reduce using rule 223 (jumpExpression -> CONTINUE .)
    INIT            reduce using rule 223 (jumpExpression -> CONTINUE .)
    NOINLINE        reduce using rule 223 (jumpExpression -> CONTINUE .)
    OUT             reduce using rule 223 (jumpExpression -> CONTINUE .)
    VARARG          reduce using rule 223 (jumpExpression -> CONTINUE .)
    WHERE           reduce using rule 223 (jumpExpression -> CONTINUE .)
    LITERAL_STRING  reduce using rule 223 (jumpExpression -> CONTINUE .)
    DOISP           reduce using rule 223 (jumpExpression -> CONTINUE .)
    IF              reduce using rule 223 (jumpExpression -> CONTINUE .)
    RETURN          reduce using rule 223 (jumpExpression -> CONTINUE .)
    RETURN_AT       reduce using rule 223 (jumpExpression -> CONTINUE .)
    CONTINUE        reduce using rule 223 (jumpExpression -> CONTINUE .)
    CONTINUE_AT     reduce using rule 223 (jumpExpression -> CONTINUE .)
    BREAK           reduce using rule 223 (jumpExpression -> CONTINUE .)
    BREAK_AT        reduce using rule 223 (jumpExpression -> CONTINUE .)
    MINUS           reduce using rule 223 (jumpExpression -> CONTINUE .)
    PLUS            reduce using rule 223 (jumpExpression -> CONTINUE .)
    NOT             reduce using rule 223 (jumpExpression -> CONTINUE .)
    SUSPEND         reduce using rule 223 (jumpExpression -> CONTINUE .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> CONTINUE .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> CONTINUE .)
    MULTIGUAL       reduce using rule 223 (jumpExpression -> CONTINUE .)
    DIVIGUAL        reduce using rule 223 (jumpExpression -> CONTINUE .)
    MODIGUAL        reduce using rule 223 (jumpExpression -> CONTINUE .)
    AS              reduce using rule 223 (jumpExpression -> CONTINUE .)
    OR              reduce using rule 223 (jumpExpression -> CONTINUE .)
    AND             reduce using rule 223 (jumpExpression -> CONTINUE .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> CONTINUE .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> CONTINUE .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> CONTINUE .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> CONTINUE .)
    MAIOR           reduce using rule 223 (jumpExpression -> CONTINUE .)
    IN              reduce using rule 223 (jumpExpression -> CONTINUE .)
    NOT_IN          reduce using rule 223 (jumpExpression -> CONTINUE .)
    IS              reduce using rule 223 (jumpExpression -> CONTINUE .)
    NOT_IS          reduce using rule 223 (jumpExpression -> CONTINUE .)
    ELVIS           reduce using rule 223 (jumpExpression -> CONTINUE .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> CONTINUE .)
    MULT            reduce using rule 223 (jumpExpression -> CONTINUE .)
    DIVIDE          reduce using rule 223 (jumpExpression -> CONTINUE .)
    MOD             reduce using rule 223 (jumpExpression -> CONTINUE .)
    LCHAVE          reduce using rule 223 (jumpExpression -> CONTINUE .)
    PV              reduce using rule 223 (jumpExpression -> CONTINUE .)
    ELSE            reduce using rule 223 (jumpExpression -> CONTINUE .)
    $end            reduce using rule 223 (jumpExpression -> CONTINUE .)
    COMMA           reduce using rule 223 (jumpExpression -> CONTINUE .)
    RPAREN          reduce using rule 223 (jumpExpression -> CONTINUE .)
    RCCT            reduce using rule 223 (jumpExpression -> CONTINUE .)


state 153

    (224) jumpExpression -> CONTINUE_AT .

    INCREMENTO      reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    DECREMENTO      reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    MENOR           reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    LCCT            reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    LPAREN          reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    PONTO           reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    COLONCOLON      reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    RCHAVE          reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    FUN             reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    FOR             reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    WHILE           reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    DO              reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    ID              reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    CROSSINLINE     reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    IMPORT          reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    INIT            reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    NOINLINE        reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    OUT             reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    VARARG          reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    WHERE           reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    LITERAL_STRING  reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    DOISP           reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    IF              reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    RETURN          reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    RETURN_AT       reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    CONTINUE        reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    CONTINUE_AT     reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    BREAK           reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    BREAK_AT        reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    MINUS           reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    PLUS            reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    NOT             reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    SUSPEND         reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    MAIORIGUAL      reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    MENORIGUAL      reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    MULTIGUAL       reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    DIVIGUAL        reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    MODIGUAL        reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    AS              reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    OR              reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    AND             reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    DIFERENTE       reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    IDENTIDADE      reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    IGUALDADE       reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    SEMIDENTIDADE   reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    MAIOR           reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    IN              reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    NOT_IN          reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    IS              reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    NOT_IS          reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    ELVIS           reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    PONTOPONTO      reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    MULT            reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    DIVIDE          reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    MOD             reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    LCHAVE          reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    PV              reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    ELSE            reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    $end            reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    COMMA           reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    RPAREN          reduce using rule 224 (jumpExpression -> CONTINUE_AT .)
    RCCT            reduce using rule 224 (jumpExpression -> CONTINUE_AT .)


state 154

    (225) jumpExpression -> BREAK .

    INCREMENTO      reduce using rule 225 (jumpExpression -> BREAK .)
    DECREMENTO      reduce using rule 225 (jumpExpression -> BREAK .)
    MENOR           reduce using rule 225 (jumpExpression -> BREAK .)
    LCCT            reduce using rule 225 (jumpExpression -> BREAK .)
    LPAREN          reduce using rule 225 (jumpExpression -> BREAK .)
    PONTO           reduce using rule 225 (jumpExpression -> BREAK .)
    COLONCOLON      reduce using rule 225 (jumpExpression -> BREAK .)
    RCHAVE          reduce using rule 225 (jumpExpression -> BREAK .)
    FUN             reduce using rule 225 (jumpExpression -> BREAK .)
    FOR             reduce using rule 225 (jumpExpression -> BREAK .)
    WHILE           reduce using rule 225 (jumpExpression -> BREAK .)
    DO              reduce using rule 225 (jumpExpression -> BREAK .)
    ID              reduce using rule 225 (jumpExpression -> BREAK .)
    CROSSINLINE     reduce using rule 225 (jumpExpression -> BREAK .)
    IMPORT          reduce using rule 225 (jumpExpression -> BREAK .)
    INIT            reduce using rule 225 (jumpExpression -> BREAK .)
    NOINLINE        reduce using rule 225 (jumpExpression -> BREAK .)
    OUT             reduce using rule 225 (jumpExpression -> BREAK .)
    VARARG          reduce using rule 225 (jumpExpression -> BREAK .)
    WHERE           reduce using rule 225 (jumpExpression -> BREAK .)
    LITERAL_STRING  reduce using rule 225 (jumpExpression -> BREAK .)
    DOISP           reduce using rule 225 (jumpExpression -> BREAK .)
    IF              reduce using rule 225 (jumpExpression -> BREAK .)
    RETURN          reduce using rule 225 (jumpExpression -> BREAK .)
    RETURN_AT       reduce using rule 225 (jumpExpression -> BREAK .)
    CONTINUE        reduce using rule 225 (jumpExpression -> BREAK .)
    CONTINUE_AT     reduce using rule 225 (jumpExpression -> BREAK .)
    BREAK           reduce using rule 225 (jumpExpression -> BREAK .)
    BREAK_AT        reduce using rule 225 (jumpExpression -> BREAK .)
    MINUS           reduce using rule 225 (jumpExpression -> BREAK .)
    PLUS            reduce using rule 225 (jumpExpression -> BREAK .)
    NOT             reduce using rule 225 (jumpExpression -> BREAK .)
    SUSPEND         reduce using rule 225 (jumpExpression -> BREAK .)
    MAIORIGUAL      reduce using rule 225 (jumpExpression -> BREAK .)
    MENORIGUAL      reduce using rule 225 (jumpExpression -> BREAK .)
    MULTIGUAL       reduce using rule 225 (jumpExpression -> BREAK .)
    DIVIGUAL        reduce using rule 225 (jumpExpression -> BREAK .)
    MODIGUAL        reduce using rule 225 (jumpExpression -> BREAK .)
    AS              reduce using rule 225 (jumpExpression -> BREAK .)
    OR              reduce using rule 225 (jumpExpression -> BREAK .)
    AND             reduce using rule 225 (jumpExpression -> BREAK .)
    DIFERENTE       reduce using rule 225 (jumpExpression -> BREAK .)
    IDENTIDADE      reduce using rule 225 (jumpExpression -> BREAK .)
    IGUALDADE       reduce using rule 225 (jumpExpression -> BREAK .)
    SEMIDENTIDADE   reduce using rule 225 (jumpExpression -> BREAK .)
    MAIOR           reduce using rule 225 (jumpExpression -> BREAK .)
    IN              reduce using rule 225 (jumpExpression -> BREAK .)
    NOT_IN          reduce using rule 225 (jumpExpression -> BREAK .)
    IS              reduce using rule 225 (jumpExpression -> BREAK .)
    NOT_IS          reduce using rule 225 (jumpExpression -> BREAK .)
    ELVIS           reduce using rule 225 (jumpExpression -> BREAK .)
    PONTOPONTO      reduce using rule 225 (jumpExpression -> BREAK .)
    MULT            reduce using rule 225 (jumpExpression -> BREAK .)
    DIVIDE          reduce using rule 225 (jumpExpression -> BREAK .)
    MOD             reduce using rule 225 (jumpExpression -> BREAK .)
    LCHAVE          reduce using rule 225 (jumpExpression -> BREAK .)
    PV              reduce using rule 225 (jumpExpression -> BREAK .)
    ELSE            reduce using rule 225 (jumpExpression -> BREAK .)
    $end            reduce using rule 225 (jumpExpression -> BREAK .)
    COMMA           reduce using rule 225 (jumpExpression -> BREAK .)
    RPAREN          reduce using rule 225 (jumpExpression -> BREAK .)
    RCCT            reduce using rule 225 (jumpExpression -> BREAK .)


state 155

    (226) jumpExpression -> BREAK_AT .

    INCREMENTO      reduce using rule 226 (jumpExpression -> BREAK_AT .)
    DECREMENTO      reduce using rule 226 (jumpExpression -> BREAK_AT .)
    MENOR           reduce using rule 226 (jumpExpression -> BREAK_AT .)
    LCCT            reduce using rule 226 (jumpExpression -> BREAK_AT .)
    LPAREN          reduce using rule 226 (jumpExpression -> BREAK_AT .)
    PONTO           reduce using rule 226 (jumpExpression -> BREAK_AT .)
    COLONCOLON      reduce using rule 226 (jumpExpression -> BREAK_AT .)
    RCHAVE          reduce using rule 226 (jumpExpression -> BREAK_AT .)
    FUN             reduce using rule 226 (jumpExpression -> BREAK_AT .)
    FOR             reduce using rule 226 (jumpExpression -> BREAK_AT .)
    WHILE           reduce using rule 226 (jumpExpression -> BREAK_AT .)
    DO              reduce using rule 226 (jumpExpression -> BREAK_AT .)
    ID              reduce using rule 226 (jumpExpression -> BREAK_AT .)
    CROSSINLINE     reduce using rule 226 (jumpExpression -> BREAK_AT .)
    IMPORT          reduce using rule 226 (jumpExpression -> BREAK_AT .)
    INIT            reduce using rule 226 (jumpExpression -> BREAK_AT .)
    NOINLINE        reduce using rule 226 (jumpExpression -> BREAK_AT .)
    OUT             reduce using rule 226 (jumpExpression -> BREAK_AT .)
    VARARG          reduce using rule 226 (jumpExpression -> BREAK_AT .)
    WHERE           reduce using rule 226 (jumpExpression -> BREAK_AT .)
    LITERAL_STRING  reduce using rule 226 (jumpExpression -> BREAK_AT .)
    DOISP           reduce using rule 226 (jumpExpression -> BREAK_AT .)
    IF              reduce using rule 226 (jumpExpression -> BREAK_AT .)
    RETURN          reduce using rule 226 (jumpExpression -> BREAK_AT .)
    RETURN_AT       reduce using rule 226 (jumpExpression -> BREAK_AT .)
    CONTINUE        reduce using rule 226 (jumpExpression -> BREAK_AT .)
    CONTINUE_AT     reduce using rule 226 (jumpExpression -> BREAK_AT .)
    BREAK           reduce using rule 226 (jumpExpression -> BREAK_AT .)
    BREAK_AT        reduce using rule 226 (jumpExpression -> BREAK_AT .)
    MINUS           reduce using rule 226 (jumpExpression -> BREAK_AT .)
    PLUS            reduce using rule 226 (jumpExpression -> BREAK_AT .)
    NOT             reduce using rule 226 (jumpExpression -> BREAK_AT .)
    SUSPEND         reduce using rule 226 (jumpExpression -> BREAK_AT .)
    MAIORIGUAL      reduce using rule 226 (jumpExpression -> BREAK_AT .)
    MENORIGUAL      reduce using rule 226 (jumpExpression -> BREAK_AT .)
    MULTIGUAL       reduce using rule 226 (jumpExpression -> BREAK_AT .)
    DIVIGUAL        reduce using rule 226 (jumpExpression -> BREAK_AT .)
    MODIGUAL        reduce using rule 226 (jumpExpression -> BREAK_AT .)
    AS              reduce using rule 226 (jumpExpression -> BREAK_AT .)
    OR              reduce using rule 226 (jumpExpression -> BREAK_AT .)
    AND             reduce using rule 226 (jumpExpression -> BREAK_AT .)
    DIFERENTE       reduce using rule 226 (jumpExpression -> BREAK_AT .)
    IDENTIDADE      reduce using rule 226 (jumpExpression -> BREAK_AT .)
    IGUALDADE       reduce using rule 226 (jumpExpression -> BREAK_AT .)
    SEMIDENTIDADE   reduce using rule 226 (jumpExpression -> BREAK_AT .)
    MAIOR           reduce using rule 226 (jumpExpression -> BREAK_AT .)
    IN              reduce using rule 226 (jumpExpression -> BREAK_AT .)
    NOT_IN          reduce using rule 226 (jumpExpression -> BREAK_AT .)
    IS              reduce using rule 226 (jumpExpression -> BREAK_AT .)
    NOT_IS          reduce using rule 226 (jumpExpression -> BREAK_AT .)
    ELVIS           reduce using rule 226 (jumpExpression -> BREAK_AT .)
    PONTOPONTO      reduce using rule 226 (jumpExpression -> BREAK_AT .)
    MULT            reduce using rule 226 (jumpExpression -> BREAK_AT .)
    DIVIDE          reduce using rule 226 (jumpExpression -> BREAK_AT .)
    MOD             reduce using rule 226 (jumpExpression -> BREAK_AT .)
    LCHAVE          reduce using rule 226 (jumpExpression -> BREAK_AT .)
    PV              reduce using rule 226 (jumpExpression -> BREAK_AT .)
    ELSE            reduce using rule 226 (jumpExpression -> BREAK_AT .)
    $end            reduce using rule 226 (jumpExpression -> BREAK_AT .)
    COMMA           reduce using rule 226 (jumpExpression -> BREAK_AT .)
    RPAREN          reduce using rule 226 (jumpExpression -> BREAK_AT .)
    RCCT            reduce using rule 226 (jumpExpression -> BREAK_AT .)


state 156

    (23) fvps -> functionValueParameter COMMA fvps .

    RPAREN          reduce using rule 23 (fvps -> functionValueParameter COMMA fvps .)


state 157

    (25) functionValueParameter -> parameter ATRIBUICAO expression .

    COMMA           reduce using rule 25 (functionValueParameter -> parameter ATRIBUICAO expression .)
    RPAREN          reduce using rule 25 (functionValueParameter -> parameter ATRIBUICAO expression .)


state 158

    (33) parameter -> simpleIdentifier DOISP type .

    ATRIBUICAO      reduce using rule 33 (parameter -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 33 (parameter -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 33 (parameter -> simpleIdentifier DOISP type .)


state 159

    (56) functionTypeParameters -> LPAREN type ftp RPAREN .

    SETA            reduce using rule 56 (functionTypeParameters -> LPAREN type ftp RPAREN .)


state 160

    (57) functionTypeParameters -> LPAREN type ftp COMMA . RPAREN

    RPAREN          shift and go to state 271


state 161

    (58) ftp -> COMMA parameter .

    RPAREN          reduce using rule 58 (ftp -> COMMA parameter .)
    COMMA           reduce using rule 58 (ftp -> COMMA parameter .)


state 162

    (59) ftp -> COMMA type .

    RPAREN          reduce using rule 59 (ftp -> COMMA type .)
    COMMA           reduce using rule 59 (ftp -> COMMA type .)


state 163

    (54) functionTypeParameters -> LPAREN parameter ftp RPAREN .

    SETA            reduce using rule 54 (functionTypeParameters -> LPAREN parameter ftp RPAREN .)


state 164

    (55) functionTypeParameters -> LPAREN parameter ftp COMMA . RPAREN

    RPAREN          shift and go to state 272


state 165

    (52) functionType -> receiverType PONTO functionTypeParameters SETA . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    type                           shift and go to state 273
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 166

    (56) functionTypeParameters -> LPAREN type . ftp RPAREN
    (57) functionTypeParameters -> LPAREN type . ftp COMMA RPAREN
    (58) ftp -> . COMMA parameter
    (59) ftp -> . COMMA type
    (60) ftp -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 76
    RPAREN          reduce using rule 60 (ftp -> .)

  ! COMMA           [ reduce using rule 60 (ftp -> .) ]

    ftp                            shift and go to state 75

state 167

    (153) typeArguments -> MENOR ta MAIOR .

    RPAREN          reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    COMMA           reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    MAIOR           reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    ATRIBUICAO      reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    LCHAVE          reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    FUN             reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    $end            reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    FOR             reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    WHILE           reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    DO              reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    ID              reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    CROSSINLINE     reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    IMPORT          reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    INIT            reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    NOINLINE        reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    OUT             reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    VARARG          reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    WHERE           reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    LPAREN          reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    LITERAL_STRING  reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    DOISP           reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    LCCT            reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    IF              reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    RETURN          reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    RETURN_AT       reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    CONTINUE        reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    CONTINUE_AT     reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    BREAK           reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    BREAK_AT        reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    RCHAVE          reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    INCREMENTO      reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    DECREMENTO      reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    MINUS           reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    PLUS            reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    NOT             reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    SUSPEND         reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    MAIORIGUAL      reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    MENORIGUAL      reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    MULTIGUAL       reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    DIVIGUAL        reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    MODIGUAL        reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    MENOR           reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    PONTO           reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    COLONCOLON      reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    AS              reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    OR              reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    AND             reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    DIFERENTE       reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    IDENTIDADE      reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    IGUALDADE       reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    SEMIDENTIDADE   reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    IN              reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    NOT_IN          reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    IS              reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    NOT_IS          reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    ELVIS           reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    PONTOPONTO      reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    MULT            reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    DIVIDE          reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    MOD             reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    PV              reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    ELSE            reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    RCCT            reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)
    SETA            reduce using rule 153 (typeArguments -> MENOR ta MAIOR .)


state 168

    (155) ta -> typeProjection COMMA . ta
    (154) ta -> . typeProjection
    (155) ta -> . typeProjection COMMA ta
    (156) ta -> .
    (48) typeProjection -> . typeProjectionModifiers type
    (49) typeProjection -> . type
    (50) typeProjectionModifiers -> . typeProjection
    (51) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (42) typeProjectionModifier -> . varianceModifier
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (43) varianceModifier -> . IN
    (44) varianceModifier -> . OUT
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    MAIOR           reduce using rule 156 (ta -> .)
    IN              shift and go to state 87
    OUT             shift and go to state 88
    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    typeProjection                 shift and go to state 82
    ta                             shift and go to state 274
    typeProjectionModifiers        shift and go to state 83
    type                           shift and go to state 84
    typeProjectionModifier         shift and go to state 85
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    varianceModifier               shift and go to state 86
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 169

    (48) typeProjection -> typeProjectionModifiers type .

    COMMA           reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    MAIOR           reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    SUSPEND         reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    LPAREN          reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    ID              reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    CROSSINLINE     reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    IMPORT          reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    INIT            reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    NOINLINE        reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    OUT             reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    VARARG          reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)
    WHERE           reduce using rule 48 (typeProjection -> typeProjectionModifiers type .)


state 170

    (51) typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .
    (48) typeProjection -> typeProjectionModifiers . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! SUSPEND         [ reduce using rule 51 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! LPAREN          [ reduce using rule 51 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! ID              [ reduce using rule 51 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CROSSINLINE     [ reduce using rule 51 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! IMPORT          [ reduce using rule 51 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! INIT            [ reduce using rule 51 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NOINLINE        [ reduce using rule 51 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OUT             [ reduce using rule 51 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VARARG          [ reduce using rule 51 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! WHERE           [ reduce using rule 51 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]

    type                           shift and go to state 169
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 171

    (50) typeProjectionModifiers -> typeProjection .

    SUSPEND         reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 50 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 50 (typeProjectionModifiers -> typeProjection .)


state 172

    (90) disjunction -> conjunction OR . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    conjunction                    shift and go to state 91
    disjunction                    shift and go to state 275
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 173

    (92) conjunction -> equality AND . conjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    equality                       shift and go to state 92
    conjunction                    shift and go to state 276
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 174

    (94) equality -> comparison equalityOperator . equality
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    comparison                     shift and go to state 93
    equality                       shift and go to state 277
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 175

    (236) equalityOperator -> DIFERENTE .

    INCREMENTO      reduce using rule 236 (equalityOperator -> DIFERENTE .)
    DECREMENTO      reduce using rule 236 (equalityOperator -> DIFERENTE .)
    MINUS           reduce using rule 236 (equalityOperator -> DIFERENTE .)
    PLUS            reduce using rule 236 (equalityOperator -> DIFERENTE .)
    NOT             reduce using rule 236 (equalityOperator -> DIFERENTE .)
    ID              reduce using rule 236 (equalityOperator -> DIFERENTE .)
    CROSSINLINE     reduce using rule 236 (equalityOperator -> DIFERENTE .)
    IMPORT          reduce using rule 236 (equalityOperator -> DIFERENTE .)
    INIT            reduce using rule 236 (equalityOperator -> DIFERENTE .)
    NOINLINE        reduce using rule 236 (equalityOperator -> DIFERENTE .)
    OUT             reduce using rule 236 (equalityOperator -> DIFERENTE .)
    VARARG          reduce using rule 236 (equalityOperator -> DIFERENTE .)
    WHERE           reduce using rule 236 (equalityOperator -> DIFERENTE .)
    DIFERENTE       reduce using rule 236 (equalityOperator -> DIFERENTE .)
    IDENTIDADE      reduce using rule 236 (equalityOperator -> DIFERENTE .)
    IGUALDADE       reduce using rule 236 (equalityOperator -> DIFERENTE .)
    SEMIDENTIDADE   reduce using rule 236 (equalityOperator -> DIFERENTE .)
    MENOR           reduce using rule 236 (equalityOperator -> DIFERENTE .)
    MAIOR           reduce using rule 236 (equalityOperator -> DIFERENTE .)
    MENORIGUAL      reduce using rule 236 (equalityOperator -> DIFERENTE .)
    MAIORIGUAL      reduce using rule 236 (equalityOperator -> DIFERENTE .)
    IN              reduce using rule 236 (equalityOperator -> DIFERENTE .)
    NOT_IN          reduce using rule 236 (equalityOperator -> DIFERENTE .)
    IS              reduce using rule 236 (equalityOperator -> DIFERENTE .)
    NOT_IS          reduce using rule 236 (equalityOperator -> DIFERENTE .)
    ELVIS           reduce using rule 236 (equalityOperator -> DIFERENTE .)
    PONTOPONTO      reduce using rule 236 (equalityOperator -> DIFERENTE .)
    MULT            reduce using rule 236 (equalityOperator -> DIFERENTE .)
    DIVIDE          reduce using rule 236 (equalityOperator -> DIFERENTE .)
    MOD             reduce using rule 236 (equalityOperator -> DIFERENTE .)
    AS              reduce using rule 236 (equalityOperator -> DIFERENTE .)
    LITERAL_STRING  reduce using rule 236 (equalityOperator -> DIFERENTE .)
    LPAREN          reduce using rule 236 (equalityOperator -> DIFERENTE .)
    DOISP           reduce using rule 236 (equalityOperator -> DIFERENTE .)
    LCCT            reduce using rule 236 (equalityOperator -> DIFERENTE .)
    IF              reduce using rule 236 (equalityOperator -> DIFERENTE .)
    RETURN          reduce using rule 236 (equalityOperator -> DIFERENTE .)
    RETURN_AT       reduce using rule 236 (equalityOperator -> DIFERENTE .)
    CONTINUE        reduce using rule 236 (equalityOperator -> DIFERENTE .)
    CONTINUE_AT     reduce using rule 236 (equalityOperator -> DIFERENTE .)
    BREAK           reduce using rule 236 (equalityOperator -> DIFERENTE .)
    BREAK_AT        reduce using rule 236 (equalityOperator -> DIFERENTE .)
    RCHAVE          reduce using rule 236 (equalityOperator -> DIFERENTE .)
    FUN             reduce using rule 236 (equalityOperator -> DIFERENTE .)
    SUSPEND         reduce using rule 236 (equalityOperator -> DIFERENTE .)
    PONTO           reduce using rule 236 (equalityOperator -> DIFERENTE .)
    COLONCOLON      reduce using rule 236 (equalityOperator -> DIFERENTE .)
    OR              reduce using rule 236 (equalityOperator -> DIFERENTE .)
    AND             reduce using rule 236 (equalityOperator -> DIFERENTE .)
    FOR             reduce using rule 236 (equalityOperator -> DIFERENTE .)
    WHILE           reduce using rule 236 (equalityOperator -> DIFERENTE .)
    DO              reduce using rule 236 (equalityOperator -> DIFERENTE .)
    MULTIGUAL       reduce using rule 236 (equalityOperator -> DIFERENTE .)
    DIVIGUAL        reduce using rule 236 (equalityOperator -> DIFERENTE .)
    MODIGUAL        reduce using rule 236 (equalityOperator -> DIFERENTE .)
    LCHAVE          reduce using rule 236 (equalityOperator -> DIFERENTE .)
    PV              reduce using rule 236 (equalityOperator -> DIFERENTE .)
    ELSE            reduce using rule 236 (equalityOperator -> DIFERENTE .)
    $end            reduce using rule 236 (equalityOperator -> DIFERENTE .)
    COMMA           reduce using rule 236 (equalityOperator -> DIFERENTE .)
    RPAREN          reduce using rule 236 (equalityOperator -> DIFERENTE .)
    RCCT            reduce using rule 236 (equalityOperator -> DIFERENTE .)


state 176

    (237) equalityOperator -> IDENTIDADE .

    INCREMENTO      reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    DECREMENTO      reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    MINUS           reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    PLUS            reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    NOT             reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    ID              reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    CROSSINLINE     reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    IMPORT          reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    INIT            reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    NOINLINE        reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    OUT             reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    VARARG          reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    WHERE           reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    DIFERENTE       reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    IDENTIDADE      reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    IGUALDADE       reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    SEMIDENTIDADE   reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    MENOR           reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    MAIOR           reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    MENORIGUAL      reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    MAIORIGUAL      reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    IN              reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    NOT_IN          reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    IS              reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    NOT_IS          reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    ELVIS           reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    PONTOPONTO      reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    MULT            reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    DIVIDE          reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    MOD             reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    AS              reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    LITERAL_STRING  reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    LPAREN          reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    DOISP           reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    LCCT            reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    IF              reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    RETURN          reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    RETURN_AT       reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    CONTINUE        reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    CONTINUE_AT     reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    BREAK           reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    BREAK_AT        reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    RCHAVE          reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    FUN             reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    SUSPEND         reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    PONTO           reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    COLONCOLON      reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    OR              reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    AND             reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    FOR             reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    WHILE           reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    DO              reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    MULTIGUAL       reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    DIVIGUAL        reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    MODIGUAL        reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    LCHAVE          reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    PV              reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    ELSE            reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    $end            reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    COMMA           reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    RPAREN          reduce using rule 237 (equalityOperator -> IDENTIDADE .)
    RCCT            reduce using rule 237 (equalityOperator -> IDENTIDADE .)


state 177

    (238) equalityOperator -> IGUALDADE .

    INCREMENTO      reduce using rule 238 (equalityOperator -> IGUALDADE .)
    DECREMENTO      reduce using rule 238 (equalityOperator -> IGUALDADE .)
    MINUS           reduce using rule 238 (equalityOperator -> IGUALDADE .)
    PLUS            reduce using rule 238 (equalityOperator -> IGUALDADE .)
    NOT             reduce using rule 238 (equalityOperator -> IGUALDADE .)
    ID              reduce using rule 238 (equalityOperator -> IGUALDADE .)
    CROSSINLINE     reduce using rule 238 (equalityOperator -> IGUALDADE .)
    IMPORT          reduce using rule 238 (equalityOperator -> IGUALDADE .)
    INIT            reduce using rule 238 (equalityOperator -> IGUALDADE .)
    NOINLINE        reduce using rule 238 (equalityOperator -> IGUALDADE .)
    OUT             reduce using rule 238 (equalityOperator -> IGUALDADE .)
    VARARG          reduce using rule 238 (equalityOperator -> IGUALDADE .)
    WHERE           reduce using rule 238 (equalityOperator -> IGUALDADE .)
    DIFERENTE       reduce using rule 238 (equalityOperator -> IGUALDADE .)
    IDENTIDADE      reduce using rule 238 (equalityOperator -> IGUALDADE .)
    IGUALDADE       reduce using rule 238 (equalityOperator -> IGUALDADE .)
    SEMIDENTIDADE   reduce using rule 238 (equalityOperator -> IGUALDADE .)
    MENOR           reduce using rule 238 (equalityOperator -> IGUALDADE .)
    MAIOR           reduce using rule 238 (equalityOperator -> IGUALDADE .)
    MENORIGUAL      reduce using rule 238 (equalityOperator -> IGUALDADE .)
    MAIORIGUAL      reduce using rule 238 (equalityOperator -> IGUALDADE .)
    IN              reduce using rule 238 (equalityOperator -> IGUALDADE .)
    NOT_IN          reduce using rule 238 (equalityOperator -> IGUALDADE .)
    IS              reduce using rule 238 (equalityOperator -> IGUALDADE .)
    NOT_IS          reduce using rule 238 (equalityOperator -> IGUALDADE .)
    ELVIS           reduce using rule 238 (equalityOperator -> IGUALDADE .)
    PONTOPONTO      reduce using rule 238 (equalityOperator -> IGUALDADE .)
    MULT            reduce using rule 238 (equalityOperator -> IGUALDADE .)
    DIVIDE          reduce using rule 238 (equalityOperator -> IGUALDADE .)
    MOD             reduce using rule 238 (equalityOperator -> IGUALDADE .)
    AS              reduce using rule 238 (equalityOperator -> IGUALDADE .)
    LITERAL_STRING  reduce using rule 238 (equalityOperator -> IGUALDADE .)
    LPAREN          reduce using rule 238 (equalityOperator -> IGUALDADE .)
    DOISP           reduce using rule 238 (equalityOperator -> IGUALDADE .)
    LCCT            reduce using rule 238 (equalityOperator -> IGUALDADE .)
    IF              reduce using rule 238 (equalityOperator -> IGUALDADE .)
    RETURN          reduce using rule 238 (equalityOperator -> IGUALDADE .)
    RETURN_AT       reduce using rule 238 (equalityOperator -> IGUALDADE .)
    CONTINUE        reduce using rule 238 (equalityOperator -> IGUALDADE .)
    CONTINUE_AT     reduce using rule 238 (equalityOperator -> IGUALDADE .)
    BREAK           reduce using rule 238 (equalityOperator -> IGUALDADE .)
    BREAK_AT        reduce using rule 238 (equalityOperator -> IGUALDADE .)
    RCHAVE          reduce using rule 238 (equalityOperator -> IGUALDADE .)
    FUN             reduce using rule 238 (equalityOperator -> IGUALDADE .)
    SUSPEND         reduce using rule 238 (equalityOperator -> IGUALDADE .)
    PONTO           reduce using rule 238 (equalityOperator -> IGUALDADE .)
    COLONCOLON      reduce using rule 238 (equalityOperator -> IGUALDADE .)
    OR              reduce using rule 238 (equalityOperator -> IGUALDADE .)
    AND             reduce using rule 238 (equalityOperator -> IGUALDADE .)
    FOR             reduce using rule 238 (equalityOperator -> IGUALDADE .)
    WHILE           reduce using rule 238 (equalityOperator -> IGUALDADE .)
    DO              reduce using rule 238 (equalityOperator -> IGUALDADE .)
    MULTIGUAL       reduce using rule 238 (equalityOperator -> IGUALDADE .)
    DIVIGUAL        reduce using rule 238 (equalityOperator -> IGUALDADE .)
    MODIGUAL        reduce using rule 238 (equalityOperator -> IGUALDADE .)
    LCHAVE          reduce using rule 238 (equalityOperator -> IGUALDADE .)
    PV              reduce using rule 238 (equalityOperator -> IGUALDADE .)
    ELSE            reduce using rule 238 (equalityOperator -> IGUALDADE .)
    $end            reduce using rule 238 (equalityOperator -> IGUALDADE .)
    COMMA           reduce using rule 238 (equalityOperator -> IGUALDADE .)
    RPAREN          reduce using rule 238 (equalityOperator -> IGUALDADE .)
    RCCT            reduce using rule 238 (equalityOperator -> IGUALDADE .)


state 178

    (239) equalityOperator -> SEMIDENTIDADE .

    INCREMENTO      reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    DECREMENTO      reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    MINUS           reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    PLUS            reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    NOT             reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    ID              reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    CROSSINLINE     reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    IMPORT          reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    INIT            reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    NOINLINE        reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    OUT             reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    VARARG          reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    WHERE           reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    DIFERENTE       reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    IDENTIDADE      reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    IGUALDADE       reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    SEMIDENTIDADE   reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    MENOR           reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    MAIOR           reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    MENORIGUAL      reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    MAIORIGUAL      reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    IN              reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    NOT_IN          reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    IS              reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    NOT_IS          reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    ELVIS           reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    PONTOPONTO      reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    MULT            reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    DIVIDE          reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    MOD             reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    AS              reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    LITERAL_STRING  reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    LPAREN          reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    DOISP           reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    LCCT            reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    IF              reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    RETURN          reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    RETURN_AT       reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE        reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE_AT     reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    BREAK           reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    BREAK_AT        reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    RCHAVE          reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    FUN             reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    SUSPEND         reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    PONTO           reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    COLONCOLON      reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    OR              reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    AND             reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    FOR             reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    WHILE           reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    DO              reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    MULTIGUAL       reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    DIVIGUAL        reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    MODIGUAL        reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    LCHAVE          reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    PV              reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    ELSE            reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    $end            reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    COMMA           reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    RPAREN          reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)
    RCCT            reduce using rule 239 (equalityOperator -> SEMIDENTIDADE .)


state 179

    (96) comparison -> infixOperation comparisonOperator . infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    infixOperation                 shift and go to state 278
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 180

    (240) comparisonOperator -> MENOR .

    INCREMENTO      reduce using rule 240 (comparisonOperator -> MENOR .)
    DECREMENTO      reduce using rule 240 (comparisonOperator -> MENOR .)
    MINUS           reduce using rule 240 (comparisonOperator -> MENOR .)
    PLUS            reduce using rule 240 (comparisonOperator -> MENOR .)
    NOT             reduce using rule 240 (comparisonOperator -> MENOR .)
    ID              reduce using rule 240 (comparisonOperator -> MENOR .)
    CROSSINLINE     reduce using rule 240 (comparisonOperator -> MENOR .)
    IMPORT          reduce using rule 240 (comparisonOperator -> MENOR .)
    INIT            reduce using rule 240 (comparisonOperator -> MENOR .)
    NOINLINE        reduce using rule 240 (comparisonOperator -> MENOR .)
    OUT             reduce using rule 240 (comparisonOperator -> MENOR .)
    VARARG          reduce using rule 240 (comparisonOperator -> MENOR .)
    WHERE           reduce using rule 240 (comparisonOperator -> MENOR .)
    IN              reduce using rule 240 (comparisonOperator -> MENOR .)
    NOT_IN          reduce using rule 240 (comparisonOperator -> MENOR .)
    IS              reduce using rule 240 (comparisonOperator -> MENOR .)
    NOT_IS          reduce using rule 240 (comparisonOperator -> MENOR .)
    ELVIS           reduce using rule 240 (comparisonOperator -> MENOR .)
    PONTOPONTO      reduce using rule 240 (comparisonOperator -> MENOR .)
    MULT            reduce using rule 240 (comparisonOperator -> MENOR .)
    DIVIDE          reduce using rule 240 (comparisonOperator -> MENOR .)
    MOD             reduce using rule 240 (comparisonOperator -> MENOR .)
    AS              reduce using rule 240 (comparisonOperator -> MENOR .)
    LITERAL_STRING  reduce using rule 240 (comparisonOperator -> MENOR .)
    LPAREN          reduce using rule 240 (comparisonOperator -> MENOR .)
    DOISP           reduce using rule 240 (comparisonOperator -> MENOR .)
    LCCT            reduce using rule 240 (comparisonOperator -> MENOR .)
    IF              reduce using rule 240 (comparisonOperator -> MENOR .)
    RETURN          reduce using rule 240 (comparisonOperator -> MENOR .)
    RETURN_AT       reduce using rule 240 (comparisonOperator -> MENOR .)
    CONTINUE        reduce using rule 240 (comparisonOperator -> MENOR .)
    CONTINUE_AT     reduce using rule 240 (comparisonOperator -> MENOR .)
    BREAK           reduce using rule 240 (comparisonOperator -> MENOR .)
    BREAK_AT        reduce using rule 240 (comparisonOperator -> MENOR .)
    RCHAVE          reduce using rule 240 (comparisonOperator -> MENOR .)
    FUN             reduce using rule 240 (comparisonOperator -> MENOR .)
    SUSPEND         reduce using rule 240 (comparisonOperator -> MENOR .)
    MENOR           reduce using rule 240 (comparisonOperator -> MENOR .)
    PONTO           reduce using rule 240 (comparisonOperator -> MENOR .)
    COLONCOLON      reduce using rule 240 (comparisonOperator -> MENOR .)
    OR              reduce using rule 240 (comparisonOperator -> MENOR .)
    AND             reduce using rule 240 (comparisonOperator -> MENOR .)
    DIFERENTE       reduce using rule 240 (comparisonOperator -> MENOR .)
    IDENTIDADE      reduce using rule 240 (comparisonOperator -> MENOR .)
    IGUALDADE       reduce using rule 240 (comparisonOperator -> MENOR .)
    SEMIDENTIDADE   reduce using rule 240 (comparisonOperator -> MENOR .)
    MAIOR           reduce using rule 240 (comparisonOperator -> MENOR .)
    MENORIGUAL      reduce using rule 240 (comparisonOperator -> MENOR .)
    MAIORIGUAL      reduce using rule 240 (comparisonOperator -> MENOR .)
    FOR             reduce using rule 240 (comparisonOperator -> MENOR .)
    WHILE           reduce using rule 240 (comparisonOperator -> MENOR .)
    DO              reduce using rule 240 (comparisonOperator -> MENOR .)
    MULTIGUAL       reduce using rule 240 (comparisonOperator -> MENOR .)
    DIVIGUAL        reduce using rule 240 (comparisonOperator -> MENOR .)
    MODIGUAL        reduce using rule 240 (comparisonOperator -> MENOR .)
    LCHAVE          reduce using rule 240 (comparisonOperator -> MENOR .)
    PV              reduce using rule 240 (comparisonOperator -> MENOR .)
    ELSE            reduce using rule 240 (comparisonOperator -> MENOR .)
    $end            reduce using rule 240 (comparisonOperator -> MENOR .)
    COMMA           reduce using rule 240 (comparisonOperator -> MENOR .)
    RPAREN          reduce using rule 240 (comparisonOperator -> MENOR .)
    RCCT            reduce using rule 240 (comparisonOperator -> MENOR .)


state 181

    (241) comparisonOperator -> MAIOR .

    INCREMENTO      reduce using rule 241 (comparisonOperator -> MAIOR .)
    DECREMENTO      reduce using rule 241 (comparisonOperator -> MAIOR .)
    MINUS           reduce using rule 241 (comparisonOperator -> MAIOR .)
    PLUS            reduce using rule 241 (comparisonOperator -> MAIOR .)
    NOT             reduce using rule 241 (comparisonOperator -> MAIOR .)
    ID              reduce using rule 241 (comparisonOperator -> MAIOR .)
    CROSSINLINE     reduce using rule 241 (comparisonOperator -> MAIOR .)
    IMPORT          reduce using rule 241 (comparisonOperator -> MAIOR .)
    INIT            reduce using rule 241 (comparisonOperator -> MAIOR .)
    NOINLINE        reduce using rule 241 (comparisonOperator -> MAIOR .)
    OUT             reduce using rule 241 (comparisonOperator -> MAIOR .)
    VARARG          reduce using rule 241 (comparisonOperator -> MAIOR .)
    WHERE           reduce using rule 241 (comparisonOperator -> MAIOR .)
    IN              reduce using rule 241 (comparisonOperator -> MAIOR .)
    NOT_IN          reduce using rule 241 (comparisonOperator -> MAIOR .)
    IS              reduce using rule 241 (comparisonOperator -> MAIOR .)
    NOT_IS          reduce using rule 241 (comparisonOperator -> MAIOR .)
    ELVIS           reduce using rule 241 (comparisonOperator -> MAIOR .)
    PONTOPONTO      reduce using rule 241 (comparisonOperator -> MAIOR .)
    MULT            reduce using rule 241 (comparisonOperator -> MAIOR .)
    DIVIDE          reduce using rule 241 (comparisonOperator -> MAIOR .)
    MOD             reduce using rule 241 (comparisonOperator -> MAIOR .)
    AS              reduce using rule 241 (comparisonOperator -> MAIOR .)
    LITERAL_STRING  reduce using rule 241 (comparisonOperator -> MAIOR .)
    LPAREN          reduce using rule 241 (comparisonOperator -> MAIOR .)
    DOISP           reduce using rule 241 (comparisonOperator -> MAIOR .)
    LCCT            reduce using rule 241 (comparisonOperator -> MAIOR .)
    IF              reduce using rule 241 (comparisonOperator -> MAIOR .)
    RETURN          reduce using rule 241 (comparisonOperator -> MAIOR .)
    RETURN_AT       reduce using rule 241 (comparisonOperator -> MAIOR .)
    CONTINUE        reduce using rule 241 (comparisonOperator -> MAIOR .)
    CONTINUE_AT     reduce using rule 241 (comparisonOperator -> MAIOR .)
    BREAK           reduce using rule 241 (comparisonOperator -> MAIOR .)
    BREAK_AT        reduce using rule 241 (comparisonOperator -> MAIOR .)
    RCHAVE          reduce using rule 241 (comparisonOperator -> MAIOR .)
    FUN             reduce using rule 241 (comparisonOperator -> MAIOR .)
    SUSPEND         reduce using rule 241 (comparisonOperator -> MAIOR .)
    MENOR           reduce using rule 241 (comparisonOperator -> MAIOR .)
    PONTO           reduce using rule 241 (comparisonOperator -> MAIOR .)
    COLONCOLON      reduce using rule 241 (comparisonOperator -> MAIOR .)
    OR              reduce using rule 241 (comparisonOperator -> MAIOR .)
    AND             reduce using rule 241 (comparisonOperator -> MAIOR .)
    DIFERENTE       reduce using rule 241 (comparisonOperator -> MAIOR .)
    IDENTIDADE      reduce using rule 241 (comparisonOperator -> MAIOR .)
    IGUALDADE       reduce using rule 241 (comparisonOperator -> MAIOR .)
    SEMIDENTIDADE   reduce using rule 241 (comparisonOperator -> MAIOR .)
    MAIOR           reduce using rule 241 (comparisonOperator -> MAIOR .)
    MENORIGUAL      reduce using rule 241 (comparisonOperator -> MAIOR .)
    MAIORIGUAL      reduce using rule 241 (comparisonOperator -> MAIOR .)
    FOR             reduce using rule 241 (comparisonOperator -> MAIOR .)
    WHILE           reduce using rule 241 (comparisonOperator -> MAIOR .)
    DO              reduce using rule 241 (comparisonOperator -> MAIOR .)
    MULTIGUAL       reduce using rule 241 (comparisonOperator -> MAIOR .)
    DIVIGUAL        reduce using rule 241 (comparisonOperator -> MAIOR .)
    MODIGUAL        reduce using rule 241 (comparisonOperator -> MAIOR .)
    LCHAVE          reduce using rule 241 (comparisonOperator -> MAIOR .)
    PV              reduce using rule 241 (comparisonOperator -> MAIOR .)
    ELSE            reduce using rule 241 (comparisonOperator -> MAIOR .)
    $end            reduce using rule 241 (comparisonOperator -> MAIOR .)
    COMMA           reduce using rule 241 (comparisonOperator -> MAIOR .)
    RPAREN          reduce using rule 241 (comparisonOperator -> MAIOR .)
    RCCT            reduce using rule 241 (comparisonOperator -> MAIOR .)


state 182

    (242) comparisonOperator -> MENORIGUAL .

    INCREMENTO      reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    DECREMENTO      reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    MINUS           reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    PLUS            reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    NOT             reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    ID              reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    CROSSINLINE     reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    IMPORT          reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    INIT            reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    NOINLINE        reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    OUT             reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    VARARG          reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    WHERE           reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    IN              reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    NOT_IN          reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    IS              reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    NOT_IS          reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    ELVIS           reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    PONTOPONTO      reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    MULT            reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    DIVIDE          reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    MOD             reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    AS              reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    LITERAL_STRING  reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    LPAREN          reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    DOISP           reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    LCCT            reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    IF              reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    RETURN          reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    RETURN_AT       reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    CONTINUE        reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    CONTINUE_AT     reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    BREAK           reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    BREAK_AT        reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    RCHAVE          reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    FUN             reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    SUSPEND         reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    MENOR           reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    PONTO           reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    COLONCOLON      reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    OR              reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    AND             reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    DIFERENTE       reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    IDENTIDADE      reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    IGUALDADE       reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    SEMIDENTIDADE   reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    MAIOR           reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    MENORIGUAL      reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    MAIORIGUAL      reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    FOR             reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    WHILE           reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    DO              reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    MULTIGUAL       reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    DIVIGUAL        reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    MODIGUAL        reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    LCHAVE          reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    PV              reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    ELSE            reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    $end            reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    COMMA           reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    RPAREN          reduce using rule 242 (comparisonOperator -> MENORIGUAL .)
    RCCT            reduce using rule 242 (comparisonOperator -> MENORIGUAL .)


state 183

    (243) comparisonOperator -> MAIORIGUAL .

    INCREMENTO      reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    DECREMENTO      reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    MINUS           reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    PLUS            reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    NOT             reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    ID              reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    CROSSINLINE     reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    IMPORT          reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    INIT            reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    NOINLINE        reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    OUT             reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    VARARG          reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    WHERE           reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    IN              reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    NOT_IN          reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    IS              reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    NOT_IS          reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    ELVIS           reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    PONTOPONTO      reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    MULT            reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    DIVIDE          reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    MOD             reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    AS              reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    LITERAL_STRING  reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    LPAREN          reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    DOISP           reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    LCCT            reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    IF              reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    RETURN          reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    RETURN_AT       reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE        reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE_AT     reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    BREAK           reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    BREAK_AT        reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    RCHAVE          reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    FUN             reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    SUSPEND         reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    MENOR           reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    PONTO           reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    COLONCOLON      reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    OR              reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    AND             reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    DIFERENTE       reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    IDENTIDADE      reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    IGUALDADE       reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    SEMIDENTIDADE   reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    MAIOR           reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    MENORIGUAL      reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    MAIORIGUAL      reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    FOR             reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    WHILE           reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    DO              reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    MULTIGUAL       reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    DIVIGUAL        reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    MODIGUAL        reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    LCHAVE          reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    PV              reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    ELSE            reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    $end            reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    COMMA           reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    RPAREN          reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)
    RCCT            reduce using rule 243 (comparisonOperator -> MAIORIGUAL .)


state 184

    (97) infixOperation -> elvisExpression io .

    FUN             reduce using rule 97 (infixOperation -> elvisExpression io .)
    FOR             reduce using rule 97 (infixOperation -> elvisExpression io .)
    WHILE           reduce using rule 97 (infixOperation -> elvisExpression io .)
    DO              reduce using rule 97 (infixOperation -> elvisExpression io .)
    ID              reduce using rule 97 (infixOperation -> elvisExpression io .)
    CROSSINLINE     reduce using rule 97 (infixOperation -> elvisExpression io .)
    IMPORT          reduce using rule 97 (infixOperation -> elvisExpression io .)
    INIT            reduce using rule 97 (infixOperation -> elvisExpression io .)
    NOINLINE        reduce using rule 97 (infixOperation -> elvisExpression io .)
    OUT             reduce using rule 97 (infixOperation -> elvisExpression io .)
    VARARG          reduce using rule 97 (infixOperation -> elvisExpression io .)
    WHERE           reduce using rule 97 (infixOperation -> elvisExpression io .)
    LPAREN          reduce using rule 97 (infixOperation -> elvisExpression io .)
    LITERAL_STRING  reduce using rule 97 (infixOperation -> elvisExpression io .)
    DOISP           reduce using rule 97 (infixOperation -> elvisExpression io .)
    LCCT            reduce using rule 97 (infixOperation -> elvisExpression io .)
    IF              reduce using rule 97 (infixOperation -> elvisExpression io .)
    RETURN          reduce using rule 97 (infixOperation -> elvisExpression io .)
    RETURN_AT       reduce using rule 97 (infixOperation -> elvisExpression io .)
    CONTINUE        reduce using rule 97 (infixOperation -> elvisExpression io .)
    CONTINUE_AT     reduce using rule 97 (infixOperation -> elvisExpression io .)
    BREAK           reduce using rule 97 (infixOperation -> elvisExpression io .)
    BREAK_AT        reduce using rule 97 (infixOperation -> elvisExpression io .)
    RCHAVE          reduce using rule 97 (infixOperation -> elvisExpression io .)
    INCREMENTO      reduce using rule 97 (infixOperation -> elvisExpression io .)
    DECREMENTO      reduce using rule 97 (infixOperation -> elvisExpression io .)
    MINUS           reduce using rule 97 (infixOperation -> elvisExpression io .)
    PLUS            reduce using rule 97 (infixOperation -> elvisExpression io .)
    NOT             reduce using rule 97 (infixOperation -> elvisExpression io .)
    SUSPEND         reduce using rule 97 (infixOperation -> elvisExpression io .)
    MAIORIGUAL      reduce using rule 97 (infixOperation -> elvisExpression io .)
    MENORIGUAL      reduce using rule 97 (infixOperation -> elvisExpression io .)
    MULTIGUAL       reduce using rule 97 (infixOperation -> elvisExpression io .)
    DIVIGUAL        reduce using rule 97 (infixOperation -> elvisExpression io .)
    MODIGUAL        reduce using rule 97 (infixOperation -> elvisExpression io .)
    MENOR           reduce using rule 97 (infixOperation -> elvisExpression io .)
    PONTO           reduce using rule 97 (infixOperation -> elvisExpression io .)
    COLONCOLON      reduce using rule 97 (infixOperation -> elvisExpression io .)
    AS              reduce using rule 97 (infixOperation -> elvisExpression io .)
    OR              reduce using rule 97 (infixOperation -> elvisExpression io .)
    AND             reduce using rule 97 (infixOperation -> elvisExpression io .)
    DIFERENTE       reduce using rule 97 (infixOperation -> elvisExpression io .)
    IDENTIDADE      reduce using rule 97 (infixOperation -> elvisExpression io .)
    IGUALDADE       reduce using rule 97 (infixOperation -> elvisExpression io .)
    SEMIDENTIDADE   reduce using rule 97 (infixOperation -> elvisExpression io .)
    MAIOR           reduce using rule 97 (infixOperation -> elvisExpression io .)
    IN              reduce using rule 97 (infixOperation -> elvisExpression io .)
    NOT_IN          reduce using rule 97 (infixOperation -> elvisExpression io .)
    IS              reduce using rule 97 (infixOperation -> elvisExpression io .)
    NOT_IS          reduce using rule 97 (infixOperation -> elvisExpression io .)
    ELVIS           reduce using rule 97 (infixOperation -> elvisExpression io .)
    PONTOPONTO      reduce using rule 97 (infixOperation -> elvisExpression io .)
    MULT            reduce using rule 97 (infixOperation -> elvisExpression io .)
    DIVIDE          reduce using rule 97 (infixOperation -> elvisExpression io .)
    MOD             reduce using rule 97 (infixOperation -> elvisExpression io .)
    LCHAVE          reduce using rule 97 (infixOperation -> elvisExpression io .)
    PV              reduce using rule 97 (infixOperation -> elvisExpression io .)
    ELSE            reduce using rule 97 (infixOperation -> elvisExpression io .)
    $end            reduce using rule 97 (infixOperation -> elvisExpression io .)
    COMMA           reduce using rule 97 (infixOperation -> elvisExpression io .)
    RPAREN          reduce using rule 97 (infixOperation -> elvisExpression io .)
    RCCT            reduce using rule 97 (infixOperation -> elvisExpression io .)


state 185

    (98) io -> inOperator . elvisExpression
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    elvisExpression                shift and go to state 279
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 186

    (99) io -> isOperator . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    type                           shift and go to state 280
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 187

    (244) inOperator -> IN .

    INCREMENTO      reduce using rule 244 (inOperator -> IN .)
    DECREMENTO      reduce using rule 244 (inOperator -> IN .)
    MINUS           reduce using rule 244 (inOperator -> IN .)
    PLUS            reduce using rule 244 (inOperator -> IN .)
    NOT             reduce using rule 244 (inOperator -> IN .)
    ID              reduce using rule 244 (inOperator -> IN .)
    CROSSINLINE     reduce using rule 244 (inOperator -> IN .)
    IMPORT          reduce using rule 244 (inOperator -> IN .)
    INIT            reduce using rule 244 (inOperator -> IN .)
    NOINLINE        reduce using rule 244 (inOperator -> IN .)
    OUT             reduce using rule 244 (inOperator -> IN .)
    VARARG          reduce using rule 244 (inOperator -> IN .)
    WHERE           reduce using rule 244 (inOperator -> IN .)
    ELVIS           reduce using rule 244 (inOperator -> IN .)
    PONTOPONTO      reduce using rule 244 (inOperator -> IN .)
    MULT            reduce using rule 244 (inOperator -> IN .)
    DIVIDE          reduce using rule 244 (inOperator -> IN .)
    MOD             reduce using rule 244 (inOperator -> IN .)
    AS              reduce using rule 244 (inOperator -> IN .)
    LITERAL_STRING  reduce using rule 244 (inOperator -> IN .)
    LPAREN          reduce using rule 244 (inOperator -> IN .)
    DOISP           reduce using rule 244 (inOperator -> IN .)
    LCCT            reduce using rule 244 (inOperator -> IN .)
    IF              reduce using rule 244 (inOperator -> IN .)
    RETURN          reduce using rule 244 (inOperator -> IN .)
    RETURN_AT       reduce using rule 244 (inOperator -> IN .)
    CONTINUE        reduce using rule 244 (inOperator -> IN .)
    CONTINUE_AT     reduce using rule 244 (inOperator -> IN .)
    BREAK           reduce using rule 244 (inOperator -> IN .)
    BREAK_AT        reduce using rule 244 (inOperator -> IN .)
    RCHAVE          reduce using rule 244 (inOperator -> IN .)
    FUN             reduce using rule 244 (inOperator -> IN .)
    SUSPEND         reduce using rule 244 (inOperator -> IN .)
    MENOR           reduce using rule 244 (inOperator -> IN .)
    PONTO           reduce using rule 244 (inOperator -> IN .)
    COLONCOLON      reduce using rule 244 (inOperator -> IN .)
    OR              reduce using rule 244 (inOperator -> IN .)
    AND             reduce using rule 244 (inOperator -> IN .)
    DIFERENTE       reduce using rule 244 (inOperator -> IN .)
    IDENTIDADE      reduce using rule 244 (inOperator -> IN .)
    IGUALDADE       reduce using rule 244 (inOperator -> IN .)
    SEMIDENTIDADE   reduce using rule 244 (inOperator -> IN .)
    MAIOR           reduce using rule 244 (inOperator -> IN .)
    MENORIGUAL      reduce using rule 244 (inOperator -> IN .)
    MAIORIGUAL      reduce using rule 244 (inOperator -> IN .)
    IN              reduce using rule 244 (inOperator -> IN .)
    NOT_IN          reduce using rule 244 (inOperator -> IN .)
    IS              reduce using rule 244 (inOperator -> IN .)
    NOT_IS          reduce using rule 244 (inOperator -> IN .)
    FOR             reduce using rule 244 (inOperator -> IN .)
    WHILE           reduce using rule 244 (inOperator -> IN .)
    DO              reduce using rule 244 (inOperator -> IN .)
    MULTIGUAL       reduce using rule 244 (inOperator -> IN .)
    DIVIGUAL        reduce using rule 244 (inOperator -> IN .)
    MODIGUAL        reduce using rule 244 (inOperator -> IN .)
    LCHAVE          reduce using rule 244 (inOperator -> IN .)
    PV              reduce using rule 244 (inOperator -> IN .)
    ELSE            reduce using rule 244 (inOperator -> IN .)
    $end            reduce using rule 244 (inOperator -> IN .)
    COMMA           reduce using rule 244 (inOperator -> IN .)
    RPAREN          reduce using rule 244 (inOperator -> IN .)
    RCCT            reduce using rule 244 (inOperator -> IN .)


state 188

    (245) inOperator -> NOT_IN .

    INCREMENTO      reduce using rule 245 (inOperator -> NOT_IN .)
    DECREMENTO      reduce using rule 245 (inOperator -> NOT_IN .)
    MINUS           reduce using rule 245 (inOperator -> NOT_IN .)
    PLUS            reduce using rule 245 (inOperator -> NOT_IN .)
    NOT             reduce using rule 245 (inOperator -> NOT_IN .)
    ID              reduce using rule 245 (inOperator -> NOT_IN .)
    CROSSINLINE     reduce using rule 245 (inOperator -> NOT_IN .)
    IMPORT          reduce using rule 245 (inOperator -> NOT_IN .)
    INIT            reduce using rule 245 (inOperator -> NOT_IN .)
    NOINLINE        reduce using rule 245 (inOperator -> NOT_IN .)
    OUT             reduce using rule 245 (inOperator -> NOT_IN .)
    VARARG          reduce using rule 245 (inOperator -> NOT_IN .)
    WHERE           reduce using rule 245 (inOperator -> NOT_IN .)
    ELVIS           reduce using rule 245 (inOperator -> NOT_IN .)
    PONTOPONTO      reduce using rule 245 (inOperator -> NOT_IN .)
    MULT            reduce using rule 245 (inOperator -> NOT_IN .)
    DIVIDE          reduce using rule 245 (inOperator -> NOT_IN .)
    MOD             reduce using rule 245 (inOperator -> NOT_IN .)
    AS              reduce using rule 245 (inOperator -> NOT_IN .)
    LITERAL_STRING  reduce using rule 245 (inOperator -> NOT_IN .)
    LPAREN          reduce using rule 245 (inOperator -> NOT_IN .)
    DOISP           reduce using rule 245 (inOperator -> NOT_IN .)
    LCCT            reduce using rule 245 (inOperator -> NOT_IN .)
    IF              reduce using rule 245 (inOperator -> NOT_IN .)
    RETURN          reduce using rule 245 (inOperator -> NOT_IN .)
    RETURN_AT       reduce using rule 245 (inOperator -> NOT_IN .)
    CONTINUE        reduce using rule 245 (inOperator -> NOT_IN .)
    CONTINUE_AT     reduce using rule 245 (inOperator -> NOT_IN .)
    BREAK           reduce using rule 245 (inOperator -> NOT_IN .)
    BREAK_AT        reduce using rule 245 (inOperator -> NOT_IN .)
    RCHAVE          reduce using rule 245 (inOperator -> NOT_IN .)
    FUN             reduce using rule 245 (inOperator -> NOT_IN .)
    SUSPEND         reduce using rule 245 (inOperator -> NOT_IN .)
    MENOR           reduce using rule 245 (inOperator -> NOT_IN .)
    PONTO           reduce using rule 245 (inOperator -> NOT_IN .)
    COLONCOLON      reduce using rule 245 (inOperator -> NOT_IN .)
    OR              reduce using rule 245 (inOperator -> NOT_IN .)
    AND             reduce using rule 245 (inOperator -> NOT_IN .)
    DIFERENTE       reduce using rule 245 (inOperator -> NOT_IN .)
    IDENTIDADE      reduce using rule 245 (inOperator -> NOT_IN .)
    IGUALDADE       reduce using rule 245 (inOperator -> NOT_IN .)
    SEMIDENTIDADE   reduce using rule 245 (inOperator -> NOT_IN .)
    MAIOR           reduce using rule 245 (inOperator -> NOT_IN .)
    MENORIGUAL      reduce using rule 245 (inOperator -> NOT_IN .)
    MAIORIGUAL      reduce using rule 245 (inOperator -> NOT_IN .)
    IN              reduce using rule 245 (inOperator -> NOT_IN .)
    NOT_IN          reduce using rule 245 (inOperator -> NOT_IN .)
    IS              reduce using rule 245 (inOperator -> NOT_IN .)
    NOT_IS          reduce using rule 245 (inOperator -> NOT_IN .)
    FOR             reduce using rule 245 (inOperator -> NOT_IN .)
    WHILE           reduce using rule 245 (inOperator -> NOT_IN .)
    DO              reduce using rule 245 (inOperator -> NOT_IN .)
    MULTIGUAL       reduce using rule 245 (inOperator -> NOT_IN .)
    DIVIGUAL        reduce using rule 245 (inOperator -> NOT_IN .)
    MODIGUAL        reduce using rule 245 (inOperator -> NOT_IN .)
    LCHAVE          reduce using rule 245 (inOperator -> NOT_IN .)
    PV              reduce using rule 245 (inOperator -> NOT_IN .)
    ELSE            reduce using rule 245 (inOperator -> NOT_IN .)
    $end            reduce using rule 245 (inOperator -> NOT_IN .)
    COMMA           reduce using rule 245 (inOperator -> NOT_IN .)
    RPAREN          reduce using rule 245 (inOperator -> NOT_IN .)
    RCCT            reduce using rule 245 (inOperator -> NOT_IN .)


state 189

    (246) isOperator -> IS .

    SUSPEND         reduce using rule 246 (isOperator -> IS .)
    LPAREN          reduce using rule 246 (isOperator -> IS .)
    ID              reduce using rule 246 (isOperator -> IS .)
    CROSSINLINE     reduce using rule 246 (isOperator -> IS .)
    IMPORT          reduce using rule 246 (isOperator -> IS .)
    INIT            reduce using rule 246 (isOperator -> IS .)
    NOINLINE        reduce using rule 246 (isOperator -> IS .)
    OUT             reduce using rule 246 (isOperator -> IS .)
    VARARG          reduce using rule 246 (isOperator -> IS .)
    WHERE           reduce using rule 246 (isOperator -> IS .)


state 190

    (247) isOperator -> NOT_IS .

    SUSPEND         reduce using rule 247 (isOperator -> NOT_IS .)
    LPAREN          reduce using rule 247 (isOperator -> NOT_IS .)
    ID              reduce using rule 247 (isOperator -> NOT_IS .)
    CROSSINLINE     reduce using rule 247 (isOperator -> NOT_IS .)
    IMPORT          reduce using rule 247 (isOperator -> NOT_IS .)
    INIT            reduce using rule 247 (isOperator -> NOT_IS .)
    NOINLINE        reduce using rule 247 (isOperator -> NOT_IS .)
    OUT             reduce using rule 247 (isOperator -> NOT_IS .)
    VARARG          reduce using rule 247 (isOperator -> NOT_IS .)
    WHERE           reduce using rule 247 (isOperator -> NOT_IS .)


state 191

    (102) elvisExpression -> infixFunctionCall ELVIS . elvisExpression
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    infixFunctionCall              shift and go to state 96
    elvisExpression                shift and go to state 281
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 192

    (105) infixFunctionCall -> rangeExpression simpleIdentifier . infixFunctionCall
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    MENOR           reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    OR              reduce using rule 117 (preue -> .)
    AND             reduce using rule 117 (preue -> .)
    DIFERENTE       reduce using rule 117 (preue -> .)
    IDENTIDADE      reduce using rule 117 (preue -> .)
    IGUALDADE       reduce using rule 117 (preue -> .)
    SEMIDENTIDADE   reduce using rule 117 (preue -> .)
    MAIOR           reduce using rule 117 (preue -> .)
    MENORIGUAL      reduce using rule 117 (preue -> .)
    MAIORIGUAL      reduce using rule 117 (preue -> .)
    IN              reduce using rule 117 (preue -> .)
    NOT_IN          reduce using rule 117 (preue -> .)
    IS              reduce using rule 117 (preue -> .)
    NOT_IS          reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    FOR             reduce using rule 117 (preue -> .)
    WHILE           reduce using rule 117 (preue -> .)
    DO              reduce using rule 117 (preue -> .)
    MULTIGUAL       reduce using rule 117 (preue -> .)
    DIVIGUAL        reduce using rule 117 (preue -> .)
    MODIGUAL        reduce using rule 117 (preue -> .)
    LCHAVE          reduce using rule 117 (preue -> .)
    PV              reduce using rule 117 (preue -> .)
    ELSE            reduce using rule 117 (preue -> .)
    $end            reduce using rule 117 (preue -> .)
    COMMA           reduce using rule 117 (preue -> .)
    RPAREN          reduce using rule 117 (preue -> .)
    RCCT            reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]

    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    infixFunctionCall              shift and go to state 282
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 193

    (107) rangeExpression -> additiveExpression PONTOPONTO . rangeExpression
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    MENOR           reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    OR              reduce using rule 117 (preue -> .)
    AND             reduce using rule 117 (preue -> .)
    DIFERENTE       reduce using rule 117 (preue -> .)
    IDENTIDADE      reduce using rule 117 (preue -> .)
    IGUALDADE       reduce using rule 117 (preue -> .)
    SEMIDENTIDADE   reduce using rule 117 (preue -> .)
    MAIOR           reduce using rule 117 (preue -> .)
    MENORIGUAL      reduce using rule 117 (preue -> .)
    MAIORIGUAL      reduce using rule 117 (preue -> .)
    IN              reduce using rule 117 (preue -> .)
    NOT_IN          reduce using rule 117 (preue -> .)
    IS              reduce using rule 117 (preue -> .)
    NOT_IS          reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    FOR             reduce using rule 117 (preue -> .)
    WHILE           reduce using rule 117 (preue -> .)
    DO              reduce using rule 117 (preue -> .)
    MULTIGUAL       reduce using rule 117 (preue -> .)
    DIVIGUAL        reduce using rule 117 (preue -> .)
    MODIGUAL        reduce using rule 117 (preue -> .)
    LCHAVE          reduce using rule 117 (preue -> .)
    PV              reduce using rule 117 (preue -> .)
    ELSE            reduce using rule 117 (preue -> .)
    $end            reduce using rule 117 (preue -> .)
    COMMA           reduce using rule 117 (preue -> .)
    RPAREN          reduce using rule 117 (preue -> .)
    RCCT            reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]

    additiveExpression             shift and go to state 99
    rangeExpression                shift and go to state 283
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    simpleIdentifier               shift and go to state 98

state 194

    (109) additiveExpression -> multiplicativeExpression additiveOperator . additiveExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    MENOR           reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    OR              reduce using rule 117 (preue -> .)
    AND             reduce using rule 117 (preue -> .)
    DIFERENTE       reduce using rule 117 (preue -> .)
    IDENTIDADE      reduce using rule 117 (preue -> .)
    IGUALDADE       reduce using rule 117 (preue -> .)
    SEMIDENTIDADE   reduce using rule 117 (preue -> .)
    MAIOR           reduce using rule 117 (preue -> .)
    MENORIGUAL      reduce using rule 117 (preue -> .)
    MAIORIGUAL      reduce using rule 117 (preue -> .)
    IN              reduce using rule 117 (preue -> .)
    NOT_IN          reduce using rule 117 (preue -> .)
    IS              reduce using rule 117 (preue -> .)
    NOT_IS          reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    FOR             reduce using rule 117 (preue -> .)
    WHILE           reduce using rule 117 (preue -> .)
    DO              reduce using rule 117 (preue -> .)
    MULTIGUAL       reduce using rule 117 (preue -> .)
    DIVIGUAL        reduce using rule 117 (preue -> .)
    MODIGUAL        reduce using rule 117 (preue -> .)
    LCHAVE          reduce using rule 117 (preue -> .)
    PV              reduce using rule 117 (preue -> .)
    ELSE            reduce using rule 117 (preue -> .)
    $end            reduce using rule 117 (preue -> .)
    COMMA           reduce using rule 117 (preue -> .)
    RPAREN          reduce using rule 117 (preue -> .)
    RCCT            reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]

    multiplicativeExpression       shift and go to state 100
    additiveExpression             shift and go to state 284
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    simpleIdentifier               shift and go to state 98

state 195

    (248) additiveOperator -> PLUS .

    INCREMENTO      reduce using rule 248 (additiveOperator -> PLUS .)
    DECREMENTO      reduce using rule 248 (additiveOperator -> PLUS .)
    MINUS           reduce using rule 248 (additiveOperator -> PLUS .)
    PLUS            reduce using rule 248 (additiveOperator -> PLUS .)
    NOT             reduce using rule 248 (additiveOperator -> PLUS .)
    ID              reduce using rule 248 (additiveOperator -> PLUS .)
    CROSSINLINE     reduce using rule 248 (additiveOperator -> PLUS .)
    IMPORT          reduce using rule 248 (additiveOperator -> PLUS .)
    INIT            reduce using rule 248 (additiveOperator -> PLUS .)
    NOINLINE        reduce using rule 248 (additiveOperator -> PLUS .)
    OUT             reduce using rule 248 (additiveOperator -> PLUS .)
    VARARG          reduce using rule 248 (additiveOperator -> PLUS .)
    WHERE           reduce using rule 248 (additiveOperator -> PLUS .)
    MULT            reduce using rule 248 (additiveOperator -> PLUS .)
    DIVIDE          reduce using rule 248 (additiveOperator -> PLUS .)
    MOD             reduce using rule 248 (additiveOperator -> PLUS .)
    AS              reduce using rule 248 (additiveOperator -> PLUS .)
    LITERAL_STRING  reduce using rule 248 (additiveOperator -> PLUS .)
    LPAREN          reduce using rule 248 (additiveOperator -> PLUS .)
    DOISP           reduce using rule 248 (additiveOperator -> PLUS .)
    LCCT            reduce using rule 248 (additiveOperator -> PLUS .)
    IF              reduce using rule 248 (additiveOperator -> PLUS .)
    RETURN          reduce using rule 248 (additiveOperator -> PLUS .)
    RETURN_AT       reduce using rule 248 (additiveOperator -> PLUS .)
    CONTINUE        reduce using rule 248 (additiveOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 248 (additiveOperator -> PLUS .)
    BREAK           reduce using rule 248 (additiveOperator -> PLUS .)
    BREAK_AT        reduce using rule 248 (additiveOperator -> PLUS .)
    RCHAVE          reduce using rule 248 (additiveOperator -> PLUS .)
    FUN             reduce using rule 248 (additiveOperator -> PLUS .)
    SUSPEND         reduce using rule 248 (additiveOperator -> PLUS .)
    MENOR           reduce using rule 248 (additiveOperator -> PLUS .)
    PONTO           reduce using rule 248 (additiveOperator -> PLUS .)
    COLONCOLON      reduce using rule 248 (additiveOperator -> PLUS .)
    OR              reduce using rule 248 (additiveOperator -> PLUS .)
    AND             reduce using rule 248 (additiveOperator -> PLUS .)
    DIFERENTE       reduce using rule 248 (additiveOperator -> PLUS .)
    IDENTIDADE      reduce using rule 248 (additiveOperator -> PLUS .)
    IGUALDADE       reduce using rule 248 (additiveOperator -> PLUS .)
    SEMIDENTIDADE   reduce using rule 248 (additiveOperator -> PLUS .)
    MAIOR           reduce using rule 248 (additiveOperator -> PLUS .)
    MENORIGUAL      reduce using rule 248 (additiveOperator -> PLUS .)
    MAIORIGUAL      reduce using rule 248 (additiveOperator -> PLUS .)
    IN              reduce using rule 248 (additiveOperator -> PLUS .)
    NOT_IN          reduce using rule 248 (additiveOperator -> PLUS .)
    IS              reduce using rule 248 (additiveOperator -> PLUS .)
    NOT_IS          reduce using rule 248 (additiveOperator -> PLUS .)
    ELVIS           reduce using rule 248 (additiveOperator -> PLUS .)
    PONTOPONTO      reduce using rule 248 (additiveOperator -> PLUS .)
    FOR             reduce using rule 248 (additiveOperator -> PLUS .)
    WHILE           reduce using rule 248 (additiveOperator -> PLUS .)
    DO              reduce using rule 248 (additiveOperator -> PLUS .)
    MULTIGUAL       reduce using rule 248 (additiveOperator -> PLUS .)
    DIVIGUAL        reduce using rule 248 (additiveOperator -> PLUS .)
    MODIGUAL        reduce using rule 248 (additiveOperator -> PLUS .)
    LCHAVE          reduce using rule 248 (additiveOperator -> PLUS .)
    PV              reduce using rule 248 (additiveOperator -> PLUS .)
    ELSE            reduce using rule 248 (additiveOperator -> PLUS .)
    $end            reduce using rule 248 (additiveOperator -> PLUS .)
    COMMA           reduce using rule 248 (additiveOperator -> PLUS .)
    RPAREN          reduce using rule 248 (additiveOperator -> PLUS .)
    RCCT            reduce using rule 248 (additiveOperator -> PLUS .)


state 196

    (249) additiveOperator -> MINUS .

    INCREMENTO      reduce using rule 249 (additiveOperator -> MINUS .)
    DECREMENTO      reduce using rule 249 (additiveOperator -> MINUS .)
    MINUS           reduce using rule 249 (additiveOperator -> MINUS .)
    PLUS            reduce using rule 249 (additiveOperator -> MINUS .)
    NOT             reduce using rule 249 (additiveOperator -> MINUS .)
    ID              reduce using rule 249 (additiveOperator -> MINUS .)
    CROSSINLINE     reduce using rule 249 (additiveOperator -> MINUS .)
    IMPORT          reduce using rule 249 (additiveOperator -> MINUS .)
    INIT            reduce using rule 249 (additiveOperator -> MINUS .)
    NOINLINE        reduce using rule 249 (additiveOperator -> MINUS .)
    OUT             reduce using rule 249 (additiveOperator -> MINUS .)
    VARARG          reduce using rule 249 (additiveOperator -> MINUS .)
    WHERE           reduce using rule 249 (additiveOperator -> MINUS .)
    MULT            reduce using rule 249 (additiveOperator -> MINUS .)
    DIVIDE          reduce using rule 249 (additiveOperator -> MINUS .)
    MOD             reduce using rule 249 (additiveOperator -> MINUS .)
    AS              reduce using rule 249 (additiveOperator -> MINUS .)
    LITERAL_STRING  reduce using rule 249 (additiveOperator -> MINUS .)
    LPAREN          reduce using rule 249 (additiveOperator -> MINUS .)
    DOISP           reduce using rule 249 (additiveOperator -> MINUS .)
    LCCT            reduce using rule 249 (additiveOperator -> MINUS .)
    IF              reduce using rule 249 (additiveOperator -> MINUS .)
    RETURN          reduce using rule 249 (additiveOperator -> MINUS .)
    RETURN_AT       reduce using rule 249 (additiveOperator -> MINUS .)
    CONTINUE        reduce using rule 249 (additiveOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 249 (additiveOperator -> MINUS .)
    BREAK           reduce using rule 249 (additiveOperator -> MINUS .)
    BREAK_AT        reduce using rule 249 (additiveOperator -> MINUS .)
    RCHAVE          reduce using rule 249 (additiveOperator -> MINUS .)
    FUN             reduce using rule 249 (additiveOperator -> MINUS .)
    SUSPEND         reduce using rule 249 (additiveOperator -> MINUS .)
    MENOR           reduce using rule 249 (additiveOperator -> MINUS .)
    PONTO           reduce using rule 249 (additiveOperator -> MINUS .)
    COLONCOLON      reduce using rule 249 (additiveOperator -> MINUS .)
    OR              reduce using rule 249 (additiveOperator -> MINUS .)
    AND             reduce using rule 249 (additiveOperator -> MINUS .)
    DIFERENTE       reduce using rule 249 (additiveOperator -> MINUS .)
    IDENTIDADE      reduce using rule 249 (additiveOperator -> MINUS .)
    IGUALDADE       reduce using rule 249 (additiveOperator -> MINUS .)
    SEMIDENTIDADE   reduce using rule 249 (additiveOperator -> MINUS .)
    MAIOR           reduce using rule 249 (additiveOperator -> MINUS .)
    MENORIGUAL      reduce using rule 249 (additiveOperator -> MINUS .)
    MAIORIGUAL      reduce using rule 249 (additiveOperator -> MINUS .)
    IN              reduce using rule 249 (additiveOperator -> MINUS .)
    NOT_IN          reduce using rule 249 (additiveOperator -> MINUS .)
    IS              reduce using rule 249 (additiveOperator -> MINUS .)
    NOT_IS          reduce using rule 249 (additiveOperator -> MINUS .)
    ELVIS           reduce using rule 249 (additiveOperator -> MINUS .)
    PONTOPONTO      reduce using rule 249 (additiveOperator -> MINUS .)
    FOR             reduce using rule 249 (additiveOperator -> MINUS .)
    WHILE           reduce using rule 249 (additiveOperator -> MINUS .)
    DO              reduce using rule 249 (additiveOperator -> MINUS .)
    MULTIGUAL       reduce using rule 249 (additiveOperator -> MINUS .)
    DIVIGUAL        reduce using rule 249 (additiveOperator -> MINUS .)
    MODIGUAL        reduce using rule 249 (additiveOperator -> MINUS .)
    LCHAVE          reduce using rule 249 (additiveOperator -> MINUS .)
    PV              reduce using rule 249 (additiveOperator -> MINUS .)
    ELSE            reduce using rule 249 (additiveOperator -> MINUS .)
    $end            reduce using rule 249 (additiveOperator -> MINUS .)
    COMMA           reduce using rule 249 (additiveOperator -> MINUS .)
    RPAREN          reduce using rule 249 (additiveOperator -> MINUS .)
    RCCT            reduce using rule 249 (additiveOperator -> MINUS .)


state 197

    (111) multiplicativeExpression -> asExpression multiplicativeOperator . multiplicativeExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    MENOR           reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    OR              reduce using rule 117 (preue -> .)
    AND             reduce using rule 117 (preue -> .)
    DIFERENTE       reduce using rule 117 (preue -> .)
    IDENTIDADE      reduce using rule 117 (preue -> .)
    IGUALDADE       reduce using rule 117 (preue -> .)
    SEMIDENTIDADE   reduce using rule 117 (preue -> .)
    MAIOR           reduce using rule 117 (preue -> .)
    MENORIGUAL      reduce using rule 117 (preue -> .)
    MAIORIGUAL      reduce using rule 117 (preue -> .)
    IN              reduce using rule 117 (preue -> .)
    NOT_IN          reduce using rule 117 (preue -> .)
    IS              reduce using rule 117 (preue -> .)
    NOT_IS          reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    FOR             reduce using rule 117 (preue -> .)
    WHILE           reduce using rule 117 (preue -> .)
    DO              reduce using rule 117 (preue -> .)
    MULTIGUAL       reduce using rule 117 (preue -> .)
    DIVIGUAL        reduce using rule 117 (preue -> .)
    MODIGUAL        reduce using rule 117 (preue -> .)
    LCHAVE          reduce using rule 117 (preue -> .)
    PV              reduce using rule 117 (preue -> .)
    ELSE            reduce using rule 117 (preue -> .)
    $end            reduce using rule 117 (preue -> .)
    COMMA           reduce using rule 117 (preue -> .)
    RPAREN          reduce using rule 117 (preue -> .)
    RCCT            reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]

    asExpression                   shift and go to state 101
    multiplicativeExpression       shift and go to state 285
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    simpleIdentifier               shift and go to state 98

state 198

    (250) multiplicativeOperator -> MULT .

    INCREMENTO      reduce using rule 250 (multiplicativeOperator -> MULT .)
    DECREMENTO      reduce using rule 250 (multiplicativeOperator -> MULT .)
    MINUS           reduce using rule 250 (multiplicativeOperator -> MULT .)
    PLUS            reduce using rule 250 (multiplicativeOperator -> MULT .)
    NOT             reduce using rule 250 (multiplicativeOperator -> MULT .)
    ID              reduce using rule 250 (multiplicativeOperator -> MULT .)
    CROSSINLINE     reduce using rule 250 (multiplicativeOperator -> MULT .)
    IMPORT          reduce using rule 250 (multiplicativeOperator -> MULT .)
    INIT            reduce using rule 250 (multiplicativeOperator -> MULT .)
    NOINLINE        reduce using rule 250 (multiplicativeOperator -> MULT .)
    OUT             reduce using rule 250 (multiplicativeOperator -> MULT .)
    VARARG          reduce using rule 250 (multiplicativeOperator -> MULT .)
    WHERE           reduce using rule 250 (multiplicativeOperator -> MULT .)
    MULT            reduce using rule 250 (multiplicativeOperator -> MULT .)
    DIVIDE          reduce using rule 250 (multiplicativeOperator -> MULT .)
    MOD             reduce using rule 250 (multiplicativeOperator -> MULT .)
    AS              reduce using rule 250 (multiplicativeOperator -> MULT .)
    LITERAL_STRING  reduce using rule 250 (multiplicativeOperator -> MULT .)
    LPAREN          reduce using rule 250 (multiplicativeOperator -> MULT .)
    DOISP           reduce using rule 250 (multiplicativeOperator -> MULT .)
    LCCT            reduce using rule 250 (multiplicativeOperator -> MULT .)
    IF              reduce using rule 250 (multiplicativeOperator -> MULT .)
    RETURN          reduce using rule 250 (multiplicativeOperator -> MULT .)
    RETURN_AT       reduce using rule 250 (multiplicativeOperator -> MULT .)
    CONTINUE        reduce using rule 250 (multiplicativeOperator -> MULT .)
    CONTINUE_AT     reduce using rule 250 (multiplicativeOperator -> MULT .)
    BREAK           reduce using rule 250 (multiplicativeOperator -> MULT .)
    BREAK_AT        reduce using rule 250 (multiplicativeOperator -> MULT .)
    RCHAVE          reduce using rule 250 (multiplicativeOperator -> MULT .)
    FUN             reduce using rule 250 (multiplicativeOperator -> MULT .)
    SUSPEND         reduce using rule 250 (multiplicativeOperator -> MULT .)
    MENOR           reduce using rule 250 (multiplicativeOperator -> MULT .)
    PONTO           reduce using rule 250 (multiplicativeOperator -> MULT .)
    COLONCOLON      reduce using rule 250 (multiplicativeOperator -> MULT .)
    OR              reduce using rule 250 (multiplicativeOperator -> MULT .)
    AND             reduce using rule 250 (multiplicativeOperator -> MULT .)
    DIFERENTE       reduce using rule 250 (multiplicativeOperator -> MULT .)
    IDENTIDADE      reduce using rule 250 (multiplicativeOperator -> MULT .)
    IGUALDADE       reduce using rule 250 (multiplicativeOperator -> MULT .)
    SEMIDENTIDADE   reduce using rule 250 (multiplicativeOperator -> MULT .)
    MAIOR           reduce using rule 250 (multiplicativeOperator -> MULT .)
    MENORIGUAL      reduce using rule 250 (multiplicativeOperator -> MULT .)
    MAIORIGUAL      reduce using rule 250 (multiplicativeOperator -> MULT .)
    IN              reduce using rule 250 (multiplicativeOperator -> MULT .)
    NOT_IN          reduce using rule 250 (multiplicativeOperator -> MULT .)
    IS              reduce using rule 250 (multiplicativeOperator -> MULT .)
    NOT_IS          reduce using rule 250 (multiplicativeOperator -> MULT .)
    ELVIS           reduce using rule 250 (multiplicativeOperator -> MULT .)
    PONTOPONTO      reduce using rule 250 (multiplicativeOperator -> MULT .)
    FOR             reduce using rule 250 (multiplicativeOperator -> MULT .)
    WHILE           reduce using rule 250 (multiplicativeOperator -> MULT .)
    DO              reduce using rule 250 (multiplicativeOperator -> MULT .)
    MULTIGUAL       reduce using rule 250 (multiplicativeOperator -> MULT .)
    DIVIGUAL        reduce using rule 250 (multiplicativeOperator -> MULT .)
    MODIGUAL        reduce using rule 250 (multiplicativeOperator -> MULT .)
    LCHAVE          reduce using rule 250 (multiplicativeOperator -> MULT .)
    PV              reduce using rule 250 (multiplicativeOperator -> MULT .)
    ELSE            reduce using rule 250 (multiplicativeOperator -> MULT .)
    $end            reduce using rule 250 (multiplicativeOperator -> MULT .)
    COMMA           reduce using rule 250 (multiplicativeOperator -> MULT .)
    RPAREN          reduce using rule 250 (multiplicativeOperator -> MULT .)
    RCCT            reduce using rule 250 (multiplicativeOperator -> MULT .)


state 199

    (251) multiplicativeOperator -> DIVIDE .

    INCREMENTO      reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    DECREMENTO      reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    MINUS           reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    PLUS            reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    NOT             reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    ID              reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    CROSSINLINE     reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    IMPORT          reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    INIT            reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    NOINLINE        reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    OUT             reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    VARARG          reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    WHERE           reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    MULT            reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    DIVIDE          reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    MOD             reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    AS              reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    LITERAL_STRING  reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    LPAREN          reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    DOISP           reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    LCCT            reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    IF              reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    RETURN          reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    RETURN_AT       reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    CONTINUE        reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    CONTINUE_AT     reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    BREAK           reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    BREAK_AT        reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    RCHAVE          reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    FUN             reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    SUSPEND         reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    MENOR           reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    PONTO           reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    COLONCOLON      reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    OR              reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    AND             reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    DIFERENTE       reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    IDENTIDADE      reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    IGUALDADE       reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    SEMIDENTIDADE   reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    MAIOR           reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    MENORIGUAL      reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    MAIORIGUAL      reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    IN              reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    NOT_IN          reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    IS              reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    NOT_IS          reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    ELVIS           reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    PONTOPONTO      reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    FOR             reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    WHILE           reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    DO              reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    MULTIGUAL       reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    DIVIGUAL        reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    MODIGUAL        reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    LCHAVE          reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    PV              reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    ELSE            reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    $end            reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    COMMA           reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    RPAREN          reduce using rule 251 (multiplicativeOperator -> DIVIDE .)
    RCCT            reduce using rule 251 (multiplicativeOperator -> DIVIDE .)


state 200

    (252) multiplicativeOperator -> MOD .

    INCREMENTO      reduce using rule 252 (multiplicativeOperator -> MOD .)
    DECREMENTO      reduce using rule 252 (multiplicativeOperator -> MOD .)
    MINUS           reduce using rule 252 (multiplicativeOperator -> MOD .)
    PLUS            reduce using rule 252 (multiplicativeOperator -> MOD .)
    NOT             reduce using rule 252 (multiplicativeOperator -> MOD .)
    ID              reduce using rule 252 (multiplicativeOperator -> MOD .)
    CROSSINLINE     reduce using rule 252 (multiplicativeOperator -> MOD .)
    IMPORT          reduce using rule 252 (multiplicativeOperator -> MOD .)
    INIT            reduce using rule 252 (multiplicativeOperator -> MOD .)
    NOINLINE        reduce using rule 252 (multiplicativeOperator -> MOD .)
    OUT             reduce using rule 252 (multiplicativeOperator -> MOD .)
    VARARG          reduce using rule 252 (multiplicativeOperator -> MOD .)
    WHERE           reduce using rule 252 (multiplicativeOperator -> MOD .)
    MULT            reduce using rule 252 (multiplicativeOperator -> MOD .)
    DIVIDE          reduce using rule 252 (multiplicativeOperator -> MOD .)
    MOD             reduce using rule 252 (multiplicativeOperator -> MOD .)
    AS              reduce using rule 252 (multiplicativeOperator -> MOD .)
    LITERAL_STRING  reduce using rule 252 (multiplicativeOperator -> MOD .)
    LPAREN          reduce using rule 252 (multiplicativeOperator -> MOD .)
    DOISP           reduce using rule 252 (multiplicativeOperator -> MOD .)
    LCCT            reduce using rule 252 (multiplicativeOperator -> MOD .)
    IF              reduce using rule 252 (multiplicativeOperator -> MOD .)
    RETURN          reduce using rule 252 (multiplicativeOperator -> MOD .)
    RETURN_AT       reduce using rule 252 (multiplicativeOperator -> MOD .)
    CONTINUE        reduce using rule 252 (multiplicativeOperator -> MOD .)
    CONTINUE_AT     reduce using rule 252 (multiplicativeOperator -> MOD .)
    BREAK           reduce using rule 252 (multiplicativeOperator -> MOD .)
    BREAK_AT        reduce using rule 252 (multiplicativeOperator -> MOD .)
    RCHAVE          reduce using rule 252 (multiplicativeOperator -> MOD .)
    FUN             reduce using rule 252 (multiplicativeOperator -> MOD .)
    SUSPEND         reduce using rule 252 (multiplicativeOperator -> MOD .)
    MENOR           reduce using rule 252 (multiplicativeOperator -> MOD .)
    PONTO           reduce using rule 252 (multiplicativeOperator -> MOD .)
    COLONCOLON      reduce using rule 252 (multiplicativeOperator -> MOD .)
    OR              reduce using rule 252 (multiplicativeOperator -> MOD .)
    AND             reduce using rule 252 (multiplicativeOperator -> MOD .)
    DIFERENTE       reduce using rule 252 (multiplicativeOperator -> MOD .)
    IDENTIDADE      reduce using rule 252 (multiplicativeOperator -> MOD .)
    IGUALDADE       reduce using rule 252 (multiplicativeOperator -> MOD .)
    SEMIDENTIDADE   reduce using rule 252 (multiplicativeOperator -> MOD .)
    MAIOR           reduce using rule 252 (multiplicativeOperator -> MOD .)
    MENORIGUAL      reduce using rule 252 (multiplicativeOperator -> MOD .)
    MAIORIGUAL      reduce using rule 252 (multiplicativeOperator -> MOD .)
    IN              reduce using rule 252 (multiplicativeOperator -> MOD .)
    NOT_IN          reduce using rule 252 (multiplicativeOperator -> MOD .)
    IS              reduce using rule 252 (multiplicativeOperator -> MOD .)
    NOT_IS          reduce using rule 252 (multiplicativeOperator -> MOD .)
    ELVIS           reduce using rule 252 (multiplicativeOperator -> MOD .)
    PONTOPONTO      reduce using rule 252 (multiplicativeOperator -> MOD .)
    FOR             reduce using rule 252 (multiplicativeOperator -> MOD .)
    WHILE           reduce using rule 252 (multiplicativeOperator -> MOD .)
    DO              reduce using rule 252 (multiplicativeOperator -> MOD .)
    MULTIGUAL       reduce using rule 252 (multiplicativeOperator -> MOD .)
    DIVIGUAL        reduce using rule 252 (multiplicativeOperator -> MOD .)
    MODIGUAL        reduce using rule 252 (multiplicativeOperator -> MOD .)
    LCHAVE          reduce using rule 252 (multiplicativeOperator -> MOD .)
    PV              reduce using rule 252 (multiplicativeOperator -> MOD .)
    ELSE            reduce using rule 252 (multiplicativeOperator -> MOD .)
    $end            reduce using rule 252 (multiplicativeOperator -> MOD .)
    COMMA           reduce using rule 252 (multiplicativeOperator -> MOD .)
    RPAREN          reduce using rule 252 (multiplicativeOperator -> MOD .)
    RCCT            reduce using rule 252 (multiplicativeOperator -> MOD .)


state 201

    (113) asExpression -> prefixUnaryExpression asOperator . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    type                           shift and go to state 286
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 202

    (253) asOperator -> AS .
    (254) asOperator -> AS . asOperator
    (253) asOperator -> . AS
    (254) asOperator -> . AS asOperator

    SUSPEND         reduce using rule 253 (asOperator -> AS .)
    LPAREN          reduce using rule 253 (asOperator -> AS .)
    ID              reduce using rule 253 (asOperator -> AS .)
    CROSSINLINE     reduce using rule 253 (asOperator -> AS .)
    IMPORT          reduce using rule 253 (asOperator -> AS .)
    INIT            reduce using rule 253 (asOperator -> AS .)
    NOINLINE        reduce using rule 253 (asOperator -> AS .)
    OUT             reduce using rule 253 (asOperator -> AS .)
    VARARG          reduce using rule 253 (asOperator -> AS .)
    WHERE           reduce using rule 253 (asOperator -> AS .)
    AS              shift and go to state 202

    asOperator                     shift and go to state 287

state 203

    (114) prefixUnaryExpression -> preue postfixUnaryExpression .

    FUN             reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    FOR             reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    WHILE           reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DO              reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    ID              reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IMPORT          reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    INIT            reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NOINLINE        reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    OUT             reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    VARARG          reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    WHERE           reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    LPAREN          reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DOISP           reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    LCCT            reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IF              reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    RETURN          reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    RETURN_AT       reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    CONTINUE        reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    BREAK           reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    BREAK_AT        reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    RCHAVE          reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    INCREMENTO      reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DECREMENTO      reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MINUS           reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    PLUS            reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NOT             reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    SUSPEND         reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MODIGUAL        reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MENOR           reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    PONTO           reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    COLONCOLON      reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    AS              reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    OR              reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    AND             reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DIFERENTE       reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IGUALDADE       reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MAIOR           reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IN              reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NOT_IN          reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    IS              reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    NOT_IS          reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    ELVIS           reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MULT            reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    DIVIDE          reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    MOD             reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    LCHAVE          reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    PV              reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    ELSE            reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    $end            reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    COMMA           reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    RPAREN          reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)
    RCCT            reduce using rule 114 (prefixUnaryExpression -> preue postfixUnaryExpression .)


state 204

    (165) primaryExpression -> simpleIdentifier .
    (120) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DOISP resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MENOR resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PONTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for OR resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for AND resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MAIOR resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IN resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IS resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ELVIS resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MULT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MOD resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for AS resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for FOR resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for WHILE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PV resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for ELSE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for $end resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCCT resolved using rule 120 (label -> simpleIdentifier .)
    INCREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    MINUS           reduce using rule 120 (label -> simpleIdentifier .)
    PLUS            reduce using rule 120 (label -> simpleIdentifier .)
    NOT             reduce using rule 120 (label -> simpleIdentifier .)
    ID              reduce using rule 120 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 120 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 120 (label -> simpleIdentifier .)
    INIT            reduce using rule 120 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 120 (label -> simpleIdentifier .)
    OUT             reduce using rule 120 (label -> simpleIdentifier .)
    VARARG          reduce using rule 120 (label -> simpleIdentifier .)
    WHERE           reduce using rule 120 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 120 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 120 (label -> simpleIdentifier .)
    DOISP           reduce using rule 120 (label -> simpleIdentifier .)
    LCCT            reduce using rule 120 (label -> simpleIdentifier .)
    IF              reduce using rule 120 (label -> simpleIdentifier .)
    RETURN          reduce using rule 120 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 120 (label -> simpleIdentifier .)
    BREAK           reduce using rule 120 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 120 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 120 (label -> simpleIdentifier .)
    FUN             reduce using rule 120 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 120 (label -> simpleIdentifier .)
    MENOR           reduce using rule 120 (label -> simpleIdentifier .)
    PONTO           reduce using rule 120 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 120 (label -> simpleIdentifier .)
    OR              reduce using rule 120 (label -> simpleIdentifier .)
    AND             reduce using rule 120 (label -> simpleIdentifier .)
    DIFERENTE       reduce using rule 120 (label -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 120 (label -> simpleIdentifier .)
    IGUALDADE       reduce using rule 120 (label -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 120 (label -> simpleIdentifier .)
    MAIOR           reduce using rule 120 (label -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    IN              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IN          reduce using rule 120 (label -> simpleIdentifier .)
    IS              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IS          reduce using rule 120 (label -> simpleIdentifier .)
    ELVIS           reduce using rule 120 (label -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 120 (label -> simpleIdentifier .)
    MULT            reduce using rule 120 (label -> simpleIdentifier .)
    DIVIDE          reduce using rule 120 (label -> simpleIdentifier .)
    MOD             reduce using rule 120 (label -> simpleIdentifier .)
    AS              reduce using rule 120 (label -> simpleIdentifier .)
    FOR             reduce using rule 120 (label -> simpleIdentifier .)
    WHILE           reduce using rule 120 (label -> simpleIdentifier .)
    DO              reduce using rule 120 (label -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 120 (label -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 120 (label -> simpleIdentifier .)
    MODIGUAL        reduce using rule 120 (label -> simpleIdentifier .)
    LCHAVE          reduce using rule 120 (label -> simpleIdentifier .)
    PV              reduce using rule 120 (label -> simpleIdentifier .)
    ELSE            reduce using rule 120 (label -> simpleIdentifier .)
    $end            reduce using rule 120 (label -> simpleIdentifier .)
    COMMA           reduce using rule 120 (label -> simpleIdentifier .)
    RPAREN          reduce using rule 120 (label -> simpleIdentifier .)
    RCCT            reduce using rule 120 (label -> simpleIdentifier .)

  ! FUN             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! FOR             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! WHILE           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DO              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DOISP           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MAIORIGUAL      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MENORIGUAL      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MULTIGUAL       [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DIVIGUAL        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MODIGUAL        [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MENOR           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PONTO           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! AS              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! OR              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! AND             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DIFERENTE       [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IDENTIDADE      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IGUALDADE       [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! SEMIDENTIDADE   [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MAIOR           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IN              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! NOT_IN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! IS              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! NOT_IS          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! ELVIS           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PONTOPONTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MULT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DIVIDE          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MOD             [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PV              [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! ELSE            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! $end            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! COMMA           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RCCT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]


state 205

    (172) parenthesizedExpression -> LPAREN . expression RPAREN
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 288
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 206

    (222) jumpExpression -> expression .

    FUN             reduce using rule 222 (jumpExpression -> expression .)
    FOR             reduce using rule 222 (jumpExpression -> expression .)
    WHILE           reduce using rule 222 (jumpExpression -> expression .)
    DO              reduce using rule 222 (jumpExpression -> expression .)
    ID              reduce using rule 222 (jumpExpression -> expression .)
    CROSSINLINE     reduce using rule 222 (jumpExpression -> expression .)
    IMPORT          reduce using rule 222 (jumpExpression -> expression .)
    INIT            reduce using rule 222 (jumpExpression -> expression .)
    NOINLINE        reduce using rule 222 (jumpExpression -> expression .)
    OUT             reduce using rule 222 (jumpExpression -> expression .)
    VARARG          reduce using rule 222 (jumpExpression -> expression .)
    WHERE           reduce using rule 222 (jumpExpression -> expression .)
    LPAREN          reduce using rule 222 (jumpExpression -> expression .)
    LITERAL_STRING  reduce using rule 222 (jumpExpression -> expression .)
    DOISP           reduce using rule 222 (jumpExpression -> expression .)
    LCCT            reduce using rule 222 (jumpExpression -> expression .)
    IF              reduce using rule 222 (jumpExpression -> expression .)
    RETURN          reduce using rule 222 (jumpExpression -> expression .)
    RETURN_AT       reduce using rule 222 (jumpExpression -> expression .)
    CONTINUE        reduce using rule 222 (jumpExpression -> expression .)
    CONTINUE_AT     reduce using rule 222 (jumpExpression -> expression .)
    BREAK           reduce using rule 222 (jumpExpression -> expression .)
    BREAK_AT        reduce using rule 222 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 222 (jumpExpression -> expression .)
    INCREMENTO      reduce using rule 222 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 222 (jumpExpression -> expression .)
    MINUS           reduce using rule 222 (jumpExpression -> expression .)
    PLUS            reduce using rule 222 (jumpExpression -> expression .)
    NOT             reduce using rule 222 (jumpExpression -> expression .)
    SUSPEND         reduce using rule 222 (jumpExpression -> expression .)
    MAIORIGUAL      reduce using rule 222 (jumpExpression -> expression .)
    MENORIGUAL      reduce using rule 222 (jumpExpression -> expression .)
    MULTIGUAL       reduce using rule 222 (jumpExpression -> expression .)
    DIVIGUAL        reduce using rule 222 (jumpExpression -> expression .)
    MODIGUAL        reduce using rule 222 (jumpExpression -> expression .)
    MENOR           reduce using rule 222 (jumpExpression -> expression .)
    PONTO           reduce using rule 222 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 222 (jumpExpression -> expression .)
    AS              reduce using rule 222 (jumpExpression -> expression .)
    OR              reduce using rule 222 (jumpExpression -> expression .)
    AND             reduce using rule 222 (jumpExpression -> expression .)
    DIFERENTE       reduce using rule 222 (jumpExpression -> expression .)
    IDENTIDADE      reduce using rule 222 (jumpExpression -> expression .)
    IGUALDADE       reduce using rule 222 (jumpExpression -> expression .)
    SEMIDENTIDADE   reduce using rule 222 (jumpExpression -> expression .)
    MAIOR           reduce using rule 222 (jumpExpression -> expression .)
    IN              reduce using rule 222 (jumpExpression -> expression .)
    NOT_IN          reduce using rule 222 (jumpExpression -> expression .)
    IS              reduce using rule 222 (jumpExpression -> expression .)
    NOT_IS          reduce using rule 222 (jumpExpression -> expression .)
    ELVIS           reduce using rule 222 (jumpExpression -> expression .)
    PONTOPONTO      reduce using rule 222 (jumpExpression -> expression .)
    MULT            reduce using rule 222 (jumpExpression -> expression .)
    DIVIDE          reduce using rule 222 (jumpExpression -> expression .)
    MOD             reduce using rule 222 (jumpExpression -> expression .)
    LCHAVE          reduce using rule 222 (jumpExpression -> expression .)
    PV              reduce using rule 222 (jumpExpression -> expression .)
    ELSE            reduce using rule 222 (jumpExpression -> expression .)
    $end            reduce using rule 222 (jumpExpression -> expression .)
    COMMA           reduce using rule 222 (jumpExpression -> expression .)
    RPAREN          reduce using rule 222 (jumpExpression -> expression .)
    RCCT            reduce using rule 222 (jumpExpression -> expression .)


state 207

    (197) anonymousFunction -> FUN . af4 parametersWithOptionalType af3 af1
    (206) af4 -> . type PONTO
    (207) af4 -> .
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! shift/reduce conflict for LPAREN resolved as shift
    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! LPAREN          [ reduce using rule 207 (af4 -> .) ]

    af4                            shift and go to state 220
    type                           shift and go to state 221
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 208

    (116) preue -> unaryPrefix preue .

    LITERAL_STRING  reduce using rule 116 (preue -> unaryPrefix preue .)
    LPAREN          reduce using rule 116 (preue -> unaryPrefix preue .)
    ID              reduce using rule 116 (preue -> unaryPrefix preue .)
    CROSSINLINE     reduce using rule 116 (preue -> unaryPrefix preue .)
    IMPORT          reduce using rule 116 (preue -> unaryPrefix preue .)
    INIT            reduce using rule 116 (preue -> unaryPrefix preue .)
    NOINLINE        reduce using rule 116 (preue -> unaryPrefix preue .)
    OUT             reduce using rule 116 (preue -> unaryPrefix preue .)
    VARARG          reduce using rule 116 (preue -> unaryPrefix preue .)
    WHERE           reduce using rule 116 (preue -> unaryPrefix preue .)
    DOISP           reduce using rule 116 (preue -> unaryPrefix preue .)
    LCCT            reduce using rule 116 (preue -> unaryPrefix preue .)
    IF              reduce using rule 116 (preue -> unaryPrefix preue .)
    RETURN          reduce using rule 116 (preue -> unaryPrefix preue .)
    RETURN_AT       reduce using rule 116 (preue -> unaryPrefix preue .)
    CONTINUE        reduce using rule 116 (preue -> unaryPrefix preue .)
    CONTINUE_AT     reduce using rule 116 (preue -> unaryPrefix preue .)
    BREAK           reduce using rule 116 (preue -> unaryPrefix preue .)
    BREAK_AT        reduce using rule 116 (preue -> unaryPrefix preue .)
    RCHAVE          reduce using rule 116 (preue -> unaryPrefix preue .)
    FUN             reduce using rule 116 (preue -> unaryPrefix preue .)
    SUSPEND         reduce using rule 116 (preue -> unaryPrefix preue .)
    INCREMENTO      reduce using rule 116 (preue -> unaryPrefix preue .)
    DECREMENTO      reduce using rule 116 (preue -> unaryPrefix preue .)
    MINUS           reduce using rule 116 (preue -> unaryPrefix preue .)
    PLUS            reduce using rule 116 (preue -> unaryPrefix preue .)
    NOT             reduce using rule 116 (preue -> unaryPrefix preue .)
    MENOR           reduce using rule 116 (preue -> unaryPrefix preue .)
    PONTO           reduce using rule 116 (preue -> unaryPrefix preue .)
    COLONCOLON      reduce using rule 116 (preue -> unaryPrefix preue .)
    OR              reduce using rule 116 (preue -> unaryPrefix preue .)
    AND             reduce using rule 116 (preue -> unaryPrefix preue .)
    DIFERENTE       reduce using rule 116 (preue -> unaryPrefix preue .)
    IDENTIDADE      reduce using rule 116 (preue -> unaryPrefix preue .)
    IGUALDADE       reduce using rule 116 (preue -> unaryPrefix preue .)
    SEMIDENTIDADE   reduce using rule 116 (preue -> unaryPrefix preue .)
    MAIOR           reduce using rule 116 (preue -> unaryPrefix preue .)
    MENORIGUAL      reduce using rule 116 (preue -> unaryPrefix preue .)
    MAIORIGUAL      reduce using rule 116 (preue -> unaryPrefix preue .)
    IN              reduce using rule 116 (preue -> unaryPrefix preue .)
    NOT_IN          reduce using rule 116 (preue -> unaryPrefix preue .)
    IS              reduce using rule 116 (preue -> unaryPrefix preue .)
    NOT_IS          reduce using rule 116 (preue -> unaryPrefix preue .)
    ELVIS           reduce using rule 116 (preue -> unaryPrefix preue .)
    PONTOPONTO      reduce using rule 116 (preue -> unaryPrefix preue .)
    MULT            reduce using rule 116 (preue -> unaryPrefix preue .)
    DIVIDE          reduce using rule 116 (preue -> unaryPrefix preue .)
    MOD             reduce using rule 116 (preue -> unaryPrefix preue .)
    AS              reduce using rule 116 (preue -> unaryPrefix preue .)
    FOR             reduce using rule 116 (preue -> unaryPrefix preue .)
    WHILE           reduce using rule 116 (preue -> unaryPrefix preue .)
    DO              reduce using rule 116 (preue -> unaryPrefix preue .)
    MULTIGUAL       reduce using rule 116 (preue -> unaryPrefix preue .)
    DIVIGUAL        reduce using rule 116 (preue -> unaryPrefix preue .)
    MODIGUAL        reduce using rule 116 (preue -> unaryPrefix preue .)
    LCHAVE          reduce using rule 116 (preue -> unaryPrefix preue .)
    PV              reduce using rule 116 (preue -> unaryPrefix preue .)
    ELSE            reduce using rule 116 (preue -> unaryPrefix preue .)
    $end            reduce using rule 116 (preue -> unaryPrefix preue .)
    COMMA           reduce using rule 116 (preue -> unaryPrefix preue .)
    RPAREN          reduce using rule 116 (preue -> unaryPrefix preue .)
    RCCT            reduce using rule 116 (preue -> unaryPrefix preue .)


state 209

    (73) block -> LCHAVE statements RCHAVE .

    FUN             reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    FOR             reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    WHILE           reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    DO              reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    ID              reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    CROSSINLINE     reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    IMPORT          reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    INIT            reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    NOINLINE        reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    OUT             reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    VARARG          reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    WHERE           reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    LPAREN          reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    LITERAL_STRING  reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    DOISP           reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    LCCT            reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    IF              reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    RETURN          reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    RETURN_AT       reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    CONTINUE        reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    CONTINUE_AT     reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    BREAK           reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    BREAK_AT        reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    RCHAVE          reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    INCREMENTO      reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    DECREMENTO      reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    MINUS           reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    PLUS            reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    NOT             reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    SUSPEND         reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    MAIORIGUAL      reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    MENORIGUAL      reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    MULTIGUAL       reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    DIVIGUAL        reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    MODIGUAL        reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    MENOR           reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    PONTO           reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    COLONCOLON      reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    AS              reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    OR              reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    AND             reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    DIFERENTE       reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    IDENTIDADE      reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    IGUALDADE       reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    SEMIDENTIDADE   reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    MAIOR           reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    IN              reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    NOT_IN          reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    IS              reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    NOT_IS          reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    ELVIS           reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    PONTOPONTO      reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    MULT            reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    DIVIDE          reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    MOD             reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    LCHAVE          reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    PV              reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    ELSE            reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    $end            reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    COMMA           reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    RPAREN          reduce using rule 73 (block -> LCHAVE statements RCHAVE .)
    RCCT            reduce using rule 73 (block -> LCHAVE statements RCHAVE .)


state 210

    (188) lambdaLiteral -> RCHAVE ll . LCHAVE

    LCHAVE          shift and go to state 289


state 211

    (189) ll -> statements .

    LCHAVE          reduce using rule 189 (ll -> statements .)


state 212

    (190) ll -> lambdaParameters . SETA statements

    SETA            shift and go to state 290


state 213

    (191) ll -> SETA . statements
    (64) statements -> . statement
    (65) statements -> . statement statements
    (66) statements -> .
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! reduce/reduce conflict for LCHAVE resolved using rule 66 (statements -> .)
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 66 (statements -> .)
    LCHAVE          reduce using rule 66 (statements -> .)
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    statements                     shift and go to state 291
    statement                      shift and go to state 114
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    expression                     shift and go to state 118
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 214

    (192) lambdaParameters -> lambdaParameter .
    (193) lambdaParameters -> lambdaParameter . COMMA lambdaParameters

    SETA            reduce using rule 192 (lambdaParameters -> lambdaParameter .)
    COMMA           shift and go to state 292


state 215

    (194) lambdaParameter -> variableDeclaration .

    COMMA           reduce using rule 194 (lambdaParameter -> variableDeclaration .)
    SETA            reduce using rule 194 (lambdaParameter -> variableDeclaration .)


state 216

    (195) lambdaParameter -> multiVariableDeclaration . DOISP type
    (196) lambdaParameter -> multiVariableDeclaration .

    DOISP           shift and go to state 293
    COMMA           reduce using rule 196 (lambdaParameter -> multiVariableDeclaration .)
    SETA            reduce using rule 196 (lambdaParameter -> multiVariableDeclaration .)


state 217

    (27) variableDeclaration -> simpleIdentifier . DOISP type
    (28) variableDeclaration -> simpleIdentifier .
    (131) directlyAssignableExpression -> simpleIdentifier .
    (165) primaryExpression -> simpleIdentifier .
    (120) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 120 (label -> simpleIdentifier .)
  ! shift/reduce conflict for DOISP resolved as shift
  ! reduce/reduce conflict for LCCT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MENOR resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PONTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 120 (label -> simpleIdentifier .)
    DOISP           shift and go to state 294
    COMMA           reduce using rule 28 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 28 (variableDeclaration -> simpleIdentifier .)
    INCREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    MINUS           reduce using rule 120 (label -> simpleIdentifier .)
    PLUS            reduce using rule 120 (label -> simpleIdentifier .)
    NOT             reduce using rule 120 (label -> simpleIdentifier .)
    ID              reduce using rule 120 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 120 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 120 (label -> simpleIdentifier .)
    INIT            reduce using rule 120 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 120 (label -> simpleIdentifier .)
    OUT             reduce using rule 120 (label -> simpleIdentifier .)
    VARARG          reduce using rule 120 (label -> simpleIdentifier .)
    WHERE           reduce using rule 120 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 120 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 120 (label -> simpleIdentifier .)
    LCCT            reduce using rule 120 (label -> simpleIdentifier .)
    IF              reduce using rule 120 (label -> simpleIdentifier .)
    RETURN          reduce using rule 120 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 120 (label -> simpleIdentifier .)
    BREAK           reduce using rule 120 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 120 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 120 (label -> simpleIdentifier .)
    FUN             reduce using rule 120 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 120 (label -> simpleIdentifier .)
    MENOR           reduce using rule 120 (label -> simpleIdentifier .)
    PONTO           reduce using rule 120 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 120 (label -> simpleIdentifier .)
    OR              reduce using rule 120 (label -> simpleIdentifier .)
    AND             reduce using rule 120 (label -> simpleIdentifier .)
    DIFERENTE       reduce using rule 120 (label -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 120 (label -> simpleIdentifier .)
    IGUALDADE       reduce using rule 120 (label -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 120 (label -> simpleIdentifier .)
    MAIOR           reduce using rule 120 (label -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    IN              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IN          reduce using rule 120 (label -> simpleIdentifier .)
    IS              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IS          reduce using rule 120 (label -> simpleIdentifier .)
    ELVIS           reduce using rule 120 (label -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 120 (label -> simpleIdentifier .)
    MULT            reduce using rule 120 (label -> simpleIdentifier .)
    DIVIDE          reduce using rule 120 (label -> simpleIdentifier .)
    MOD             reduce using rule 120 (label -> simpleIdentifier .)
    AS              reduce using rule 120 (label -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 120 (label -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 120 (label -> simpleIdentifier .)
    MODIGUAL        reduce using rule 120 (label -> simpleIdentifier .)
    FOR             reduce using rule 120 (label -> simpleIdentifier .)
    WHILE           reduce using rule 120 (label -> simpleIdentifier .)
    DO              reduce using rule 120 (label -> simpleIdentifier .)
    LCHAVE          reduce using rule 120 (label -> simpleIdentifier .)

  ! IGUALDADE       [ reduce using rule 131 (directlyAssignableExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MENOR           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PONTO           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DOISP           [ reduce using rule 120 (label -> simpleIdentifier .) ]


state 218

    (29) multiVariableDeclaration -> LPAREN . mvd RPAREN
    (133) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (136) parenthesizedAssignableExpression -> LPAREN . assignableExpression RPAREN
    (172) parenthesizedExpression -> LPAREN . expression RPAREN
    (30) mvd -> . variableDeclaration
    (31) mvd -> . variableDeclaration COMMA mvd
    (32) mvd -> .
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (88) expression -> . disjunction
    (27) variableDeclaration -> . simpleIdentifier DOISP type
    (28) variableDeclaration -> . simpleIdentifier
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (41) typeModifier -> . SUSPEND
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (mvd -> .)
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (mvd -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for RCHAVE resolved as shift
    RPAREN          reduce using rule 32 (mvd -> .)
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    FUN             shift and go to state 207
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    mvd                            shift and go to state 295
    directlyAssignableExpression   shift and go to state 239
    assignableExpression           shift and go to state 240
    expression                     shift and go to state 241
    variableDeclaration            shift and go to state 296
    postfixUnaryExpression         shift and go to state 127
    simpleIdentifier               shift and go to state 297
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    disjunction                    shift and go to state 90
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    conjunction                    shift and go to state 91
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    equality                       shift and go to state 92
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    comparison                     shift and go to state 93
    typeModifier                   shift and go to state 10
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 219

    (65) statements -> statement statements .

    RCHAVE          reduce using rule 65 (statements -> statement statements .)
    LCHAVE          reduce using rule 65 (statements -> statement statements .)


state 220

    (197) anonymousFunction -> FUN af4 . parametersWithOptionalType af3 af1
    (177) parametersWithOptionalType -> . LPAREN pwot RPAREN

    LPAREN          shift and go to state 299

    parametersWithOptionalType     shift and go to state 298

state 221

    (206) af4 -> type . PONTO

    PONTO           shift and go to state 300


state 222

    (86) assignment -> directlyAssignableExpression IGUALDADE . expression
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 301
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 223

    (87) assignment -> assignableExpression assignmentAndOperator . expression
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ID resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IMPORT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INIT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OUT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for VARARG resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHERE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DOISP resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IF resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FUN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for FOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    FUN             reduce using rule 103 (elvisExpression -> .)
    FOR             reduce using rule 103 (elvisExpression -> .)
    WHILE           reduce using rule 103 (elvisExpression -> .)
    DO              reduce using rule 103 (elvisExpression -> .)
    LPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 103 (elvisExpression -> .)
    DOISP           reduce using rule 103 (elvisExpression -> .)
    LCCT            reduce using rule 103 (elvisExpression -> .)
    IF              reduce using rule 103 (elvisExpression -> .)
    RETURN          reduce using rule 103 (elvisExpression -> .)
    RETURN_AT       reduce using rule 103 (elvisExpression -> .)
    CONTINUE        reduce using rule 103 (elvisExpression -> .)
    CONTINUE_AT     reduce using rule 103 (elvisExpression -> .)
    BREAK           reduce using rule 103 (elvisExpression -> .)
    BREAK_AT        reduce using rule 103 (elvisExpression -> .)
    RCHAVE          reduce using rule 103 (elvisExpression -> .)
    SUSPEND         reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    LCHAVE          reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 302
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 224

    (231) assignmentAndOperator -> MAIORIGUAL .

    INCREMENTO      reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    DECREMENTO      reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    MINUS           reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    PLUS            reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    NOT             reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    ID              reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    CROSSINLINE     reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    IMPORT          reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    INIT            reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    NOINLINE        reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    OUT             reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    VARARG          reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    WHERE           reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    OR              reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    AND             reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    DIFERENTE       reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    IDENTIDADE      reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    IGUALDADE       reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    SEMIDENTIDADE   reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    MENOR           reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    MAIOR           reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    MENORIGUAL      reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    MAIORIGUAL      reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    IN              reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    NOT_IN          reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    IS              reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    NOT_IS          reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    ELVIS           reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    PONTOPONTO      reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    MULT            reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    DIVIDE          reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    MOD             reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    AS              reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    LITERAL_STRING  reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    LPAREN          reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    DOISP           reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    LCCT            reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    IF              reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    RETURN          reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    RETURN_AT       reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    CONTINUE        reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    CONTINUE_AT     reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    BREAK           reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    BREAK_AT        reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    RCHAVE          reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    FUN             reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    SUSPEND         reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    PONTO           reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    COLONCOLON      reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    FOR             reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    WHILE           reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    DO              reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    MULTIGUAL       reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    DIVIGUAL        reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    MODIGUAL        reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    LCHAVE          reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    PV              reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    ELSE            reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    $end            reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    COMMA           reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    RPAREN          reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)
    RCCT            reduce using rule 231 (assignmentAndOperator -> MAIORIGUAL .)


state 225

    (232) assignmentAndOperator -> MENORIGUAL .

    INCREMENTO      reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    DECREMENTO      reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    MINUS           reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    PLUS            reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    NOT             reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    ID              reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    CROSSINLINE     reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    IMPORT          reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    INIT            reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    NOINLINE        reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    OUT             reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    VARARG          reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    WHERE           reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    OR              reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    AND             reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    DIFERENTE       reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    IDENTIDADE      reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    IGUALDADE       reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    SEMIDENTIDADE   reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    MENOR           reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    MAIOR           reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    MENORIGUAL      reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    MAIORIGUAL      reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    IN              reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    NOT_IN          reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    IS              reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    NOT_IS          reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    ELVIS           reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    PONTOPONTO      reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    MULT            reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    DIVIDE          reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    MOD             reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    AS              reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    LITERAL_STRING  reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    LPAREN          reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    DOISP           reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    LCCT            reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    IF              reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    RETURN          reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    RETURN_AT       reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    CONTINUE        reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    CONTINUE_AT     reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    BREAK           reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    BREAK_AT        reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    RCHAVE          reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    FUN             reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    SUSPEND         reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    PONTO           reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    COLONCOLON      reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    FOR             reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    WHILE           reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    DO              reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    MULTIGUAL       reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    DIVIGUAL        reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    MODIGUAL        reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    LCHAVE          reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    PV              reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    ELSE            reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    $end            reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    COMMA           reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    RPAREN          reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)
    RCCT            reduce using rule 232 (assignmentAndOperator -> MENORIGUAL .)


state 226

    (233) assignmentAndOperator -> MULTIGUAL .

    INCREMENTO      reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    DECREMENTO      reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    MINUS           reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    PLUS            reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    NOT             reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    ID              reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    CROSSINLINE     reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    IMPORT          reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    INIT            reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    NOINLINE        reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    OUT             reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    VARARG          reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    WHERE           reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    OR              reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    AND             reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    DIFERENTE       reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    IDENTIDADE      reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    IGUALDADE       reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    SEMIDENTIDADE   reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    MENOR           reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    MAIOR           reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    MENORIGUAL      reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    MAIORIGUAL      reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    IN              reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    NOT_IN          reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    IS              reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    NOT_IS          reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    ELVIS           reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    PONTOPONTO      reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    MULT            reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    DIVIDE          reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    MOD             reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    AS              reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    LITERAL_STRING  reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    LPAREN          reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    DOISP           reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    LCCT            reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    IF              reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    RETURN          reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    RETURN_AT       reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE        reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE_AT     reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    BREAK           reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    BREAK_AT        reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    RCHAVE          reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    FUN             reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    SUSPEND         reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    PONTO           reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    COLONCOLON      reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    FOR             reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    WHILE           reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    DO              reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    MULTIGUAL       reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    DIVIGUAL        reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    MODIGUAL        reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    LCHAVE          reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    PV              reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    ELSE            reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    $end            reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    COMMA           reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    RPAREN          reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)
    RCCT            reduce using rule 233 (assignmentAndOperator -> MULTIGUAL .)


state 227

    (234) assignmentAndOperator -> DIVIGUAL .

    INCREMENTO      reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    DECREMENTO      reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    MINUS           reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    PLUS            reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    NOT             reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    ID              reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    CROSSINLINE     reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    IMPORT          reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    INIT            reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    NOINLINE        reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    OUT             reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    VARARG          reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    WHERE           reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    OR              reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    AND             reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    DIFERENTE       reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    IDENTIDADE      reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    IGUALDADE       reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    SEMIDENTIDADE   reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    MENOR           reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    MAIOR           reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    MENORIGUAL      reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    MAIORIGUAL      reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    IN              reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    NOT_IN          reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    IS              reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    NOT_IS          reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    ELVIS           reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    PONTOPONTO      reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    MULT            reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    DIVIDE          reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    MOD             reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    AS              reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    LITERAL_STRING  reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    LPAREN          reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    DOISP           reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    LCCT            reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    IF              reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    RETURN          reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    RETURN_AT       reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE        reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE_AT     reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    BREAK           reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    BREAK_AT        reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    RCHAVE          reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    FUN             reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    SUSPEND         reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    PONTO           reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    COLONCOLON      reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    FOR             reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    WHILE           reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    DO              reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    MULTIGUAL       reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    DIVIGUAL        reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    MODIGUAL        reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    LCHAVE          reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    PV              reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    ELSE            reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    $end            reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    COMMA           reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    RPAREN          reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)
    RCCT            reduce using rule 234 (assignmentAndOperator -> DIVIGUAL .)


state 228

    (235) assignmentAndOperator -> MODIGUAL .

    INCREMENTO      reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    DECREMENTO      reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    MINUS           reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    PLUS            reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    NOT             reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    ID              reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    CROSSINLINE     reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    IMPORT          reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    INIT            reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    NOINLINE        reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    OUT             reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    VARARG          reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    WHERE           reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    OR              reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    AND             reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    DIFERENTE       reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    IDENTIDADE      reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    IGUALDADE       reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    SEMIDENTIDADE   reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    MENOR           reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    MAIOR           reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    MENORIGUAL      reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    MAIORIGUAL      reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    IN              reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    NOT_IN          reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    IS              reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    NOT_IS          reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    ELVIS           reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    PONTOPONTO      reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    MULT            reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    DIVIDE          reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    MOD             reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    AS              reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    LITERAL_STRING  reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    LPAREN          reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    DOISP           reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    LCCT            reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    IF              reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    RETURN          reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    RETURN_AT       reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE        reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE_AT     reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    BREAK           reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    BREAK_AT        reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    RCHAVE          reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    FUN             reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    SUSPEND         reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    PONTO           reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    COLONCOLON      reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    FOR             reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    WHILE           reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    DO              reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    MULTIGUAL       reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    DIVIGUAL        reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    MODIGUAL        reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    LCHAVE          reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    PV              reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    ELSE            reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    $end            reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    COMMA           reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    RPAREN          reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)
    RCCT            reduce using rule 235 (assignmentAndOperator -> MODIGUAL .)


state 229

    (130) directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .

    IGUALDADE       reduce using rule 130 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)
    RPAREN          reduce using rule 130 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)


state 230

    (137) assignableSuffix -> typeArguments .

    IGUALDADE       reduce using rule 137 (assignableSuffix -> typeArguments .)
    RPAREN          reduce using rule 137 (assignableSuffix -> typeArguments .)


state 231

    (138) assignableSuffix -> indexingSuffix .

    IGUALDADE       reduce using rule 138 (assignableSuffix -> indexingSuffix .)
    RPAREN          reduce using rule 138 (assignableSuffix -> indexingSuffix .)


state 232

    (139) assignableSuffix -> navigationSuffix .

    IGUALDADE       reduce using rule 139 (assignableSuffix -> navigationSuffix .)
    RPAREN          reduce using rule 139 (assignableSuffix -> navigationSuffix .)


state 233

    (140) indexingSuffix -> LCCT . isuf RCCT
    (141) isuf -> . expression
    (142) isuf -> . expression COMMA isuf
    (143) isuf -> .
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! RCCT            [ reduce using rule 143 (isuf -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    isuf                           shift and go to state 303
    expression                     shift and go to state 304
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 234

    (144) navigationSuffix -> memberAccessOperator . simpleIdentifier CLASS
    (145) navigationSuffix -> memberAccessOperator . parenthesizedExpression CLASS
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (172) parenthesizedExpression -> . LPAREN expression RPAREN

    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22
    LPAREN          shift and go to state 205

    simpleIdentifier               shift and go to state 305
    parenthesizedExpression        shift and go to state 306

state 235

    (262) memberAccessOperator -> PONTO .
    (265) safeNav -> PONTO .

  ! reduce/reduce conflict for ID resolved using rule 262 (memberAccessOperator -> PONTO .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 262 (memberAccessOperator -> PONTO .)
  ! reduce/reduce conflict for IMPORT resolved using rule 262 (memberAccessOperator -> PONTO .)
  ! reduce/reduce conflict for INIT resolved using rule 262 (memberAccessOperator -> PONTO .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 262 (memberAccessOperator -> PONTO .)
  ! reduce/reduce conflict for OUT resolved using rule 262 (memberAccessOperator -> PONTO .)
  ! reduce/reduce conflict for VARARG resolved using rule 262 (memberAccessOperator -> PONTO .)
  ! reduce/reduce conflict for WHERE resolved using rule 262 (memberAccessOperator -> PONTO .)
  ! reduce/reduce conflict for LPAREN resolved using rule 262 (memberAccessOperator -> PONTO .)
    ID              reduce using rule 262 (memberAccessOperator -> PONTO .)
    CROSSINLINE     reduce using rule 262 (memberAccessOperator -> PONTO .)
    IMPORT          reduce using rule 262 (memberAccessOperator -> PONTO .)
    INIT            reduce using rule 262 (memberAccessOperator -> PONTO .)
    NOINLINE        reduce using rule 262 (memberAccessOperator -> PONTO .)
    OUT             reduce using rule 262 (memberAccessOperator -> PONTO .)
    VARARG          reduce using rule 262 (memberAccessOperator -> PONTO .)
    WHERE           reduce using rule 262 (memberAccessOperator -> PONTO .)
    LPAREN          reduce using rule 262 (memberAccessOperator -> PONTO .)

  ! ID              [ reduce using rule 265 (safeNav -> PONTO .) ]
  ! CROSSINLINE     [ reduce using rule 265 (safeNav -> PONTO .) ]
  ! IMPORT          [ reduce using rule 265 (safeNav -> PONTO .) ]
  ! INIT            [ reduce using rule 265 (safeNav -> PONTO .) ]
  ! NOINLINE        [ reduce using rule 265 (safeNav -> PONTO .) ]
  ! OUT             [ reduce using rule 265 (safeNav -> PONTO .) ]
  ! VARARG          [ reduce using rule 265 (safeNav -> PONTO .) ]
  ! WHERE           [ reduce using rule 265 (safeNav -> PONTO .) ]
  ! LPAREN          [ reduce using rule 265 (safeNav -> PONTO .) ]


state 236

    (263) memberAccessOperator -> safeNav .

    ID              reduce using rule 263 (memberAccessOperator -> safeNav .)
    CROSSINLINE     reduce using rule 263 (memberAccessOperator -> safeNav .)
    IMPORT          reduce using rule 263 (memberAccessOperator -> safeNav .)
    INIT            reduce using rule 263 (memberAccessOperator -> safeNav .)
    NOINLINE        reduce using rule 263 (memberAccessOperator -> safeNav .)
    OUT             reduce using rule 263 (memberAccessOperator -> safeNav .)
    VARARG          reduce using rule 263 (memberAccessOperator -> safeNav .)
    WHERE           reduce using rule 263 (memberAccessOperator -> safeNav .)
    LPAREN          reduce using rule 263 (memberAccessOperator -> safeNav .)


state 237

    (264) memberAccessOperator -> COLONCOLON .

    ID              reduce using rule 264 (memberAccessOperator -> COLONCOLON .)
    CROSSINLINE     reduce using rule 264 (memberAccessOperator -> COLONCOLON .)
    IMPORT          reduce using rule 264 (memberAccessOperator -> COLONCOLON .)
    INIT            reduce using rule 264 (memberAccessOperator -> COLONCOLON .)
    NOINLINE        reduce using rule 264 (memberAccessOperator -> COLONCOLON .)
    OUT             reduce using rule 264 (memberAccessOperator -> COLONCOLON .)
    VARARG          reduce using rule 264 (memberAccessOperator -> COLONCOLON .)
    WHERE           reduce using rule 264 (memberAccessOperator -> COLONCOLON .)
    LPAREN          reduce using rule 264 (memberAccessOperator -> COLONCOLON .)


state 238

    (78) forStatement_MD -> FOR LPAREN . multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> FOR LPAREN . multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> FOR LPAREN . variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> FOR LPAREN . variableDeclaration IN expression RPAREN
    (29) multiVariableDeclaration -> . LPAREN mvd RPAREN
    (27) variableDeclaration -> . simpleIdentifier DOISP type
    (28) variableDeclaration -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    LPAREN          shift and go to state 307
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    multiVariableDeclaration       shift and go to state 308
    variableDeclaration            shift and go to state 309
    simpleIdentifier               shift and go to state 310

state 239

    (133) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression . RPAREN

    RPAREN          shift and go to state 311


state 240

    (136) parenthesizedAssignableExpression -> LPAREN assignableExpression . RPAREN

    RPAREN          shift and go to state 312


state 241

    (172) parenthesizedExpression -> LPAREN expression . RPAREN
    (222) jumpExpression -> expression .

    RPAREN          shift and go to state 313
    INCREMENTO      reduce using rule 222 (jumpExpression -> expression .)
    DECREMENTO      reduce using rule 222 (jumpExpression -> expression .)
    MENOR           reduce using rule 222 (jumpExpression -> expression .)
    LCCT            reduce using rule 222 (jumpExpression -> expression .)
    LPAREN          reduce using rule 222 (jumpExpression -> expression .)
    PONTO           reduce using rule 222 (jumpExpression -> expression .)
    COLONCOLON      reduce using rule 222 (jumpExpression -> expression .)
    RCHAVE          reduce using rule 222 (jumpExpression -> expression .)


state 242

    (82) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (83) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 314
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 243

    (84) doWhileStatement -> DO controlStructureBody . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 315


state 244

    (85) doWhileStatement -> DO WHILE . LPAREN expression RPAREN
    (82) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 316


state 245

    (71) controlStructureBody -> block .

    WHILE           reduce using rule 71 (controlStructureBody -> block .)
    FUN             reduce using rule 71 (controlStructureBody -> block .)
    FOR             reduce using rule 71 (controlStructureBody -> block .)
    DO              reduce using rule 71 (controlStructureBody -> block .)
    ID              reduce using rule 71 (controlStructureBody -> block .)
    CROSSINLINE     reduce using rule 71 (controlStructureBody -> block .)
    IMPORT          reduce using rule 71 (controlStructureBody -> block .)
    INIT            reduce using rule 71 (controlStructureBody -> block .)
    NOINLINE        reduce using rule 71 (controlStructureBody -> block .)
    OUT             reduce using rule 71 (controlStructureBody -> block .)
    VARARG          reduce using rule 71 (controlStructureBody -> block .)
    WHERE           reduce using rule 71 (controlStructureBody -> block .)
    LPAREN          reduce using rule 71 (controlStructureBody -> block .)
    LITERAL_STRING  reduce using rule 71 (controlStructureBody -> block .)
    DOISP           reduce using rule 71 (controlStructureBody -> block .)
    LCCT            reduce using rule 71 (controlStructureBody -> block .)
    IF              reduce using rule 71 (controlStructureBody -> block .)
    RETURN          reduce using rule 71 (controlStructureBody -> block .)
    RETURN_AT       reduce using rule 71 (controlStructureBody -> block .)
    CONTINUE        reduce using rule 71 (controlStructureBody -> block .)
    CONTINUE_AT     reduce using rule 71 (controlStructureBody -> block .)
    BREAK           reduce using rule 71 (controlStructureBody -> block .)
    BREAK_AT        reduce using rule 71 (controlStructureBody -> block .)
    RCHAVE          reduce using rule 71 (controlStructureBody -> block .)
    INCREMENTO      reduce using rule 71 (controlStructureBody -> block .)
    DECREMENTO      reduce using rule 71 (controlStructureBody -> block .)
    MINUS           reduce using rule 71 (controlStructureBody -> block .)
    PLUS            reduce using rule 71 (controlStructureBody -> block .)
    NOT             reduce using rule 71 (controlStructureBody -> block .)
    SUSPEND         reduce using rule 71 (controlStructureBody -> block .)
    MAIORIGUAL      reduce using rule 71 (controlStructureBody -> block .)
    MENORIGUAL      reduce using rule 71 (controlStructureBody -> block .)
    MULTIGUAL       reduce using rule 71 (controlStructureBody -> block .)
    DIVIGUAL        reduce using rule 71 (controlStructureBody -> block .)
    MODIGUAL        reduce using rule 71 (controlStructureBody -> block .)
    MENOR           reduce using rule 71 (controlStructureBody -> block .)
    PONTO           reduce using rule 71 (controlStructureBody -> block .)
    COLONCOLON      reduce using rule 71 (controlStructureBody -> block .)
    AS              reduce using rule 71 (controlStructureBody -> block .)
    OR              reduce using rule 71 (controlStructureBody -> block .)
    AND             reduce using rule 71 (controlStructureBody -> block .)
    DIFERENTE       reduce using rule 71 (controlStructureBody -> block .)
    IDENTIDADE      reduce using rule 71 (controlStructureBody -> block .)
    IGUALDADE       reduce using rule 71 (controlStructureBody -> block .)
    SEMIDENTIDADE   reduce using rule 71 (controlStructureBody -> block .)
    MAIOR           reduce using rule 71 (controlStructureBody -> block .)
    IN              reduce using rule 71 (controlStructureBody -> block .)
    NOT_IN          reduce using rule 71 (controlStructureBody -> block .)
    IS              reduce using rule 71 (controlStructureBody -> block .)
    NOT_IS          reduce using rule 71 (controlStructureBody -> block .)
    ELVIS           reduce using rule 71 (controlStructureBody -> block .)
    PONTOPONTO      reduce using rule 71 (controlStructureBody -> block .)
    MULT            reduce using rule 71 (controlStructureBody -> block .)
    DIVIDE          reduce using rule 71 (controlStructureBody -> block .)
    MOD             reduce using rule 71 (controlStructureBody -> block .)
    LCHAVE          reduce using rule 71 (controlStructureBody -> block .)
    PV              reduce using rule 71 (controlStructureBody -> block .)
    ELSE            reduce using rule 71 (controlStructureBody -> block .)
    $end            reduce using rule 71 (controlStructureBody -> block .)
    COMMA           reduce using rule 71 (controlStructureBody -> block .)
    RPAREN          reduce using rule 71 (controlStructureBody -> block .)
    RCCT            reduce using rule 71 (controlStructureBody -> block .)


state 246

    (72) controlStructureBody -> statement .

    WHILE           reduce using rule 72 (controlStructureBody -> statement .)
    FUN             reduce using rule 72 (controlStructureBody -> statement .)
    FOR             reduce using rule 72 (controlStructureBody -> statement .)
    DO              reduce using rule 72 (controlStructureBody -> statement .)
    ID              reduce using rule 72 (controlStructureBody -> statement .)
    CROSSINLINE     reduce using rule 72 (controlStructureBody -> statement .)
    IMPORT          reduce using rule 72 (controlStructureBody -> statement .)
    INIT            reduce using rule 72 (controlStructureBody -> statement .)
    NOINLINE        reduce using rule 72 (controlStructureBody -> statement .)
    OUT             reduce using rule 72 (controlStructureBody -> statement .)
    VARARG          reduce using rule 72 (controlStructureBody -> statement .)
    WHERE           reduce using rule 72 (controlStructureBody -> statement .)
    LPAREN          reduce using rule 72 (controlStructureBody -> statement .)
    LITERAL_STRING  reduce using rule 72 (controlStructureBody -> statement .)
    DOISP           reduce using rule 72 (controlStructureBody -> statement .)
    LCCT            reduce using rule 72 (controlStructureBody -> statement .)
    IF              reduce using rule 72 (controlStructureBody -> statement .)
    RETURN          reduce using rule 72 (controlStructureBody -> statement .)
    RETURN_AT       reduce using rule 72 (controlStructureBody -> statement .)
    CONTINUE        reduce using rule 72 (controlStructureBody -> statement .)
    CONTINUE_AT     reduce using rule 72 (controlStructureBody -> statement .)
    BREAK           reduce using rule 72 (controlStructureBody -> statement .)
    BREAK_AT        reduce using rule 72 (controlStructureBody -> statement .)
    RCHAVE          reduce using rule 72 (controlStructureBody -> statement .)
    INCREMENTO      reduce using rule 72 (controlStructureBody -> statement .)
    DECREMENTO      reduce using rule 72 (controlStructureBody -> statement .)
    MINUS           reduce using rule 72 (controlStructureBody -> statement .)
    PLUS            reduce using rule 72 (controlStructureBody -> statement .)
    NOT             reduce using rule 72 (controlStructureBody -> statement .)
    SUSPEND         reduce using rule 72 (controlStructureBody -> statement .)
    MAIORIGUAL      reduce using rule 72 (controlStructureBody -> statement .)
    MENORIGUAL      reduce using rule 72 (controlStructureBody -> statement .)
    MULTIGUAL       reduce using rule 72 (controlStructureBody -> statement .)
    DIVIGUAL        reduce using rule 72 (controlStructureBody -> statement .)
    MODIGUAL        reduce using rule 72 (controlStructureBody -> statement .)
    MENOR           reduce using rule 72 (controlStructureBody -> statement .)
    PONTO           reduce using rule 72 (controlStructureBody -> statement .)
    COLONCOLON      reduce using rule 72 (controlStructureBody -> statement .)
    AS              reduce using rule 72 (controlStructureBody -> statement .)
    OR              reduce using rule 72 (controlStructureBody -> statement .)
    AND             reduce using rule 72 (controlStructureBody -> statement .)
    DIFERENTE       reduce using rule 72 (controlStructureBody -> statement .)
    IDENTIDADE      reduce using rule 72 (controlStructureBody -> statement .)
    IGUALDADE       reduce using rule 72 (controlStructureBody -> statement .)
    SEMIDENTIDADE   reduce using rule 72 (controlStructureBody -> statement .)
    MAIOR           reduce using rule 72 (controlStructureBody -> statement .)
    IN              reduce using rule 72 (controlStructureBody -> statement .)
    NOT_IN          reduce using rule 72 (controlStructureBody -> statement .)
    IS              reduce using rule 72 (controlStructureBody -> statement .)
    NOT_IS          reduce using rule 72 (controlStructureBody -> statement .)
    ELVIS           reduce using rule 72 (controlStructureBody -> statement .)
    PONTOPONTO      reduce using rule 72 (controlStructureBody -> statement .)
    MULT            reduce using rule 72 (controlStructureBody -> statement .)
    DIVIDE          reduce using rule 72 (controlStructureBody -> statement .)
    MOD             reduce using rule 72 (controlStructureBody -> statement .)
    LCHAVE          reduce using rule 72 (controlStructureBody -> statement .)
    PV              reduce using rule 72 (controlStructureBody -> statement .)
    ELSE            reduce using rule 72 (controlStructureBody -> statement .)
    $end            reduce using rule 72 (controlStructureBody -> statement .)
    COMMA           reduce using rule 72 (controlStructureBody -> statement .)
    RPAREN          reduce using rule 72 (controlStructureBody -> statement .)
    RCCT            reduce using rule 72 (controlStructureBody -> statement .)


state 247

    (122) postfixUnaryExpression -> primaryExpression posue .

    MENOR           reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    LCCT            reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    PONTO           reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    COLONCOLON      reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    FUN             reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    FOR             reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    WHILE           reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    DO              reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    ID              reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    CROSSINLINE     reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    IMPORT          reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    INIT            reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    NOINLINE        reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    OUT             reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    VARARG          reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    WHERE           reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    LPAREN          reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    LITERAL_STRING  reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    DOISP           reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    IF              reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    RETURN          reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    RETURN_AT       reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    CONTINUE        reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    CONTINUE_AT     reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    BREAK           reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    BREAK_AT        reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    RCHAVE          reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    INCREMENTO      reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    DECREMENTO      reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    MINUS           reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    PLUS            reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    NOT             reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    SUSPEND         reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    MAIORIGUAL      reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    MENORIGUAL      reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    MULTIGUAL       reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    DIVIGUAL        reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    MODIGUAL        reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    AS              reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    OR              reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    AND             reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    DIFERENTE       reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    IDENTIDADE      reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    IGUALDADE       reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    SEMIDENTIDADE   reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    MAIOR           reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    IN              reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    NOT_IN          reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    IS              reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    NOT_IS          reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    ELVIS           reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    PONTOPONTO      reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    MULT            reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    DIVIDE          reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    MOD             reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    LCHAVE          reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    PV              reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    ELSE            reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    $end            reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    COMMA           reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    RPAREN          reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)
    RCCT            reduce using rule 122 (postfixUnaryExpression -> primaryExpression posue .)


state 248

    (123) posue -> postfixUnarySuffix .
    (124) posue -> postfixUnarySuffix . posue
    (123) posue -> . postfixUnarySuffix
    (124) posue -> . postfixUnarySuffix posue
    (125) postfixUnarySuffix -> . postfixUnaryOperator
    (126) postfixUnarySuffix -> . typeArguments
    (127) postfixUnarySuffix -> . callSuffix
    (128) postfixUnarySuffix -> . indexingSuffix
    (129) postfixUnarySuffix -> . navigationSuffix
    (260) postfixUnaryOperator -> . INCREMENTO
    (261) postfixUnaryOperator -> . DECREMENTO
    (153) typeArguments -> . MENOR ta MAIOR
    (146) callSuffix -> . typeArguments valueArguments annotatedLambda
    (147) callSuffix -> . valueArguments annotatedLambda
    (148) callSuffix -> . typeArguments annotatedLambda
    (149) callSuffix -> . annotatedLambda
    (150) callSuffix -> . typeArguments valueArguments
    (151) callSuffix -> . valueArguments
    (140) indexingSuffix -> . LCCT isuf RCCT
    (144) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (145) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (157) valueArguments -> . LPAREN RPAREN
    (158) valueArguments -> . LPAREN vas RPAREN
    (152) annotatedLambda -> . lambdaLiteral
    (262) memberAccessOperator -> . PONTO
    (263) memberAccessOperator -> . safeNav
    (264) memberAccessOperator -> . COLONCOLON
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (265) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
    FUN             reduce using rule 123 (posue -> postfixUnarySuffix .)
    FOR             reduce using rule 123 (posue -> postfixUnarySuffix .)
    WHILE           reduce using rule 123 (posue -> postfixUnarySuffix .)
    DO              reduce using rule 123 (posue -> postfixUnarySuffix .)
    ID              reduce using rule 123 (posue -> postfixUnarySuffix .)
    CROSSINLINE     reduce using rule 123 (posue -> postfixUnarySuffix .)
    IMPORT          reduce using rule 123 (posue -> postfixUnarySuffix .)
    INIT            reduce using rule 123 (posue -> postfixUnarySuffix .)
    NOINLINE        reduce using rule 123 (posue -> postfixUnarySuffix .)
    OUT             reduce using rule 123 (posue -> postfixUnarySuffix .)
    VARARG          reduce using rule 123 (posue -> postfixUnarySuffix .)
    WHERE           reduce using rule 123 (posue -> postfixUnarySuffix .)
    LITERAL_STRING  reduce using rule 123 (posue -> postfixUnarySuffix .)
    DOISP           reduce using rule 123 (posue -> postfixUnarySuffix .)
    IF              reduce using rule 123 (posue -> postfixUnarySuffix .)
    RETURN          reduce using rule 123 (posue -> postfixUnarySuffix .)
    RETURN_AT       reduce using rule 123 (posue -> postfixUnarySuffix .)
    CONTINUE        reduce using rule 123 (posue -> postfixUnarySuffix .)
    CONTINUE_AT     reduce using rule 123 (posue -> postfixUnarySuffix .)
    BREAK           reduce using rule 123 (posue -> postfixUnarySuffix .)
    BREAK_AT        reduce using rule 123 (posue -> postfixUnarySuffix .)
    MINUS           reduce using rule 123 (posue -> postfixUnarySuffix .)
    PLUS            reduce using rule 123 (posue -> postfixUnarySuffix .)
    NOT             reduce using rule 123 (posue -> postfixUnarySuffix .)
    SUSPEND         reduce using rule 123 (posue -> postfixUnarySuffix .)
    MAIORIGUAL      reduce using rule 123 (posue -> postfixUnarySuffix .)
    MENORIGUAL      reduce using rule 123 (posue -> postfixUnarySuffix .)
    MULTIGUAL       reduce using rule 123 (posue -> postfixUnarySuffix .)
    DIVIGUAL        reduce using rule 123 (posue -> postfixUnarySuffix .)
    MODIGUAL        reduce using rule 123 (posue -> postfixUnarySuffix .)
    AS              reduce using rule 123 (posue -> postfixUnarySuffix .)
    OR              reduce using rule 123 (posue -> postfixUnarySuffix .)
    AND             reduce using rule 123 (posue -> postfixUnarySuffix .)
    DIFERENTE       reduce using rule 123 (posue -> postfixUnarySuffix .)
    IDENTIDADE      reduce using rule 123 (posue -> postfixUnarySuffix .)
    IGUALDADE       reduce using rule 123 (posue -> postfixUnarySuffix .)
    SEMIDENTIDADE   reduce using rule 123 (posue -> postfixUnarySuffix .)
    MAIOR           reduce using rule 123 (posue -> postfixUnarySuffix .)
    IN              reduce using rule 123 (posue -> postfixUnarySuffix .)
    NOT_IN          reduce using rule 123 (posue -> postfixUnarySuffix .)
    IS              reduce using rule 123 (posue -> postfixUnarySuffix .)
    NOT_IS          reduce using rule 123 (posue -> postfixUnarySuffix .)
    ELVIS           reduce using rule 123 (posue -> postfixUnarySuffix .)
    PONTOPONTO      reduce using rule 123 (posue -> postfixUnarySuffix .)
    MULT            reduce using rule 123 (posue -> postfixUnarySuffix .)
    DIVIDE          reduce using rule 123 (posue -> postfixUnarySuffix .)
    MOD             reduce using rule 123 (posue -> postfixUnarySuffix .)
    LCHAVE          reduce using rule 123 (posue -> postfixUnarySuffix .)
    PV              reduce using rule 123 (posue -> postfixUnarySuffix .)
    ELSE            reduce using rule 123 (posue -> postfixUnarySuffix .)
    $end            reduce using rule 123 (posue -> postfixUnarySuffix .)
    COMMA           reduce using rule 123 (posue -> postfixUnarySuffix .)
    RPAREN          reduce using rule 123 (posue -> postfixUnarySuffix .)
    RCCT            reduce using rule 123 (posue -> postfixUnarySuffix .)
    INCREMENTO      shift and go to state 254
    DECREMENTO      shift and go to state 255
    MENOR           shift and go to state 64
    LCCT            shift and go to state 233
    LPAREN          shift and go to state 258
    PONTO           shift and go to state 235
    COLONCOLON      shift and go to state 237
    RCHAVE          shift and go to state 113

  ! MENOR           [ reduce using rule 123 (posue -> postfixUnarySuffix .) ]
  ! LCCT            [ reduce using rule 123 (posue -> postfixUnarySuffix .) ]
  ! PONTO           [ reduce using rule 123 (posue -> postfixUnarySuffix .) ]
  ! COLONCOLON      [ reduce using rule 123 (posue -> postfixUnarySuffix .) ]
  ! LPAREN          [ reduce using rule 123 (posue -> postfixUnarySuffix .) ]
  ! RCHAVE          [ reduce using rule 123 (posue -> postfixUnarySuffix .) ]
  ! INCREMENTO      [ reduce using rule 123 (posue -> postfixUnarySuffix .) ]
  ! DECREMENTO      [ reduce using rule 123 (posue -> postfixUnarySuffix .) ]

    postfixUnarySuffix             shift and go to state 248
    posue                          shift and go to state 317
    postfixUnaryOperator           shift and go to state 249
    typeArguments                  shift and go to state 250
    callSuffix                     shift and go to state 251
    indexingSuffix                 shift and go to state 252
    navigationSuffix               shift and go to state 253
    valueArguments                 shift and go to state 256
    annotatedLambda                shift and go to state 257
    memberAccessOperator           shift and go to state 234
    lambdaLiteral                  shift and go to state 259
    safeNav                        shift and go to state 236

state 249

    (125) postfixUnarySuffix -> postfixUnaryOperator .

    INCREMENTO      reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    DECREMENTO      reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOR           reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCCT            reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    LPAREN          reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTO           reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    COLONCOLON      reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCHAVE          reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    FUN             reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    FOR             reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHILE           reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    DO              reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    ID              reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    CROSSINLINE     reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    IMPORT          reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    INIT            reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOINLINE        reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    OUT             reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    VARARG          reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHERE           reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    LITERAL_STRING  reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    DOISP           reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    IF              reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN          reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN_AT       reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE        reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE_AT     reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK           reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK_AT        reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    MINUS           reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    PLUS            reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT             reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    SUSPEND         reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIORIGUAL      reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENORIGUAL      reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULTIGUAL       reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIGUAL        reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    MODIGUAL        reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    AS              reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    OR              reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    AND             reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIFERENTE       reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    IDENTIDADE      reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    IGUALDADE       reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    SEMIDENTIDADE   reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIOR           reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    IN              reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IN          reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    IS              reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IS          reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELVIS           reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTOPONTO      reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULT            reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIDE          reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    MOD             reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCHAVE          reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    PV              reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELSE            reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    $end            reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    COMMA           reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    RPAREN          reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCCT            reduce using rule 125 (postfixUnarySuffix -> postfixUnaryOperator .)


state 250

    (126) postfixUnarySuffix -> typeArguments .
    (146) callSuffix -> typeArguments . valueArguments annotatedLambda
    (148) callSuffix -> typeArguments . annotatedLambda
    (150) callSuffix -> typeArguments . valueArguments
    (157) valueArguments -> . LPAREN RPAREN
    (158) valueArguments -> . LPAREN vas RPAREN
    (152) annotatedLambda -> . lambdaLiteral
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
    INCREMENTO      reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    DECREMENTO      reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    MENOR           reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    LCCT            reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    PONTO           reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    COLONCOLON      reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    FUN             reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    FOR             reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    WHILE           reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    DO              reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    ID              reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    CROSSINLINE     reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    IMPORT          reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    INIT            reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    NOINLINE        reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    OUT             reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    VARARG          reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    WHERE           reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    LITERAL_STRING  reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    DOISP           reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    IF              reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    RETURN          reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    RETURN_AT       reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    CONTINUE        reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    CONTINUE_AT     reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    BREAK           reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    BREAK_AT        reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    MINUS           reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    PLUS            reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    NOT             reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    SUSPEND         reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    MAIORIGUAL      reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    MENORIGUAL      reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    MULTIGUAL       reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    DIVIGUAL        reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    MODIGUAL        reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    AS              reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    OR              reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    AND             reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    DIFERENTE       reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    IDENTIDADE      reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    IGUALDADE       reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    SEMIDENTIDADE   reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    MAIOR           reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    IN              reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    NOT_IN          reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    IS              reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    NOT_IS          reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    ELVIS           reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    PONTOPONTO      reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    MULT            reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    DIVIDE          reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    MOD             reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    LCHAVE          reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    PV              reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    ELSE            reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    $end            reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    COMMA           reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    RPAREN          reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    RCCT            reduce using rule 126 (postfixUnarySuffix -> typeArguments .)
    LPAREN          shift and go to state 258
    RCHAVE          shift and go to state 113

  ! LPAREN          [ reduce using rule 126 (postfixUnarySuffix -> typeArguments .) ]
  ! RCHAVE          [ reduce using rule 126 (postfixUnarySuffix -> typeArguments .) ]

    valueArguments                 shift and go to state 318
    annotatedLambda                shift and go to state 319
    lambdaLiteral                  shift and go to state 259

state 251

    (127) postfixUnarySuffix -> callSuffix .

    INCREMENTO      reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    DECREMENTO      reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    MENOR           reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    LCCT            reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    LPAREN          reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    PONTO           reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    COLONCOLON      reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    RCHAVE          reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    FUN             reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    FOR             reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    WHILE           reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    DO              reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    ID              reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    CROSSINLINE     reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    IMPORT          reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    INIT            reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    NOINLINE        reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    OUT             reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    VARARG          reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    WHERE           reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    LITERAL_STRING  reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    DOISP           reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    IF              reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    RETURN          reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    RETURN_AT       reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    CONTINUE        reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    CONTINUE_AT     reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    BREAK           reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    BREAK_AT        reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    MINUS           reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    PLUS            reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    NOT             reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    SUSPEND         reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    MAIORIGUAL      reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    MENORIGUAL      reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    MULTIGUAL       reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    DIVIGUAL        reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    MODIGUAL        reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    AS              reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    OR              reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    AND             reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    DIFERENTE       reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    IDENTIDADE      reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    IGUALDADE       reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    SEMIDENTIDADE   reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    MAIOR           reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    IN              reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    NOT_IN          reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    IS              reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    NOT_IS          reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    ELVIS           reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    PONTOPONTO      reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    MULT            reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    DIVIDE          reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    MOD             reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    LCHAVE          reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    PV              reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    ELSE            reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    $end            reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    COMMA           reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    RPAREN          reduce using rule 127 (postfixUnarySuffix -> callSuffix .)
    RCCT            reduce using rule 127 (postfixUnarySuffix -> callSuffix .)


state 252

    (128) postfixUnarySuffix -> indexingSuffix .

    INCREMENTO      reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    DECREMENTO      reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    MENOR           reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    LCCT            reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    LPAREN          reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    PONTO           reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    COLONCOLON      reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    RCHAVE          reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    FUN             reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    FOR             reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    WHILE           reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    DO              reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    ID              reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    CROSSINLINE     reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    IMPORT          reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    INIT            reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    NOINLINE        reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    OUT             reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    VARARG          reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    WHERE           reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    LITERAL_STRING  reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    DOISP           reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    IF              reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    RETURN          reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    RETURN_AT       reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE        reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE_AT     reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    BREAK           reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    BREAK_AT        reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    MINUS           reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    PLUS            reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    NOT             reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    SUSPEND         reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    MAIORIGUAL      reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    MENORIGUAL      reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    MULTIGUAL       reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    DIVIGUAL        reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    MODIGUAL        reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    AS              reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    OR              reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    AND             reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    DIFERENTE       reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    IDENTIDADE      reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    IGUALDADE       reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    SEMIDENTIDADE   reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    MAIOR           reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    IN              reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IN          reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    IS              reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IS          reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    ELVIS           reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    PONTOPONTO      reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    MULT            reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    DIVIDE          reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    MOD             reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    LCHAVE          reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    PV              reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    ELSE            reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    $end            reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    COMMA           reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    RPAREN          reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)
    RCCT            reduce using rule 128 (postfixUnarySuffix -> indexingSuffix .)


state 253

    (129) postfixUnarySuffix -> navigationSuffix .

    INCREMENTO      reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    DECREMENTO      reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    MENOR           reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    LCCT            reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    LPAREN          reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    PONTO           reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    COLONCOLON      reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    RCHAVE          reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    FUN             reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    FOR             reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    WHILE           reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    DO              reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    ID              reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    CROSSINLINE     reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    IMPORT          reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    INIT            reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    NOINLINE        reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    OUT             reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    VARARG          reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    WHERE           reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    LITERAL_STRING  reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    DOISP           reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    IF              reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    RETURN          reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    RETURN_AT       reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE        reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE_AT     reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    BREAK           reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    BREAK_AT        reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    MINUS           reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    PLUS            reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    NOT             reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    SUSPEND         reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    MAIORIGUAL      reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    MENORIGUAL      reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    MULTIGUAL       reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    DIVIGUAL        reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    MODIGUAL        reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    AS              reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    OR              reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    AND             reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    DIFERENTE       reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    IDENTIDADE      reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    IGUALDADE       reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    SEMIDENTIDADE   reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    MAIOR           reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    IN              reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IN          reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    IS              reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IS          reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    ELVIS           reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    PONTOPONTO      reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    MULT            reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    DIVIDE          reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    MOD             reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    LCHAVE          reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    PV              reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    ELSE            reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    $end            reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    COMMA           reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    RPAREN          reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)
    RCCT            reduce using rule 129 (postfixUnarySuffix -> navigationSuffix .)


state 254

    (260) postfixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    MENOR           reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    PONTO           reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    FOR             reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    WHILE           reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    DO              reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    DOISP           reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    MAIORIGUAL      reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    MENORIGUAL      reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    MULTIGUAL       reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    DIVIGUAL        reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    MODIGUAL        reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    AS              reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    OR              reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    AND             reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    DIFERENTE       reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    IDENTIDADE      reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    IGUALDADE       reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    SEMIDENTIDADE   reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    MAIOR           reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    IN              reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IN          reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    IS              reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IS          reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    ELVIS           reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    PONTOPONTO      reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    MULT            reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    DIVIDE          reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    MOD             reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    LCHAVE          reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    PV              reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    ELSE            reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    $end            reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    COMMA           reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    RPAREN          reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)
    RCCT            reduce using rule 260 (postfixUnaryOperator -> INCREMENTO .)


state 255

    (261) postfixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    MENOR           reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    PONTO           reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    FOR             reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    WHILE           reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    DO              reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    DOISP           reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    MAIORIGUAL      reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    MENORIGUAL      reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    MULTIGUAL       reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    DIVIGUAL        reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    MODIGUAL        reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    AS              reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    OR              reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    AND             reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    DIFERENTE       reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    IDENTIDADE      reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    IGUALDADE       reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    SEMIDENTIDADE   reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    MAIOR           reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    IN              reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IN          reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    IS              reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IS          reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    ELVIS           reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    PONTOPONTO      reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    MULT            reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    DIVIDE          reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    MOD             reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    LCHAVE          reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    PV              reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    ELSE            reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    $end            reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    COMMA           reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    RPAREN          reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)
    RCCT            reduce using rule 261 (postfixUnaryOperator -> DECREMENTO .)


state 256

    (147) callSuffix -> valueArguments . annotatedLambda
    (151) callSuffix -> valueArguments .
    (152) annotatedLambda -> . lambdaLiteral
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE

  ! shift/reduce conflict for RCHAVE resolved as shift
    INCREMENTO      reduce using rule 151 (callSuffix -> valueArguments .)
    DECREMENTO      reduce using rule 151 (callSuffix -> valueArguments .)
    MENOR           reduce using rule 151 (callSuffix -> valueArguments .)
    LCCT            reduce using rule 151 (callSuffix -> valueArguments .)
    LPAREN          reduce using rule 151 (callSuffix -> valueArguments .)
    PONTO           reduce using rule 151 (callSuffix -> valueArguments .)
    COLONCOLON      reduce using rule 151 (callSuffix -> valueArguments .)
    FUN             reduce using rule 151 (callSuffix -> valueArguments .)
    FOR             reduce using rule 151 (callSuffix -> valueArguments .)
    WHILE           reduce using rule 151 (callSuffix -> valueArguments .)
    DO              reduce using rule 151 (callSuffix -> valueArguments .)
    ID              reduce using rule 151 (callSuffix -> valueArguments .)
    CROSSINLINE     reduce using rule 151 (callSuffix -> valueArguments .)
    IMPORT          reduce using rule 151 (callSuffix -> valueArguments .)
    INIT            reduce using rule 151 (callSuffix -> valueArguments .)
    NOINLINE        reduce using rule 151 (callSuffix -> valueArguments .)
    OUT             reduce using rule 151 (callSuffix -> valueArguments .)
    VARARG          reduce using rule 151 (callSuffix -> valueArguments .)
    WHERE           reduce using rule 151 (callSuffix -> valueArguments .)
    LITERAL_STRING  reduce using rule 151 (callSuffix -> valueArguments .)
    DOISP           reduce using rule 151 (callSuffix -> valueArguments .)
    IF              reduce using rule 151 (callSuffix -> valueArguments .)
    RETURN          reduce using rule 151 (callSuffix -> valueArguments .)
    RETURN_AT       reduce using rule 151 (callSuffix -> valueArguments .)
    CONTINUE        reduce using rule 151 (callSuffix -> valueArguments .)
    CONTINUE_AT     reduce using rule 151 (callSuffix -> valueArguments .)
    BREAK           reduce using rule 151 (callSuffix -> valueArguments .)
    BREAK_AT        reduce using rule 151 (callSuffix -> valueArguments .)
    MINUS           reduce using rule 151 (callSuffix -> valueArguments .)
    PLUS            reduce using rule 151 (callSuffix -> valueArguments .)
    NOT             reduce using rule 151 (callSuffix -> valueArguments .)
    SUSPEND         reduce using rule 151 (callSuffix -> valueArguments .)
    MAIORIGUAL      reduce using rule 151 (callSuffix -> valueArguments .)
    MENORIGUAL      reduce using rule 151 (callSuffix -> valueArguments .)
    MULTIGUAL       reduce using rule 151 (callSuffix -> valueArguments .)
    DIVIGUAL        reduce using rule 151 (callSuffix -> valueArguments .)
    MODIGUAL        reduce using rule 151 (callSuffix -> valueArguments .)
    AS              reduce using rule 151 (callSuffix -> valueArguments .)
    OR              reduce using rule 151 (callSuffix -> valueArguments .)
    AND             reduce using rule 151 (callSuffix -> valueArguments .)
    DIFERENTE       reduce using rule 151 (callSuffix -> valueArguments .)
    IDENTIDADE      reduce using rule 151 (callSuffix -> valueArguments .)
    IGUALDADE       reduce using rule 151 (callSuffix -> valueArguments .)
    SEMIDENTIDADE   reduce using rule 151 (callSuffix -> valueArguments .)
    MAIOR           reduce using rule 151 (callSuffix -> valueArguments .)
    IN              reduce using rule 151 (callSuffix -> valueArguments .)
    NOT_IN          reduce using rule 151 (callSuffix -> valueArguments .)
    IS              reduce using rule 151 (callSuffix -> valueArguments .)
    NOT_IS          reduce using rule 151 (callSuffix -> valueArguments .)
    ELVIS           reduce using rule 151 (callSuffix -> valueArguments .)
    PONTOPONTO      reduce using rule 151 (callSuffix -> valueArguments .)
    MULT            reduce using rule 151 (callSuffix -> valueArguments .)
    DIVIDE          reduce using rule 151 (callSuffix -> valueArguments .)
    MOD             reduce using rule 151 (callSuffix -> valueArguments .)
    LCHAVE          reduce using rule 151 (callSuffix -> valueArguments .)
    PV              reduce using rule 151 (callSuffix -> valueArguments .)
    ELSE            reduce using rule 151 (callSuffix -> valueArguments .)
    $end            reduce using rule 151 (callSuffix -> valueArguments .)
    COMMA           reduce using rule 151 (callSuffix -> valueArguments .)
    RPAREN          reduce using rule 151 (callSuffix -> valueArguments .)
    RCCT            reduce using rule 151 (callSuffix -> valueArguments .)
    RCHAVE          shift and go to state 113

  ! RCHAVE          [ reduce using rule 151 (callSuffix -> valueArguments .) ]

    annotatedLambda                shift and go to state 320
    lambdaLiteral                  shift and go to state 259

state 257

    (149) callSuffix -> annotatedLambda .

    INCREMENTO      reduce using rule 149 (callSuffix -> annotatedLambda .)
    DECREMENTO      reduce using rule 149 (callSuffix -> annotatedLambda .)
    MENOR           reduce using rule 149 (callSuffix -> annotatedLambda .)
    LCCT            reduce using rule 149 (callSuffix -> annotatedLambda .)
    LPAREN          reduce using rule 149 (callSuffix -> annotatedLambda .)
    PONTO           reduce using rule 149 (callSuffix -> annotatedLambda .)
    COLONCOLON      reduce using rule 149 (callSuffix -> annotatedLambda .)
    RCHAVE          reduce using rule 149 (callSuffix -> annotatedLambda .)
    FUN             reduce using rule 149 (callSuffix -> annotatedLambda .)
    FOR             reduce using rule 149 (callSuffix -> annotatedLambda .)
    WHILE           reduce using rule 149 (callSuffix -> annotatedLambda .)
    DO              reduce using rule 149 (callSuffix -> annotatedLambda .)
    ID              reduce using rule 149 (callSuffix -> annotatedLambda .)
    CROSSINLINE     reduce using rule 149 (callSuffix -> annotatedLambda .)
    IMPORT          reduce using rule 149 (callSuffix -> annotatedLambda .)
    INIT            reduce using rule 149 (callSuffix -> annotatedLambda .)
    NOINLINE        reduce using rule 149 (callSuffix -> annotatedLambda .)
    OUT             reduce using rule 149 (callSuffix -> annotatedLambda .)
    VARARG          reduce using rule 149 (callSuffix -> annotatedLambda .)
    WHERE           reduce using rule 149 (callSuffix -> annotatedLambda .)
    LITERAL_STRING  reduce using rule 149 (callSuffix -> annotatedLambda .)
    DOISP           reduce using rule 149 (callSuffix -> annotatedLambda .)
    IF              reduce using rule 149 (callSuffix -> annotatedLambda .)
    RETURN          reduce using rule 149 (callSuffix -> annotatedLambda .)
    RETURN_AT       reduce using rule 149 (callSuffix -> annotatedLambda .)
    CONTINUE        reduce using rule 149 (callSuffix -> annotatedLambda .)
    CONTINUE_AT     reduce using rule 149 (callSuffix -> annotatedLambda .)
    BREAK           reduce using rule 149 (callSuffix -> annotatedLambda .)
    BREAK_AT        reduce using rule 149 (callSuffix -> annotatedLambda .)
    MINUS           reduce using rule 149 (callSuffix -> annotatedLambda .)
    PLUS            reduce using rule 149 (callSuffix -> annotatedLambda .)
    NOT             reduce using rule 149 (callSuffix -> annotatedLambda .)
    SUSPEND         reduce using rule 149 (callSuffix -> annotatedLambda .)
    MAIORIGUAL      reduce using rule 149 (callSuffix -> annotatedLambda .)
    MENORIGUAL      reduce using rule 149 (callSuffix -> annotatedLambda .)
    MULTIGUAL       reduce using rule 149 (callSuffix -> annotatedLambda .)
    DIVIGUAL        reduce using rule 149 (callSuffix -> annotatedLambda .)
    MODIGUAL        reduce using rule 149 (callSuffix -> annotatedLambda .)
    AS              reduce using rule 149 (callSuffix -> annotatedLambda .)
    OR              reduce using rule 149 (callSuffix -> annotatedLambda .)
    AND             reduce using rule 149 (callSuffix -> annotatedLambda .)
    DIFERENTE       reduce using rule 149 (callSuffix -> annotatedLambda .)
    IDENTIDADE      reduce using rule 149 (callSuffix -> annotatedLambda .)
    IGUALDADE       reduce using rule 149 (callSuffix -> annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 149 (callSuffix -> annotatedLambda .)
    MAIOR           reduce using rule 149 (callSuffix -> annotatedLambda .)
    IN              reduce using rule 149 (callSuffix -> annotatedLambda .)
    NOT_IN          reduce using rule 149 (callSuffix -> annotatedLambda .)
    IS              reduce using rule 149 (callSuffix -> annotatedLambda .)
    NOT_IS          reduce using rule 149 (callSuffix -> annotatedLambda .)
    ELVIS           reduce using rule 149 (callSuffix -> annotatedLambda .)
    PONTOPONTO      reduce using rule 149 (callSuffix -> annotatedLambda .)
    MULT            reduce using rule 149 (callSuffix -> annotatedLambda .)
    DIVIDE          reduce using rule 149 (callSuffix -> annotatedLambda .)
    MOD             reduce using rule 149 (callSuffix -> annotatedLambda .)
    LCHAVE          reduce using rule 149 (callSuffix -> annotatedLambda .)
    PV              reduce using rule 149 (callSuffix -> annotatedLambda .)
    ELSE            reduce using rule 149 (callSuffix -> annotatedLambda .)
    $end            reduce using rule 149 (callSuffix -> annotatedLambda .)
    COMMA           reduce using rule 149 (callSuffix -> annotatedLambda .)
    RPAREN          reduce using rule 149 (callSuffix -> annotatedLambda .)
    RCCT            reduce using rule 149 (callSuffix -> annotatedLambda .)


state 258

    (157) valueArguments -> LPAREN . RPAREN
    (158) valueArguments -> LPAREN . vas RPAREN
    (159) vas -> . valueArgument
    (160) vas -> . valueArgument COMMA vas
    (161) valueArgument -> . simpleIdentifier IGUALDADE MULT expression
    (162) valueArgument -> . simpleIdentifier IGUALDADE expression
    (163) valueArgument -> . expression
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    RPAREN          shift and go to state 321
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111

  ! RPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    vas                            shift and go to state 322
    valueArgument                  shift and go to state 323
    simpleIdentifier               shift and go to state 324
    expression                     shift and go to state 325
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 259

    (152) annotatedLambda -> lambdaLiteral .

    INCREMENTO      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DECREMENTO      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MENOR           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    LCCT            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    LPAREN          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    PONTO           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    COLONCOLON      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    RCHAVE          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    FUN             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    FOR             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    WHILE           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DO              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    ID              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IMPORT          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    INIT            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    NOINLINE        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    OUT             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    VARARG          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    WHERE           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DOISP           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IF              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    RETURN          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    RETURN_AT       reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    CONTINUE        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    BREAK           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    BREAK_AT        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MINUS           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    PLUS            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    NOT             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    SUSPEND         reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MODIGUAL        reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    AS              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    OR              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    AND             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DIFERENTE       reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IGUALDADE       reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MAIOR           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IN              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    NOT_IN          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    IS              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    NOT_IS          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    ELVIS           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MULT            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    DIVIDE          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    MOD             reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    LCHAVE          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    PV              reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    ELSE            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    $end            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    COMMA           reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    RPAREN          reduce using rule 152 (annotatedLambda -> lambdaLiteral .)
    RCCT            reduce using rule 152 (annotatedLambda -> lambdaLiteral .)


state 260

    (200) anonymousFunction -> WHERE af .

    INCREMENTO      reduce using rule 200 (anonymousFunction -> WHERE af .)
    DECREMENTO      reduce using rule 200 (anonymousFunction -> WHERE af .)
    MENOR           reduce using rule 200 (anonymousFunction -> WHERE af .)
    LCCT            reduce using rule 200 (anonymousFunction -> WHERE af .)
    LPAREN          reduce using rule 200 (anonymousFunction -> WHERE af .)
    PONTO           reduce using rule 200 (anonymousFunction -> WHERE af .)
    COLONCOLON      reduce using rule 200 (anonymousFunction -> WHERE af .)
    RCHAVE          reduce using rule 200 (anonymousFunction -> WHERE af .)
    FUN             reduce using rule 200 (anonymousFunction -> WHERE af .)
    FOR             reduce using rule 200 (anonymousFunction -> WHERE af .)
    WHILE           reduce using rule 200 (anonymousFunction -> WHERE af .)
    DO              reduce using rule 200 (anonymousFunction -> WHERE af .)
    ID              reduce using rule 200 (anonymousFunction -> WHERE af .)
    CROSSINLINE     reduce using rule 200 (anonymousFunction -> WHERE af .)
    IMPORT          reduce using rule 200 (anonymousFunction -> WHERE af .)
    INIT            reduce using rule 200 (anonymousFunction -> WHERE af .)
    NOINLINE        reduce using rule 200 (anonymousFunction -> WHERE af .)
    OUT             reduce using rule 200 (anonymousFunction -> WHERE af .)
    VARARG          reduce using rule 200 (anonymousFunction -> WHERE af .)
    WHERE           reduce using rule 200 (anonymousFunction -> WHERE af .)
    LITERAL_STRING  reduce using rule 200 (anonymousFunction -> WHERE af .)
    DOISP           reduce using rule 200 (anonymousFunction -> WHERE af .)
    IF              reduce using rule 200 (anonymousFunction -> WHERE af .)
    RETURN          reduce using rule 200 (anonymousFunction -> WHERE af .)
    RETURN_AT       reduce using rule 200 (anonymousFunction -> WHERE af .)
    CONTINUE        reduce using rule 200 (anonymousFunction -> WHERE af .)
    CONTINUE_AT     reduce using rule 200 (anonymousFunction -> WHERE af .)
    BREAK           reduce using rule 200 (anonymousFunction -> WHERE af .)
    BREAK_AT        reduce using rule 200 (anonymousFunction -> WHERE af .)
    MINUS           reduce using rule 200 (anonymousFunction -> WHERE af .)
    PLUS            reduce using rule 200 (anonymousFunction -> WHERE af .)
    NOT             reduce using rule 200 (anonymousFunction -> WHERE af .)
    SUSPEND         reduce using rule 200 (anonymousFunction -> WHERE af .)
    MAIORIGUAL      reduce using rule 200 (anonymousFunction -> WHERE af .)
    MENORIGUAL      reduce using rule 200 (anonymousFunction -> WHERE af .)
    MULTIGUAL       reduce using rule 200 (anonymousFunction -> WHERE af .)
    DIVIGUAL        reduce using rule 200 (anonymousFunction -> WHERE af .)
    MODIGUAL        reduce using rule 200 (anonymousFunction -> WHERE af .)
    AS              reduce using rule 200 (anonymousFunction -> WHERE af .)
    OR              reduce using rule 200 (anonymousFunction -> WHERE af .)
    AND             reduce using rule 200 (anonymousFunction -> WHERE af .)
    DIFERENTE       reduce using rule 200 (anonymousFunction -> WHERE af .)
    IDENTIDADE      reduce using rule 200 (anonymousFunction -> WHERE af .)
    IGUALDADE       reduce using rule 200 (anonymousFunction -> WHERE af .)
    SEMIDENTIDADE   reduce using rule 200 (anonymousFunction -> WHERE af .)
    MAIOR           reduce using rule 200 (anonymousFunction -> WHERE af .)
    IN              reduce using rule 200 (anonymousFunction -> WHERE af .)
    NOT_IN          reduce using rule 200 (anonymousFunction -> WHERE af .)
    IS              reduce using rule 200 (anonymousFunction -> WHERE af .)
    NOT_IS          reduce using rule 200 (anonymousFunction -> WHERE af .)
    ELVIS           reduce using rule 200 (anonymousFunction -> WHERE af .)
    PONTOPONTO      reduce using rule 200 (anonymousFunction -> WHERE af .)
    MULT            reduce using rule 200 (anonymousFunction -> WHERE af .)
    DIVIDE          reduce using rule 200 (anonymousFunction -> WHERE af .)
    MOD             reduce using rule 200 (anonymousFunction -> WHERE af .)
    LCHAVE          reduce using rule 200 (anonymousFunction -> WHERE af .)
    PV              reduce using rule 200 (anonymousFunction -> WHERE af .)
    ELSE            reduce using rule 200 (anonymousFunction -> WHERE af .)
    $end            reduce using rule 200 (anonymousFunction -> WHERE af .)
    COMMA           reduce using rule 200 (anonymousFunction -> WHERE af .)
    RPAREN          reduce using rule 200 (anonymousFunction -> WHERE af .)
    RCCT            reduce using rule 200 (anonymousFunction -> WHERE af .)


state 261

    (201) af -> typeConstraint .
    (202) af -> typeConstraint . COMMA af

  ! shift/reduce conflict for COMMA resolved as shift
    INCREMENTO      reduce using rule 201 (af -> typeConstraint .)
    DECREMENTO      reduce using rule 201 (af -> typeConstraint .)
    MENOR           reduce using rule 201 (af -> typeConstraint .)
    LCCT            reduce using rule 201 (af -> typeConstraint .)
    LPAREN          reduce using rule 201 (af -> typeConstraint .)
    PONTO           reduce using rule 201 (af -> typeConstraint .)
    COLONCOLON      reduce using rule 201 (af -> typeConstraint .)
    RCHAVE          reduce using rule 201 (af -> typeConstraint .)
    FUN             reduce using rule 201 (af -> typeConstraint .)
    FOR             reduce using rule 201 (af -> typeConstraint .)
    WHILE           reduce using rule 201 (af -> typeConstraint .)
    DO              reduce using rule 201 (af -> typeConstraint .)
    ID              reduce using rule 201 (af -> typeConstraint .)
    CROSSINLINE     reduce using rule 201 (af -> typeConstraint .)
    IMPORT          reduce using rule 201 (af -> typeConstraint .)
    INIT            reduce using rule 201 (af -> typeConstraint .)
    NOINLINE        reduce using rule 201 (af -> typeConstraint .)
    OUT             reduce using rule 201 (af -> typeConstraint .)
    VARARG          reduce using rule 201 (af -> typeConstraint .)
    WHERE           reduce using rule 201 (af -> typeConstraint .)
    LITERAL_STRING  reduce using rule 201 (af -> typeConstraint .)
    DOISP           reduce using rule 201 (af -> typeConstraint .)
    IF              reduce using rule 201 (af -> typeConstraint .)
    RETURN          reduce using rule 201 (af -> typeConstraint .)
    RETURN_AT       reduce using rule 201 (af -> typeConstraint .)
    CONTINUE        reduce using rule 201 (af -> typeConstraint .)
    CONTINUE_AT     reduce using rule 201 (af -> typeConstraint .)
    BREAK           reduce using rule 201 (af -> typeConstraint .)
    BREAK_AT        reduce using rule 201 (af -> typeConstraint .)
    MINUS           reduce using rule 201 (af -> typeConstraint .)
    PLUS            reduce using rule 201 (af -> typeConstraint .)
    NOT             reduce using rule 201 (af -> typeConstraint .)
    SUSPEND         reduce using rule 201 (af -> typeConstraint .)
    MAIORIGUAL      reduce using rule 201 (af -> typeConstraint .)
    MENORIGUAL      reduce using rule 201 (af -> typeConstraint .)
    MULTIGUAL       reduce using rule 201 (af -> typeConstraint .)
    DIVIGUAL        reduce using rule 201 (af -> typeConstraint .)
    MODIGUAL        reduce using rule 201 (af -> typeConstraint .)
    AS              reduce using rule 201 (af -> typeConstraint .)
    OR              reduce using rule 201 (af -> typeConstraint .)
    AND             reduce using rule 201 (af -> typeConstraint .)
    DIFERENTE       reduce using rule 201 (af -> typeConstraint .)
    IDENTIDADE      reduce using rule 201 (af -> typeConstraint .)
    IGUALDADE       reduce using rule 201 (af -> typeConstraint .)
    SEMIDENTIDADE   reduce using rule 201 (af -> typeConstraint .)
    MAIOR           reduce using rule 201 (af -> typeConstraint .)
    IN              reduce using rule 201 (af -> typeConstraint .)
    NOT_IN          reduce using rule 201 (af -> typeConstraint .)
    IS              reduce using rule 201 (af -> typeConstraint .)
    NOT_IS          reduce using rule 201 (af -> typeConstraint .)
    ELVIS           reduce using rule 201 (af -> typeConstraint .)
    PONTOPONTO      reduce using rule 201 (af -> typeConstraint .)
    MULT            reduce using rule 201 (af -> typeConstraint .)
    DIVIDE          reduce using rule 201 (af -> typeConstraint .)
    MOD             reduce using rule 201 (af -> typeConstraint .)
    LCHAVE          reduce using rule 201 (af -> typeConstraint .)
    PV              reduce using rule 201 (af -> typeConstraint .)
    ELSE            reduce using rule 201 (af -> typeConstraint .)
    $end            reduce using rule 201 (af -> typeConstraint .)
    RPAREN          reduce using rule 201 (af -> typeConstraint .)
    RCCT            reduce using rule 201 (af -> typeConstraint .)
    COMMA           shift and go to state 326

  ! COMMA           [ reduce using rule 201 (af -> typeConstraint .) ]


state 262

    (203) typeConstraint -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 327


state 263

    (227) callableReference -> receiverType DOISP . DOISP simpleIdentifier
    (229) callableReference -> receiverType DOISP . DOISP CLASS

    DOISP           shift and go to state 328


state 264

    (228) callableReference -> DOISP DOISP . simpleIdentifier
    (230) callableReference -> DOISP DOISP . CLASS
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    CLASS           shift and go to state 330
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    simpleIdentifier               shift and go to state 329

state 265

    (173) collectionLiteral -> LCCT cl . RCCT

    RCCT            shift and go to state 331


state 266

    (174) collectionLiteral -> LCCT RCCT .

    INCREMENTO      reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    DECREMENTO      reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    MENOR           reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    LCCT            reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    LPAREN          reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    PONTO           reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    COLONCOLON      reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    RCHAVE          reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    FUN             reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    FOR             reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    WHILE           reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    DO              reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    ID              reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    IMPORT          reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    INIT            reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    NOINLINE        reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    OUT             reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    VARARG          reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    WHERE           reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    DOISP           reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    IF              reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    RETURN          reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    RETURN_AT       reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    CONTINUE        reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    BREAK           reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    BREAK_AT        reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    MINUS           reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    PLUS            reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    NOT             reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    SUSPEND         reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    MODIGUAL        reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    AS              reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    OR              reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    AND             reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    DIFERENTE       reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    IGUALDADE       reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    MAIOR           reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    IN              reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    NOT_IN          reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    IS              reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    NOT_IS          reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    ELVIS           reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    MULT            reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    DIVIDE          reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    MOD             reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    LCHAVE          reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    PV              reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    ELSE            reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    $end            reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    COMMA           reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    RPAREN          reduce using rule 174 (collectionLiteral -> LCCT RCCT .)
    RCCT            reduce using rule 174 (collectionLiteral -> LCCT RCCT .)


state 267

    (175) cl -> expression .
    (176) cl -> expression . COMMA cl

    RCCT            reduce using rule 175 (cl -> expression .)
    COMMA           shift and go to state 332


state 268

    (210) ifExpression -> IF LPAREN . expression RPAREN controlStructureBody PV
    (211) ifExpression -> IF LPAREN . expression RPAREN controlStructureBody
    (212) ifExpression -> IF LPAREN . expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> IF LPAREN . expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> IF LPAREN . expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> IF LPAREN . expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> IF LPAREN . expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> IF LPAREN . expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> IF LPAREN . expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> IF LPAREN . expression RPAREN ELSE controlStructureBody
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 333
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 269

    (220) jumpExpression -> RETURN expression .

    INCREMENTO      reduce using rule 220 (jumpExpression -> RETURN expression .)
    DECREMENTO      reduce using rule 220 (jumpExpression -> RETURN expression .)
    MENOR           reduce using rule 220 (jumpExpression -> RETURN expression .)
    LCCT            reduce using rule 220 (jumpExpression -> RETURN expression .)
    LPAREN          reduce using rule 220 (jumpExpression -> RETURN expression .)
    PONTO           reduce using rule 220 (jumpExpression -> RETURN expression .)
    COLONCOLON      reduce using rule 220 (jumpExpression -> RETURN expression .)
    RCHAVE          reduce using rule 220 (jumpExpression -> RETURN expression .)
    FUN             reduce using rule 220 (jumpExpression -> RETURN expression .)
    FOR             reduce using rule 220 (jumpExpression -> RETURN expression .)
    WHILE           reduce using rule 220 (jumpExpression -> RETURN expression .)
    DO              reduce using rule 220 (jumpExpression -> RETURN expression .)
    ID              reduce using rule 220 (jumpExpression -> RETURN expression .)
    CROSSINLINE     reduce using rule 220 (jumpExpression -> RETURN expression .)
    IMPORT          reduce using rule 220 (jumpExpression -> RETURN expression .)
    INIT            reduce using rule 220 (jumpExpression -> RETURN expression .)
    NOINLINE        reduce using rule 220 (jumpExpression -> RETURN expression .)
    OUT             reduce using rule 220 (jumpExpression -> RETURN expression .)
    VARARG          reduce using rule 220 (jumpExpression -> RETURN expression .)
    WHERE           reduce using rule 220 (jumpExpression -> RETURN expression .)
    LITERAL_STRING  reduce using rule 220 (jumpExpression -> RETURN expression .)
    DOISP           reduce using rule 220 (jumpExpression -> RETURN expression .)
    IF              reduce using rule 220 (jumpExpression -> RETURN expression .)
    RETURN          reduce using rule 220 (jumpExpression -> RETURN expression .)
    RETURN_AT       reduce using rule 220 (jumpExpression -> RETURN expression .)
    CONTINUE        reduce using rule 220 (jumpExpression -> RETURN expression .)
    CONTINUE_AT     reduce using rule 220 (jumpExpression -> RETURN expression .)
    BREAK           reduce using rule 220 (jumpExpression -> RETURN expression .)
    BREAK_AT        reduce using rule 220 (jumpExpression -> RETURN expression .)
    MINUS           reduce using rule 220 (jumpExpression -> RETURN expression .)
    PLUS            reduce using rule 220 (jumpExpression -> RETURN expression .)
    NOT             reduce using rule 220 (jumpExpression -> RETURN expression .)
    SUSPEND         reduce using rule 220 (jumpExpression -> RETURN expression .)
    MAIORIGUAL      reduce using rule 220 (jumpExpression -> RETURN expression .)
    MENORIGUAL      reduce using rule 220 (jumpExpression -> RETURN expression .)
    MULTIGUAL       reduce using rule 220 (jumpExpression -> RETURN expression .)
    DIVIGUAL        reduce using rule 220 (jumpExpression -> RETURN expression .)
    MODIGUAL        reduce using rule 220 (jumpExpression -> RETURN expression .)
    AS              reduce using rule 220 (jumpExpression -> RETURN expression .)
    OR              reduce using rule 220 (jumpExpression -> RETURN expression .)
    AND             reduce using rule 220 (jumpExpression -> RETURN expression .)
    DIFERENTE       reduce using rule 220 (jumpExpression -> RETURN expression .)
    IDENTIDADE      reduce using rule 220 (jumpExpression -> RETURN expression .)
    IGUALDADE       reduce using rule 220 (jumpExpression -> RETURN expression .)
    SEMIDENTIDADE   reduce using rule 220 (jumpExpression -> RETURN expression .)
    MAIOR           reduce using rule 220 (jumpExpression -> RETURN expression .)
    IN              reduce using rule 220 (jumpExpression -> RETURN expression .)
    NOT_IN          reduce using rule 220 (jumpExpression -> RETURN expression .)
    IS              reduce using rule 220 (jumpExpression -> RETURN expression .)
    NOT_IS          reduce using rule 220 (jumpExpression -> RETURN expression .)
    ELVIS           reduce using rule 220 (jumpExpression -> RETURN expression .)
    PONTOPONTO      reduce using rule 220 (jumpExpression -> RETURN expression .)
    MULT            reduce using rule 220 (jumpExpression -> RETURN expression .)
    DIVIDE          reduce using rule 220 (jumpExpression -> RETURN expression .)
    MOD             reduce using rule 220 (jumpExpression -> RETURN expression .)
    LCHAVE          reduce using rule 220 (jumpExpression -> RETURN expression .)
    PV              reduce using rule 220 (jumpExpression -> RETURN expression .)
    ELSE            reduce using rule 220 (jumpExpression -> RETURN expression .)
    $end            reduce using rule 220 (jumpExpression -> RETURN expression .)
    COMMA           reduce using rule 220 (jumpExpression -> RETURN expression .)
    RPAREN          reduce using rule 220 (jumpExpression -> RETURN expression .)
    RCCT            reduce using rule 220 (jumpExpression -> RETURN expression .)


state 270

    (221) jumpExpression -> RETURN_AT expression .

    INCREMENTO      reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    DECREMENTO      reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    MENOR           reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    LCCT            reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    LPAREN          reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    PONTO           reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    COLONCOLON      reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    RCHAVE          reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    FUN             reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    FOR             reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    WHILE           reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    DO              reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    ID              reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    CROSSINLINE     reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    IMPORT          reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    INIT            reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    NOINLINE        reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    OUT             reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    VARARG          reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    WHERE           reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    LITERAL_STRING  reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    DOISP           reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    IF              reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    RETURN          reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    RETURN_AT       reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    CONTINUE        reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    CONTINUE_AT     reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    BREAK           reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    BREAK_AT        reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    MINUS           reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    PLUS            reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    NOT             reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    SUSPEND         reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    MAIORIGUAL      reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    MENORIGUAL      reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    MULTIGUAL       reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    DIVIGUAL        reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    MODIGUAL        reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    AS              reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    OR              reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    AND             reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    DIFERENTE       reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    IDENTIDADE      reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    IGUALDADE       reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    SEMIDENTIDADE   reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    MAIOR           reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    IN              reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    NOT_IN          reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    IS              reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    NOT_IS          reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    ELVIS           reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    PONTOPONTO      reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    MULT            reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    DIVIDE          reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    MOD             reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    LCHAVE          reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    PV              reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    ELSE            reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    $end            reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    COMMA           reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    RPAREN          reduce using rule 221 (jumpExpression -> RETURN_AT expression .)
    RCCT            reduce using rule 221 (jumpExpression -> RETURN_AT expression .)


state 271

    (57) functionTypeParameters -> LPAREN type ftp COMMA RPAREN .

    SETA            reduce using rule 57 (functionTypeParameters -> LPAREN type ftp COMMA RPAREN .)


state 272

    (55) functionTypeParameters -> LPAREN parameter ftp COMMA RPAREN .

    SETA            reduce using rule 55 (functionTypeParameters -> LPAREN parameter ftp COMMA RPAREN .)


state 273

    (52) functionType -> receiverType PONTO functionTypeParameters SETA type .

    RPAREN          reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COMMA           reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIOR           reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ATRIBUICAO      reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LCHAVE          reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FUN             reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    $end            reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FOR             reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHILE           reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DO              reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ID              reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IMPORT          reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INIT            reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OUT             reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VARARG          reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHERE           reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LPAREN          reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DOISP           reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LCCT            reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IF              reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN          reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK           reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MINUS           reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PLUS            reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT             reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOR           reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTO           reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AS              reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OR              reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AND             reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IN              reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IS              reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELVIS           reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULT            reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MOD             reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PV              reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELSE            reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCCT            reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SETA            reduce using rule 52 (functionType -> receiverType PONTO functionTypeParameters SETA type .)


state 274

    (155) ta -> typeProjection COMMA ta .

    MAIOR           reduce using rule 155 (ta -> typeProjection COMMA ta .)


state 275

    (90) disjunction -> conjunction OR disjunction .

    FUN             reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    FOR             reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    WHILE           reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    DO              reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    ID              reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    CROSSINLINE     reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    IMPORT          reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    INIT            reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    NOINLINE        reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    OUT             reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    VARARG          reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    WHERE           reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    LPAREN          reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    LITERAL_STRING  reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    DOISP           reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    LCCT            reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    IF              reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    RETURN          reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    RETURN_AT       reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    CONTINUE        reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    CONTINUE_AT     reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    BREAK           reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    BREAK_AT        reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    RCHAVE          reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    INCREMENTO      reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    DECREMENTO      reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    MINUS           reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    PLUS            reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    NOT             reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    SUSPEND         reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    MAIORIGUAL      reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    MENORIGUAL      reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    MULTIGUAL       reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    DIVIGUAL        reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    MODIGUAL        reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    MENOR           reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    PONTO           reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    COLONCOLON      reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    AS              reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    OR              reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    AND             reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    DIFERENTE       reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    IDENTIDADE      reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    IGUALDADE       reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    SEMIDENTIDADE   reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    MAIOR           reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    IN              reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    NOT_IN          reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    IS              reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    NOT_IS          reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    ELVIS           reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    PONTOPONTO      reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    MULT            reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    DIVIDE          reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    MOD             reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    LCHAVE          reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    PV              reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    ELSE            reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    $end            reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    COMMA           reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    RPAREN          reduce using rule 90 (disjunction -> conjunction OR disjunction .)
    RCCT            reduce using rule 90 (disjunction -> conjunction OR disjunction .)


state 276

    (92) conjunction -> equality AND conjunction .

    FUN             reduce using rule 92 (conjunction -> equality AND conjunction .)
    FOR             reduce using rule 92 (conjunction -> equality AND conjunction .)
    WHILE           reduce using rule 92 (conjunction -> equality AND conjunction .)
    DO              reduce using rule 92 (conjunction -> equality AND conjunction .)
    ID              reduce using rule 92 (conjunction -> equality AND conjunction .)
    CROSSINLINE     reduce using rule 92 (conjunction -> equality AND conjunction .)
    IMPORT          reduce using rule 92 (conjunction -> equality AND conjunction .)
    INIT            reduce using rule 92 (conjunction -> equality AND conjunction .)
    NOINLINE        reduce using rule 92 (conjunction -> equality AND conjunction .)
    OUT             reduce using rule 92 (conjunction -> equality AND conjunction .)
    VARARG          reduce using rule 92 (conjunction -> equality AND conjunction .)
    WHERE           reduce using rule 92 (conjunction -> equality AND conjunction .)
    LPAREN          reduce using rule 92 (conjunction -> equality AND conjunction .)
    LITERAL_STRING  reduce using rule 92 (conjunction -> equality AND conjunction .)
    DOISP           reduce using rule 92 (conjunction -> equality AND conjunction .)
    LCCT            reduce using rule 92 (conjunction -> equality AND conjunction .)
    IF              reduce using rule 92 (conjunction -> equality AND conjunction .)
    RETURN          reduce using rule 92 (conjunction -> equality AND conjunction .)
    RETURN_AT       reduce using rule 92 (conjunction -> equality AND conjunction .)
    CONTINUE        reduce using rule 92 (conjunction -> equality AND conjunction .)
    CONTINUE_AT     reduce using rule 92 (conjunction -> equality AND conjunction .)
    BREAK           reduce using rule 92 (conjunction -> equality AND conjunction .)
    BREAK_AT        reduce using rule 92 (conjunction -> equality AND conjunction .)
    RCHAVE          reduce using rule 92 (conjunction -> equality AND conjunction .)
    INCREMENTO      reduce using rule 92 (conjunction -> equality AND conjunction .)
    DECREMENTO      reduce using rule 92 (conjunction -> equality AND conjunction .)
    MINUS           reduce using rule 92 (conjunction -> equality AND conjunction .)
    PLUS            reduce using rule 92 (conjunction -> equality AND conjunction .)
    NOT             reduce using rule 92 (conjunction -> equality AND conjunction .)
    SUSPEND         reduce using rule 92 (conjunction -> equality AND conjunction .)
    MAIORIGUAL      reduce using rule 92 (conjunction -> equality AND conjunction .)
    MENORIGUAL      reduce using rule 92 (conjunction -> equality AND conjunction .)
    MULTIGUAL       reduce using rule 92 (conjunction -> equality AND conjunction .)
    DIVIGUAL        reduce using rule 92 (conjunction -> equality AND conjunction .)
    MODIGUAL        reduce using rule 92 (conjunction -> equality AND conjunction .)
    MENOR           reduce using rule 92 (conjunction -> equality AND conjunction .)
    PONTO           reduce using rule 92 (conjunction -> equality AND conjunction .)
    COLONCOLON      reduce using rule 92 (conjunction -> equality AND conjunction .)
    AS              reduce using rule 92 (conjunction -> equality AND conjunction .)
    OR              reduce using rule 92 (conjunction -> equality AND conjunction .)
    AND             reduce using rule 92 (conjunction -> equality AND conjunction .)
    DIFERENTE       reduce using rule 92 (conjunction -> equality AND conjunction .)
    IDENTIDADE      reduce using rule 92 (conjunction -> equality AND conjunction .)
    IGUALDADE       reduce using rule 92 (conjunction -> equality AND conjunction .)
    SEMIDENTIDADE   reduce using rule 92 (conjunction -> equality AND conjunction .)
    MAIOR           reduce using rule 92 (conjunction -> equality AND conjunction .)
    IN              reduce using rule 92 (conjunction -> equality AND conjunction .)
    NOT_IN          reduce using rule 92 (conjunction -> equality AND conjunction .)
    IS              reduce using rule 92 (conjunction -> equality AND conjunction .)
    NOT_IS          reduce using rule 92 (conjunction -> equality AND conjunction .)
    ELVIS           reduce using rule 92 (conjunction -> equality AND conjunction .)
    PONTOPONTO      reduce using rule 92 (conjunction -> equality AND conjunction .)
    MULT            reduce using rule 92 (conjunction -> equality AND conjunction .)
    DIVIDE          reduce using rule 92 (conjunction -> equality AND conjunction .)
    MOD             reduce using rule 92 (conjunction -> equality AND conjunction .)
    LCHAVE          reduce using rule 92 (conjunction -> equality AND conjunction .)
    PV              reduce using rule 92 (conjunction -> equality AND conjunction .)
    ELSE            reduce using rule 92 (conjunction -> equality AND conjunction .)
    $end            reduce using rule 92 (conjunction -> equality AND conjunction .)
    COMMA           reduce using rule 92 (conjunction -> equality AND conjunction .)
    RPAREN          reduce using rule 92 (conjunction -> equality AND conjunction .)
    RCCT            reduce using rule 92 (conjunction -> equality AND conjunction .)


state 277

    (94) equality -> comparison equalityOperator equality .

    FUN             reduce using rule 94 (equality -> comparison equalityOperator equality .)
    FOR             reduce using rule 94 (equality -> comparison equalityOperator equality .)
    WHILE           reduce using rule 94 (equality -> comparison equalityOperator equality .)
    DO              reduce using rule 94 (equality -> comparison equalityOperator equality .)
    ID              reduce using rule 94 (equality -> comparison equalityOperator equality .)
    CROSSINLINE     reduce using rule 94 (equality -> comparison equalityOperator equality .)
    IMPORT          reduce using rule 94 (equality -> comparison equalityOperator equality .)
    INIT            reduce using rule 94 (equality -> comparison equalityOperator equality .)
    NOINLINE        reduce using rule 94 (equality -> comparison equalityOperator equality .)
    OUT             reduce using rule 94 (equality -> comparison equalityOperator equality .)
    VARARG          reduce using rule 94 (equality -> comparison equalityOperator equality .)
    WHERE           reduce using rule 94 (equality -> comparison equalityOperator equality .)
    LPAREN          reduce using rule 94 (equality -> comparison equalityOperator equality .)
    LITERAL_STRING  reduce using rule 94 (equality -> comparison equalityOperator equality .)
    DOISP           reduce using rule 94 (equality -> comparison equalityOperator equality .)
    LCCT            reduce using rule 94 (equality -> comparison equalityOperator equality .)
    IF              reduce using rule 94 (equality -> comparison equalityOperator equality .)
    RETURN          reduce using rule 94 (equality -> comparison equalityOperator equality .)
    RETURN_AT       reduce using rule 94 (equality -> comparison equalityOperator equality .)
    CONTINUE        reduce using rule 94 (equality -> comparison equalityOperator equality .)
    CONTINUE_AT     reduce using rule 94 (equality -> comparison equalityOperator equality .)
    BREAK           reduce using rule 94 (equality -> comparison equalityOperator equality .)
    BREAK_AT        reduce using rule 94 (equality -> comparison equalityOperator equality .)
    RCHAVE          reduce using rule 94 (equality -> comparison equalityOperator equality .)
    INCREMENTO      reduce using rule 94 (equality -> comparison equalityOperator equality .)
    DECREMENTO      reduce using rule 94 (equality -> comparison equalityOperator equality .)
    MINUS           reduce using rule 94 (equality -> comparison equalityOperator equality .)
    PLUS            reduce using rule 94 (equality -> comparison equalityOperator equality .)
    NOT             reduce using rule 94 (equality -> comparison equalityOperator equality .)
    SUSPEND         reduce using rule 94 (equality -> comparison equalityOperator equality .)
    MAIORIGUAL      reduce using rule 94 (equality -> comparison equalityOperator equality .)
    MENORIGUAL      reduce using rule 94 (equality -> comparison equalityOperator equality .)
    MULTIGUAL       reduce using rule 94 (equality -> comparison equalityOperator equality .)
    DIVIGUAL        reduce using rule 94 (equality -> comparison equalityOperator equality .)
    MODIGUAL        reduce using rule 94 (equality -> comparison equalityOperator equality .)
    MENOR           reduce using rule 94 (equality -> comparison equalityOperator equality .)
    PONTO           reduce using rule 94 (equality -> comparison equalityOperator equality .)
    COLONCOLON      reduce using rule 94 (equality -> comparison equalityOperator equality .)
    AS              reduce using rule 94 (equality -> comparison equalityOperator equality .)
    OR              reduce using rule 94 (equality -> comparison equalityOperator equality .)
    AND             reduce using rule 94 (equality -> comparison equalityOperator equality .)
    DIFERENTE       reduce using rule 94 (equality -> comparison equalityOperator equality .)
    IDENTIDADE      reduce using rule 94 (equality -> comparison equalityOperator equality .)
    IGUALDADE       reduce using rule 94 (equality -> comparison equalityOperator equality .)
    SEMIDENTIDADE   reduce using rule 94 (equality -> comparison equalityOperator equality .)
    MAIOR           reduce using rule 94 (equality -> comparison equalityOperator equality .)
    IN              reduce using rule 94 (equality -> comparison equalityOperator equality .)
    NOT_IN          reduce using rule 94 (equality -> comparison equalityOperator equality .)
    IS              reduce using rule 94 (equality -> comparison equalityOperator equality .)
    NOT_IS          reduce using rule 94 (equality -> comparison equalityOperator equality .)
    ELVIS           reduce using rule 94 (equality -> comparison equalityOperator equality .)
    PONTOPONTO      reduce using rule 94 (equality -> comparison equalityOperator equality .)
    MULT            reduce using rule 94 (equality -> comparison equalityOperator equality .)
    DIVIDE          reduce using rule 94 (equality -> comparison equalityOperator equality .)
    MOD             reduce using rule 94 (equality -> comparison equalityOperator equality .)
    LCHAVE          reduce using rule 94 (equality -> comparison equalityOperator equality .)
    PV              reduce using rule 94 (equality -> comparison equalityOperator equality .)
    ELSE            reduce using rule 94 (equality -> comparison equalityOperator equality .)
    $end            reduce using rule 94 (equality -> comparison equalityOperator equality .)
    COMMA           reduce using rule 94 (equality -> comparison equalityOperator equality .)
    RPAREN          reduce using rule 94 (equality -> comparison equalityOperator equality .)
    RCCT            reduce using rule 94 (equality -> comparison equalityOperator equality .)


state 278

    (96) comparison -> infixOperation comparisonOperator infixOperation .

    FUN             reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    FOR             reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    WHILE           reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    DO              reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    ID              reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    CROSSINLINE     reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    IMPORT          reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    INIT            reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOINLINE        reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    OUT             reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    VARARG          reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    WHERE           reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    LPAREN          reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    LITERAL_STRING  reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    DOISP           reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    LCCT            reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    IF              reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    RETURN          reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    RETURN_AT       reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    CONTINUE        reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    CONTINUE_AT     reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    BREAK           reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    BREAK_AT        reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    RCHAVE          reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    INCREMENTO      reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    DECREMENTO      reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    MINUS           reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    PLUS            reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOT             reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    SUSPEND         reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    MAIORIGUAL      reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    MENORIGUAL      reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    MULTIGUAL       reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    DIVIGUAL        reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    MODIGUAL        reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    MENOR           reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    PONTO           reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    COLONCOLON      reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    AS              reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    OR              reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    AND             reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    DIFERENTE       reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    IDENTIDADE      reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    IGUALDADE       reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    SEMIDENTIDADE   reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    MAIOR           reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    IN              reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOT_IN          reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    IS              reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOT_IS          reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    ELVIS           reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    PONTOPONTO      reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    MULT            reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    DIVIDE          reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    MOD             reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    LCHAVE          reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    PV              reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    ELSE            reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    $end            reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    COMMA           reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    RPAREN          reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)
    RCCT            reduce using rule 96 (comparison -> infixOperation comparisonOperator infixOperation .)


state 279

    (98) io -> inOperator elvisExpression .

    FUN             reduce using rule 98 (io -> inOperator elvisExpression .)
    FOR             reduce using rule 98 (io -> inOperator elvisExpression .)
    WHILE           reduce using rule 98 (io -> inOperator elvisExpression .)
    DO              reduce using rule 98 (io -> inOperator elvisExpression .)
    ID              reduce using rule 98 (io -> inOperator elvisExpression .)
    CROSSINLINE     reduce using rule 98 (io -> inOperator elvisExpression .)
    IMPORT          reduce using rule 98 (io -> inOperator elvisExpression .)
    INIT            reduce using rule 98 (io -> inOperator elvisExpression .)
    NOINLINE        reduce using rule 98 (io -> inOperator elvisExpression .)
    OUT             reduce using rule 98 (io -> inOperator elvisExpression .)
    VARARG          reduce using rule 98 (io -> inOperator elvisExpression .)
    WHERE           reduce using rule 98 (io -> inOperator elvisExpression .)
    LPAREN          reduce using rule 98 (io -> inOperator elvisExpression .)
    LITERAL_STRING  reduce using rule 98 (io -> inOperator elvisExpression .)
    DOISP           reduce using rule 98 (io -> inOperator elvisExpression .)
    LCCT            reduce using rule 98 (io -> inOperator elvisExpression .)
    IF              reduce using rule 98 (io -> inOperator elvisExpression .)
    RETURN          reduce using rule 98 (io -> inOperator elvisExpression .)
    RETURN_AT       reduce using rule 98 (io -> inOperator elvisExpression .)
    CONTINUE        reduce using rule 98 (io -> inOperator elvisExpression .)
    CONTINUE_AT     reduce using rule 98 (io -> inOperator elvisExpression .)
    BREAK           reduce using rule 98 (io -> inOperator elvisExpression .)
    BREAK_AT        reduce using rule 98 (io -> inOperator elvisExpression .)
    RCHAVE          reduce using rule 98 (io -> inOperator elvisExpression .)
    INCREMENTO      reduce using rule 98 (io -> inOperator elvisExpression .)
    DECREMENTO      reduce using rule 98 (io -> inOperator elvisExpression .)
    MINUS           reduce using rule 98 (io -> inOperator elvisExpression .)
    PLUS            reduce using rule 98 (io -> inOperator elvisExpression .)
    NOT             reduce using rule 98 (io -> inOperator elvisExpression .)
    SUSPEND         reduce using rule 98 (io -> inOperator elvisExpression .)
    MAIORIGUAL      reduce using rule 98 (io -> inOperator elvisExpression .)
    MENORIGUAL      reduce using rule 98 (io -> inOperator elvisExpression .)
    MULTIGUAL       reduce using rule 98 (io -> inOperator elvisExpression .)
    DIVIGUAL        reduce using rule 98 (io -> inOperator elvisExpression .)
    MODIGUAL        reduce using rule 98 (io -> inOperator elvisExpression .)
    MENOR           reduce using rule 98 (io -> inOperator elvisExpression .)
    PONTO           reduce using rule 98 (io -> inOperator elvisExpression .)
    COLONCOLON      reduce using rule 98 (io -> inOperator elvisExpression .)
    AS              reduce using rule 98 (io -> inOperator elvisExpression .)
    OR              reduce using rule 98 (io -> inOperator elvisExpression .)
    AND             reduce using rule 98 (io -> inOperator elvisExpression .)
    DIFERENTE       reduce using rule 98 (io -> inOperator elvisExpression .)
    IDENTIDADE      reduce using rule 98 (io -> inOperator elvisExpression .)
    IGUALDADE       reduce using rule 98 (io -> inOperator elvisExpression .)
    SEMIDENTIDADE   reduce using rule 98 (io -> inOperator elvisExpression .)
    MAIOR           reduce using rule 98 (io -> inOperator elvisExpression .)
    IN              reduce using rule 98 (io -> inOperator elvisExpression .)
    NOT_IN          reduce using rule 98 (io -> inOperator elvisExpression .)
    IS              reduce using rule 98 (io -> inOperator elvisExpression .)
    NOT_IS          reduce using rule 98 (io -> inOperator elvisExpression .)
    ELVIS           reduce using rule 98 (io -> inOperator elvisExpression .)
    PONTOPONTO      reduce using rule 98 (io -> inOperator elvisExpression .)
    MULT            reduce using rule 98 (io -> inOperator elvisExpression .)
    DIVIDE          reduce using rule 98 (io -> inOperator elvisExpression .)
    MOD             reduce using rule 98 (io -> inOperator elvisExpression .)
    LCHAVE          reduce using rule 98 (io -> inOperator elvisExpression .)
    PV              reduce using rule 98 (io -> inOperator elvisExpression .)
    ELSE            reduce using rule 98 (io -> inOperator elvisExpression .)
    $end            reduce using rule 98 (io -> inOperator elvisExpression .)
    COMMA           reduce using rule 98 (io -> inOperator elvisExpression .)
    RPAREN          reduce using rule 98 (io -> inOperator elvisExpression .)
    RCCT            reduce using rule 98 (io -> inOperator elvisExpression .)


state 280

    (99) io -> isOperator type .

    FUN             reduce using rule 99 (io -> isOperator type .)
    FOR             reduce using rule 99 (io -> isOperator type .)
    WHILE           reduce using rule 99 (io -> isOperator type .)
    DO              reduce using rule 99 (io -> isOperator type .)
    ID              reduce using rule 99 (io -> isOperator type .)
    CROSSINLINE     reduce using rule 99 (io -> isOperator type .)
    IMPORT          reduce using rule 99 (io -> isOperator type .)
    INIT            reduce using rule 99 (io -> isOperator type .)
    NOINLINE        reduce using rule 99 (io -> isOperator type .)
    OUT             reduce using rule 99 (io -> isOperator type .)
    VARARG          reduce using rule 99 (io -> isOperator type .)
    WHERE           reduce using rule 99 (io -> isOperator type .)
    LPAREN          reduce using rule 99 (io -> isOperator type .)
    LITERAL_STRING  reduce using rule 99 (io -> isOperator type .)
    DOISP           reduce using rule 99 (io -> isOperator type .)
    LCCT            reduce using rule 99 (io -> isOperator type .)
    IF              reduce using rule 99 (io -> isOperator type .)
    RETURN          reduce using rule 99 (io -> isOperator type .)
    RETURN_AT       reduce using rule 99 (io -> isOperator type .)
    CONTINUE        reduce using rule 99 (io -> isOperator type .)
    CONTINUE_AT     reduce using rule 99 (io -> isOperator type .)
    BREAK           reduce using rule 99 (io -> isOperator type .)
    BREAK_AT        reduce using rule 99 (io -> isOperator type .)
    RCHAVE          reduce using rule 99 (io -> isOperator type .)
    INCREMENTO      reduce using rule 99 (io -> isOperator type .)
    DECREMENTO      reduce using rule 99 (io -> isOperator type .)
    MINUS           reduce using rule 99 (io -> isOperator type .)
    PLUS            reduce using rule 99 (io -> isOperator type .)
    NOT             reduce using rule 99 (io -> isOperator type .)
    SUSPEND         reduce using rule 99 (io -> isOperator type .)
    MAIORIGUAL      reduce using rule 99 (io -> isOperator type .)
    MENORIGUAL      reduce using rule 99 (io -> isOperator type .)
    MULTIGUAL       reduce using rule 99 (io -> isOperator type .)
    DIVIGUAL        reduce using rule 99 (io -> isOperator type .)
    MODIGUAL        reduce using rule 99 (io -> isOperator type .)
    MENOR           reduce using rule 99 (io -> isOperator type .)
    PONTO           reduce using rule 99 (io -> isOperator type .)
    COLONCOLON      reduce using rule 99 (io -> isOperator type .)
    AS              reduce using rule 99 (io -> isOperator type .)
    OR              reduce using rule 99 (io -> isOperator type .)
    AND             reduce using rule 99 (io -> isOperator type .)
    DIFERENTE       reduce using rule 99 (io -> isOperator type .)
    IDENTIDADE      reduce using rule 99 (io -> isOperator type .)
    IGUALDADE       reduce using rule 99 (io -> isOperator type .)
    SEMIDENTIDADE   reduce using rule 99 (io -> isOperator type .)
    MAIOR           reduce using rule 99 (io -> isOperator type .)
    IN              reduce using rule 99 (io -> isOperator type .)
    NOT_IN          reduce using rule 99 (io -> isOperator type .)
    IS              reduce using rule 99 (io -> isOperator type .)
    NOT_IS          reduce using rule 99 (io -> isOperator type .)
    ELVIS           reduce using rule 99 (io -> isOperator type .)
    PONTOPONTO      reduce using rule 99 (io -> isOperator type .)
    MULT            reduce using rule 99 (io -> isOperator type .)
    DIVIDE          reduce using rule 99 (io -> isOperator type .)
    MOD             reduce using rule 99 (io -> isOperator type .)
    LCHAVE          reduce using rule 99 (io -> isOperator type .)
    PV              reduce using rule 99 (io -> isOperator type .)
    ELSE            reduce using rule 99 (io -> isOperator type .)
    $end            reduce using rule 99 (io -> isOperator type .)
    COMMA           reduce using rule 99 (io -> isOperator type .)
    RPAREN          reduce using rule 99 (io -> isOperator type .)
    RCCT            reduce using rule 99 (io -> isOperator type .)


state 281

    (102) elvisExpression -> infixFunctionCall ELVIS elvisExpression .

    FUN             reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    FOR             reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    WHILE           reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DO              reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    ID              reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    CROSSINLINE     reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IMPORT          reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    INIT            reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOINLINE        reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    OUT             reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    VARARG          reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    WHERE           reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LPAREN          reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LITERAL_STRING  reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DOISP           reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LCCT            reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IF              reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RETURN          reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RETURN_AT       reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    CONTINUE        reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    CONTINUE_AT     reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    BREAK           reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    BREAK_AT        reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RCHAVE          reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    INCREMENTO      reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DECREMENTO      reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MINUS           reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PLUS            reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOT             reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    SUSPEND         reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MAIORIGUAL      reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MENORIGUAL      reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MULTIGUAL       reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DIVIGUAL        reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MODIGUAL        reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MENOR           reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PONTO           reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    COLONCOLON      reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    AS              reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    OR              reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    AND             reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DIFERENTE       reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IDENTIDADE      reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IGUALDADE       reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    SEMIDENTIDADE   reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MAIOR           reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IN              reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOT_IN          reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IS              reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOT_IS          reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    ELVIS           reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PONTOPONTO      reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MULT            reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DIVIDE          reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MOD             reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LCHAVE          reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PV              reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    ELSE            reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    $end            reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    COMMA           reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RPAREN          reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RCCT            reduce using rule 102 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)


state 282

    (105) infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .

    FUN             reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    FOR             reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    WHILE           reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DO              reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    ID              reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    CROSSINLINE     reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IMPORT          reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    INIT            reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOINLINE        reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    OUT             reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    VARARG          reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    WHERE           reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LPAREN          reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LITERAL_STRING  reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DOISP           reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LCCT            reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IF              reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RETURN          reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RETURN_AT       reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    CONTINUE        reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    CONTINUE_AT     reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    BREAK           reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    BREAK_AT        reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RCHAVE          reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    INCREMENTO      reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DECREMENTO      reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MINUS           reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PLUS            reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOT             reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    SUSPEND         reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MAIORIGUAL      reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MENORIGUAL      reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MULTIGUAL       reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DIVIGUAL        reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MODIGUAL        reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MENOR           reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PONTO           reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    COLONCOLON      reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    AS              reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    OR              reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    AND             reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DIFERENTE       reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IDENTIDADE      reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IGUALDADE       reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MAIOR           reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IN              reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOT_IN          reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IS              reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOT_IS          reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    ELVIS           reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PONTOPONTO      reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MULT            reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DIVIDE          reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MOD             reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LCHAVE          reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PV              reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    ELSE            reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    $end            reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    COMMA           reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RPAREN          reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RCCT            reduce using rule 105 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)


state 283

    (107) rangeExpression -> additiveExpression PONTOPONTO rangeExpression .

    FUN             reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    FOR             reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    WHILE           reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DO              reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    ID              reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    CROSSINLINE     reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IMPORT          reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    INIT            reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOINLINE        reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    OUT             reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    VARARG          reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    WHERE           reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LPAREN          reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LITERAL_STRING  reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DOISP           reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LCCT            reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IF              reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RETURN          reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RETURN_AT       reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    CONTINUE        reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    CONTINUE_AT     reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    BREAK           reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    BREAK_AT        reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RCHAVE          reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    INCREMENTO      reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DECREMENTO      reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MINUS           reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PLUS            reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOT             reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    SUSPEND         reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MAIORIGUAL      reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MENORIGUAL      reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MULTIGUAL       reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DIVIGUAL        reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MODIGUAL        reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MENOR           reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PONTO           reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    COLONCOLON      reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    AS              reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    OR              reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    AND             reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DIFERENTE       reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IDENTIDADE      reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IGUALDADE       reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    SEMIDENTIDADE   reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MAIOR           reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IN              reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOT_IN          reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IS              reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOT_IS          reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    ELVIS           reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PONTOPONTO      reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MULT            reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DIVIDE          reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MOD             reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LCHAVE          reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PV              reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    ELSE            reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    $end            reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    COMMA           reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RPAREN          reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RCCT            reduce using rule 107 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)


state 284

    (109) additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .

    FUN             reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    FOR             reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    WHILE           reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DO              reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    ID              reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    CROSSINLINE     reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IMPORT          reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    INIT            reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOINLINE        reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    OUT             reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    VARARG          reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    WHERE           reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LPAREN          reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LITERAL_STRING  reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DOISP           reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LCCT            reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IF              reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RETURN          reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RETURN_AT       reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    CONTINUE        reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    CONTINUE_AT     reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    BREAK           reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    BREAK_AT        reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RCHAVE          reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    INCREMENTO      reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DECREMENTO      reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MINUS           reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PLUS            reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOT             reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    SUSPEND         reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MAIORIGUAL      reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MENORIGUAL      reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MULTIGUAL       reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DIVIGUAL        reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MODIGUAL        reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MENOR           reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PONTO           reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    COLONCOLON      reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    AS              reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    OR              reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    AND             reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DIFERENTE       reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IDENTIDADE      reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IGUALDADE       reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    SEMIDENTIDADE   reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MAIOR           reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IN              reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOT_IN          reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IS              reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOT_IS          reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    ELVIS           reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PONTOPONTO      reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MULT            reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DIVIDE          reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MOD             reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LCHAVE          reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PV              reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    ELSE            reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    $end            reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    COMMA           reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RPAREN          reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RCCT            reduce using rule 109 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)


state 285

    (111) multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .

    FUN             reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    FOR             reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    WHILE           reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DO              reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    ID              reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    CROSSINLINE     reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IMPORT          reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    INIT            reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOINLINE        reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    OUT             reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    VARARG          reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    WHERE           reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LPAREN          reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DOISP           reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LCCT            reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IF              reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RETURN          reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RETURN_AT       reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    CONTINUE        reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    BREAK           reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    BREAK_AT        reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RCHAVE          reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    INCREMENTO      reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DECREMENTO      reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MINUS           reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PLUS            reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOT             reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    SUSPEND         reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MENORIGUAL      reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MULTIGUAL       reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DIVIGUAL        reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MODIGUAL        reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MENOR           reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PONTO           reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    COLONCOLON      reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    AS              reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    OR              reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    AND             reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DIFERENTE       reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IDENTIDADE      reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IGUALDADE       reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MAIOR           reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IN              reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOT_IN          reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IS              reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOT_IS          reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    ELVIS           reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PONTOPONTO      reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MULT            reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DIVIDE          reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MOD             reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LCHAVE          reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PV              reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    ELSE            reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    $end            reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    COMMA           reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RPAREN          reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RCCT            reduce using rule 111 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)


state 286

    (113) asExpression -> prefixUnaryExpression asOperator type .

    FUN             reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    FOR             reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    WHILE           reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    DO              reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    ID              reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    CROSSINLINE     reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    IMPORT          reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    INIT            reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    NOINLINE        reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    OUT             reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    VARARG          reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    WHERE           reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    LPAREN          reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    LITERAL_STRING  reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    DOISP           reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    LCCT            reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    IF              reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN          reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN_AT       reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE        reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE_AT     reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK           reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK_AT        reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    RCHAVE          reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    INCREMENTO      reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    DECREMENTO      reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    MINUS           reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    PLUS            reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT             reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    SUSPEND         reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIORIGUAL      reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    MENORIGUAL      reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    MULTIGUAL       reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIGUAL        reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    MODIGUAL        reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOR           reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTO           reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    COLONCOLON      reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    AS              reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    OR              reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    AND             reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    DIFERENTE       reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    IDENTIDADE      reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    IGUALDADE       reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    SEMIDENTIDADE   reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIOR           reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    IN              reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IN          reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    IS              reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IS          reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    ELVIS           reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTOPONTO      reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    MULT            reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIDE          reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    MOD             reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    LCHAVE          reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    PV              reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    ELSE            reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    $end            reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    COMMA           reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    RPAREN          reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)
    RCCT            reduce using rule 113 (asExpression -> prefixUnaryExpression asOperator type .)


state 287

    (254) asOperator -> AS asOperator .

    SUSPEND         reduce using rule 254 (asOperator -> AS asOperator .)
    LPAREN          reduce using rule 254 (asOperator -> AS asOperator .)
    ID              reduce using rule 254 (asOperator -> AS asOperator .)
    CROSSINLINE     reduce using rule 254 (asOperator -> AS asOperator .)
    IMPORT          reduce using rule 254 (asOperator -> AS asOperator .)
    INIT            reduce using rule 254 (asOperator -> AS asOperator .)
    NOINLINE        reduce using rule 254 (asOperator -> AS asOperator .)
    OUT             reduce using rule 254 (asOperator -> AS asOperator .)
    VARARG          reduce using rule 254 (asOperator -> AS asOperator .)
    WHERE           reduce using rule 254 (asOperator -> AS asOperator .)


state 288

    (172) parenthesizedExpression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 313


state 289

    (188) lambdaLiteral -> RCHAVE ll LCHAVE .

    INCREMENTO      reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DECREMENTO      reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MENOR           reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    LCCT            reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    LPAREN          reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    PONTO           reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    COLONCOLON      reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    RCHAVE          reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    FUN             reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    FOR             reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    WHILE           reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DO              reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    ID              reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    CROSSINLINE     reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IMPORT          reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    INIT            reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NOINLINE        reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    OUT             reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    VARARG          reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    WHERE           reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    LITERAL_STRING  reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DOISP           reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IF              reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    RETURN          reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    RETURN_AT       reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    CONTINUE        reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    CONTINUE_AT     reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    BREAK           reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    BREAK_AT        reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MINUS           reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    PLUS            reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NOT             reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    SUSPEND         reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MAIORIGUAL      reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MENORIGUAL      reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MULTIGUAL       reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DIVIGUAL        reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MODIGUAL        reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    AS              reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    OR              reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    AND             reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DIFERENTE       reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IDENTIDADE      reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IGUALDADE       reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    SEMIDENTIDADE   reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MAIOR           reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IN              reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NOT_IN          reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    IS              reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    NOT_IS          reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    ELVIS           reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    PONTOPONTO      reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MULT            reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    DIVIDE          reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    MOD             reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    LCHAVE          reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    PV              reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    ELSE            reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    $end            reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    COMMA           reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    RPAREN          reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)
    RCCT            reduce using rule 188 (lambdaLiteral -> RCHAVE ll LCHAVE .)


state 290

    (190) ll -> lambdaParameters SETA . statements
    (64) statements -> . statement
    (65) statements -> . statement statements
    (66) statements -> .
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! reduce/reduce conflict for LCHAVE resolved using rule 66 (statements -> .)
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 66 (statements -> .)
    LCHAVE          reduce using rule 66 (statements -> .)
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    statements                     shift and go to state 334
    statement                      shift and go to state 114
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    expression                     shift and go to state 118
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 291

    (191) ll -> SETA statements .

    LCHAVE          reduce using rule 191 (ll -> SETA statements .)


state 292

    (193) lambdaParameters -> lambdaParameter COMMA . lambdaParameters
    (192) lambdaParameters -> . lambdaParameter
    (193) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (194) lambdaParameter -> . variableDeclaration
    (195) lambdaParameter -> . multiVariableDeclaration DOISP type
    (196) lambdaParameter -> . multiVariableDeclaration
    (27) variableDeclaration -> . simpleIdentifier DOISP type
    (28) variableDeclaration -> . simpleIdentifier
    (29) multiVariableDeclaration -> . LPAREN mvd RPAREN
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    LPAREN          shift and go to state 307
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    lambdaParameter                shift and go to state 214
    lambdaParameters               shift and go to state 335
    variableDeclaration            shift and go to state 215
    multiVariableDeclaration       shift and go to state 216
    simpleIdentifier               shift and go to state 310

state 293

    (195) lambdaParameter -> multiVariableDeclaration DOISP . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    type                           shift and go to state 336
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 294

    (27) variableDeclaration -> simpleIdentifier DOISP . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    simpleIdentifier               shift and go to state 44
    type                           shift and go to state 337
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43

state 295

    (29) multiVariableDeclaration -> LPAREN mvd . RPAREN

    RPAREN          shift and go to state 338


state 296

    (30) mvd -> variableDeclaration .
    (31) mvd -> variableDeclaration . COMMA mvd

    RPAREN          reduce using rule 30 (mvd -> variableDeclaration .)
    COMMA           shift and go to state 339


state 297

    (131) directlyAssignableExpression -> simpleIdentifier .
    (27) variableDeclaration -> simpleIdentifier . DOISP type
    (28) variableDeclaration -> simpleIdentifier .
    (165) primaryExpression -> simpleIdentifier .
    (120) label -> simpleIdentifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 28 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 120 (label -> simpleIdentifier .)
  ! shift/reduce conflict for DOISP resolved as shift
  ! reduce/reduce conflict for LCCT resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for MENOR resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for PONTO resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 120 (label -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (variableDeclaration -> simpleIdentifier .)
    DOISP           shift and go to state 294
    COMMA           reduce using rule 28 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 28 (variableDeclaration -> simpleIdentifier .)
    INCREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    MINUS           reduce using rule 120 (label -> simpleIdentifier .)
    PLUS            reduce using rule 120 (label -> simpleIdentifier .)
    NOT             reduce using rule 120 (label -> simpleIdentifier .)
    ID              reduce using rule 120 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 120 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 120 (label -> simpleIdentifier .)
    INIT            reduce using rule 120 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 120 (label -> simpleIdentifier .)
    OUT             reduce using rule 120 (label -> simpleIdentifier .)
    VARARG          reduce using rule 120 (label -> simpleIdentifier .)
    WHERE           reduce using rule 120 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 120 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 120 (label -> simpleIdentifier .)
    LCCT            reduce using rule 120 (label -> simpleIdentifier .)
    IF              reduce using rule 120 (label -> simpleIdentifier .)
    RETURN          reduce using rule 120 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 120 (label -> simpleIdentifier .)
    BREAK           reduce using rule 120 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 120 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 120 (label -> simpleIdentifier .)
    FUN             reduce using rule 120 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 120 (label -> simpleIdentifier .)
    MENOR           reduce using rule 120 (label -> simpleIdentifier .)
    PONTO           reduce using rule 120 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 120 (label -> simpleIdentifier .)
    OR              reduce using rule 120 (label -> simpleIdentifier .)
    AND             reduce using rule 120 (label -> simpleIdentifier .)
    DIFERENTE       reduce using rule 120 (label -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 120 (label -> simpleIdentifier .)
    IGUALDADE       reduce using rule 120 (label -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 120 (label -> simpleIdentifier .)
    MAIOR           reduce using rule 120 (label -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    IN              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IN          reduce using rule 120 (label -> simpleIdentifier .)
    IS              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IS          reduce using rule 120 (label -> simpleIdentifier .)
    ELVIS           reduce using rule 120 (label -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 120 (label -> simpleIdentifier .)
    MULT            reduce using rule 120 (label -> simpleIdentifier .)
    DIVIDE          reduce using rule 120 (label -> simpleIdentifier .)
    MOD             reduce using rule 120 (label -> simpleIdentifier .)
    AS              reduce using rule 120 (label -> simpleIdentifier .)

  ! RPAREN          [ reduce using rule 131 (directlyAssignableExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! MENOR           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! PONTO           [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 165 (primaryExpression -> simpleIdentifier .) ]
  ! DOISP           [ reduce using rule 120 (label -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 120 (label -> simpleIdentifier .) ]


state 298

    (197) anonymousFunction -> FUN af4 parametersWithOptionalType . af3 af1
    (204) af3 -> . DOISP type
    (205) af3 -> .

  ! shift/reduce conflict for DOISP resolved as shift
    DOISP           shift and go to state 341
    ATRIBUICAO      reduce using rule 205 (af3 -> .)
    LCHAVE          reduce using rule 205 (af3 -> .)
    INCREMENTO      reduce using rule 205 (af3 -> .)
    DECREMENTO      reduce using rule 205 (af3 -> .)
    MENOR           reduce using rule 205 (af3 -> .)
    LCCT            reduce using rule 205 (af3 -> .)
    LPAREN          reduce using rule 205 (af3 -> .)
    PONTO           reduce using rule 205 (af3 -> .)
    COLONCOLON      reduce using rule 205 (af3 -> .)
    RCHAVE          reduce using rule 205 (af3 -> .)
    FUN             reduce using rule 205 (af3 -> .)
    FOR             reduce using rule 205 (af3 -> .)
    WHILE           reduce using rule 205 (af3 -> .)
    DO              reduce using rule 205 (af3 -> .)
    ID              reduce using rule 205 (af3 -> .)
    CROSSINLINE     reduce using rule 205 (af3 -> .)
    IMPORT          reduce using rule 205 (af3 -> .)
    INIT            reduce using rule 205 (af3 -> .)
    NOINLINE        reduce using rule 205 (af3 -> .)
    OUT             reduce using rule 205 (af3 -> .)
    VARARG          reduce using rule 205 (af3 -> .)
    WHERE           reduce using rule 205 (af3 -> .)
    LITERAL_STRING  reduce using rule 205 (af3 -> .)
    IF              reduce using rule 205 (af3 -> .)
    RETURN          reduce using rule 205 (af3 -> .)
    RETURN_AT       reduce using rule 205 (af3 -> .)
    CONTINUE        reduce using rule 205 (af3 -> .)
    CONTINUE_AT     reduce using rule 205 (af3 -> .)
    BREAK           reduce using rule 205 (af3 -> .)
    BREAK_AT        reduce using rule 205 (af3 -> .)
    MINUS           reduce using rule 205 (af3 -> .)
    PLUS            reduce using rule 205 (af3 -> .)
    NOT             reduce using rule 205 (af3 -> .)
    SUSPEND         reduce using rule 205 (af3 -> .)
    MAIORIGUAL      reduce using rule 205 (af3 -> .)
    MENORIGUAL      reduce using rule 205 (af3 -> .)
    MULTIGUAL       reduce using rule 205 (af3 -> .)
    DIVIGUAL        reduce using rule 205 (af3 -> .)
    MODIGUAL        reduce using rule 205 (af3 -> .)
    AS              reduce using rule 205 (af3 -> .)
    OR              reduce using rule 205 (af3 -> .)
    AND             reduce using rule 205 (af3 -> .)
    DIFERENTE       reduce using rule 205 (af3 -> .)
    IDENTIDADE      reduce using rule 205 (af3 -> .)
    IGUALDADE       reduce using rule 205 (af3 -> .)
    SEMIDENTIDADE   reduce using rule 205 (af3 -> .)
    MAIOR           reduce using rule 205 (af3 -> .)
    IN              reduce using rule 205 (af3 -> .)
    NOT_IN          reduce using rule 205 (af3 -> .)
    IS              reduce using rule 205 (af3 -> .)
    NOT_IS          reduce using rule 205 (af3 -> .)
    ELVIS           reduce using rule 205 (af3 -> .)
    PONTOPONTO      reduce using rule 205 (af3 -> .)
    MULT            reduce using rule 205 (af3 -> .)
    DIVIDE          reduce using rule 205 (af3 -> .)
    MOD             reduce using rule 205 (af3 -> .)
    PV              reduce using rule 205 (af3 -> .)
    ELSE            reduce using rule 205 (af3 -> .)
    $end            reduce using rule 205 (af3 -> .)
    COMMA           reduce using rule 205 (af3 -> .)
    RPAREN          reduce using rule 205 (af3 -> .)
    RCCT            reduce using rule 205 (af3 -> .)

  ! DOISP           [ reduce using rule 205 (af3 -> .) ]

    af3                            shift and go to state 340

state 299

    (177) parametersWithOptionalType -> LPAREN . pwot RPAREN
    (178) pwot -> . parameterWithOptionalType
    (179) pwot -> . parameterWithOptionalType COMMA pwot COMMA
    (180) pwot -> .
    (181) parameterWithOptionalType -> . parameterModifiers simpleIdentifier DOISP type
    (182) parameterWithOptionalType -> . simpleIdentifier DOISP type
    (183) parameterWithOptionalType -> . parameterModifiers simpleIdentifier
    (184) parameterWithOptionalType -> . simpleIdentifier
    (185) parameterModifiers -> . VARARG
    (186) parameterModifiers -> . NOINLINE
    (187) parameterModifiers -> . CROSSINLINE
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    RPAREN          reduce using rule 180 (pwot -> .)
    VARARG          shift and go to state 346
    NOINLINE        shift and go to state 347
    CROSSINLINE     shift and go to state 348
    ID              shift and go to state 15
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    OUT             shift and go to state 20
    WHERE           shift and go to state 22

    pwot                           shift and go to state 342
    parameterWithOptionalType      shift and go to state 343
    parameterModifiers             shift and go to state 344
    simpleIdentifier               shift and go to state 345

state 300

    (206) af4 -> type PONTO .

    LPAREN          reduce using rule 206 (af4 -> type PONTO .)


state 301

    (86) assignment -> directlyAssignableExpression IGUALDADE expression .

    FUN             reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    FOR             reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    WHILE           reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DO              reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    ID              reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    CROSSINLINE     reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IMPORT          reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    INIT            reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NOINLINE        reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    OUT             reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    VARARG          reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    WHERE           reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    LPAREN          reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    LITERAL_STRING  reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DOISP           reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    LCCT            reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IF              reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    RETURN          reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    RETURN_AT       reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    CONTINUE        reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    CONTINUE_AT     reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    BREAK           reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    BREAK_AT        reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    RCHAVE          reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    INCREMENTO      reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DECREMENTO      reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MINUS           reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    PLUS            reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NOT             reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    SUSPEND         reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MAIORIGUAL      reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MENORIGUAL      reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MULTIGUAL       reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DIVIGUAL        reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MODIGUAL        reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MENOR           reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    PONTO           reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    COLONCOLON      reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    AS              reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    OR              reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    AND             reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DIFERENTE       reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IDENTIDADE      reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IGUALDADE       reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    SEMIDENTIDADE   reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MAIOR           reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IN              reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NOT_IN          reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    IS              reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    NOT_IS          reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    ELVIS           reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    PONTOPONTO      reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MULT            reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    DIVIDE          reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    MOD             reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    LCHAVE          reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    PV              reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    ELSE            reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    $end            reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    COMMA           reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    RPAREN          reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)
    RCCT            reduce using rule 86 (assignment -> directlyAssignableExpression IGUALDADE expression .)


state 302

    (87) assignment -> assignableExpression assignmentAndOperator expression .

    FUN             reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    FOR             reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHILE           reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    DO              reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    ID              reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    CROSSINLINE     reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    IMPORT          reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    INIT            reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOINLINE        reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    OUT             reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    VARARG          reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    WHERE           reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    LPAREN          reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    LITERAL_STRING  reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    DOISP           reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    LCCT            reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    IF              reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    RETURN          reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    RETURN_AT       reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONTINUE        reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    CONTINUE_AT     reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    BREAK           reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    BREAK_AT        reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    RCHAVE          reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    INCREMENTO      reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    DECREMENTO      reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    MINUS           reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    PLUS            reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT             reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    SUSPEND         reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAIORIGUAL      reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENORIGUAL      reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    MULTIGUAL       reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIVIGUAL        reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    MODIGUAL        reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    MENOR           reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    PONTO           reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    COLONCOLON      reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    AS              reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    OR              reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    AND             reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIFERENTE       reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    IDENTIDADE      reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    IGUALDADE       reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    SEMIDENTIDADE   reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    MAIOR           reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    IN              reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT_IN          reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    IS              reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    NOT_IS          reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    ELVIS           reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    PONTOPONTO      reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    MULT            reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    DIVIDE          reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    MOD             reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    LCHAVE          reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    PV              reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    ELSE            reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    $end            reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    COMMA           reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    RPAREN          reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)
    RCCT            reduce using rule 87 (assignment -> assignableExpression assignmentAndOperator expression .)


state 303

    (140) indexingSuffix -> LCCT isuf . RCCT

    RCCT            shift and go to state 349


state 304

    (141) isuf -> expression .
    (142) isuf -> expression . COMMA isuf

    RCCT            reduce using rule 141 (isuf -> expression .)
    COMMA           shift and go to state 350


state 305

    (144) navigationSuffix -> memberAccessOperator simpleIdentifier . CLASS

    CLASS           shift and go to state 351


state 306

    (145) navigationSuffix -> memberAccessOperator parenthesizedExpression . CLASS

    CLASS           shift and go to state 352


state 307

    (29) multiVariableDeclaration -> LPAREN . mvd RPAREN
    (30) mvd -> . variableDeclaration
    (31) mvd -> . variableDeclaration COMMA mvd
    (32) mvd -> .
    (27) variableDeclaration -> . simpleIdentifier DOISP type
    (28) variableDeclaration -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    RPAREN          reduce using rule 32 (mvd -> .)
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    mvd                            shift and go to state 295
    variableDeclaration            shift and go to state 296
    simpleIdentifier               shift and go to state 310

state 308

    (78) forStatement_MD -> FOR LPAREN multiVariableDeclaration . IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> FOR LPAREN multiVariableDeclaration . IN expression RPAREN

    IN              shift and go to state 353


state 309

    (80) forStatement_VD -> FOR LPAREN variableDeclaration . IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> FOR LPAREN variableDeclaration . IN expression RPAREN

    IN              shift and go to state 354


state 310

    (27) variableDeclaration -> simpleIdentifier . DOISP type
    (28) variableDeclaration -> simpleIdentifier .

    DOISP           shift and go to state 294
    IN              reduce using rule 28 (variableDeclaration -> simpleIdentifier .)
    COMMA           reduce using rule 28 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 28 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 28 (variableDeclaration -> simpleIdentifier .)


state 311

    (133) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .

    IGUALDADE       reduce using rule 133 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)
    RPAREN          reduce using rule 133 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)


state 312

    (136) parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .

    MAIORIGUAL      reduce using rule 136 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MENORIGUAL      reduce using rule 136 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MULTIGUAL       reduce using rule 136 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    DIVIGUAL        reduce using rule 136 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    MODIGUAL        reduce using rule 136 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)
    RPAREN          reduce using rule 136 (parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN .)


state 313

    (172) parenthesizedExpression -> LPAREN expression RPAREN .

    INCREMENTO      reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCCT            reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTO           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FUN             reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DO              reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ID              reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    INIT            reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OUT             reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VARARG          reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHERE           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DOISP           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IF              reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AS              reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OR              reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AND             reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IN              reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IS              reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELVIS           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULT            reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PV              reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    $end            reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCCT            reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 172 (parenthesizedExpression -> LPAREN expression RPAREN .)


state 314

    (82) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (83) whileStatement -> WHILE LPAREN expression . RPAREN PV

    RPAREN          shift and go to state 355


state 315

    (84) doWhileStatement -> DO controlStructureBody WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 356


state 316

    (85) doWhileStatement -> DO WHILE LPAREN . expression RPAREN
    (82) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (83) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 357
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 317

    (124) posue -> postfixUnarySuffix posue .

    MENOR           reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    LCCT            reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    PONTO           reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    COLONCOLON      reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    FUN             reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    FOR             reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    WHILE           reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    DO              reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    ID              reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    CROSSINLINE     reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    IMPORT          reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    INIT            reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    NOINLINE        reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    OUT             reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    VARARG          reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    WHERE           reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    LPAREN          reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    LITERAL_STRING  reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    DOISP           reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    IF              reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    RETURN          reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    RETURN_AT       reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    CONTINUE        reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    CONTINUE_AT     reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    BREAK           reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    BREAK_AT        reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    RCHAVE          reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    INCREMENTO      reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    DECREMENTO      reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    MINUS           reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    PLUS            reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    NOT             reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    SUSPEND         reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    MAIORIGUAL      reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    MENORIGUAL      reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    MULTIGUAL       reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    DIVIGUAL        reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    MODIGUAL        reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    AS              reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    OR              reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    AND             reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    DIFERENTE       reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    IDENTIDADE      reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    IGUALDADE       reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    SEMIDENTIDADE   reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    MAIOR           reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    IN              reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    NOT_IN          reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    IS              reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    NOT_IS          reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    ELVIS           reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    PONTOPONTO      reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    MULT            reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    DIVIDE          reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    MOD             reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    LCHAVE          reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    PV              reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    ELSE            reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    $end            reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    COMMA           reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    RPAREN          reduce using rule 124 (posue -> postfixUnarySuffix posue .)
    RCCT            reduce using rule 124 (posue -> postfixUnarySuffix posue .)


state 318

    (146) callSuffix -> typeArguments valueArguments . annotatedLambda
    (150) callSuffix -> typeArguments valueArguments .
    (152) annotatedLambda -> . lambdaLiteral
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE

  ! shift/reduce conflict for RCHAVE resolved as shift
    INCREMENTO      reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    DECREMENTO      reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    MENOR           reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    LCCT            reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    LPAREN          reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    PONTO           reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    COLONCOLON      reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    FUN             reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    FOR             reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    WHILE           reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    DO              reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    ID              reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    CROSSINLINE     reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    IMPORT          reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    INIT            reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    NOINLINE        reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    OUT             reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    VARARG          reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    WHERE           reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    LITERAL_STRING  reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    DOISP           reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    IF              reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    RETURN          reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    RETURN_AT       reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    CONTINUE        reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    CONTINUE_AT     reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    BREAK           reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    BREAK_AT        reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    MINUS           reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    PLUS            reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    NOT             reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    SUSPEND         reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    MAIORIGUAL      reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    MENORIGUAL      reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    MULTIGUAL       reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    DIVIGUAL        reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    MODIGUAL        reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    AS              reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    OR              reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    AND             reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    DIFERENTE       reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    IDENTIDADE      reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    IGUALDADE       reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    SEMIDENTIDADE   reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    MAIOR           reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    IN              reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    NOT_IN          reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    IS              reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    NOT_IS          reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    ELVIS           reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    PONTOPONTO      reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    MULT            reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    DIVIDE          reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    MOD             reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    LCHAVE          reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    PV              reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    ELSE            reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    $end            reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    COMMA           reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    RPAREN          reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    RCCT            reduce using rule 150 (callSuffix -> typeArguments valueArguments .)
    RCHAVE          shift and go to state 113

  ! RCHAVE          [ reduce using rule 150 (callSuffix -> typeArguments valueArguments .) ]

    annotatedLambda                shift and go to state 358
    lambdaLiteral                  shift and go to state 259

state 319

    (148) callSuffix -> typeArguments annotatedLambda .

    INCREMENTO      reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    DECREMENTO      reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    MENOR           reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    LCCT            reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    LPAREN          reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    PONTO           reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    COLONCOLON      reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    RCHAVE          reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    FUN             reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    FOR             reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    WHILE           reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    DO              reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    ID              reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    IMPORT          reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    INIT            reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    NOINLINE        reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    OUT             reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    VARARG          reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    WHERE           reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    DOISP           reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    IF              reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    RETURN          reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    RETURN_AT       reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    CONTINUE        reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    BREAK           reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    BREAK_AT        reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    MINUS           reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    PLUS            reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    NOT             reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    SUSPEND         reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    MODIGUAL        reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    AS              reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    OR              reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    AND             reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    DIFERENTE       reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    IGUALDADE       reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    MAIOR           reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    IN              reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    NOT_IN          reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    IS              reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    NOT_IS          reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    ELVIS           reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    MULT            reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    DIVIDE          reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    MOD             reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    LCHAVE          reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    PV              reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    ELSE            reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    $end            reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    COMMA           reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    RPAREN          reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)
    RCCT            reduce using rule 148 (callSuffix -> typeArguments annotatedLambda .)


state 320

    (147) callSuffix -> valueArguments annotatedLambda .

    INCREMENTO      reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    DECREMENTO      reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    MENOR           reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    LCCT            reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    LPAREN          reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    PONTO           reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    COLONCOLON      reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    RCHAVE          reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    FUN             reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    FOR             reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    WHILE           reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    DO              reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    ID              reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    IMPORT          reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    INIT            reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    NOINLINE        reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    OUT             reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    VARARG          reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    WHERE           reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    DOISP           reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    IF              reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    RETURN          reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    RETURN_AT       reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    CONTINUE        reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    BREAK           reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    BREAK_AT        reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    MINUS           reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    PLUS            reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    NOT             reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    SUSPEND         reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    MODIGUAL        reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    AS              reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    OR              reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    AND             reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    DIFERENTE       reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    IGUALDADE       reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    MAIOR           reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    IN              reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    NOT_IN          reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    IS              reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    NOT_IS          reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    ELVIS           reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    MULT            reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    DIVIDE          reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    MOD             reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    LCHAVE          reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    PV              reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    ELSE            reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    $end            reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    COMMA           reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    RPAREN          reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)
    RCCT            reduce using rule 147 (callSuffix -> valueArguments annotatedLambda .)


state 321

    (157) valueArguments -> LPAREN RPAREN .

    RCHAVE          reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    MENOR           reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    LCCT            reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    LPAREN          reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    PONTO           reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    FUN             reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    FOR             reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    WHILE           reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    DO              reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    ID              reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    IMPORT          reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    INIT            reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    OUT             reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    VARARG          reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    WHERE           reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    DOISP           reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    IF              reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    RETURN          reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    BREAK           reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    MINUS           reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    PLUS            reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    NOT             reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    AS              reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    OR              reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    AND             reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    MAIOR           reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    IN              reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    IS              reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    ELVIS           reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    MULT            reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    MOD             reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    PV              reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    ELSE            reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    $end            reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    COMMA           reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    RPAREN          reduce using rule 157 (valueArguments -> LPAREN RPAREN .)
    RCCT            reduce using rule 157 (valueArguments -> LPAREN RPAREN .)


state 322

    (158) valueArguments -> LPAREN vas . RPAREN

    RPAREN          shift and go to state 359


state 323

    (159) vas -> valueArgument .
    (160) vas -> valueArgument . COMMA vas

    RPAREN          reduce using rule 159 (vas -> valueArgument .)
    COMMA           shift and go to state 360


state 324

    (161) valueArgument -> simpleIdentifier . IGUALDADE MULT expression
    (162) valueArgument -> simpleIdentifier . IGUALDADE expression
    (120) label -> simpleIdentifier .

  ! shift/reduce conflict for IGUALDADE resolved as shift
    IGUALDADE       shift and go to state 361
    INCREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 120 (label -> simpleIdentifier .)
    MINUS           reduce using rule 120 (label -> simpleIdentifier .)
    PLUS            reduce using rule 120 (label -> simpleIdentifier .)
    NOT             reduce using rule 120 (label -> simpleIdentifier .)
    ID              reduce using rule 120 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 120 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 120 (label -> simpleIdentifier .)
    INIT            reduce using rule 120 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 120 (label -> simpleIdentifier .)
    OUT             reduce using rule 120 (label -> simpleIdentifier .)
    VARARG          reduce using rule 120 (label -> simpleIdentifier .)
    WHERE           reduce using rule 120 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 120 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 120 (label -> simpleIdentifier .)
    DOISP           reduce using rule 120 (label -> simpleIdentifier .)
    LCCT            reduce using rule 120 (label -> simpleIdentifier .)
    IF              reduce using rule 120 (label -> simpleIdentifier .)
    RETURN          reduce using rule 120 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 120 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 120 (label -> simpleIdentifier .)
    BREAK           reduce using rule 120 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 120 (label -> simpleIdentifier .)
    RCHAVE          reduce using rule 120 (label -> simpleIdentifier .)
    FUN             reduce using rule 120 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 120 (label -> simpleIdentifier .)
    MENOR           reduce using rule 120 (label -> simpleIdentifier .)
    PONTO           reduce using rule 120 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 120 (label -> simpleIdentifier .)
    OR              reduce using rule 120 (label -> simpleIdentifier .)
    AND             reduce using rule 120 (label -> simpleIdentifier .)
    DIFERENTE       reduce using rule 120 (label -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 120 (label -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 120 (label -> simpleIdentifier .)
    MAIOR           reduce using rule 120 (label -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 120 (label -> simpleIdentifier .)
    IN              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IN          reduce using rule 120 (label -> simpleIdentifier .)
    IS              reduce using rule 120 (label -> simpleIdentifier .)
    NOT_IS          reduce using rule 120 (label -> simpleIdentifier .)
    ELVIS           reduce using rule 120 (label -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 120 (label -> simpleIdentifier .)
    MULT            reduce using rule 120 (label -> simpleIdentifier .)
    DIVIDE          reduce using rule 120 (label -> simpleIdentifier .)
    MOD             reduce using rule 120 (label -> simpleIdentifier .)
    AS              reduce using rule 120 (label -> simpleIdentifier .)
    COMMA           reduce using rule 120 (label -> simpleIdentifier .)
    RPAREN          reduce using rule 120 (label -> simpleIdentifier .)

  ! IGUALDADE       [ reduce using rule 120 (label -> simpleIdentifier .) ]


state 325

    (163) valueArgument -> expression .

    COMMA           reduce using rule 163 (valueArgument -> expression .)
    RPAREN          reduce using rule 163 (valueArgument -> expression .)


state 326

    (202) af -> typeConstraint COMMA . af
    (201) af -> . typeConstraint
    (202) af -> . typeConstraint COMMA af
    (203) typeConstraint -> . simpleIdentifier DOISP type
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    typeConstraint                 shift and go to state 261
    af                             shift and go to state 362
    simpleIdentifier               shift and go to state 262

state 327

    (203) typeConstraint -> simpleIdentifier DOISP . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    simpleIdentifier               shift and go to state 44
    type                           shift and go to state 363
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43

state 328

    (227) callableReference -> receiverType DOISP DOISP . simpleIdentifier
    (229) callableReference -> receiverType DOISP DOISP . CLASS
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    CLASS           shift and go to state 365
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    simpleIdentifier               shift and go to state 364

state 329

    (228) callableReference -> DOISP DOISP simpleIdentifier .

    INCREMENTO      reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    DECREMENTO      reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    MENOR           reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    LCCT            reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    LPAREN          reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    PONTO           reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    COLONCOLON      reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    RCHAVE          reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    FUN             reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    FOR             reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    WHILE           reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    DO              reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    ID              reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    CROSSINLINE     reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    IMPORT          reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    INIT            reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    NOINLINE        reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    OUT             reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    VARARG          reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    WHERE           reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    LITERAL_STRING  reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    DOISP           reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    IF              reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    RETURN          reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    RETURN_AT       reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    CONTINUE        reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    CONTINUE_AT     reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    BREAK           reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    BREAK_AT        reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    MINUS           reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    PLUS            reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    NOT             reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    SUSPEND         reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    MAIORIGUAL      reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    MENORIGUAL      reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    MULTIGUAL       reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    DIVIGUAL        reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    MODIGUAL        reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    AS              reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    OR              reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    AND             reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    DIFERENTE       reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    IDENTIDADE      reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    IGUALDADE       reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    MAIOR           reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    IN              reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    NOT_IN          reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    IS              reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    NOT_IS          reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    ELVIS           reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    PONTOPONTO      reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    MULT            reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    DIVIDE          reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    MOD             reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    LCHAVE          reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    PV              reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    ELSE            reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    $end            reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    COMMA           reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    RPAREN          reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)
    RCCT            reduce using rule 228 (callableReference -> DOISP DOISP simpleIdentifier .)


state 330

    (230) callableReference -> DOISP DOISP CLASS .

    INCREMENTO      reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    DECREMENTO      reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    MENOR           reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    LCCT            reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    LPAREN          reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    PONTO           reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    COLONCOLON      reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    RCHAVE          reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    FUN             reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    FOR             reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    WHILE           reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    DO              reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    ID              reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    CROSSINLINE     reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    IMPORT          reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    INIT            reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    NOINLINE        reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    OUT             reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    VARARG          reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    WHERE           reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    LITERAL_STRING  reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    DOISP           reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    IF              reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    RETURN          reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    RETURN_AT       reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    CONTINUE        reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    CONTINUE_AT     reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    BREAK           reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    BREAK_AT        reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    MINUS           reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    PLUS            reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    NOT             reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    SUSPEND         reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    MAIORIGUAL      reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    MENORIGUAL      reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    MULTIGUAL       reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    DIVIGUAL        reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    MODIGUAL        reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    AS              reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    OR              reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    AND             reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    DIFERENTE       reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    IDENTIDADE      reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    IGUALDADE       reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    SEMIDENTIDADE   reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    MAIOR           reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    IN              reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    NOT_IN          reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    IS              reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    NOT_IS          reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    ELVIS           reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    PONTOPONTO      reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    MULT            reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    DIVIDE          reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    MOD             reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    LCHAVE          reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    PV              reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    ELSE            reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    $end            reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    COMMA           reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    RPAREN          reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)
    RCCT            reduce using rule 230 (callableReference -> DOISP DOISP CLASS .)


state 331

    (173) collectionLiteral -> LCCT cl RCCT .

    INCREMENTO      reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    DECREMENTO      reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    MENOR           reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    LCCT            reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    LPAREN          reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    PONTO           reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    COLONCOLON      reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    RCHAVE          reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    FUN             reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    FOR             reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    WHILE           reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    DO              reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    ID              reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    CROSSINLINE     reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    IMPORT          reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    INIT            reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    NOINLINE        reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    OUT             reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    VARARG          reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    WHERE           reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    LITERAL_STRING  reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    DOISP           reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    IF              reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    RETURN          reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    RETURN_AT       reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    CONTINUE        reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    CONTINUE_AT     reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    BREAK           reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    BREAK_AT        reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    MINUS           reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    PLUS            reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    NOT             reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    SUSPEND         reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    MAIORIGUAL      reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    MENORIGUAL      reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    MULTIGUAL       reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    DIVIGUAL        reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    MODIGUAL        reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    AS              reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    OR              reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    AND             reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    DIFERENTE       reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    IDENTIDADE      reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    IGUALDADE       reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    SEMIDENTIDADE   reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    MAIOR           reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    IN              reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    NOT_IN          reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    IS              reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    NOT_IS          reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    ELVIS           reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    PONTOPONTO      reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    MULT            reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    DIVIDE          reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    MOD             reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    LCHAVE          reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    PV              reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    ELSE            reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    $end            reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    COMMA           reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    RPAREN          reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)
    RCCT            reduce using rule 173 (collectionLiteral -> LCCT cl RCCT .)


state 332

    (176) cl -> expression COMMA . cl
    (175) cl -> . expression
    (176) cl -> . expression COMMA cl
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 267
    cl                             shift and go to state 366
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 333

    (210) ifExpression -> IF LPAREN expression . RPAREN controlStructureBody PV
    (211) ifExpression -> IF LPAREN expression . RPAREN controlStructureBody
    (212) ifExpression -> IF LPAREN expression . RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> IF LPAREN expression . RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> IF LPAREN expression . RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> IF LPAREN expression . RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> IF LPAREN expression . RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> IF LPAREN expression . RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> IF LPAREN expression . RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> IF LPAREN expression . RPAREN ELSE controlStructureBody

    RPAREN          shift and go to state 367


state 334

    (190) ll -> lambdaParameters SETA statements .

    LCHAVE          reduce using rule 190 (ll -> lambdaParameters SETA statements .)


state 335

    (193) lambdaParameters -> lambdaParameter COMMA lambdaParameters .

    SETA            reduce using rule 193 (lambdaParameters -> lambdaParameter COMMA lambdaParameters .)


state 336

    (195) lambdaParameter -> multiVariableDeclaration DOISP type .

    COMMA           reduce using rule 195 (lambdaParameter -> multiVariableDeclaration DOISP type .)
    SETA            reduce using rule 195 (lambdaParameter -> multiVariableDeclaration DOISP type .)


state 337

    (27) variableDeclaration -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 27 (variableDeclaration -> simpleIdentifier DOISP type .)
    SETA            reduce using rule 27 (variableDeclaration -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 27 (variableDeclaration -> simpleIdentifier DOISP type .)
    IN              reduce using rule 27 (variableDeclaration -> simpleIdentifier DOISP type .)


state 338

    (29) multiVariableDeclaration -> LPAREN mvd RPAREN .

    DOISP           reduce using rule 29 (multiVariableDeclaration -> LPAREN mvd RPAREN .)
    COMMA           reduce using rule 29 (multiVariableDeclaration -> LPAREN mvd RPAREN .)
    SETA            reduce using rule 29 (multiVariableDeclaration -> LPAREN mvd RPAREN .)
    IN              reduce using rule 29 (multiVariableDeclaration -> LPAREN mvd RPAREN .)


state 339

    (31) mvd -> variableDeclaration COMMA . mvd
    (30) mvd -> . variableDeclaration
    (31) mvd -> . variableDeclaration COMMA mvd
    (32) mvd -> .
    (27) variableDeclaration -> . simpleIdentifier DOISP type
    (28) variableDeclaration -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    RPAREN          reduce using rule 32 (mvd -> .)
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    variableDeclaration            shift and go to state 296
    mvd                            shift and go to state 368
    simpleIdentifier               shift and go to state 310

state 340

    (197) anonymousFunction -> FUN af4 parametersWithOptionalType af3 . af1
    (198) af1 -> . functionBody
    (199) af1 -> .
    (18) functionBody -> . block
    (19) functionBody -> . ATRIBUICAO expression
    (73) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 199 (af1 -> .)
    FOR             reduce using rule 199 (af1 -> .)
    WHILE           reduce using rule 199 (af1 -> .)
    DO              reduce using rule 199 (af1 -> .)
    ID              reduce using rule 199 (af1 -> .)
    CROSSINLINE     reduce using rule 199 (af1 -> .)
    IMPORT          reduce using rule 199 (af1 -> .)
    INIT            reduce using rule 199 (af1 -> .)
    NOINLINE        reduce using rule 199 (af1 -> .)
    OUT             reduce using rule 199 (af1 -> .)
    VARARG          reduce using rule 199 (af1 -> .)
    WHERE           reduce using rule 199 (af1 -> .)
    LPAREN          reduce using rule 199 (af1 -> .)
    LITERAL_STRING  reduce using rule 199 (af1 -> .)
    DOISP           reduce using rule 199 (af1 -> .)
    LCCT            reduce using rule 199 (af1 -> .)
    IF              reduce using rule 199 (af1 -> .)
    RETURN          reduce using rule 199 (af1 -> .)
    RETURN_AT       reduce using rule 199 (af1 -> .)
    CONTINUE        reduce using rule 199 (af1 -> .)
    CONTINUE_AT     reduce using rule 199 (af1 -> .)
    BREAK           reduce using rule 199 (af1 -> .)
    BREAK_AT        reduce using rule 199 (af1 -> .)
    RCHAVE          reduce using rule 199 (af1 -> .)
    INCREMENTO      reduce using rule 199 (af1 -> .)
    DECREMENTO      reduce using rule 199 (af1 -> .)
    MINUS           reduce using rule 199 (af1 -> .)
    PLUS            reduce using rule 199 (af1 -> .)
    NOT             reduce using rule 199 (af1 -> .)
    SUSPEND         reduce using rule 199 (af1 -> .)
    MAIORIGUAL      reduce using rule 199 (af1 -> .)
    MENORIGUAL      reduce using rule 199 (af1 -> .)
    MULTIGUAL       reduce using rule 199 (af1 -> .)
    DIVIGUAL        reduce using rule 199 (af1 -> .)
    MODIGUAL        reduce using rule 199 (af1 -> .)
    MENOR           reduce using rule 199 (af1 -> .)
    PONTO           reduce using rule 199 (af1 -> .)
    COLONCOLON      reduce using rule 199 (af1 -> .)
    AS              reduce using rule 199 (af1 -> .)
    OR              reduce using rule 199 (af1 -> .)
    AND             reduce using rule 199 (af1 -> .)
    DIFERENTE       reduce using rule 199 (af1 -> .)
    IDENTIDADE      reduce using rule 199 (af1 -> .)
    IGUALDADE       reduce using rule 199 (af1 -> .)
    SEMIDENTIDADE   reduce using rule 199 (af1 -> .)
    MAIOR           reduce using rule 199 (af1 -> .)
    IN              reduce using rule 199 (af1 -> .)
    NOT_IN          reduce using rule 199 (af1 -> .)
    IS              reduce using rule 199 (af1 -> .)
    NOT_IS          reduce using rule 199 (af1 -> .)
    ELVIS           reduce using rule 199 (af1 -> .)
    PONTOPONTO      reduce using rule 199 (af1 -> .)
    MULT            reduce using rule 199 (af1 -> .)
    DIVIDE          reduce using rule 199 (af1 -> .)
    MOD             reduce using rule 199 (af1 -> .)
    PV              reduce using rule 199 (af1 -> .)
    ELSE            reduce using rule 199 (af1 -> .)
    $end            reduce using rule 199 (af1 -> .)
    COMMA           reduce using rule 199 (af1 -> .)
    RPAREN          reduce using rule 199 (af1 -> .)
    RCCT            reduce using rule 199 (af1 -> .)
    ATRIBUICAO      shift and go to state 68
    LCHAVE          shift and go to state 69

  ! LCHAVE          [ reduce using rule 199 (af1 -> .) ]

    af1                            shift and go to state 369
    functionBody                   shift and go to state 370
    block                          shift and go to state 67

state 341

    (204) af3 -> DOISP . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    type                           shift and go to state 371
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43
    simpleIdentifier               shift and go to state 44

state 342

    (177) parametersWithOptionalType -> LPAREN pwot . RPAREN

    RPAREN          shift and go to state 372


state 343

    (178) pwot -> parameterWithOptionalType .
    (179) pwot -> parameterWithOptionalType . COMMA pwot COMMA

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 178 (pwot -> parameterWithOptionalType .)
    COMMA           shift and go to state 373

  ! COMMA           [ reduce using rule 178 (pwot -> parameterWithOptionalType .) ]


state 344

    (181) parameterWithOptionalType -> parameterModifiers . simpleIdentifier DOISP type
    (183) parameterWithOptionalType -> parameterModifiers . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    simpleIdentifier               shift and go to state 374

state 345

    (182) parameterWithOptionalType -> simpleIdentifier . DOISP type
    (184) parameterWithOptionalType -> simpleIdentifier .

    DOISP           shift and go to state 375
    COMMA           reduce using rule 184 (parameterWithOptionalType -> simpleIdentifier .)
    RPAREN          reduce using rule 184 (parameterWithOptionalType -> simpleIdentifier .)


state 346

    (185) parameterModifiers -> VARARG .
    (272) simpleIdentifier -> VARARG .

    ID              reduce using rule 185 (parameterModifiers -> VARARG .)
    CROSSINLINE     reduce using rule 185 (parameterModifiers -> VARARG .)
    IMPORT          reduce using rule 185 (parameterModifiers -> VARARG .)
    INIT            reduce using rule 185 (parameterModifiers -> VARARG .)
    NOINLINE        reduce using rule 185 (parameterModifiers -> VARARG .)
    OUT             reduce using rule 185 (parameterModifiers -> VARARG .)
    VARARG          reduce using rule 185 (parameterModifiers -> VARARG .)
    WHERE           reduce using rule 185 (parameterModifiers -> VARARG .)
    DOISP           reduce using rule 272 (simpleIdentifier -> VARARG .)
    COMMA           reduce using rule 272 (simpleIdentifier -> VARARG .)
    RPAREN          reduce using rule 272 (simpleIdentifier -> VARARG .)


state 347

    (186) parameterModifiers -> NOINLINE .
    (270) simpleIdentifier -> NOINLINE .

    ID              reduce using rule 186 (parameterModifiers -> NOINLINE .)
    CROSSINLINE     reduce using rule 186 (parameterModifiers -> NOINLINE .)
    IMPORT          reduce using rule 186 (parameterModifiers -> NOINLINE .)
    INIT            reduce using rule 186 (parameterModifiers -> NOINLINE .)
    NOINLINE        reduce using rule 186 (parameterModifiers -> NOINLINE .)
    OUT             reduce using rule 186 (parameterModifiers -> NOINLINE .)
    VARARG          reduce using rule 186 (parameterModifiers -> NOINLINE .)
    WHERE           reduce using rule 186 (parameterModifiers -> NOINLINE .)
    DOISP           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    COMMA           reduce using rule 270 (simpleIdentifier -> NOINLINE .)
    RPAREN          reduce using rule 270 (simpleIdentifier -> NOINLINE .)


state 348

    (187) parameterModifiers -> CROSSINLINE .
    (267) simpleIdentifier -> CROSSINLINE .

    ID              reduce using rule 187 (parameterModifiers -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 187 (parameterModifiers -> CROSSINLINE .)
    IMPORT          reduce using rule 187 (parameterModifiers -> CROSSINLINE .)
    INIT            reduce using rule 187 (parameterModifiers -> CROSSINLINE .)
    NOINLINE        reduce using rule 187 (parameterModifiers -> CROSSINLINE .)
    OUT             reduce using rule 187 (parameterModifiers -> CROSSINLINE .)
    VARARG          reduce using rule 187 (parameterModifiers -> CROSSINLINE .)
    WHERE           reduce using rule 187 (parameterModifiers -> CROSSINLINE .)
    DOISP           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    COMMA           reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)
    RPAREN          reduce using rule 267 (simpleIdentifier -> CROSSINLINE .)


state 349

    (140) indexingSuffix -> LCCT isuf RCCT .

    IGUALDADE       reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    RPAREN          reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    INCREMENTO      reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    DECREMENTO      reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    MENOR           reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    LCCT            reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    LPAREN          reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    PONTO           reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    COLONCOLON      reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    RCHAVE          reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    FUN             reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    FOR             reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    WHILE           reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    DO              reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    ID              reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    CROSSINLINE     reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    IMPORT          reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    INIT            reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    NOINLINE        reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    OUT             reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    VARARG          reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    WHERE           reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    LITERAL_STRING  reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    DOISP           reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    IF              reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    RETURN          reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    RETURN_AT       reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    CONTINUE        reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    CONTINUE_AT     reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    BREAK           reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    BREAK_AT        reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    MINUS           reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    PLUS            reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    NOT             reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    SUSPEND         reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    MAIORIGUAL      reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    MENORIGUAL      reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    MULTIGUAL       reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    DIVIGUAL        reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    MODIGUAL        reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    AS              reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    OR              reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    AND             reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    DIFERENTE       reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    IDENTIDADE      reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    SEMIDENTIDADE   reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    MAIOR           reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    IN              reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    NOT_IN          reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    IS              reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    NOT_IS          reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    ELVIS           reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    PONTOPONTO      reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    MULT            reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    DIVIDE          reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    MOD             reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    LCHAVE          reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    PV              reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    ELSE            reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    $end            reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    COMMA           reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)
    RCCT            reduce using rule 140 (indexingSuffix -> LCCT isuf RCCT .)


state 350

    (142) isuf -> expression COMMA . isuf
    (141) isuf -> . expression
    (142) isuf -> . expression COMMA isuf
    (143) isuf -> .
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! RCCT            [ reduce using rule 143 (isuf -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 304
    isuf                           shift and go to state 376
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 351

    (144) navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .

    IGUALDADE       reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RPAREN          reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INCREMENTO      reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DECREMENTO      reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOR           reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCCT            reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LPAREN          reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTO           reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COLONCOLON      reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCHAVE          reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FUN             reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FOR             reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHILE           reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DO              reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ID              reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CROSSINLINE     reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IMPORT          reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INIT            reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOINLINE        reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OUT             reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VARARG          reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHERE           reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LITERAL_STRING  reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DOISP           reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IF              reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN          reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN_AT       reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE        reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE_AT     reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK           reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK_AT        reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MINUS           reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PLUS            reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT             reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SUSPEND         reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIORIGUAL      reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENORIGUAL      reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULTIGUAL       reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIGUAL        reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MODIGUAL        reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AS              reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OR              reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AND             reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIFERENTE       reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IDENTIDADE      reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SEMIDENTIDADE   reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIOR           reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IN              reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IN          reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IS              reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IS          reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELVIS           reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTOPONTO      reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULT            reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIDE          reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MOD             reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCHAVE          reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PV              reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELSE            reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    $end            reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COMMA           reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCCT            reduce using rule 144 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)


state 352

    (145) navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .

    IGUALDADE       reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RPAREN          reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INCREMENTO      reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DECREMENTO      reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOR           reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCCT            reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LPAREN          reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTO           reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COLONCOLON      reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCHAVE          reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FUN             reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FOR             reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHILE           reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DO              reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ID              reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CROSSINLINE     reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IMPORT          reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INIT            reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOINLINE        reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OUT             reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VARARG          reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHERE           reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LITERAL_STRING  reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DOISP           reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IF              reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN          reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN_AT       reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE        reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE_AT     reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK           reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK_AT        reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MINUS           reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PLUS            reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT             reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SUSPEND         reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIORIGUAL      reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENORIGUAL      reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULTIGUAL       reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIGUAL        reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MODIGUAL        reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AS              reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OR              reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AND             reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIFERENTE       reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IDENTIDADE      reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SEMIDENTIDADE   reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIOR           reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IN              reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IN          reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IS              reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IS          reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELVIS           reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTOPONTO      reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULT            reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIDE          reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MOD             reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCHAVE          reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PV              reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELSE            reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    $end            reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COMMA           reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCCT            reduce using rule 145 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)


state 353

    (78) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN . expression RPAREN controlStructureBody
    (79) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN . expression RPAREN
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 377
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 354

    (80) forStatement_VD -> FOR LPAREN variableDeclaration IN . expression RPAREN controlStructureBody
    (81) forStatement_VD -> FOR LPAREN variableDeclaration IN . expression RPAREN
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 378
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 355

    (82) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (83) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (71) controlStructureBody -> . block
    (72) controlStructureBody -> . statement
    (73) block -> . LCHAVE statements RCHAVE
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for PV resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
    PV              shift and go to state 380
    LCHAVE          shift and go to state 69
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! PV              [ reduce using rule 103 (elvisExpression -> .) ]

    expression                     shift and go to state 118
    controlStructureBody           shift and go to state 379
    block                          shift and go to state 245
    statement                      shift and go to state 246
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 356

    (84) doWhileStatement -> DO controlStructureBody WHILE LPAREN . expression RPAREN
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    expression                     shift and go to state 381
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    simpleIdentifier               shift and go to state 98
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 357

    (85) doWhileStatement -> DO WHILE LPAREN expression . RPAREN
    (82) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (83) whileStatement -> WHILE LPAREN expression . RPAREN PV

    RPAREN          shift and go to state 382


state 358

    (146) callSuffix -> typeArguments valueArguments annotatedLambda .

    INCREMENTO      reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DECREMENTO      reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MENOR           reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LCCT            reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LPAREN          reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PONTO           reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    COLONCOLON      reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RCHAVE          reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    FUN             reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    FOR             reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    WHILE           reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DO              reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    ID              reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IMPORT          reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    INIT            reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOINLINE        reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    OUT             reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    VARARG          reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    WHERE           reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DOISP           reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IF              reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RETURN          reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RETURN_AT       reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CONTINUE        reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    BREAK           reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    BREAK_AT        reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MINUS           reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PLUS            reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOT             reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    SUSPEND         reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MODIGUAL        reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    AS              reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    OR              reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    AND             reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DIFERENTE       reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IGUALDADE       reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MAIOR           reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IN              reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOT_IN          reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    IS              reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    NOT_IS          reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    ELVIS           reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MULT            reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    DIVIDE          reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    MOD             reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    LCHAVE          reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    PV              reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    ELSE            reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    $end            reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    COMMA           reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RPAREN          reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)
    RCCT            reduce using rule 146 (callSuffix -> typeArguments valueArguments annotatedLambda .)


state 359

    (158) valueArguments -> LPAREN vas RPAREN .

    RCHAVE          reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    INCREMENTO      reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    DECREMENTO      reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    MENOR           reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    LCCT            reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    LPAREN          reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    PONTO           reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    COLONCOLON      reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    FUN             reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    FOR             reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    WHILE           reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    DO              reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    ID              reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    CROSSINLINE     reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    IMPORT          reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    INIT            reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    NOINLINE        reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    OUT             reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    VARARG          reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    WHERE           reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    LITERAL_STRING  reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    DOISP           reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    IF              reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    RETURN          reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    RETURN_AT       reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    CONTINUE        reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    CONTINUE_AT     reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    BREAK           reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    BREAK_AT        reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    MINUS           reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    PLUS            reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    NOT             reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    SUSPEND         reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    MAIORIGUAL      reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    MENORIGUAL      reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    MULTIGUAL       reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    DIVIGUAL        reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    MODIGUAL        reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    AS              reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    OR              reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    AND             reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    DIFERENTE       reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    IDENTIDADE      reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    IGUALDADE       reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    SEMIDENTIDADE   reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    MAIOR           reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    IN              reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    NOT_IN          reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    IS              reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    NOT_IS          reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    ELVIS           reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    PONTOPONTO      reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    MULT            reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    DIVIDE          reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    MOD             reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    LCHAVE          reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    PV              reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    ELSE            reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    $end            reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    COMMA           reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    RPAREN          reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)
    RCCT            reduce using rule 158 (valueArguments -> LPAREN vas RPAREN .)


state 360

    (160) vas -> valueArgument COMMA . vas
    (159) vas -> . valueArgument
    (160) vas -> . valueArgument COMMA vas
    (161) valueArgument -> . simpleIdentifier IGUALDADE MULT expression
    (162) valueArgument -> . simpleIdentifier IGUALDADE expression
    (163) valueArgument -> . expression
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    valueArgument                  shift and go to state 323
    vas                            shift and go to state 383
    simpleIdentifier               shift and go to state 324
    expression                     shift and go to state 325
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 361

    (161) valueArgument -> simpleIdentifier IGUALDADE . MULT expression
    (162) valueArgument -> simpleIdentifier IGUALDADE . expression
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for MULT resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    MULT            shift and go to state 384
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    simpleIdentifier               shift and go to state 98
    expression                     shift and go to state 385
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 362

    (202) af -> typeConstraint COMMA af .

    INCREMENTO      reduce using rule 202 (af -> typeConstraint COMMA af .)
    DECREMENTO      reduce using rule 202 (af -> typeConstraint COMMA af .)
    MENOR           reduce using rule 202 (af -> typeConstraint COMMA af .)
    LCCT            reduce using rule 202 (af -> typeConstraint COMMA af .)
    LPAREN          reduce using rule 202 (af -> typeConstraint COMMA af .)
    PONTO           reduce using rule 202 (af -> typeConstraint COMMA af .)
    COLONCOLON      reduce using rule 202 (af -> typeConstraint COMMA af .)
    RCHAVE          reduce using rule 202 (af -> typeConstraint COMMA af .)
    FUN             reduce using rule 202 (af -> typeConstraint COMMA af .)
    FOR             reduce using rule 202 (af -> typeConstraint COMMA af .)
    WHILE           reduce using rule 202 (af -> typeConstraint COMMA af .)
    DO              reduce using rule 202 (af -> typeConstraint COMMA af .)
    ID              reduce using rule 202 (af -> typeConstraint COMMA af .)
    CROSSINLINE     reduce using rule 202 (af -> typeConstraint COMMA af .)
    IMPORT          reduce using rule 202 (af -> typeConstraint COMMA af .)
    INIT            reduce using rule 202 (af -> typeConstraint COMMA af .)
    NOINLINE        reduce using rule 202 (af -> typeConstraint COMMA af .)
    OUT             reduce using rule 202 (af -> typeConstraint COMMA af .)
    VARARG          reduce using rule 202 (af -> typeConstraint COMMA af .)
    WHERE           reduce using rule 202 (af -> typeConstraint COMMA af .)
    LITERAL_STRING  reduce using rule 202 (af -> typeConstraint COMMA af .)
    DOISP           reduce using rule 202 (af -> typeConstraint COMMA af .)
    IF              reduce using rule 202 (af -> typeConstraint COMMA af .)
    RETURN          reduce using rule 202 (af -> typeConstraint COMMA af .)
    RETURN_AT       reduce using rule 202 (af -> typeConstraint COMMA af .)
    CONTINUE        reduce using rule 202 (af -> typeConstraint COMMA af .)
    CONTINUE_AT     reduce using rule 202 (af -> typeConstraint COMMA af .)
    BREAK           reduce using rule 202 (af -> typeConstraint COMMA af .)
    BREAK_AT        reduce using rule 202 (af -> typeConstraint COMMA af .)
    MINUS           reduce using rule 202 (af -> typeConstraint COMMA af .)
    PLUS            reduce using rule 202 (af -> typeConstraint COMMA af .)
    NOT             reduce using rule 202 (af -> typeConstraint COMMA af .)
    SUSPEND         reduce using rule 202 (af -> typeConstraint COMMA af .)
    MAIORIGUAL      reduce using rule 202 (af -> typeConstraint COMMA af .)
    MENORIGUAL      reduce using rule 202 (af -> typeConstraint COMMA af .)
    MULTIGUAL       reduce using rule 202 (af -> typeConstraint COMMA af .)
    DIVIGUAL        reduce using rule 202 (af -> typeConstraint COMMA af .)
    MODIGUAL        reduce using rule 202 (af -> typeConstraint COMMA af .)
    AS              reduce using rule 202 (af -> typeConstraint COMMA af .)
    OR              reduce using rule 202 (af -> typeConstraint COMMA af .)
    AND             reduce using rule 202 (af -> typeConstraint COMMA af .)
    DIFERENTE       reduce using rule 202 (af -> typeConstraint COMMA af .)
    IDENTIDADE      reduce using rule 202 (af -> typeConstraint COMMA af .)
    IGUALDADE       reduce using rule 202 (af -> typeConstraint COMMA af .)
    SEMIDENTIDADE   reduce using rule 202 (af -> typeConstraint COMMA af .)
    MAIOR           reduce using rule 202 (af -> typeConstraint COMMA af .)
    IN              reduce using rule 202 (af -> typeConstraint COMMA af .)
    NOT_IN          reduce using rule 202 (af -> typeConstraint COMMA af .)
    IS              reduce using rule 202 (af -> typeConstraint COMMA af .)
    NOT_IS          reduce using rule 202 (af -> typeConstraint COMMA af .)
    ELVIS           reduce using rule 202 (af -> typeConstraint COMMA af .)
    PONTOPONTO      reduce using rule 202 (af -> typeConstraint COMMA af .)
    MULT            reduce using rule 202 (af -> typeConstraint COMMA af .)
    DIVIDE          reduce using rule 202 (af -> typeConstraint COMMA af .)
    MOD             reduce using rule 202 (af -> typeConstraint COMMA af .)
    LCHAVE          reduce using rule 202 (af -> typeConstraint COMMA af .)
    PV              reduce using rule 202 (af -> typeConstraint COMMA af .)
    ELSE            reduce using rule 202 (af -> typeConstraint COMMA af .)
    $end            reduce using rule 202 (af -> typeConstraint COMMA af .)
    COMMA           reduce using rule 202 (af -> typeConstraint COMMA af .)
    RPAREN          reduce using rule 202 (af -> typeConstraint COMMA af .)
    RCCT            reduce using rule 202 (af -> typeConstraint COMMA af .)


state 363

    (203) typeConstraint -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    INCREMENTO      reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    DECREMENTO      reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    MENOR           reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    LCCT            reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    LPAREN          reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    PONTO           reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    COLONCOLON      reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    RCHAVE          reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    FUN             reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    FOR             reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    WHILE           reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    DO              reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    ID              reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    CROSSINLINE     reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    IMPORT          reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    INIT            reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    NOINLINE        reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    OUT             reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    VARARG          reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    WHERE           reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    LITERAL_STRING  reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    DOISP           reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    IF              reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    RETURN          reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    RETURN_AT       reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    CONTINUE        reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    CONTINUE_AT     reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    BREAK           reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    BREAK_AT        reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    MINUS           reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    PLUS            reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    NOT             reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    SUSPEND         reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    MAIORIGUAL      reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    MENORIGUAL      reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    MULTIGUAL       reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    DIVIGUAL        reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    MODIGUAL        reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    AS              reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    OR              reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    AND             reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    DIFERENTE       reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    IDENTIDADE      reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    IGUALDADE       reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    SEMIDENTIDADE   reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    IN              reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    NOT_IN          reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    IS              reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    NOT_IS          reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    ELVIS           reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    PONTOPONTO      reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    MULT            reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    DIVIDE          reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    MOD             reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    LCHAVE          reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    PV              reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    ELSE            reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    $end            reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)
    RCCT            reduce using rule 203 (typeConstraint -> simpleIdentifier DOISP type .)


state 364

    (227) callableReference -> receiverType DOISP DOISP simpleIdentifier .

    INCREMENTO      reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    DECREMENTO      reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    MENOR           reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    LCCT            reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    LPAREN          reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    PONTO           reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    COLONCOLON      reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    RCHAVE          reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    FUN             reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    FOR             reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    WHILE           reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    DO              reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    ID              reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    CROSSINLINE     reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    IMPORT          reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    INIT            reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    NOINLINE        reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    OUT             reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    VARARG          reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    WHERE           reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    LITERAL_STRING  reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    DOISP           reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    IF              reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    RETURN          reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    RETURN_AT       reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    CONTINUE        reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    CONTINUE_AT     reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    BREAK           reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    BREAK_AT        reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    MINUS           reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    PLUS            reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    NOT             reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    SUSPEND         reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    MAIORIGUAL      reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    MENORIGUAL      reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    MULTIGUAL       reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    DIVIGUAL        reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    MODIGUAL        reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    AS              reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    OR              reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    AND             reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    DIFERENTE       reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    IDENTIDADE      reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    IGUALDADE       reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    MAIOR           reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    IN              reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    NOT_IN          reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    IS              reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    NOT_IS          reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    ELVIS           reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    PONTOPONTO      reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    MULT            reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    DIVIDE          reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    MOD             reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    LCHAVE          reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    PV              reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    ELSE            reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    $end            reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    COMMA           reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    RPAREN          reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)
    RCCT            reduce using rule 227 (callableReference -> receiverType DOISP DOISP simpleIdentifier .)


state 365

    (229) callableReference -> receiverType DOISP DOISP CLASS .

    INCREMENTO      reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    DECREMENTO      reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    MENOR           reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    LCCT            reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    LPAREN          reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    PONTO           reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    COLONCOLON      reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    RCHAVE          reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    FUN             reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    FOR             reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    WHILE           reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    DO              reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    ID              reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    CROSSINLINE     reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    IMPORT          reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    INIT            reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    NOINLINE        reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    OUT             reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    VARARG          reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    WHERE           reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    LITERAL_STRING  reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    DOISP           reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    IF              reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    RETURN          reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    RETURN_AT       reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    CONTINUE        reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    CONTINUE_AT     reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    BREAK           reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    BREAK_AT        reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    MINUS           reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    PLUS            reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    NOT             reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    SUSPEND         reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    MAIORIGUAL      reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    MENORIGUAL      reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    MULTIGUAL       reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    DIVIGUAL        reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    MODIGUAL        reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    AS              reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    OR              reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    AND             reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    DIFERENTE       reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    IDENTIDADE      reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    IGUALDADE       reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    SEMIDENTIDADE   reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    MAIOR           reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    IN              reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    NOT_IN          reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    IS              reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    NOT_IS          reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    ELVIS           reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    PONTOPONTO      reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    MULT            reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    DIVIDE          reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    MOD             reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    LCHAVE          reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    PV              reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    ELSE            reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    $end            reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    COMMA           reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    RPAREN          reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)
    RCCT            reduce using rule 229 (callableReference -> receiverType DOISP DOISP CLASS .)


state 366

    (176) cl -> expression COMMA cl .

    RCCT            reduce using rule 176 (cl -> expression COMMA cl .)


state 367

    (210) ifExpression -> IF LPAREN expression RPAREN . controlStructureBody PV
    (211) ifExpression -> IF LPAREN expression RPAREN . controlStructureBody
    (212) ifExpression -> IF LPAREN expression RPAREN . controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> IF LPAREN expression RPAREN . controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> IF LPAREN expression RPAREN . controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> IF LPAREN expression RPAREN . controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> IF LPAREN expression RPAREN . PV ELSE controlStructureBody PV
    (217) ifExpression -> IF LPAREN expression RPAREN . PV ELSE controlStructureBody
    (218) ifExpression -> IF LPAREN expression RPAREN . ELSE controlStructureBody PV
    (219) ifExpression -> IF LPAREN expression RPAREN . ELSE controlStructureBody
    (71) controlStructureBody -> . block
    (72) controlStructureBody -> . statement
    (73) block -> . LCHAVE statements RCHAVE
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
    PV              shift and go to state 387
    ELSE            shift and go to state 388
    LCHAVE          shift and go to state 69
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! PV              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ELSE            [ reduce using rule 103 (elvisExpression -> .) ]

    expression                     shift and go to state 118
    controlStructureBody           shift and go to state 386
    block                          shift and go to state 245
    statement                      shift and go to state 246
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 368

    (31) mvd -> variableDeclaration COMMA mvd .

    RPAREN          reduce using rule 31 (mvd -> variableDeclaration COMMA mvd .)


state 369

    (197) anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .

    INCREMENTO      reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    DECREMENTO      reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    MENOR           reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    LCCT            reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    LPAREN          reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    PONTO           reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    COLONCOLON      reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    RCHAVE          reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    FUN             reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    FOR             reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    WHILE           reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    DO              reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    ID              reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    CROSSINLINE     reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    IMPORT          reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    INIT            reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    NOINLINE        reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    OUT             reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    VARARG          reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    WHERE           reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    LITERAL_STRING  reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    DOISP           reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    IF              reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    RETURN          reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    RETURN_AT       reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    CONTINUE        reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    CONTINUE_AT     reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    BREAK           reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    BREAK_AT        reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    MINUS           reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    PLUS            reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    NOT             reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    SUSPEND         reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    MAIORIGUAL      reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    MENORIGUAL      reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    MULTIGUAL       reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    DIVIGUAL        reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    MODIGUAL        reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    AS              reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    OR              reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    AND             reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    DIFERENTE       reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    IDENTIDADE      reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    IGUALDADE       reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    SEMIDENTIDADE   reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    MAIOR           reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    IN              reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    NOT_IN          reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    IS              reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    NOT_IS          reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    ELVIS           reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    PONTOPONTO      reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    MULT            reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    DIVIDE          reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    MOD             reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    LCHAVE          reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    PV              reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    ELSE            reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    $end            reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    COMMA           reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    RPAREN          reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)
    RCCT            reduce using rule 197 (anonymousFunction -> FUN af4 parametersWithOptionalType af3 af1 .)


state 370

    (198) af1 -> functionBody .

    FUN             reduce using rule 198 (af1 -> functionBody .)
    FOR             reduce using rule 198 (af1 -> functionBody .)
    WHILE           reduce using rule 198 (af1 -> functionBody .)
    DO              reduce using rule 198 (af1 -> functionBody .)
    ID              reduce using rule 198 (af1 -> functionBody .)
    CROSSINLINE     reduce using rule 198 (af1 -> functionBody .)
    IMPORT          reduce using rule 198 (af1 -> functionBody .)
    INIT            reduce using rule 198 (af1 -> functionBody .)
    NOINLINE        reduce using rule 198 (af1 -> functionBody .)
    OUT             reduce using rule 198 (af1 -> functionBody .)
    VARARG          reduce using rule 198 (af1 -> functionBody .)
    WHERE           reduce using rule 198 (af1 -> functionBody .)
    LPAREN          reduce using rule 198 (af1 -> functionBody .)
    LITERAL_STRING  reduce using rule 198 (af1 -> functionBody .)
    DOISP           reduce using rule 198 (af1 -> functionBody .)
    LCCT            reduce using rule 198 (af1 -> functionBody .)
    IF              reduce using rule 198 (af1 -> functionBody .)
    RETURN          reduce using rule 198 (af1 -> functionBody .)
    RETURN_AT       reduce using rule 198 (af1 -> functionBody .)
    CONTINUE        reduce using rule 198 (af1 -> functionBody .)
    CONTINUE_AT     reduce using rule 198 (af1 -> functionBody .)
    BREAK           reduce using rule 198 (af1 -> functionBody .)
    BREAK_AT        reduce using rule 198 (af1 -> functionBody .)
    RCHAVE          reduce using rule 198 (af1 -> functionBody .)
    INCREMENTO      reduce using rule 198 (af1 -> functionBody .)
    DECREMENTO      reduce using rule 198 (af1 -> functionBody .)
    MINUS           reduce using rule 198 (af1 -> functionBody .)
    PLUS            reduce using rule 198 (af1 -> functionBody .)
    NOT             reduce using rule 198 (af1 -> functionBody .)
    SUSPEND         reduce using rule 198 (af1 -> functionBody .)
    MAIORIGUAL      reduce using rule 198 (af1 -> functionBody .)
    MENORIGUAL      reduce using rule 198 (af1 -> functionBody .)
    MULTIGUAL       reduce using rule 198 (af1 -> functionBody .)
    DIVIGUAL        reduce using rule 198 (af1 -> functionBody .)
    MODIGUAL        reduce using rule 198 (af1 -> functionBody .)
    MENOR           reduce using rule 198 (af1 -> functionBody .)
    PONTO           reduce using rule 198 (af1 -> functionBody .)
    COLONCOLON      reduce using rule 198 (af1 -> functionBody .)
    AS              reduce using rule 198 (af1 -> functionBody .)
    OR              reduce using rule 198 (af1 -> functionBody .)
    AND             reduce using rule 198 (af1 -> functionBody .)
    DIFERENTE       reduce using rule 198 (af1 -> functionBody .)
    IDENTIDADE      reduce using rule 198 (af1 -> functionBody .)
    IGUALDADE       reduce using rule 198 (af1 -> functionBody .)
    SEMIDENTIDADE   reduce using rule 198 (af1 -> functionBody .)
    MAIOR           reduce using rule 198 (af1 -> functionBody .)
    IN              reduce using rule 198 (af1 -> functionBody .)
    NOT_IN          reduce using rule 198 (af1 -> functionBody .)
    IS              reduce using rule 198 (af1 -> functionBody .)
    NOT_IS          reduce using rule 198 (af1 -> functionBody .)
    ELVIS           reduce using rule 198 (af1 -> functionBody .)
    PONTOPONTO      reduce using rule 198 (af1 -> functionBody .)
    MULT            reduce using rule 198 (af1 -> functionBody .)
    DIVIDE          reduce using rule 198 (af1 -> functionBody .)
    MOD             reduce using rule 198 (af1 -> functionBody .)
    LCHAVE          reduce using rule 198 (af1 -> functionBody .)
    PV              reduce using rule 198 (af1 -> functionBody .)
    ELSE            reduce using rule 198 (af1 -> functionBody .)
    $end            reduce using rule 198 (af1 -> functionBody .)
    COMMA           reduce using rule 198 (af1 -> functionBody .)
    RPAREN          reduce using rule 198 (af1 -> functionBody .)
    RCCT            reduce using rule 198 (af1 -> functionBody .)


state 371

    (204) af3 -> DOISP type .

    ATRIBUICAO      reduce using rule 204 (af3 -> DOISP type .)
    LCHAVE          reduce using rule 204 (af3 -> DOISP type .)
    INCREMENTO      reduce using rule 204 (af3 -> DOISP type .)
    DECREMENTO      reduce using rule 204 (af3 -> DOISP type .)
    MENOR           reduce using rule 204 (af3 -> DOISP type .)
    LCCT            reduce using rule 204 (af3 -> DOISP type .)
    LPAREN          reduce using rule 204 (af3 -> DOISP type .)
    PONTO           reduce using rule 204 (af3 -> DOISP type .)
    COLONCOLON      reduce using rule 204 (af3 -> DOISP type .)
    RCHAVE          reduce using rule 204 (af3 -> DOISP type .)
    FUN             reduce using rule 204 (af3 -> DOISP type .)
    FOR             reduce using rule 204 (af3 -> DOISP type .)
    WHILE           reduce using rule 204 (af3 -> DOISP type .)
    DO              reduce using rule 204 (af3 -> DOISP type .)
    ID              reduce using rule 204 (af3 -> DOISP type .)
    CROSSINLINE     reduce using rule 204 (af3 -> DOISP type .)
    IMPORT          reduce using rule 204 (af3 -> DOISP type .)
    INIT            reduce using rule 204 (af3 -> DOISP type .)
    NOINLINE        reduce using rule 204 (af3 -> DOISP type .)
    OUT             reduce using rule 204 (af3 -> DOISP type .)
    VARARG          reduce using rule 204 (af3 -> DOISP type .)
    WHERE           reduce using rule 204 (af3 -> DOISP type .)
    LITERAL_STRING  reduce using rule 204 (af3 -> DOISP type .)
    DOISP           reduce using rule 204 (af3 -> DOISP type .)
    IF              reduce using rule 204 (af3 -> DOISP type .)
    RETURN          reduce using rule 204 (af3 -> DOISP type .)
    RETURN_AT       reduce using rule 204 (af3 -> DOISP type .)
    CONTINUE        reduce using rule 204 (af3 -> DOISP type .)
    CONTINUE_AT     reduce using rule 204 (af3 -> DOISP type .)
    BREAK           reduce using rule 204 (af3 -> DOISP type .)
    BREAK_AT        reduce using rule 204 (af3 -> DOISP type .)
    MINUS           reduce using rule 204 (af3 -> DOISP type .)
    PLUS            reduce using rule 204 (af3 -> DOISP type .)
    NOT             reduce using rule 204 (af3 -> DOISP type .)
    SUSPEND         reduce using rule 204 (af3 -> DOISP type .)
    MAIORIGUAL      reduce using rule 204 (af3 -> DOISP type .)
    MENORIGUAL      reduce using rule 204 (af3 -> DOISP type .)
    MULTIGUAL       reduce using rule 204 (af3 -> DOISP type .)
    DIVIGUAL        reduce using rule 204 (af3 -> DOISP type .)
    MODIGUAL        reduce using rule 204 (af3 -> DOISP type .)
    AS              reduce using rule 204 (af3 -> DOISP type .)
    OR              reduce using rule 204 (af3 -> DOISP type .)
    AND             reduce using rule 204 (af3 -> DOISP type .)
    DIFERENTE       reduce using rule 204 (af3 -> DOISP type .)
    IDENTIDADE      reduce using rule 204 (af3 -> DOISP type .)
    IGUALDADE       reduce using rule 204 (af3 -> DOISP type .)
    SEMIDENTIDADE   reduce using rule 204 (af3 -> DOISP type .)
    MAIOR           reduce using rule 204 (af3 -> DOISP type .)
    IN              reduce using rule 204 (af3 -> DOISP type .)
    NOT_IN          reduce using rule 204 (af3 -> DOISP type .)
    IS              reduce using rule 204 (af3 -> DOISP type .)
    NOT_IS          reduce using rule 204 (af3 -> DOISP type .)
    ELVIS           reduce using rule 204 (af3 -> DOISP type .)
    PONTOPONTO      reduce using rule 204 (af3 -> DOISP type .)
    MULT            reduce using rule 204 (af3 -> DOISP type .)
    DIVIDE          reduce using rule 204 (af3 -> DOISP type .)
    MOD             reduce using rule 204 (af3 -> DOISP type .)
    PV              reduce using rule 204 (af3 -> DOISP type .)
    ELSE            reduce using rule 204 (af3 -> DOISP type .)
    $end            reduce using rule 204 (af3 -> DOISP type .)
    COMMA           reduce using rule 204 (af3 -> DOISP type .)
    RPAREN          reduce using rule 204 (af3 -> DOISP type .)
    RCCT            reduce using rule 204 (af3 -> DOISP type .)


state 372

    (177) parametersWithOptionalType -> LPAREN pwot RPAREN .

    DOISP           reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    ATRIBUICAO      reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    LCHAVE          reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    INCREMENTO      reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DECREMENTO      reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MENOR           reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    LCCT            reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    LPAREN          reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    PONTO           reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    COLONCOLON      reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    RCHAVE          reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    FUN             reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    FOR             reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    WHILE           reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DO              reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    ID              reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    CROSSINLINE     reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IMPORT          reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    INIT            reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NOINLINE        reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    OUT             reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    VARARG          reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    WHERE           reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    LITERAL_STRING  reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IF              reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    RETURN          reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    RETURN_AT       reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    CONTINUE        reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    CONTINUE_AT     reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    BREAK           reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    BREAK_AT        reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MINUS           reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    PLUS            reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NOT             reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    SUSPEND         reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MAIORIGUAL      reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MENORIGUAL      reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MULTIGUAL       reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DIVIGUAL        reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MODIGUAL        reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    AS              reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    OR              reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    AND             reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DIFERENTE       reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IDENTIDADE      reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IGUALDADE       reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    SEMIDENTIDADE   reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MAIOR           reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IN              reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NOT_IN          reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    IS              reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    NOT_IS          reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    ELVIS           reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    PONTOPONTO      reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MULT            reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    DIVIDE          reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    MOD             reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    PV              reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    ELSE            reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    $end            reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    COMMA           reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    RPAREN          reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)
    RCCT            reduce using rule 177 (parametersWithOptionalType -> LPAREN pwot RPAREN .)


state 373

    (179) pwot -> parameterWithOptionalType COMMA . pwot COMMA
    (178) pwot -> . parameterWithOptionalType
    (179) pwot -> . parameterWithOptionalType COMMA pwot COMMA
    (180) pwot -> .
    (181) parameterWithOptionalType -> . parameterModifiers simpleIdentifier DOISP type
    (182) parameterWithOptionalType -> . simpleIdentifier DOISP type
    (183) parameterWithOptionalType -> . parameterModifiers simpleIdentifier
    (184) parameterWithOptionalType -> . simpleIdentifier
    (185) parameterModifiers -> . VARARG
    (186) parameterModifiers -> . NOINLINE
    (187) parameterModifiers -> . CROSSINLINE
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    COMMA           reduce using rule 180 (pwot -> .)
    VARARG          shift and go to state 346
    NOINLINE        shift and go to state 347
    CROSSINLINE     shift and go to state 348
    ID              shift and go to state 15
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    OUT             shift and go to state 20
    WHERE           shift and go to state 22

    parameterWithOptionalType      shift and go to state 343
    pwot                           shift and go to state 389
    parameterModifiers             shift and go to state 344
    simpleIdentifier               shift and go to state 345

state 374

    (181) parameterWithOptionalType -> parameterModifiers simpleIdentifier . DOISP type
    (183) parameterWithOptionalType -> parameterModifiers simpleIdentifier .

    DOISP           shift and go to state 390
    COMMA           reduce using rule 183 (parameterWithOptionalType -> parameterModifiers simpleIdentifier .)
    RPAREN          reduce using rule 183 (parameterWithOptionalType -> parameterModifiers simpleIdentifier .)


state 375

    (182) parameterWithOptionalType -> simpleIdentifier DOISP . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    simpleIdentifier               shift and go to state 44
    type                           shift and go to state 391
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43

state 376

    (142) isuf -> expression COMMA isuf .

    RCCT            reduce using rule 142 (isuf -> expression COMMA isuf .)


state 377

    (78) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression . RPAREN controlStructureBody
    (79) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression . RPAREN

    RPAREN          shift and go to state 392


state 378

    (80) forStatement_VD -> FOR LPAREN variableDeclaration IN expression . RPAREN controlStructureBody
    (81) forStatement_VD -> FOR LPAREN variableDeclaration IN expression . RPAREN

    RPAREN          shift and go to state 393


state 379

    (82) whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .

    FUN             reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DO              reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ID              reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DOISP           reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IF              reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AS              reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OR              reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AND             reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IN              reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IS              reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PV              reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    $end            reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 82 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)


state 380

    (83) whileStatement -> WHILE LPAREN expression RPAREN PV .

    FUN             reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FOR             reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHILE           reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DO              reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ID              reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CROSSINLINE     reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IMPORT          reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INIT            reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOINLINE        reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OUT             reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VARARG          reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHERE           reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LPAREN          reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LITERAL_STRING  reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DOISP           reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCCT            reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IF              reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN          reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN_AT       reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE        reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE_AT     reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK           reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK_AT        reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCHAVE          reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INCREMENTO      reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DECREMENTO      reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MINUS           reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PLUS            reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT             reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SUSPEND         reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIORIGUAL      reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENORIGUAL      reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULTIGUAL       reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIGUAL        reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MODIGUAL        reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOR           reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTO           reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COLONCOLON      reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AS              reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OR              reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AND             reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIFERENTE       reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IDENTIDADE      reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IGUALDADE       reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SEMIDENTIDADE   reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIOR           reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IN              reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IN          reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IS              reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IS          reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELVIS           reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTOPONTO      reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULT            reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIDE          reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MOD             reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCHAVE          reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PV              reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELSE            reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    $end            reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COMMA           reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RPAREN          reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCCT            reduce using rule 83 (whileStatement -> WHILE LPAREN expression RPAREN PV .)


state 381

    (84) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression . RPAREN

    RPAREN          shift and go to state 394


state 382

    (85) doWhileStatement -> DO WHILE LPAREN expression RPAREN .
    (82) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (83) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (71) controlStructureBody -> . block
    (72) controlStructureBody -> . statement
    (73) block -> . LCHAVE statements RCHAVE
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! reduce/reduce conflict for DOISP resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for LCCT resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! shift/reduce conflict for FUN resolved as shift
  ! reduce/reduce conflict for SUSPEND resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for PLUS resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for NOT resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MENOR resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for PONTO resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MAIOR resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IN resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IS resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for ELVIS resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MULT resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for AS resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for IN resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IS resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MENOR resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MAIOR resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for PONTO resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! shift/reduce conflict for RCHAVE resolved as shift
    MAIORIGUAL      reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    $end            reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PV              shift and go to state 380
    LCHAVE          shift and go to state 69
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11

  ! FUN             [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FOR             [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DO              [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! ID              [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INIT            [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OUT             [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DOISP           [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IF              [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RCHAVE          [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOT             [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PV              [ reduce using rule 85 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT_IN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! IS              [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT_IS          [ reduce using rule 103 (elvisExpression -> .) ]
  ! MENOR           [ reduce using rule 103 (elvisExpression -> .) ]
  ! MAIOR           [ reduce using rule 103 (elvisExpression -> .) ]
  ! MENORIGUAL      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MAIORIGUAL      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DIFERENTE       [ reduce using rule 103 (elvisExpression -> .) ]
  ! IDENTIDADE      [ reduce using rule 103 (elvisExpression -> .) ]
  ! IGUALDADE       [ reduce using rule 103 (elvisExpression -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 103 (elvisExpression -> .) ]
  ! AND             [ reduce using rule 103 (elvisExpression -> .) ]
  ! OR              [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! PONTO           [ reduce using rule 103 (elvisExpression -> .) ]
  ! COLONCOLON      [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    expression                     shift and go to state 118
    controlStructureBody           shift and go to state 379
    block                          shift and go to state 245
    statement                      shift and go to state 246
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 383

    (160) vas -> valueArgument COMMA vas .

    RPAREN          reduce using rule 160 (vas -> valueArgument COMMA vas .)


state 384

    (161) valueArgument -> simpleIdentifier IGUALDADE MULT . expression
    (88) expression -> . disjunction
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (97) infixOperation -> . elvisExpression io
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    LITERAL_STRING  reduce using rule 117 (preue -> .)
    LPAREN          reduce using rule 117 (preue -> .)
    DOISP           reduce using rule 117 (preue -> .)
    LCCT            reduce using rule 117 (preue -> .)
    IF              reduce using rule 117 (preue -> .)
    RETURN          reduce using rule 117 (preue -> .)
    RETURN_AT       reduce using rule 117 (preue -> .)
    CONTINUE        reduce using rule 117 (preue -> .)
    CONTINUE_AT     reduce using rule 117 (preue -> .)
    BREAK           reduce using rule 117 (preue -> .)
    BREAK_AT        reduce using rule 117 (preue -> .)
    RCHAVE          reduce using rule 117 (preue -> .)
    FUN             reduce using rule 117 (preue -> .)
    SUSPEND         reduce using rule 117 (preue -> .)
    PONTO           reduce using rule 117 (preue -> .)
    COLONCOLON      reduce using rule 117 (preue -> .)
    ELVIS           reduce using rule 117 (preue -> .)
    PONTOPONTO      reduce using rule 117 (preue -> .)
    MULT            reduce using rule 117 (preue -> .)
    DIVIDE          reduce using rule 117 (preue -> .)
    MOD             reduce using rule 117 (preue -> .)
    AS              reduce using rule 117 (preue -> .)
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]

    simpleIdentifier               shift and go to state 98
    expression                     shift and go to state 395
    disjunction                    shift and go to state 90
    conjunction                    shift and go to state 91
    equality                       shift and go to state 92
    comparison                     shift and go to state 93
    infixOperation                 shift and go to state 94
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101
    prefixUnaryExpression          shift and go to state 102
    preue                          shift and go to state 103
    unaryPrefix                    shift and go to state 104
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106

state 385

    (162) valueArgument -> simpleIdentifier IGUALDADE expression .

    COMMA           reduce using rule 162 (valueArgument -> simpleIdentifier IGUALDADE expression .)
    RPAREN          reduce using rule 162 (valueArgument -> simpleIdentifier IGUALDADE expression .)


state 386

    (210) ifExpression -> IF LPAREN expression RPAREN controlStructureBody . PV
    (211) ifExpression -> IF LPAREN expression RPAREN controlStructureBody .
    (212) ifExpression -> IF LPAREN expression RPAREN controlStructureBody . PV ELSE controlStructureBody PV
    (213) ifExpression -> IF LPAREN expression RPAREN controlStructureBody . PV ELSE controlStructureBody
    (214) ifExpression -> IF LPAREN expression RPAREN controlStructureBody . ELSE controlStructureBody PV
    (215) ifExpression -> IF LPAREN expression RPAREN controlStructureBody . ELSE controlStructureBody

  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    PV              shift and go to state 396
    INCREMENTO      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    FUN             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    DO              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    ID              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    DOISP           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    IF              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    AS              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    OR              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    AND             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    IN              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    IS              reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    $end            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .)
    ELSE            shift and go to state 397

  ! PV              [ reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .) ]
  ! ELSE            [ reduce using rule 211 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody .) ]


state 387

    (216) ifExpression -> IF LPAREN expression RPAREN PV . ELSE controlStructureBody PV
    (217) ifExpression -> IF LPAREN expression RPAREN PV . ELSE controlStructureBody

    ELSE            shift and go to state 398


state 388

    (218) ifExpression -> IF LPAREN expression RPAREN ELSE . controlStructureBody PV
    (219) ifExpression -> IF LPAREN expression RPAREN ELSE . controlStructureBody
    (71) controlStructureBody -> . block
    (72) controlStructureBody -> . statement
    (73) block -> . LCHAVE statements RCHAVE
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
    LCHAVE          shift and go to state 69
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    expression                     shift and go to state 118
    controlStructureBody           shift and go to state 399
    block                          shift and go to state 245
    statement                      shift and go to state 246
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 389

    (179) pwot -> parameterWithOptionalType COMMA pwot . COMMA

    COMMA           shift and go to state 400


state 390

    (181) parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP . type
    (34) type -> . typeModifiers optype
    (35) type -> . optype
    (39) typeModifiers -> . typeModifier
    (40) typeModifiers -> . typeModifier typeModifiers
    (36) optype -> . parenthesizedType
    (37) optype -> . functionType
    (38) optype -> . userType
    (41) typeModifier -> . SUSPEND
    (61) parenthesizedType -> . LPAREN type RPAREN
    (52) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (53) functionType -> . functionTypeParameters SETA type
    (45) userType -> . simpleUserType
    (62) receiverType -> . typeModifier rt
    (54) functionTypeParameters -> . LPAREN parameter ftp RPAREN
    (55) functionTypeParameters -> . LPAREN parameter ftp COMMA RPAREN
    (56) functionTypeParameters -> . LPAREN type ftp RPAREN
    (57) functionTypeParameters -> . LPAREN type ftp COMMA RPAREN
    (46) simpleUserType -> . simpleIdentifier typeArguments
    (47) simpleUserType -> . simpleIdentifier
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE

    SUSPEND         shift and go to state 11
    LPAREN          shift and go to state 33
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 22

    simpleIdentifier               shift and go to state 44
    type                           shift and go to state 401
    typeModifiers                  shift and go to state 35
    optype                         shift and go to state 36
    typeModifier                   shift and go to state 37
    parenthesizedType              shift and go to state 38
    functionType                   shift and go to state 39
    userType                       shift and go to state 40
    receiverType                   shift and go to state 41
    functionTypeParameters         shift and go to state 42
    simpleUserType                 shift and go to state 43

state 391

    (182) parameterWithOptionalType -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 182 (parameterWithOptionalType -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 182 (parameterWithOptionalType -> simpleIdentifier DOISP type .)


state 392

    (78) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN . controlStructureBody
    (79) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .
    (71) controlStructureBody -> . block
    (72) controlStructureBody -> . statement
    (73) block -> . LCHAVE statements RCHAVE
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! reduce/reduce conflict for DOISP resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for LCCT resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for FUN resolved as shift
  ! reduce/reduce conflict for SUSPEND resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for PLUS resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for NOT resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MENOR resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for PONTO resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MAIOR resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IN resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IS resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for ELVIS resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MULT resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for AS resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! reduce/reduce conflict for PV resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RCCT resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MENOR resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for PONTO resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for AS resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MAIOR resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IN resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IS resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for ELVIS resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MULT resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! reduce/reduce conflict for PV resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RCCT resolved using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MAIORIGUAL      reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MENORIGUAL      reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MULTIGUAL       reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    DIVIGUAL        reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MODIGUAL        reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MENOR           reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    PONTO           reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    COLONCOLON      reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    AS              reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    OR              reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    AND             reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    DIFERENTE       reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IDENTIDADE      reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IGUALDADE       reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MAIOR           reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IN              reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    NOT_IN          reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    IS              reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    NOT_IS          reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    ELVIS           reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    PONTOPONTO      reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MULT            reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    DIVIDE          reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    MOD             reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    PV              reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    ELSE            reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    $end            reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    COMMA           reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    RPAREN          reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    RCCT            reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .)
    LCHAVE          shift and go to state 69
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11

  ! FUN             [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! FOR             [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! DO              [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! ID              [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! INIT            [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! OUT             [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! DOISP           [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! IF              [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! RCHAVE          [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! NOT             [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 79 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! MAIORIGUAL      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MENORIGUAL      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MULTIGUAL       [ reduce using rule 103 (elvisExpression -> .) ]
  ! DIVIGUAL        [ reduce using rule 103 (elvisExpression -> .) ]
  ! MODIGUAL        [ reduce using rule 103 (elvisExpression -> .) ]
  ! MENOR           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PONTO           [ reduce using rule 103 (elvisExpression -> .) ]
  ! COLONCOLON      [ reduce using rule 103 (elvisExpression -> .) ]
  ! AS              [ reduce using rule 103 (elvisExpression -> .) ]
  ! OR              [ reduce using rule 103 (elvisExpression -> .) ]
  ! AND             [ reduce using rule 103 (elvisExpression -> .) ]
  ! DIFERENTE       [ reduce using rule 103 (elvisExpression -> .) ]
  ! IDENTIDADE      [ reduce using rule 103 (elvisExpression -> .) ]
  ! IGUALDADE       [ reduce using rule 103 (elvisExpression -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 103 (elvisExpression -> .) ]
  ! MAIOR           [ reduce using rule 103 (elvisExpression -> .) ]
  ! IN              [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT_IN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! IS              [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT_IS          [ reduce using rule 103 (elvisExpression -> .) ]
  ! ELVIS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PONTOPONTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MULT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! DIVIDE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! MOD             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! PV              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ELSE            [ reduce using rule 103 (elvisExpression -> .) ]
  ! $end            [ reduce using rule 103 (elvisExpression -> .) ]
  ! COMMA           [ reduce using rule 103 (elvisExpression -> .) ]
  ! RPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCCT            [ reduce using rule 103 (elvisExpression -> .) ]

    expression                     shift and go to state 118
    controlStructureBody           shift and go to state 402
    block                          shift and go to state 245
    statement                      shift and go to state 246
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 393

    (80) forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN . controlStructureBody
    (81) forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .
    (71) controlStructureBody -> . block
    (72) controlStructureBody -> . statement
    (73) block -> . LCHAVE statements RCHAVE
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! reduce/reduce conflict for DOISP resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for LCCT resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for FUN resolved as shift
  ! reduce/reduce conflict for SUSPEND resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for PLUS resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for NOT resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MENOR resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for PONTO resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MAIOR resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IN resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IS resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for ELVIS resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MULT resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for AS resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! reduce/reduce conflict for PV resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RCCT resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MENOR resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for PONTO resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for AS resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for OR resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for AND resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MAIOR resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IN resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for IS resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for ELVIS resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MULT resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! reduce/reduce conflict for PV resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
  ! reduce/reduce conflict for RCCT resolved using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MAIORIGUAL      reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MENORIGUAL      reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MULTIGUAL       reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    DIVIGUAL        reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MODIGUAL        reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MENOR           reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    PONTO           reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    COLONCOLON      reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    AS              reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    OR              reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    AND             reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    DIFERENTE       reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IDENTIDADE      reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IGUALDADE       reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MAIOR           reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IN              reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    NOT_IN          reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    IS              reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    NOT_IS          reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    ELVIS           reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    PONTOPONTO      reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MULT            reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    DIVIDE          reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    MOD             reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    PV              reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    ELSE            reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    $end            reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    COMMA           reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    RPAREN          reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    RCCT            reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .)
    LCHAVE          shift and go to state 69
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11

  ! FUN             [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! FOR             [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! DO              [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! ID              [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! INIT            [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! OUT             [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LPAREN          [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! DOISP           [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! IF              [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! RCHAVE          [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! NOT             [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 81 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! MAIORIGUAL      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MENORIGUAL      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MULTIGUAL       [ reduce using rule 103 (elvisExpression -> .) ]
  ! DIVIGUAL        [ reduce using rule 103 (elvisExpression -> .) ]
  ! MODIGUAL        [ reduce using rule 103 (elvisExpression -> .) ]
  ! MENOR           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PONTO           [ reduce using rule 103 (elvisExpression -> .) ]
  ! COLONCOLON      [ reduce using rule 103 (elvisExpression -> .) ]
  ! AS              [ reduce using rule 103 (elvisExpression -> .) ]
  ! OR              [ reduce using rule 103 (elvisExpression -> .) ]
  ! AND             [ reduce using rule 103 (elvisExpression -> .) ]
  ! DIFERENTE       [ reduce using rule 103 (elvisExpression -> .) ]
  ! IDENTIDADE      [ reduce using rule 103 (elvisExpression -> .) ]
  ! IGUALDADE       [ reduce using rule 103 (elvisExpression -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 103 (elvisExpression -> .) ]
  ! MAIOR           [ reduce using rule 103 (elvisExpression -> .) ]
  ! IN              [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT_IN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! IS              [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT_IS          [ reduce using rule 103 (elvisExpression -> .) ]
  ! ELVIS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PONTOPONTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MULT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! DIVIDE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! MOD             [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! PV              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ELSE            [ reduce using rule 103 (elvisExpression -> .) ]
  ! $end            [ reduce using rule 103 (elvisExpression -> .) ]
  ! COMMA           [ reduce using rule 103 (elvisExpression -> .) ]
  ! RPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCCT            [ reduce using rule 103 (elvisExpression -> .) ]

    expression                     shift and go to state 118
    controlStructureBody           shift and go to state 403
    block                          shift and go to state 245
    statement                      shift and go to state 246
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 394

    (84) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .

    FUN             reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IMPORT          reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INIT            reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OUT             reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VARARG          reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHERE           reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LPAREN          reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DOISP           reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCCT            reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INCREMENTO      reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MINUS           reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PLUS            reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT             reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PV              reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    $end            reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 84 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)


state 395

    (161) valueArgument -> simpleIdentifier IGUALDADE MULT expression .

    COMMA           reduce using rule 161 (valueArgument -> simpleIdentifier IGUALDADE MULT expression .)
    RPAREN          reduce using rule 161 (valueArgument -> simpleIdentifier IGUALDADE MULT expression .)


state 396

    (210) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .
    (212) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV . ELSE controlStructureBody PV
    (213) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV . ELSE controlStructureBody

  ! shift/reduce conflict for ELSE resolved as shift
    INCREMENTO      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    DECREMENTO      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    MENOR           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    LCCT            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    LPAREN          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    PONTO           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    COLONCOLON      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    RCHAVE          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    FUN             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    FOR             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    WHILE           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    DO              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    ID              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    CROSSINLINE     reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    IMPORT          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    INIT            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    NOINLINE        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    OUT             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    VARARG          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    WHERE           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    LITERAL_STRING  reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    DOISP           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    IF              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    RETURN          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    RETURN_AT       reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    CONTINUE        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    CONTINUE_AT     reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    BREAK           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    BREAK_AT        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    MINUS           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    PLUS            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    NOT             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    SUSPEND         reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    MAIORIGUAL      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    MENORIGUAL      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    MULTIGUAL       reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    DIVIGUAL        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    MODIGUAL        reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    AS              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    OR              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    AND             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    DIFERENTE       reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    IDENTIDADE      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    IGUALDADE       reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    SEMIDENTIDADE   reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    MAIOR           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    IN              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    NOT_IN          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    IS              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    NOT_IS          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    ELVIS           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    PONTOPONTO      reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    MULT            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    DIVIDE          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    MOD             reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    LCHAVE          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    PV              reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    $end            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    COMMA           reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    RPAREN          reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    RCCT            reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .)
    ELSE            shift and go to state 404

  ! ELSE            [ reduce using rule 210 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV .) ]


state 397

    (214) ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE . controlStructureBody PV
    (215) ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE . controlStructureBody
    (71) controlStructureBody -> . block
    (72) controlStructureBody -> . statement
    (73) block -> . LCHAVE statements RCHAVE
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
    LCHAVE          shift and go to state 69
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    expression                     shift and go to state 118
    controlStructureBody           shift and go to state 405
    block                          shift and go to state 245
    statement                      shift and go to state 246
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 398

    (216) ifExpression -> IF LPAREN expression RPAREN PV ELSE . controlStructureBody PV
    (217) ifExpression -> IF LPAREN expression RPAREN PV ELSE . controlStructureBody
    (71) controlStructureBody -> . block
    (72) controlStructureBody -> . statement
    (73) block -> . LCHAVE statements RCHAVE
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
    LCHAVE          shift and go to state 69
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    expression                     shift and go to state 118
    controlStructureBody           shift and go to state 406
    block                          shift and go to state 245
    statement                      shift and go to state 246
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 399

    (218) ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody . PV
    (219) ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 407
    INCREMENTO      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    DECREMENTO      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    MENOR           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    LCCT            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    LPAREN          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    PONTO           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    COLONCOLON      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    RCHAVE          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    FUN             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    FOR             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    WHILE           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    DO              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    ID              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    CROSSINLINE     reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    IMPORT          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    INIT            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    NOINLINE        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    OUT             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    VARARG          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    WHERE           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    LITERAL_STRING  reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    DOISP           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    IF              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    RETURN          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    RETURN_AT       reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    CONTINUE        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    CONTINUE_AT     reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    BREAK           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    BREAK_AT        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    MINUS           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    PLUS            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    NOT             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    SUSPEND         reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    MAIORIGUAL      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    MENORIGUAL      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    MULTIGUAL       reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    DIVIGUAL        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    MODIGUAL        reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    AS              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    OR              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    AND             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    DIFERENTE       reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    IDENTIDADE      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    IGUALDADE       reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    MAIOR           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    IN              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    NOT_IN          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    IS              reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    NOT_IS          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    ELVIS           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    PONTOPONTO      reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    MULT            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    DIVIDE          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    MOD             reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    LCHAVE          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    ELSE            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    $end            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    COMMA           reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    RPAREN          reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)
    RCCT            reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .)

  ! PV              [ reduce using rule 219 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody .) ]


state 400

    (179) pwot -> parameterWithOptionalType COMMA pwot COMMA .

    RPAREN          reduce using rule 179 (pwot -> parameterWithOptionalType COMMA pwot COMMA .)
    COMMA           reduce using rule 179 (pwot -> parameterWithOptionalType COMMA pwot COMMA .)


state 401

    (181) parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP type .

    COMMA           reduce using rule 181 (parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 181 (parameterWithOptionalType -> parameterModifiers simpleIdentifier DOISP type .)


state 402

    (78) forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .

    FUN             reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DO              reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ID              reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DOISP           reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IF              reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    AS              reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    OR              reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    AND             reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IN              reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    IS              reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    PV              reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    $end            reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 78 (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody .)


state 403

    (80) forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .

    FUN             reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DO              reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ID              reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LPAREN          reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DOISP           reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IF              reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    AS              reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    OR              reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    AND             reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IN              reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    IS              reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    PV              reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    $end            reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 80 (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody .)


state 404

    (212) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE . controlStructureBody PV
    (213) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE . controlStructureBody
    (71) controlStructureBody -> . block
    (72) controlStructureBody -> . statement
    (73) block -> . LCHAVE statements RCHAVE
    (67) statement -> . functionDeclaration
    (68) statement -> . assignment
    (69) statement -> . loopStatement
    (70) statement -> . expression
    (3) functionDeclaration -> . FUN fd1 fd2 simpleIdentifier functionValueParameters fd3 fd5
    (86) assignment -> . directlyAssignableExpression IGUALDADE expression
    (87) assignment -> . assignableExpression assignmentAndOperator expression
    (74) loopStatement -> . forStatement_MD
    (75) loopStatement -> . forStatement_VD
    (76) loopStatement -> . whileStatement
    (77) loopStatement -> . doWhileStatement
    (88) expression -> . disjunction
    (130) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (131) directlyAssignableExpression -> . simpleIdentifier
    (132) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (134) assignableExpression -> . prefixUnaryExpression
    (135) assignableExpression -> . parenthesizedAssignableExpression
    (78) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN controlStructureBody
    (79) forStatement_MD -> . FOR LPAREN multiVariableDeclaration IN expression RPAREN
    (80) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN controlStructureBody
    (81) forStatement_VD -> . FOR LPAREN variableDeclaration IN expression RPAREN
    (82) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (83) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (84) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (85) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (89) disjunction -> . conjunction
    (90) disjunction -> . conjunction OR disjunction
    (121) postfixUnaryExpression -> . primaryExpression
    (122) postfixUnaryExpression -> . primaryExpression posue
    (266) simpleIdentifier -> . ID
    (267) simpleIdentifier -> . CROSSINLINE
    (268) simpleIdentifier -> . IMPORT
    (269) simpleIdentifier -> . INIT
    (270) simpleIdentifier -> . NOINLINE
    (271) simpleIdentifier -> . OUT
    (272) simpleIdentifier -> . VARARG
    (273) simpleIdentifier -> . WHERE
    (133) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (114) prefixUnaryExpression -> . preue postfixUnaryExpression
    (136) parenthesizedAssignableExpression -> . LPAREN assignableExpression RPAREN
    (91) conjunction -> . equality
    (92) conjunction -> . equality AND conjunction
    (164) primaryExpression -> . parenthesizedExpression
    (165) primaryExpression -> . simpleIdentifier
    (166) primaryExpression -> . LITERAL_STRING
    (167) primaryExpression -> . callableReference
    (168) primaryExpression -> . functionLiteral
    (169) primaryExpression -> . collectionLiteral
    (170) primaryExpression -> . ifExpression
    (171) primaryExpression -> . jumpExpression
    (115) preue -> . unaryPrefix
    (116) preue -> . unaryPrefix preue
    (117) preue -> .
    (93) equality -> . comparison
    (94) equality -> . comparison equalityOperator equality
    (172) parenthesizedExpression -> . LPAREN expression RPAREN
    (227) callableReference -> . receiverType DOISP DOISP simpleIdentifier
    (228) callableReference -> . DOISP DOISP simpleIdentifier
    (229) callableReference -> . receiverType DOISP DOISP CLASS
    (230) callableReference -> . DOISP DOISP CLASS
    (208) functionLiteral -> . lambdaLiteral
    (209) functionLiteral -> . anonymousFunction
    (173) collectionLiteral -> . LCCT cl RCCT
    (174) collectionLiteral -> . LCCT RCCT
    (210) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV
    (211) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody
    (212) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV
    (213) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody
    (214) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV
    (215) ifExpression -> . IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody
    (216) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody PV
    (217) ifExpression -> . IF LPAREN expression RPAREN PV ELSE controlStructureBody
    (218) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody PV
    (219) ifExpression -> . IF LPAREN expression RPAREN ELSE controlStructureBody
    (220) jumpExpression -> . RETURN expression
    (221) jumpExpression -> . RETURN_AT expression
    (222) jumpExpression -> . expression
    (223) jumpExpression -> . CONTINUE
    (224) jumpExpression -> . CONTINUE_AT
    (225) jumpExpression -> . BREAK
    (226) jumpExpression -> . BREAK_AT
    (118) unaryPrefix -> . label
    (119) unaryPrefix -> . prefixUnaryOperator
    (95) comparison -> . infixOperation
    (96) comparison -> . infixOperation comparisonOperator infixOperation
    (62) receiverType -> . typeModifier rt
    (188) lambdaLiteral -> . RCHAVE ll LCHAVE
    (197) anonymousFunction -> . FUN af4 parametersWithOptionalType af3 af1
    (200) anonymousFunction -> . WHERE af
    (120) label -> . simpleIdentifier
    (255) prefixUnaryOperator -> . INCREMENTO
    (256) prefixUnaryOperator -> . DECREMENTO
    (257) prefixUnaryOperator -> . MINUS
    (258) prefixUnaryOperator -> . PLUS
    (259) prefixUnaryOperator -> . NOT
    (97) infixOperation -> . elvisExpression io
    (41) typeModifier -> . SUSPEND
    (101) elvisExpression -> . infixFunctionCall
    (102) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (103) elvisExpression -> .
    (104) infixFunctionCall -> . rangeExpression
    (105) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (106) rangeExpression -> . additiveExpression
    (107) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (108) additiveExpression -> . multiplicativeExpression
    (109) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (110) multiplicativeExpression -> . asExpression
    (111) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (112) asExpression -> . prefixUnaryExpression
    (113) asExpression -> . prefixUnaryExpression asOperator type

  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for DOISP resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! shift/reduce conflict for RCHAVE resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MENOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for OR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for AND resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MAIOR resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELVIS resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MULT resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for MOD resolved using rule 103 (elvisExpression -> .)
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! reduce/reduce conflict for PV resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for $end resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 103 (elvisExpression -> .)
  ! reduce/reduce conflict for RCCT resolved using rule 103 (elvisExpression -> .)
    LCHAVE          shift and go to state 69
    FUN             shift and go to state 119
    FOR             shift and go to state 131
    WHILE           shift and go to state 133
    DO              shift and go to state 134
    ID              shift and go to state 15
    CROSSINLINE     shift and go to state 16
    IMPORT          shift and go to state 17
    INIT            shift and go to state 18
    NOINLINE        shift and go to state 19
    OUT             shift and go to state 20
    VARARG          shift and go to state 21
    WHERE           shift and go to state 136
    LPAREN          shift and go to state 132
    LITERAL_STRING  shift and go to state 138
    DOISP           shift and go to state 145
    LCCT            shift and go to state 148
    IF              shift and go to state 149
    RETURN          shift and go to state 150
    RETURN_AT       shift and go to state 151
    CONTINUE        shift and go to state 152
    CONTINUE_AT     shift and go to state 153
    BREAK           shift and go to state 154
    BREAK_AT        shift and go to state 155
    RCHAVE          shift and go to state 113
    INCREMENTO      shift and go to state 107
    DECREMENTO      shift and go to state 108
    MINUS           shift and go to state 109
    PLUS            shift and go to state 110
    NOT             shift and go to state 111
    SUSPEND         shift and go to state 11
    MAIORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MENORIGUAL      reduce using rule 103 (elvisExpression -> .)
    MULTIGUAL       reduce using rule 103 (elvisExpression -> .)
    DIVIGUAL        reduce using rule 103 (elvisExpression -> .)
    MODIGUAL        reduce using rule 103 (elvisExpression -> .)
    MENOR           reduce using rule 103 (elvisExpression -> .)
    PONTO           reduce using rule 103 (elvisExpression -> .)
    COLONCOLON      reduce using rule 103 (elvisExpression -> .)
    AS              reduce using rule 103 (elvisExpression -> .)
    OR              reduce using rule 103 (elvisExpression -> .)
    AND             reduce using rule 103 (elvisExpression -> .)
    DIFERENTE       reduce using rule 103 (elvisExpression -> .)
    IDENTIDADE      reduce using rule 103 (elvisExpression -> .)
    IGUALDADE       reduce using rule 103 (elvisExpression -> .)
    SEMIDENTIDADE   reduce using rule 103 (elvisExpression -> .)
    MAIOR           reduce using rule 103 (elvisExpression -> .)
    IN              reduce using rule 103 (elvisExpression -> .)
    NOT_IN          reduce using rule 103 (elvisExpression -> .)
    IS              reduce using rule 103 (elvisExpression -> .)
    NOT_IS          reduce using rule 103 (elvisExpression -> .)
    ELVIS           reduce using rule 103 (elvisExpression -> .)
    PONTOPONTO      reduce using rule 103 (elvisExpression -> .)
    MULT            reduce using rule 103 (elvisExpression -> .)
    DIVIDE          reduce using rule 103 (elvisExpression -> .)
    MOD             reduce using rule 103 (elvisExpression -> .)
    PV              reduce using rule 103 (elvisExpression -> .)
    ELSE            reduce using rule 103 (elvisExpression -> .)
    $end            reduce using rule 103 (elvisExpression -> .)
    COMMA           reduce using rule 103 (elvisExpression -> .)
    RPAREN          reduce using rule 103 (elvisExpression -> .)
    RCCT            reduce using rule 103 (elvisExpression -> .)

  ! LITERAL_STRING  [ reduce using rule 117 (preue -> .) ]
  ! LPAREN          [ reduce using rule 117 (preue -> .) ]
  ! ID              [ reduce using rule 117 (preue -> .) ]
  ! CROSSINLINE     [ reduce using rule 117 (preue -> .) ]
  ! IMPORT          [ reduce using rule 117 (preue -> .) ]
  ! INIT            [ reduce using rule 117 (preue -> .) ]
  ! NOINLINE        [ reduce using rule 117 (preue -> .) ]
  ! OUT             [ reduce using rule 117 (preue -> .) ]
  ! VARARG          [ reduce using rule 117 (preue -> .) ]
  ! WHERE           [ reduce using rule 117 (preue -> .) ]
  ! DOISP           [ reduce using rule 117 (preue -> .) ]
  ! LCCT            [ reduce using rule 117 (preue -> .) ]
  ! IF              [ reduce using rule 117 (preue -> .) ]
  ! RETURN          [ reduce using rule 117 (preue -> .) ]
  ! RETURN_AT       [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE        [ reduce using rule 117 (preue -> .) ]
  ! CONTINUE_AT     [ reduce using rule 117 (preue -> .) ]
  ! BREAK           [ reduce using rule 117 (preue -> .) ]
  ! BREAK_AT        [ reduce using rule 117 (preue -> .) ]
  ! RCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 117 (preue -> .) ]
  ! SUSPEND         [ reduce using rule 117 (preue -> .) ]
  ! INCREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! DECREMENTO      [ reduce using rule 117 (preue -> .) ]
  ! MINUS           [ reduce using rule 117 (preue -> .) ]
  ! PLUS            [ reduce using rule 117 (preue -> .) ]
  ! NOT             [ reduce using rule 117 (preue -> .) ]
  ! MENOR           [ reduce using rule 117 (preue -> .) ]
  ! PONTO           [ reduce using rule 117 (preue -> .) ]
  ! COLONCOLON      [ reduce using rule 117 (preue -> .) ]
  ! OR              [ reduce using rule 117 (preue -> .) ]
  ! AND             [ reduce using rule 117 (preue -> .) ]
  ! DIFERENTE       [ reduce using rule 117 (preue -> .) ]
  ! IDENTIDADE      [ reduce using rule 117 (preue -> .) ]
  ! IGUALDADE       [ reduce using rule 117 (preue -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 117 (preue -> .) ]
  ! MAIOR           [ reduce using rule 117 (preue -> .) ]
  ! MENORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! MAIORIGUAL      [ reduce using rule 117 (preue -> .) ]
  ! IN              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IN          [ reduce using rule 117 (preue -> .) ]
  ! IS              [ reduce using rule 117 (preue -> .) ]
  ! NOT_IS          [ reduce using rule 117 (preue -> .) ]
  ! ELVIS           [ reduce using rule 117 (preue -> .) ]
  ! PONTOPONTO      [ reduce using rule 117 (preue -> .) ]
  ! MULT            [ reduce using rule 117 (preue -> .) ]
  ! DIVIDE          [ reduce using rule 117 (preue -> .) ]
  ! MOD             [ reduce using rule 117 (preue -> .) ]
  ! AS              [ reduce using rule 117 (preue -> .) ]
  ! FOR             [ reduce using rule 117 (preue -> .) ]
  ! WHILE           [ reduce using rule 117 (preue -> .) ]
  ! DO              [ reduce using rule 117 (preue -> .) ]
  ! MULTIGUAL       [ reduce using rule 117 (preue -> .) ]
  ! DIVIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! MODIGUAL        [ reduce using rule 117 (preue -> .) ]
  ! LCHAVE          [ reduce using rule 117 (preue -> .) ]
  ! PV              [ reduce using rule 117 (preue -> .) ]
  ! ELSE            [ reduce using rule 117 (preue -> .) ]
  ! $end            [ reduce using rule 117 (preue -> .) ]
  ! COMMA           [ reduce using rule 117 (preue -> .) ]
  ! RPAREN          [ reduce using rule 117 (preue -> .) ]
  ! RCCT            [ reduce using rule 117 (preue -> .) ]
  ! FUN             [ reduce using rule 103 (elvisExpression -> .) ]
  ! FOR             [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHILE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! DO              [ reduce using rule 103 (elvisExpression -> .) ]
  ! ID              [ reduce using rule 103 (elvisExpression -> .) ]
  ! CROSSINLINE     [ reduce using rule 103 (elvisExpression -> .) ]
  ! IMPORT          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INIT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOINLINE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! OUT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! VARARG          [ reduce using rule 103 (elvisExpression -> .) ]
  ! WHERE           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LPAREN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! LITERAL_STRING  [ reduce using rule 103 (elvisExpression -> .) ]
  ! DOISP           [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCCT            [ reduce using rule 103 (elvisExpression -> .) ]
  ! IF              [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN          [ reduce using rule 103 (elvisExpression -> .) ]
  ! RETURN_AT       [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE        [ reduce using rule 103 (elvisExpression -> .) ]
  ! CONTINUE_AT     [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK           [ reduce using rule 103 (elvisExpression -> .) ]
  ! BREAK_AT        [ reduce using rule 103 (elvisExpression -> .) ]
  ! RCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]
  ! INCREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! DECREMENTO      [ reduce using rule 103 (elvisExpression -> .) ]
  ! MINUS           [ reduce using rule 103 (elvisExpression -> .) ]
  ! PLUS            [ reduce using rule 103 (elvisExpression -> .) ]
  ! NOT             [ reduce using rule 103 (elvisExpression -> .) ]
  ! SUSPEND         [ reduce using rule 103 (elvisExpression -> .) ]
  ! LCHAVE          [ reduce using rule 103 (elvisExpression -> .) ]

    expression                     shift and go to state 118
    controlStructureBody           shift and go to state 408
    block                          shift and go to state 245
    statement                      shift and go to state 246
    functionDeclaration            shift and go to state 115
    assignment                     shift and go to state 116
    loopStatement                  shift and go to state 117
    simpleIdentifier               shift and go to state 120
    directlyAssignableExpression   shift and go to state 121
    assignableExpression           shift and go to state 122
    forStatement_MD                shift and go to state 123
    forStatement_VD                shift and go to state 124
    whileStatement                 shift and go to state 125
    doWhileStatement               shift and go to state 126
    disjunction                    shift and go to state 90
    postfixUnaryExpression         shift and go to state 127
    parenthesizedDirectlyAssignableExpression shift and go to state 128
    prefixUnaryExpression          shift and go to state 129
    parenthesizedAssignableExpression shift and go to state 130
    conjunction                    shift and go to state 91
    primaryExpression              shift and go to state 135
    preue                          shift and go to state 103
    equality                       shift and go to state 92
    parenthesizedExpression        shift and go to state 137
    callableReference              shift and go to state 139
    functionLiteral                shift and go to state 140
    collectionLiteral              shift and go to state 141
    ifExpression                   shift and go to state 142
    jumpExpression                 shift and go to state 143
    unaryPrefix                    shift and go to state 104
    comparison                     shift and go to state 93
    receiverType                   shift and go to state 144
    lambdaLiteral                  shift and go to state 146
    anonymousFunction              shift and go to state 147
    label                          shift and go to state 105
    prefixUnaryOperator            shift and go to state 106
    infixOperation                 shift and go to state 94
    typeModifier                   shift and go to state 10
    elvisExpression                shift and go to state 95
    infixFunctionCall              shift and go to state 96
    rangeExpression                shift and go to state 97
    additiveExpression             shift and go to state 99
    multiplicativeExpression       shift and go to state 100
    asExpression                   shift and go to state 101

state 405

    (214) ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody . PV
    (215) ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 409
    INCREMENTO      reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    DECREMENTO      reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    MENOR           reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    LCCT            reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    LPAREN          reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    PONTO           reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    COLONCOLON      reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    RCHAVE          reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    FUN             reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    FOR             reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    WHILE           reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    DO              reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    ID              reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    CROSSINLINE     reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    IMPORT          reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    INIT            reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    NOINLINE        reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    OUT             reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    VARARG          reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    WHERE           reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    LITERAL_STRING  reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    DOISP           reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    IF              reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    RETURN          reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    RETURN_AT       reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    CONTINUE        reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    CONTINUE_AT     reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    BREAK           reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    BREAK_AT        reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    MINUS           reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    PLUS            reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    NOT             reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    SUSPEND         reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    MAIORIGUAL      reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    MENORIGUAL      reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    MULTIGUAL       reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    DIVIGUAL        reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    MODIGUAL        reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    AS              reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    OR              reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    AND             reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    DIFERENTE       reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    IDENTIDADE      reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    IGUALDADE       reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    MAIOR           reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    IN              reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    NOT_IN          reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    IS              reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    NOT_IS          reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    ELVIS           reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    PONTOPONTO      reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    MULT            reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    DIVIDE          reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    MOD             reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    LCHAVE          reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    ELSE            reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    $end            reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    COMMA           reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    RPAREN          reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)
    RCCT            reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .)

  ! PV              [ reduce using rule 215 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody .) ]


state 406

    (216) ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody . PV
    (217) ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 410
    INCREMENTO      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    DECREMENTO      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    MENOR           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    LCCT            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    LPAREN          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    PONTO           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    COLONCOLON      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    RCHAVE          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    FUN             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    FOR             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    WHILE           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    DO              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    ID              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    CROSSINLINE     reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    IMPORT          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    INIT            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    NOINLINE        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    OUT             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    VARARG          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    WHERE           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    LITERAL_STRING  reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    DOISP           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    IF              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    RETURN          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    RETURN_AT       reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    CONTINUE        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    CONTINUE_AT     reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    BREAK           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    BREAK_AT        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    MINUS           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    PLUS            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    NOT             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    SUSPEND         reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    MAIORIGUAL      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    MENORIGUAL      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    MULTIGUAL       reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    DIVIGUAL        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    MODIGUAL        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    AS              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    OR              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    AND             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    DIFERENTE       reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    IDENTIDADE      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    IGUALDADE       reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    MAIOR           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    IN              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    NOT_IN          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    IS              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    NOT_IS          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    ELVIS           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    PONTOPONTO      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    MULT            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    DIVIDE          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    MOD             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    LCHAVE          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    ELSE            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    $end            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    COMMA           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    RPAREN          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)
    RCCT            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .)

  ! PV              [ reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody .) ]


state 407

    (218) ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .

    INCREMENTO      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    DECREMENTO      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    MENOR           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    LCCT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    LPAREN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    PONTO           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    COLONCOLON      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    RCHAVE          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    FUN             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    FOR             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    WHILE           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    DO              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    ID              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    CROSSINLINE     reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    IMPORT          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    INIT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    NOINLINE        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    OUT             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    VARARG          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    WHERE           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    LITERAL_STRING  reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    DOISP           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    IF              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    RETURN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    RETURN_AT       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    CONTINUE        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    CONTINUE_AT     reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    BREAK           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    BREAK_AT        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    MINUS           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    PLUS            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    NOT             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    SUSPEND         reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    MAIORIGUAL      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    MENORIGUAL      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    MULTIGUAL       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    DIVIGUAL        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    MODIGUAL        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    AS              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    OR              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    AND             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    DIFERENTE       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    IDENTIDADE      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    IGUALDADE       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    SEMIDENTIDADE   reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    MAIOR           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    IN              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    NOT_IN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    IS              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    NOT_IS          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    ELVIS           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    PONTOPONTO      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    MULT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    DIVIDE          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    MOD             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    LCHAVE          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    PV              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    ELSE            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    $end            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    COMMA           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    RPAREN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)
    RCCT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN ELSE controlStructureBody PV .)


state 408

    (212) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody . PV
    (213) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 411
    INCREMENTO      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    DECREMENTO      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    MENOR           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    LCCT            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    LPAREN          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    PONTO           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    COLONCOLON      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    RCHAVE          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    FUN             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    FOR             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    WHILE           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    DO              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    ID              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    CROSSINLINE     reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    IMPORT          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    INIT            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    NOINLINE        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    OUT             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    VARARG          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    WHERE           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    LITERAL_STRING  reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    DOISP           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    IF              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    RETURN          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    RETURN_AT       reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    CONTINUE        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    CONTINUE_AT     reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    BREAK           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    BREAK_AT        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    MINUS           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    PLUS            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    NOT             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    SUSPEND         reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    MAIORIGUAL      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    MENORIGUAL      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    MULTIGUAL       reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    DIVIGUAL        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    MODIGUAL        reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    AS              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    OR              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    AND             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    DIFERENTE       reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    IDENTIDADE      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    IGUALDADE       reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    MAIOR           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    IN              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    NOT_IN          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    IS              reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    NOT_IS          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    ELVIS           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    PONTOPONTO      reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    MULT            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    DIVIDE          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    MOD             reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    LCHAVE          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    ELSE            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    $end            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    COMMA           reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    RPAREN          reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)
    RCCT            reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .)

  ! PV              [ reduce using rule 213 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody .) ]


state 409

    (214) ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .

    INCREMENTO      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    DECREMENTO      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    MENOR           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    LCCT            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    LPAREN          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    PONTO           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    COLONCOLON      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    RCHAVE          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    FUN             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    FOR             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    WHILE           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    DO              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    ID              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    CROSSINLINE     reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    IMPORT          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    INIT            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    NOINLINE        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    OUT             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    VARARG          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    WHERE           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    LITERAL_STRING  reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    DOISP           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    IF              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    RETURN          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    RETURN_AT       reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    CONTINUE        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    CONTINUE_AT     reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    BREAK           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    BREAK_AT        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    MINUS           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    PLUS            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    NOT             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    SUSPEND         reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    MAIORIGUAL      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    MENORIGUAL      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    MULTIGUAL       reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    DIVIGUAL        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    MODIGUAL        reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    AS              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    OR              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    AND             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    DIFERENTE       reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    IDENTIDADE      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    IGUALDADE       reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    SEMIDENTIDADE   reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    MAIOR           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    IN              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    NOT_IN          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    IS              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    NOT_IS          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    ELVIS           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    PONTOPONTO      reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    MULT            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    DIVIDE          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    MOD             reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    LCHAVE          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    PV              reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    ELSE            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    $end            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    COMMA           reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    RPAREN          reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)
    RCCT            reduce using rule 214 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody ELSE controlStructureBody PV .)


state 410

    (216) ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .

    INCREMENTO      reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    DECREMENTO      reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    MENOR           reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    LCCT            reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    LPAREN          reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    PONTO           reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    COLONCOLON      reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    RCHAVE          reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    FUN             reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    FOR             reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    WHILE           reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    DO              reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    ID              reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    CROSSINLINE     reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    IMPORT          reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    INIT            reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    NOINLINE        reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    OUT             reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    VARARG          reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    WHERE           reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    LITERAL_STRING  reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    DOISP           reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    IF              reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    RETURN          reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    RETURN_AT       reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    CONTINUE        reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    CONTINUE_AT     reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    BREAK           reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    BREAK_AT        reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    MINUS           reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    PLUS            reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    NOT             reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    SUSPEND         reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    MAIORIGUAL      reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    MENORIGUAL      reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    MULTIGUAL       reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    DIVIGUAL        reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    MODIGUAL        reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    AS              reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    OR              reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    AND             reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    DIFERENTE       reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    IDENTIDADE      reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    IGUALDADE       reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    SEMIDENTIDADE   reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    MAIOR           reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    IN              reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    NOT_IN          reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    IS              reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    NOT_IS          reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    ELVIS           reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    PONTOPONTO      reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    MULT            reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    DIVIDE          reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    MOD             reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    LCHAVE          reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    PV              reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    ELSE            reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    $end            reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    COMMA           reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    RPAREN          reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)
    RCCT            reduce using rule 216 (ifExpression -> IF LPAREN expression RPAREN PV ELSE controlStructureBody PV .)


state 411

    (212) ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .

    INCREMENTO      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    DECREMENTO      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    MENOR           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    LCCT            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    LPAREN          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    PONTO           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    COLONCOLON      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    RCHAVE          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    FUN             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    FOR             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    WHILE           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    DO              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    ID              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    CROSSINLINE     reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    IMPORT          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    INIT            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    NOINLINE        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    OUT             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    VARARG          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    WHERE           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    LITERAL_STRING  reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    DOISP           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    IF              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    RETURN          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    RETURN_AT       reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    CONTINUE        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    CONTINUE_AT     reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    BREAK           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    BREAK_AT        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    MINUS           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    PLUS            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    NOT             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    SUSPEND         reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    MAIORIGUAL      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    MENORIGUAL      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    MULTIGUAL       reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    DIVIGUAL        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    MODIGUAL        reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    AS              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    OR              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    AND             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    DIFERENTE       reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    IDENTIDADE      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    IGUALDADE       reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    SEMIDENTIDADE   reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    MAIOR           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    IN              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    NOT_IN          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    IS              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    NOT_IS          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    ELVIS           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    PONTOPONTO      reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    MULT            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    DIVIDE          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    MOD             reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    LCHAVE          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    PV              reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    ELSE            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    $end            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    COMMA           reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    RPAREN          reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)
    RCCT            reduce using rule 212 (ifExpression -> IF LPAREN expression RPAREN controlStructureBody PV ELSE controlStructureBody PV .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOISP in state 31 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 32 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 37 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 37 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 44 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 47 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 54 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 54 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 55 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 59 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 68 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for NOT in state 68 resolved as shift
WARNING: shift/reduce conflict for ID in state 68 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 68 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 68 resolved as shift
WARNING: shift/reduce conflict for INIT in state 68 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 68 resolved as shift
WARNING: shift/reduce conflict for OUT in state 68 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 68 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 68 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 69 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 69 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 69 resolved as shift
WARNING: shift/reduce conflict for INIT in state 69 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 69 resolved as shift
WARNING: shift/reduce conflict for OUT in state 69 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 69 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 69 resolved as shift
WARNING: shift/reduce conflict for FUN in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for DO in state 69 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 69 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 69 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 69 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 69 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 69 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 69 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 69 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 69 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 69 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for NOT in state 69 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 69 resolved as shift
WARNING: shift/reduce conflict for FUN in state 69 resolved as shift
WARNING: shift/reduce conflict for FOR in state 69 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 69 resolved as shift
WARNING: shift/reduce conflict for DO in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 69 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 69 resolved as shift
WARNING: shift/reduce conflict for INIT in state 69 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 69 resolved as shift
WARNING: shift/reduce conflict for OUT in state 69 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 69 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 69 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 69 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 69 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 69 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 69 resolved as shift
WARNING: shift/reduce conflict for IF in state 69 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 69 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 69 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 69 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 69 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 69 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 69 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 69 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 69 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for NOT in state 69 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 69 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 73 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for NOT in state 73 resolved as shift
WARNING: shift/reduce conflict for ID in state 73 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 73 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 73 resolved as shift
WARNING: shift/reduce conflict for INIT in state 73 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 73 resolved as shift
WARNING: shift/reduce conflict for OUT in state 73 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 73 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 93 resolved as shift
WARNING: shift/reduce conflict for IDENTIDADE in state 93 resolved as shift
WARNING: shift/reduce conflict for IGUALDADE in state 93 resolved as shift
WARNING: shift/reduce conflict for SEMIDENTIDADE in state 93 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 94 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 94 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for IN in state 95 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 95 resolved as shift
WARNING: shift/reduce conflict for IS in state 95 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 95 resolved as shift
WARNING: shift/reduce conflict for ELVIS in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 97 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 97 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 97 resolved as shift
WARNING: shift/reduce conflict for INIT in state 97 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 97 resolved as shift
WARNING: shift/reduce conflict for OUT in state 97 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 97 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 97 resolved as shift
WARNING: shift/reduce conflict for PONTOPONTO in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MULT in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for MOD in state 101 resolved as shift
WARNING: shift/reduce conflict for AS in state 102 resolved as shift
WARNING: shift/reduce conflict for FUN in state 103 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 103 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 103 resolved as shift
WARNING: shift/reduce conflict for INIT in state 103 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 103 resolved as shift
WARNING: shift/reduce conflict for OUT in state 103 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 103 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 103 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 103 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 103 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 103 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 103 resolved as shift
WARNING: shift/reduce conflict for IF in state 103 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 103 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 103 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 103 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 103 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 103 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 103 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 103 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 103 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 103 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 103 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 103 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 103 resolved as shift
WARNING: shift/reduce conflict for INIT in state 103 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 103 resolved as shift
WARNING: shift/reduce conflict for OUT in state 103 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 103 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 103 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 103 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 103 resolved as shift
WARNING: shift/reduce conflict for IF in state 103 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 103 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 103 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 103 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 103 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 103 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 103 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 103 resolved as shift
WARNING: shift/reduce conflict for FUN in state 103 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 103 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 103 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for NOT in state 103 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 104 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for NOT in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 104 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 104 resolved as shift
WARNING: shift/reduce conflict for INIT in state 104 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 104 resolved as shift
WARNING: shift/reduce conflict for OUT in state 104 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 104 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 104 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 113 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 113 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 113 resolved as shift
WARNING: shift/reduce conflict for INIT in state 113 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 113 resolved as shift
WARNING: shift/reduce conflict for OUT in state 113 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 113 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 113 resolved as shift
WARNING: shift/reduce conflict for FUN in state 113 resolved as shift
WARNING: shift/reduce conflict for FOR in state 113 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 113 resolved as shift
WARNING: shift/reduce conflict for DO in state 113 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 113 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 113 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 113 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 113 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 113 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 113 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 113 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 113 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 113 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for NOT in state 113 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 113 resolved as shift
WARNING: shift/reduce conflict for FUN in state 113 resolved as shift
WARNING: shift/reduce conflict for FOR in state 113 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 113 resolved as shift
WARNING: shift/reduce conflict for DO in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 113 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 113 resolved as shift
WARNING: shift/reduce conflict for INIT in state 113 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 113 resolved as shift
WARNING: shift/reduce conflict for OUT in state 113 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 113 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 113 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 113 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 113 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 113 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 113 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 113 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 113 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 113 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 113 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 113 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 113 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 113 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for NOT in state 113 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 113 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 114 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 114 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 114 resolved as shift
WARNING: shift/reduce conflict for INIT in state 114 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 114 resolved as shift
WARNING: shift/reduce conflict for OUT in state 114 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 114 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 114 resolved as shift
WARNING: shift/reduce conflict for FUN in state 114 resolved as shift
WARNING: shift/reduce conflict for FOR in state 114 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 114 resolved as shift
WARNING: shift/reduce conflict for DO in state 114 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 114 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 114 resolved as shift
WARNING: shift/reduce conflict for IF in state 114 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 114 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 114 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 114 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 114 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 114 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 114 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 114 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 114 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT in state 114 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 114 resolved as shift
WARNING: shift/reduce conflict for FUN in state 114 resolved as shift
WARNING: shift/reduce conflict for FOR in state 114 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 114 resolved as shift
WARNING: shift/reduce conflict for DO in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 114 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 114 resolved as shift
WARNING: shift/reduce conflict for INIT in state 114 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 114 resolved as shift
WARNING: shift/reduce conflict for OUT in state 114 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 114 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 114 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 114 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 114 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 114 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 114 resolved as shift
WARNING: shift/reduce conflict for IF in state 114 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 114 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 114 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 114 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 114 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 114 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 114 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 114 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 114 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT in state 114 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 114 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 119 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 119 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 119 resolved as shift
WARNING: shift/reduce conflict for INIT in state 119 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 119 resolved as shift
WARNING: shift/reduce conflict for OUT in state 119 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 119 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 119 resolved as shift
WARNING: shift/reduce conflict for AS in state 129 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 132 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 132 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 132 resolved as shift
WARNING: shift/reduce conflict for INIT in state 132 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 132 resolved as shift
WARNING: shift/reduce conflict for OUT in state 132 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 132 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 132 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 132 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 132 resolved as shift
WARNING: shift/reduce conflict for IF in state 132 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 132 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 132 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 132 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 132 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 132 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 132 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 132 resolved as shift
WARNING: shift/reduce conflict for FUN in state 132 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 132 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 132 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 132 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 132 resolved as shift
WARNING: shift/reduce conflict for NOT in state 132 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 132 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 132 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 132 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 132 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 132 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 134 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 134 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 134 resolved as shift
WARNING: shift/reduce conflict for INIT in state 134 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 134 resolved as shift
WARNING: shift/reduce conflict for OUT in state 134 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 134 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 134 resolved as shift
WARNING: shift/reduce conflict for FUN in state 134 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 134 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 134 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 134 resolved as shift
WARNING: shift/reduce conflict for IF in state 134 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 134 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 134 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 134 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 134 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 134 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 134 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 134 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 134 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 134 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 134 resolved as shift
WARNING: shift/reduce conflict for NOT in state 134 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 134 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 134 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 134 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 134 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 134 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 134 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 134 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 135 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 135 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 135 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 135 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 135 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 135 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 135 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 136 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 136 resolved as shift
WARNING: shift/reduce conflict for INIT in state 136 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 136 resolved as shift
WARNING: shift/reduce conflict for OUT in state 136 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 136 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 136 resolved as shift
WARNING: shift/reduce conflict for RCCT in state 148 resolved as shift
WARNING: shift/reduce conflict for RCCT in state 148 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 148 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 148 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 148 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 148 resolved as shift
WARNING: shift/reduce conflict for NOT in state 148 resolved as shift
WARNING: shift/reduce conflict for ID in state 148 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 148 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 148 resolved as shift
WARNING: shift/reduce conflict for INIT in state 148 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 148 resolved as shift
WARNING: shift/reduce conflict for OUT in state 148 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 148 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 148 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 150 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 150 resolved as shift
WARNING: shift/reduce conflict for NOT in state 150 resolved as shift
WARNING: shift/reduce conflict for ID in state 150 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 150 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 150 resolved as shift
WARNING: shift/reduce conflict for INIT in state 150 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 150 resolved as shift
WARNING: shift/reduce conflict for OUT in state 150 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 150 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 150 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 151 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 151 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 151 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 151 resolved as shift
WARNING: shift/reduce conflict for NOT in state 151 resolved as shift
WARNING: shift/reduce conflict for ID in state 151 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 151 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 151 resolved as shift
WARNING: shift/reduce conflict for INIT in state 151 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 151 resolved as shift
WARNING: shift/reduce conflict for OUT in state 151 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 151 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 151 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 166 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 170 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 170 resolved as shift
WARNING: shift/reduce conflict for ID in state 170 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 170 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 170 resolved as shift
WARNING: shift/reduce conflict for INIT in state 170 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 170 resolved as shift
WARNING: shift/reduce conflict for OUT in state 170 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 170 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 170 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 172 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 172 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 172 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 172 resolved as shift
WARNING: shift/reduce conflict for NOT in state 172 resolved as shift
WARNING: shift/reduce conflict for ID in state 172 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 172 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 172 resolved as shift
WARNING: shift/reduce conflict for INIT in state 172 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 172 resolved as shift
WARNING: shift/reduce conflict for OUT in state 172 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 172 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 172 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 173 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 173 resolved as shift
WARNING: shift/reduce conflict for NOT in state 173 resolved as shift
WARNING: shift/reduce conflict for ID in state 173 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 173 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 173 resolved as shift
WARNING: shift/reduce conflict for INIT in state 173 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 173 resolved as shift
WARNING: shift/reduce conflict for OUT in state 173 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 173 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 173 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 174 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 174 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 174 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 174 resolved as shift
WARNING: shift/reduce conflict for NOT in state 174 resolved as shift
WARNING: shift/reduce conflict for ID in state 174 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 174 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 174 resolved as shift
WARNING: shift/reduce conflict for INIT in state 174 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 174 resolved as shift
WARNING: shift/reduce conflict for OUT in state 174 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 174 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 174 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 179 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 179 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 179 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 179 resolved as shift
WARNING: shift/reduce conflict for NOT in state 179 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 179 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 179 resolved as shift
WARNING: shift/reduce conflict for INIT in state 179 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 179 resolved as shift
WARNING: shift/reduce conflict for OUT in state 179 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 179 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 179 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 185 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 185 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 185 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 185 resolved as shift
WARNING: shift/reduce conflict for NOT in state 185 resolved as shift
WARNING: shift/reduce conflict for ID in state 185 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 185 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 185 resolved as shift
WARNING: shift/reduce conflict for INIT in state 185 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 185 resolved as shift
WARNING: shift/reduce conflict for OUT in state 185 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 185 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 185 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 191 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 191 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 191 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 191 resolved as shift
WARNING: shift/reduce conflict for NOT in state 191 resolved as shift
WARNING: shift/reduce conflict for ID in state 191 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 191 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 191 resolved as shift
WARNING: shift/reduce conflict for INIT in state 191 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 191 resolved as shift
WARNING: shift/reduce conflict for OUT in state 191 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 191 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 191 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 192 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 192 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 192 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 192 resolved as shift
WARNING: shift/reduce conflict for NOT in state 192 resolved as shift
WARNING: shift/reduce conflict for ID in state 192 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 192 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 192 resolved as shift
WARNING: shift/reduce conflict for INIT in state 192 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 192 resolved as shift
WARNING: shift/reduce conflict for OUT in state 192 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 192 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 192 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 193 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 193 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 193 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 193 resolved as shift
WARNING: shift/reduce conflict for NOT in state 193 resolved as shift
WARNING: shift/reduce conflict for ID in state 193 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 193 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 193 resolved as shift
WARNING: shift/reduce conflict for INIT in state 193 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 193 resolved as shift
WARNING: shift/reduce conflict for OUT in state 193 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 193 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 193 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 194 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 194 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 194 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 194 resolved as shift
WARNING: shift/reduce conflict for NOT in state 194 resolved as shift
WARNING: shift/reduce conflict for ID in state 194 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 194 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 194 resolved as shift
WARNING: shift/reduce conflict for INIT in state 194 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 194 resolved as shift
WARNING: shift/reduce conflict for OUT in state 194 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 194 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 194 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 197 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 197 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 197 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 197 resolved as shift
WARNING: shift/reduce conflict for NOT in state 197 resolved as shift
WARNING: shift/reduce conflict for ID in state 197 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 197 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 197 resolved as shift
WARNING: shift/reduce conflict for INIT in state 197 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 197 resolved as shift
WARNING: shift/reduce conflict for OUT in state 197 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 197 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 197 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 205 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 205 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 205 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 205 resolved as shift
WARNING: shift/reduce conflict for NOT in state 205 resolved as shift
WARNING: shift/reduce conflict for ID in state 205 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 205 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 205 resolved as shift
WARNING: shift/reduce conflict for INIT in state 205 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 205 resolved as shift
WARNING: shift/reduce conflict for OUT in state 205 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 205 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 205 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 207 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 213 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 213 resolved as shift
WARNING: shift/reduce conflict for ID in state 213 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 213 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 213 resolved as shift
WARNING: shift/reduce conflict for INIT in state 213 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 213 resolved as shift
WARNING: shift/reduce conflict for OUT in state 213 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 213 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 213 resolved as shift
WARNING: shift/reduce conflict for FUN in state 213 resolved as shift
WARNING: shift/reduce conflict for FOR in state 213 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 213 resolved as shift
WARNING: shift/reduce conflict for DO in state 213 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 213 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 213 resolved as shift
WARNING: shift/reduce conflict for IF in state 213 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 213 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 213 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 213 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 213 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 213 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 213 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 213 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 213 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 213 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 213 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 213 resolved as shift
WARNING: shift/reduce conflict for NOT in state 213 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 213 resolved as shift
WARNING: shift/reduce conflict for FUN in state 213 resolved as shift
WARNING: shift/reduce conflict for FOR in state 213 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 213 resolved as shift
WARNING: shift/reduce conflict for DO in state 213 resolved as shift
WARNING: shift/reduce conflict for ID in state 213 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 213 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 213 resolved as shift
WARNING: shift/reduce conflict for INIT in state 213 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 213 resolved as shift
WARNING: shift/reduce conflict for OUT in state 213 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 213 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 213 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 213 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 213 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 213 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 213 resolved as shift
WARNING: shift/reduce conflict for IF in state 213 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 213 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 213 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 213 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 213 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 213 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 213 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 213 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 213 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 213 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 213 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 213 resolved as shift
WARNING: shift/reduce conflict for NOT in state 213 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 213 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 217 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 218 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 218 resolved as shift
WARNING: shift/reduce conflict for ID in state 218 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 218 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 218 resolved as shift
WARNING: shift/reduce conflict for INIT in state 218 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 218 resolved as shift
WARNING: shift/reduce conflict for OUT in state 218 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 218 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 218 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 218 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 218 resolved as shift
WARNING: shift/reduce conflict for IF in state 218 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 218 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 218 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 218 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 218 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 218 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 218 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 218 resolved as shift
WARNING: shift/reduce conflict for FUN in state 218 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 218 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 218 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 218 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 218 resolved as shift
WARNING: shift/reduce conflict for NOT in state 218 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 218 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 218 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 218 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 218 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 218 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 218 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 222 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 222 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 222 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 222 resolved as shift
WARNING: shift/reduce conflict for NOT in state 222 resolved as shift
WARNING: shift/reduce conflict for ID in state 222 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 222 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 222 resolved as shift
WARNING: shift/reduce conflict for INIT in state 222 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 222 resolved as shift
WARNING: shift/reduce conflict for OUT in state 222 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 222 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 222 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 223 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 223 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 223 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 223 resolved as shift
WARNING: shift/reduce conflict for NOT in state 223 resolved as shift
WARNING: shift/reduce conflict for ID in state 223 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 223 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 223 resolved as shift
WARNING: shift/reduce conflict for INIT in state 223 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 223 resolved as shift
WARNING: shift/reduce conflict for OUT in state 223 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 223 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 223 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 233 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 233 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 233 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 233 resolved as shift
WARNING: shift/reduce conflict for NOT in state 233 resolved as shift
WARNING: shift/reduce conflict for ID in state 233 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 233 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 233 resolved as shift
WARNING: shift/reduce conflict for INIT in state 233 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 233 resolved as shift
WARNING: shift/reduce conflict for OUT in state 233 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 233 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 233 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 242 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 242 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 242 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 242 resolved as shift
WARNING: shift/reduce conflict for NOT in state 242 resolved as shift
WARNING: shift/reduce conflict for ID in state 242 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 242 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 242 resolved as shift
WARNING: shift/reduce conflict for INIT in state 242 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 242 resolved as shift
WARNING: shift/reduce conflict for OUT in state 242 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 242 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 242 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 248 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 248 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 248 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 248 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 248 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 248 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 248 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 248 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 250 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 250 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 256 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 258 resolved as shift
WARNING: shift/reduce conflict for ID in state 258 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 258 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 258 resolved as shift
WARNING: shift/reduce conflict for INIT in state 258 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 258 resolved as shift
WARNING: shift/reduce conflict for OUT in state 258 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 258 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 258 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 258 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 258 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 258 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 258 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 258 resolved as shift
WARNING: shift/reduce conflict for NOT in state 258 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 261 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 268 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 268 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 268 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 268 resolved as shift
WARNING: shift/reduce conflict for NOT in state 268 resolved as shift
WARNING: shift/reduce conflict for ID in state 268 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 268 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 268 resolved as shift
WARNING: shift/reduce conflict for INIT in state 268 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 268 resolved as shift
WARNING: shift/reduce conflict for OUT in state 268 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 268 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 268 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 290 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 290 resolved as shift
WARNING: shift/reduce conflict for ID in state 290 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 290 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 290 resolved as shift
WARNING: shift/reduce conflict for INIT in state 290 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 290 resolved as shift
WARNING: shift/reduce conflict for OUT in state 290 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 290 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 290 resolved as shift
WARNING: shift/reduce conflict for FUN in state 290 resolved as shift
WARNING: shift/reduce conflict for FOR in state 290 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 290 resolved as shift
WARNING: shift/reduce conflict for DO in state 290 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 290 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 290 resolved as shift
WARNING: shift/reduce conflict for IF in state 290 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 290 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 290 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 290 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 290 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 290 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 290 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 290 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 290 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 290 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 290 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 290 resolved as shift
WARNING: shift/reduce conflict for NOT in state 290 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 290 resolved as shift
WARNING: shift/reduce conflict for FUN in state 290 resolved as shift
WARNING: shift/reduce conflict for FOR in state 290 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 290 resolved as shift
WARNING: shift/reduce conflict for DO in state 290 resolved as shift
WARNING: shift/reduce conflict for ID in state 290 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 290 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 290 resolved as shift
WARNING: shift/reduce conflict for INIT in state 290 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 290 resolved as shift
WARNING: shift/reduce conflict for OUT in state 290 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 290 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 290 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 290 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 290 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 290 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 290 resolved as shift
WARNING: shift/reduce conflict for IF in state 290 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 290 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 290 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 290 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 290 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 290 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 290 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 290 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 290 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 290 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 290 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 290 resolved as shift
WARNING: shift/reduce conflict for NOT in state 290 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 290 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 297 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 298 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 316 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 316 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 316 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 316 resolved as shift
WARNING: shift/reduce conflict for NOT in state 316 resolved as shift
WARNING: shift/reduce conflict for ID in state 316 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 316 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 316 resolved as shift
WARNING: shift/reduce conflict for INIT in state 316 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 316 resolved as shift
WARNING: shift/reduce conflict for OUT in state 316 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 316 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 316 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 318 resolved as shift
WARNING: shift/reduce conflict for IGUALDADE in state 324 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 332 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 332 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 332 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 332 resolved as shift
WARNING: shift/reduce conflict for NOT in state 332 resolved as shift
WARNING: shift/reduce conflict for ID in state 332 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 332 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 332 resolved as shift
WARNING: shift/reduce conflict for INIT in state 332 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 332 resolved as shift
WARNING: shift/reduce conflict for OUT in state 332 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 332 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 332 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 340 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 343 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 350 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 350 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 350 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 350 resolved as shift
WARNING: shift/reduce conflict for NOT in state 350 resolved as shift
WARNING: shift/reduce conflict for ID in state 350 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 350 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 350 resolved as shift
WARNING: shift/reduce conflict for INIT in state 350 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 350 resolved as shift
WARNING: shift/reduce conflict for OUT in state 350 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 350 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 350 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 353 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 353 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 353 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 353 resolved as shift
WARNING: shift/reduce conflict for NOT in state 353 resolved as shift
WARNING: shift/reduce conflict for ID in state 353 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 353 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 353 resolved as shift
WARNING: shift/reduce conflict for INIT in state 353 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 353 resolved as shift
WARNING: shift/reduce conflict for OUT in state 353 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 353 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 353 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 354 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 354 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 354 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 354 resolved as shift
WARNING: shift/reduce conflict for NOT in state 354 resolved as shift
WARNING: shift/reduce conflict for ID in state 354 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 354 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 354 resolved as shift
WARNING: shift/reduce conflict for INIT in state 354 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 354 resolved as shift
WARNING: shift/reduce conflict for OUT in state 354 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 354 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 354 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 355 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 355 resolved as shift
WARNING: shift/reduce conflict for ID in state 355 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 355 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 355 resolved as shift
WARNING: shift/reduce conflict for INIT in state 355 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 355 resolved as shift
WARNING: shift/reduce conflict for OUT in state 355 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 355 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 355 resolved as shift
WARNING: shift/reduce conflict for FUN in state 355 resolved as shift
WARNING: shift/reduce conflict for FOR in state 355 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 355 resolved as shift
WARNING: shift/reduce conflict for DO in state 355 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 355 resolved as shift
WARNING: shift/reduce conflict for PV in state 355 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 355 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 355 resolved as shift
WARNING: shift/reduce conflict for IF in state 355 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 355 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 355 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 355 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 355 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 355 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 355 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 355 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 355 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 355 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 355 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 355 resolved as shift
WARNING: shift/reduce conflict for NOT in state 355 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 355 resolved as shift
WARNING: shift/reduce conflict for FUN in state 355 resolved as shift
WARNING: shift/reduce conflict for FOR in state 355 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 355 resolved as shift
WARNING: shift/reduce conflict for DO in state 355 resolved as shift
WARNING: shift/reduce conflict for ID in state 355 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 355 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 355 resolved as shift
WARNING: shift/reduce conflict for INIT in state 355 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 355 resolved as shift
WARNING: shift/reduce conflict for OUT in state 355 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 355 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 355 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 355 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 355 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 355 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 355 resolved as shift
WARNING: shift/reduce conflict for IF in state 355 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 355 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 355 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 355 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 355 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 355 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 355 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 355 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 355 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 355 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 355 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 355 resolved as shift
WARNING: shift/reduce conflict for NOT in state 355 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 355 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 355 resolved as shift
WARNING: shift/reduce conflict for PV in state 355 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 356 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 356 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 356 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 356 resolved as shift
WARNING: shift/reduce conflict for NOT in state 356 resolved as shift
WARNING: shift/reduce conflict for ID in state 356 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 356 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 356 resolved as shift
WARNING: shift/reduce conflict for INIT in state 356 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 356 resolved as shift
WARNING: shift/reduce conflict for OUT in state 356 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 356 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 356 resolved as shift
WARNING: shift/reduce conflict for ID in state 360 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 360 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 360 resolved as shift
WARNING: shift/reduce conflict for INIT in state 360 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 360 resolved as shift
WARNING: shift/reduce conflict for OUT in state 360 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 360 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 360 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 360 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 360 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 360 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 360 resolved as shift
WARNING: shift/reduce conflict for NOT in state 360 resolved as shift
WARNING: shift/reduce conflict for MULT in state 361 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 361 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 361 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 361 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 361 resolved as shift
WARNING: shift/reduce conflict for NOT in state 361 resolved as shift
WARNING: shift/reduce conflict for ID in state 361 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 361 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 361 resolved as shift
WARNING: shift/reduce conflict for INIT in state 361 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 361 resolved as shift
WARNING: shift/reduce conflict for OUT in state 361 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 361 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 361 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 367 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 367 resolved as shift
WARNING: shift/reduce conflict for ID in state 367 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 367 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 367 resolved as shift
WARNING: shift/reduce conflict for INIT in state 367 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 367 resolved as shift
WARNING: shift/reduce conflict for OUT in state 367 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 367 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 367 resolved as shift
WARNING: shift/reduce conflict for FUN in state 367 resolved as shift
WARNING: shift/reduce conflict for FOR in state 367 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 367 resolved as shift
WARNING: shift/reduce conflict for DO in state 367 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 367 resolved as shift
WARNING: shift/reduce conflict for PV in state 367 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 367 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 367 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 367 resolved as shift
WARNING: shift/reduce conflict for IF in state 367 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 367 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 367 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 367 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 367 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 367 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 367 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 367 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 367 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 367 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 367 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 367 resolved as shift
WARNING: shift/reduce conflict for NOT in state 367 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 367 resolved as shift
WARNING: shift/reduce conflict for FUN in state 367 resolved as shift
WARNING: shift/reduce conflict for FOR in state 367 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 367 resolved as shift
WARNING: shift/reduce conflict for DO in state 367 resolved as shift
WARNING: shift/reduce conflict for ID in state 367 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 367 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 367 resolved as shift
WARNING: shift/reduce conflict for INIT in state 367 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 367 resolved as shift
WARNING: shift/reduce conflict for OUT in state 367 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 367 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 367 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 367 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 367 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 367 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 367 resolved as shift
WARNING: shift/reduce conflict for IF in state 367 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 367 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 367 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 367 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 367 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 367 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 367 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 367 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 367 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 367 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 367 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 367 resolved as shift
WARNING: shift/reduce conflict for NOT in state 367 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 367 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 367 resolved as shift
WARNING: shift/reduce conflict for PV in state 367 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 367 resolved as shift
WARNING: shift/reduce conflict for PV in state 382 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 382 resolved as shift
WARNING: shift/reduce conflict for FUN in state 382 resolved as shift
WARNING: shift/reduce conflict for FOR in state 382 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 382 resolved as shift
WARNING: shift/reduce conflict for DO in state 382 resolved as shift
WARNING: shift/reduce conflict for ID in state 382 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 382 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 382 resolved as shift
WARNING: shift/reduce conflict for INIT in state 382 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 382 resolved as shift
WARNING: shift/reduce conflict for OUT in state 382 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 382 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 382 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 382 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 382 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 382 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 382 resolved as shift
WARNING: shift/reduce conflict for ID in state 382 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 382 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 382 resolved as shift
WARNING: shift/reduce conflict for INIT in state 382 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 382 resolved as shift
WARNING: shift/reduce conflict for OUT in state 382 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 382 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 382 resolved as shift
WARNING: shift/reduce conflict for FUN in state 382 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 382 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 382 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 382 resolved as shift
WARNING: shift/reduce conflict for IF in state 382 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 382 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 382 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 382 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 382 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 382 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 382 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 382 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 382 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 382 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 382 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 382 resolved as shift
WARNING: shift/reduce conflict for NOT in state 382 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 382 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 382 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 382 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 382 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 382 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 382 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 382 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 384 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 384 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 384 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 384 resolved as shift
WARNING: shift/reduce conflict for NOT in state 384 resolved as shift
WARNING: shift/reduce conflict for ID in state 384 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 384 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 384 resolved as shift
WARNING: shift/reduce conflict for INIT in state 384 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 384 resolved as shift
WARNING: shift/reduce conflict for OUT in state 384 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 384 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 384 resolved as shift
WARNING: shift/reduce conflict for PV in state 386 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 386 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 388 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 388 resolved as shift
WARNING: shift/reduce conflict for ID in state 388 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 388 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 388 resolved as shift
WARNING: shift/reduce conflict for INIT in state 388 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 388 resolved as shift
WARNING: shift/reduce conflict for OUT in state 388 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 388 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 388 resolved as shift
WARNING: shift/reduce conflict for FUN in state 388 resolved as shift
WARNING: shift/reduce conflict for FOR in state 388 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 388 resolved as shift
WARNING: shift/reduce conflict for DO in state 388 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 388 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 388 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 388 resolved as shift
WARNING: shift/reduce conflict for IF in state 388 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 388 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 388 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 388 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 388 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 388 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 388 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 388 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 388 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 388 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 388 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 388 resolved as shift
WARNING: shift/reduce conflict for NOT in state 388 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 388 resolved as shift
WARNING: shift/reduce conflict for FUN in state 388 resolved as shift
WARNING: shift/reduce conflict for FOR in state 388 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 388 resolved as shift
WARNING: shift/reduce conflict for DO in state 388 resolved as shift
WARNING: shift/reduce conflict for ID in state 388 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 388 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 388 resolved as shift
WARNING: shift/reduce conflict for INIT in state 388 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 388 resolved as shift
WARNING: shift/reduce conflict for OUT in state 388 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 388 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 388 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 388 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 388 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 388 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 388 resolved as shift
WARNING: shift/reduce conflict for IF in state 388 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 388 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 388 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 388 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 388 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 388 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 388 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 388 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 388 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 388 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 388 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 388 resolved as shift
WARNING: shift/reduce conflict for NOT in state 388 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 388 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 388 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 392 resolved as shift
WARNING: shift/reduce conflict for FUN in state 392 resolved as shift
WARNING: shift/reduce conflict for FOR in state 392 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 392 resolved as shift
WARNING: shift/reduce conflict for DO in state 392 resolved as shift
WARNING: shift/reduce conflict for ID in state 392 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 392 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 392 resolved as shift
WARNING: shift/reduce conflict for INIT in state 392 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 392 resolved as shift
WARNING: shift/reduce conflict for OUT in state 392 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 392 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 392 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 392 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 392 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 392 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 392 resolved as shift
WARNING: shift/reduce conflict for ID in state 392 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 392 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 392 resolved as shift
WARNING: shift/reduce conflict for INIT in state 392 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 392 resolved as shift
WARNING: shift/reduce conflict for OUT in state 392 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 392 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 392 resolved as shift
WARNING: shift/reduce conflict for FUN in state 392 resolved as shift
WARNING: shift/reduce conflict for FOR in state 392 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 392 resolved as shift
WARNING: shift/reduce conflict for DO in state 392 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 392 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 392 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 392 resolved as shift
WARNING: shift/reduce conflict for IF in state 392 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 392 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 392 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 392 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 392 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 392 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 392 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 392 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 392 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 392 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 392 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 392 resolved as shift
WARNING: shift/reduce conflict for NOT in state 392 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 392 resolved as shift
WARNING: shift/reduce conflict for FUN in state 392 resolved as shift
WARNING: shift/reduce conflict for FOR in state 392 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 392 resolved as shift
WARNING: shift/reduce conflict for DO in state 392 resolved as shift
WARNING: shift/reduce conflict for ID in state 392 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 392 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 392 resolved as shift
WARNING: shift/reduce conflict for INIT in state 392 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 392 resolved as shift
WARNING: shift/reduce conflict for OUT in state 392 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 392 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 392 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 392 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 392 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 392 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 392 resolved as shift
WARNING: shift/reduce conflict for IF in state 392 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 392 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 392 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 392 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 392 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 392 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 392 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 392 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 392 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 392 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 392 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 392 resolved as shift
WARNING: shift/reduce conflict for NOT in state 392 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 392 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 392 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 393 resolved as shift
WARNING: shift/reduce conflict for FUN in state 393 resolved as shift
WARNING: shift/reduce conflict for FOR in state 393 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 393 resolved as shift
WARNING: shift/reduce conflict for DO in state 393 resolved as shift
WARNING: shift/reduce conflict for ID in state 393 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 393 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 393 resolved as shift
WARNING: shift/reduce conflict for INIT in state 393 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 393 resolved as shift
WARNING: shift/reduce conflict for OUT in state 393 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 393 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 393 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 393 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 393 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 393 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 393 resolved as shift
WARNING: shift/reduce conflict for ID in state 393 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 393 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 393 resolved as shift
WARNING: shift/reduce conflict for INIT in state 393 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 393 resolved as shift
WARNING: shift/reduce conflict for OUT in state 393 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 393 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 393 resolved as shift
WARNING: shift/reduce conflict for FUN in state 393 resolved as shift
WARNING: shift/reduce conflict for FOR in state 393 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 393 resolved as shift
WARNING: shift/reduce conflict for DO in state 393 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 393 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 393 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 393 resolved as shift
WARNING: shift/reduce conflict for IF in state 393 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 393 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 393 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 393 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 393 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 393 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 393 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 393 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 393 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 393 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 393 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 393 resolved as shift
WARNING: shift/reduce conflict for NOT in state 393 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 393 resolved as shift
WARNING: shift/reduce conflict for FUN in state 393 resolved as shift
WARNING: shift/reduce conflict for FOR in state 393 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 393 resolved as shift
WARNING: shift/reduce conflict for DO in state 393 resolved as shift
WARNING: shift/reduce conflict for ID in state 393 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 393 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 393 resolved as shift
WARNING: shift/reduce conflict for INIT in state 393 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 393 resolved as shift
WARNING: shift/reduce conflict for OUT in state 393 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 393 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 393 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 393 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 393 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 393 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 393 resolved as shift
WARNING: shift/reduce conflict for IF in state 393 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 393 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 393 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 393 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 393 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 393 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 393 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 393 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 393 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 393 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 393 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 393 resolved as shift
WARNING: shift/reduce conflict for NOT in state 393 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 393 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 393 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 396 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 397 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 397 resolved as shift
WARNING: shift/reduce conflict for ID in state 397 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 397 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 397 resolved as shift
WARNING: shift/reduce conflict for INIT in state 397 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 397 resolved as shift
WARNING: shift/reduce conflict for OUT in state 397 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 397 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 397 resolved as shift
WARNING: shift/reduce conflict for FUN in state 397 resolved as shift
WARNING: shift/reduce conflict for FOR in state 397 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 397 resolved as shift
WARNING: shift/reduce conflict for DO in state 397 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 397 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 397 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 397 resolved as shift
WARNING: shift/reduce conflict for IF in state 397 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 397 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 397 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 397 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 397 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 397 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 397 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 397 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 397 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 397 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 397 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 397 resolved as shift
WARNING: shift/reduce conflict for NOT in state 397 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 397 resolved as shift
WARNING: shift/reduce conflict for FUN in state 397 resolved as shift
WARNING: shift/reduce conflict for FOR in state 397 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 397 resolved as shift
WARNING: shift/reduce conflict for DO in state 397 resolved as shift
WARNING: shift/reduce conflict for ID in state 397 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 397 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 397 resolved as shift
WARNING: shift/reduce conflict for INIT in state 397 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 397 resolved as shift
WARNING: shift/reduce conflict for OUT in state 397 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 397 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 397 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 397 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 397 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 397 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 397 resolved as shift
WARNING: shift/reduce conflict for IF in state 397 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 397 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 397 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 397 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 397 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 397 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 397 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 397 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 397 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 397 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 397 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 397 resolved as shift
WARNING: shift/reduce conflict for NOT in state 397 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 397 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 397 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 398 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 398 resolved as shift
WARNING: shift/reduce conflict for ID in state 398 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 398 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 398 resolved as shift
WARNING: shift/reduce conflict for INIT in state 398 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 398 resolved as shift
WARNING: shift/reduce conflict for OUT in state 398 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 398 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 398 resolved as shift
WARNING: shift/reduce conflict for FUN in state 398 resolved as shift
WARNING: shift/reduce conflict for FOR in state 398 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 398 resolved as shift
WARNING: shift/reduce conflict for DO in state 398 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 398 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 398 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 398 resolved as shift
WARNING: shift/reduce conflict for IF in state 398 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 398 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 398 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 398 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 398 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 398 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 398 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 398 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 398 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 398 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 398 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 398 resolved as shift
WARNING: shift/reduce conflict for NOT in state 398 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 398 resolved as shift
WARNING: shift/reduce conflict for FUN in state 398 resolved as shift
WARNING: shift/reduce conflict for FOR in state 398 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 398 resolved as shift
WARNING: shift/reduce conflict for DO in state 398 resolved as shift
WARNING: shift/reduce conflict for ID in state 398 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 398 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 398 resolved as shift
WARNING: shift/reduce conflict for INIT in state 398 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 398 resolved as shift
WARNING: shift/reduce conflict for OUT in state 398 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 398 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 398 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 398 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 398 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 398 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 398 resolved as shift
WARNING: shift/reduce conflict for IF in state 398 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 398 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 398 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 398 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 398 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 398 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 398 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 398 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 398 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 398 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 398 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 398 resolved as shift
WARNING: shift/reduce conflict for NOT in state 398 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 398 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 398 resolved as shift
WARNING: shift/reduce conflict for PV in state 399 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 404 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 404 resolved as shift
WARNING: shift/reduce conflict for ID in state 404 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 404 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 404 resolved as shift
WARNING: shift/reduce conflict for INIT in state 404 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 404 resolved as shift
WARNING: shift/reduce conflict for OUT in state 404 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 404 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 404 resolved as shift
WARNING: shift/reduce conflict for FUN in state 404 resolved as shift
WARNING: shift/reduce conflict for FOR in state 404 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 404 resolved as shift
WARNING: shift/reduce conflict for DO in state 404 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 404 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 404 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 404 resolved as shift
WARNING: shift/reduce conflict for IF in state 404 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 404 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 404 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 404 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 404 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 404 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 404 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 404 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 404 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 404 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 404 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 404 resolved as shift
WARNING: shift/reduce conflict for NOT in state 404 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 404 resolved as shift
WARNING: shift/reduce conflict for FUN in state 404 resolved as shift
WARNING: shift/reduce conflict for FOR in state 404 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 404 resolved as shift
WARNING: shift/reduce conflict for DO in state 404 resolved as shift
WARNING: shift/reduce conflict for ID in state 404 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 404 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 404 resolved as shift
WARNING: shift/reduce conflict for INIT in state 404 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 404 resolved as shift
WARNING: shift/reduce conflict for OUT in state 404 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 404 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 404 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 404 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 404 resolved as shift
WARNING: shift/reduce conflict for DOISP in state 404 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 404 resolved as shift
WARNING: shift/reduce conflict for IF in state 404 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 404 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 404 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 404 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 404 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 404 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 404 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 404 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 404 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 404 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 404 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 404 resolved as shift
WARNING: shift/reduce conflict for NOT in state 404 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 404 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 404 resolved as shift
WARNING: shift/reduce conflict for PV in state 405 resolved as shift
WARNING: shift/reduce conflict for PV in state 406 resolved as shift
WARNING: shift/reduce conflict for PV in state 408 resolved as shift
WARNING: reduce/reduce conflict in state 68 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 68
WARNING: reduce/reduce conflict in state 69 resolved using rule (statements -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 69
WARNING: reduce/reduce conflict in state 69 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 69
WARNING: reduce/reduce conflict in state 73 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 73
WARNING: reduce/reduce conflict in state 88 resolved using rule (varianceModifier -> OUT)
WARNING: rejected rule (simpleIdentifier -> OUT) in state 88
WARNING: reduce/reduce conflict in state 103 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 103
WARNING: reduce/reduce conflict in state 104 resolved using rule (preue -> unaryPrefix)
WARNING: rejected rule (preue -> <empty>) in state 104
WARNING: reduce/reduce conflict in state 113 resolved using rule (statements -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 113
WARNING: reduce/reduce conflict in state 113 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 113
WARNING: reduce/reduce conflict in state 113 resolved using rule (statements -> <empty>)
WARNING: rejected rule (elvisExpression -> <empty>) in state 113
WARNING: reduce/reduce conflict in state 114 resolved using rule (statements -> statement)
WARNING: rejected rule (statements -> <empty>) in state 114
WARNING: reduce/reduce conflict in state 114 resolved using rule (statements -> statement)
WARNING: rejected rule (preue -> <empty>) in state 114
WARNING: reduce/reduce conflict in state 114 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 114
WARNING: reduce/reduce conflict in state 114 resolved using rule (statements -> statement)
WARNING: rejected rule (elvisExpression -> <empty>) in state 114
WARNING: reduce/reduce conflict in state 118 resolved using rule (statement -> expression)
WARNING: rejected rule (jumpExpression -> expression) in state 118
WARNING: reduce/reduce conflict in state 120 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 120
WARNING: reduce/reduce conflict in state 120 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (directlyAssignableExpression -> simpleIdentifier) in state 120
WARNING: reduce/reduce conflict in state 129 resolved using rule (asExpression -> prefixUnaryExpression)
WARNING: rejected rule (assignableExpression -> prefixUnaryExpression) in state 129
WARNING: reduce/reduce conflict in state 132 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 132
WARNING: reduce/reduce conflict in state 134 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 134
WARNING: reduce/reduce conflict in state 148 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 148
WARNING: reduce/reduce conflict in state 150 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 150
WARNING: reduce/reduce conflict in state 151 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 151
WARNING: reduce/reduce conflict in state 172 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 172
WARNING: reduce/reduce conflict in state 173 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 173
WARNING: reduce/reduce conflict in state 174 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 174
WARNING: reduce/reduce conflict in state 179 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 179
WARNING: reduce/reduce conflict in state 185 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 185
WARNING: reduce/reduce conflict in state 191 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 191
WARNING: reduce/reduce conflict in state 204 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 204
WARNING: reduce/reduce conflict in state 205 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 205
WARNING: reduce/reduce conflict in state 213 resolved using rule (statements -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 213
WARNING: reduce/reduce conflict in state 213 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 213
WARNING: reduce/reduce conflict in state 213 resolved using rule (statements -> <empty>)
WARNING: rejected rule (elvisExpression -> <empty>) in state 213
WARNING: reduce/reduce conflict in state 217 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 217
WARNING: reduce/reduce conflict in state 217 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (directlyAssignableExpression -> simpleIdentifier) in state 217
WARNING: reduce/reduce conflict in state 218 resolved using rule (mvd -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 218
WARNING: reduce/reduce conflict in state 218 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 218
WARNING: reduce/reduce conflict in state 218 resolved using rule (mvd -> <empty>)
WARNING: rejected rule (elvisExpression -> <empty>) in state 218
WARNING: reduce/reduce conflict in state 222 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 222
WARNING: reduce/reduce conflict in state 223 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 223
WARNING: reduce/reduce conflict in state 233 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (isuf -> <empty>) in state 233
WARNING: reduce/reduce conflict in state 233 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 233
WARNING: reduce/reduce conflict in state 235 resolved using rule (memberAccessOperator -> PONTO)
WARNING: rejected rule (safeNav -> PONTO) in state 235
WARNING: reduce/reduce conflict in state 242 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 242
WARNING: reduce/reduce conflict in state 258 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 258
WARNING: reduce/reduce conflict in state 268 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 268
WARNING: reduce/reduce conflict in state 290 resolved using rule (statements -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 290
WARNING: reduce/reduce conflict in state 290 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 290
WARNING: reduce/reduce conflict in state 290 resolved using rule (statements -> <empty>)
WARNING: rejected rule (elvisExpression -> <empty>) in state 290
WARNING: reduce/reduce conflict in state 297 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (directlyAssignableExpression -> simpleIdentifier) in state 297
WARNING: reduce/reduce conflict in state 297 resolved using rule (label -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 297
WARNING: reduce/reduce conflict in state 297 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 297
WARNING: reduce/reduce conflict in state 316 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 316
WARNING: reduce/reduce conflict in state 332 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 332
WARNING: reduce/reduce conflict in state 350 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (isuf -> <empty>) in state 350
WARNING: reduce/reduce conflict in state 350 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 350
WARNING: reduce/reduce conflict in state 353 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 353
WARNING: reduce/reduce conflict in state 354 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 354
WARNING: reduce/reduce conflict in state 355 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 355
WARNING: reduce/reduce conflict in state 356 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 356
WARNING: reduce/reduce conflict in state 360 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 360
WARNING: reduce/reduce conflict in state 361 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 361
WARNING: reduce/reduce conflict in state 367 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 367
WARNING: reduce/reduce conflict in state 382 resolved using rule (doWhileStatement -> DO WHILE LPAREN expression RPAREN)
WARNING: rejected rule (preue -> <empty>) in state 382
WARNING: reduce/reduce conflict in state 382 resolved using rule (doWhileStatement -> DO WHILE LPAREN expression RPAREN)
WARNING: rejected rule (elvisExpression -> <empty>) in state 382
WARNING: reduce/reduce conflict in state 384 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 384
WARNING: reduce/reduce conflict in state 388 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 388
WARNING: reduce/reduce conflict in state 392 resolved using rule (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN)
WARNING: rejected rule (preue -> <empty>) in state 392
WARNING: reduce/reduce conflict in state 392 resolved using rule (forStatement_MD -> FOR LPAREN multiVariableDeclaration IN expression RPAREN)
WARNING: rejected rule (elvisExpression -> <empty>) in state 392
WARNING: reduce/reduce conflict in state 393 resolved using rule (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN)
WARNING: rejected rule (preue -> <empty>) in state 393
WARNING: reduce/reduce conflict in state 393 resolved using rule (forStatement_VD -> FOR LPAREN variableDeclaration IN expression RPAREN)
WARNING: rejected rule (elvisExpression -> <empty>) in state 393
WARNING: reduce/reduce conflict in state 397 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 397
WARNING: reduce/reduce conflict in state 398 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 398
WARNING: reduce/reduce conflict in state 404 resolved using rule (elvisExpression -> <empty>)
WARNING: rejected rule (preue -> <empty>) in state 404
WARNING: Rule (primaryExpression -> simpleIdentifier) is never reduced
WARNING: Rule (directlyAssignableExpression -> simpleIdentifier) is never reduced
WARNING: Rule (assignableExpression -> prefixUnaryExpression) is never reduced
WARNING: Rule (isuf -> <empty>) is never reduced
WARNING: Rule (safeNav -> PONTO) is never reduced
