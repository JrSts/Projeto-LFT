Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOLEAN
    CHAR
    CONST
    CONSTRUCTOR
    DOUBLE
    EOF
    FALSE
    FLOAT
    FUNCTION
    INT
    LONG
    NULL
    NULLABLE
    OBJECT
    SMARTCAST
    STRING
    THIS
    TRUE
    WHEN

Grammar

Rule 0     S' -> kotlinFile
Rule 1     kotlinFile -> functionDeclaration kotlinFile
Rule 2     kotlinFile -> functionDeclaration
Rule 3     optionalType -> DOISP type
Rule 4     optionalType -> <empty>
Rule 5     optionalBlock -> block
Rule 6     optionalBlock -> <empty>
Rule 7     functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock
Rule 8     optionalPv -> PV
Rule 9     optionalPv -> <empty>
Rule 10    genericVariableDeclaration -> multiVariableDeclaration
Rule 11    genericVariableDeclaration -> variableDeclaration
Rule 12    expression -> disjunction
Rule 13    varOrVal -> VAR
Rule 14    varOrVal -> VAL
Rule 15    optionalTypeParameters -> typeParameters
Rule 16    optionalTypeParameters -> <empty>
Rule 17    propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
Rule 18    typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR
Rule 19    typeParametersRecursive -> COMMA typeParameter
Rule 20    typeParametersRecursive -> COMMA typeParameter typeParametersRecursive
Rule 21    optionalCOMMA -> COMMA
Rule 22    optionalCOMMA -> <empty>
Rule 23    typeParameter -> simpleIdentifier
Rule 24    typeParameter -> simpleIdentifier DOISP type
Rule 25    functionBody -> block
Rule 26    functionBody -> ATRIBUICAO expression
Rule 27    functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN
Rule 28    functionValueParameters -> LPAREN RPAREN
Rule 29    functionValueParametersRecursive -> functionValueParameter
Rule 30    functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive
Rule 31    functionValueParameter -> parameter ATRIBUICAO expression
Rule 32    functionValueParameter -> parameter
Rule 33    variableDeclaration -> simpleIdentifier DOISP type
Rule 34    variableDeclaration -> simpleIdentifier
Rule 35    multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN
Rule 36    multiVariableDeclaration -> LPAREN RPAREN
Rule 37    multiVariableDeclarationRecursive -> variableDeclaration
Rule 38    multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive
Rule 39    parameter -> simpleIdentifier DOISP type
Rule 40    type -> typeModifiers optype
Rule 41    type -> optype
Rule 42    optionalTypeModifiers -> typeModifiers
Rule 43    optype -> parenthesizedType
Rule 44    optype -> functionType
Rule 45    optype -> userType
Rule 46    typeModifiers -> typeModifier
Rule 47    typeModifiers -> typeModifier typeModifiers
Rule 48    typeModifier -> SUSPEND
Rule 49    typeProjectionModifier -> varianceModifier
Rule 50    varianceModifier -> IN
Rule 51    varianceModifier -> OUT
Rule 52    userType -> simpleUserType
Rule 53    simpleUserType -> simpleIdentifier typeArguments
Rule 54    simpleUserType -> simpleIdentifier
Rule 55    typeProjection -> typeProjectionModifiers type
Rule 56    typeProjection -> type
Rule 57    typeProjectionModifiers -> typeProjection
Rule 58    typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers
Rule 59    functionType -> receiverType PONTO functionTypeParameters SETA type
Rule 60    functionType -> functionTypeParameters SETA type
Rule 61    optionalParameterOrType -> parameter
Rule 62    optionalParameterOrType -> type
Rule 63    optionalParameterOrType -> <empty>
Rule 64    parameterOrTypeRecursive -> COMMA optionalParameterOrType
Rule 65    parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive
Rule 66    parameterOrTypeRecursive -> <empty>
Rule 67    functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
Rule 68    parenthesizedType -> LPAREN type RPAREN
Rule 69    receiverType -> typeModifier parenthesizedType
Rule 70    statements -> statement
Rule 71    statements -> statement statements
Rule 72    statement -> functionDeclaration
Rule 73    statement -> assignment
Rule 74    statement -> loopStatement
Rule 75    statement -> expression
Rule 76    statement -> propertyDeclaration
Rule 77    statement -> chamadaDeFuncao
Rule 78    controlStructureBody -> block
Rule 79    controlStructureBody -> statement
Rule 80    block -> LCHAVE statements RCHAVE
Rule 81    loopStatement -> forStatement
Rule 82    loopStatement -> whileStatement
Rule 83    loopStatement -> doWhileStatement
Rule 84    optionalControlStructureBody -> controlStructureBody
Rule 85    optionalControlStructureBody -> <empty>
Rule 86    forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
Rule 87    forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN
Rule 88    whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody
Rule 89    whileStatement -> WHILE LPAREN expression RPAREN PV
Rule 90    doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN
Rule 91    doWhileStatement -> DO WHILE LPAREN expression RPAREN
Rule 92    parametersFunction -> primaryExpression
Rule 93    parametersFunction -> primaryExpression COMMA parametersFunction
Rule 94    chamadaDeFuncao -> statement LPAREN RPAREN
Rule 95    chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN
Rule 96    assignment -> directlyAssignableExpression ATRIBUICAO expression
Rule 97    assignment -> asExpression assignmentAndOperator expression
Rule 98    disjunction -> conjunction
Rule 99    disjunction -> conjunction OR disjunction
Rule 100   conjunction -> equality
Rule 101   conjunction -> equality AND conjunction
Rule 102   equality -> comparison
Rule 103   equality -> comparison equalityOperator equality
Rule 104   comparison -> infixOperation
Rule 105   comparison -> infixOperation comparisonOperator infixOperation
Rule 106   infixOperation -> elvisExpression infixOperationRecursive
Rule 107   infixOperation -> elvisExpression
Rule 108   infixOperationRecursive -> inOrIs elvisOrType
Rule 109   infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive
Rule 110   inOrIs -> inOperator
Rule 111   inOrIs -> isOperator
Rule 112   elvisOrType -> elvisExpression
Rule 113   elvisOrType -> type
Rule 114   elvisExpression -> infixFunctionCall
Rule 115   elvisExpression -> infixFunctionCall ELVIS elvisExpression
Rule 116   infixFunctionCall -> rangeExpression
Rule 117   infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall
Rule 118   rangeExpression -> additiveExpression
Rule 119   rangeExpression -> additiveExpression PONTOPONTO rangeExpression
Rule 120   additiveExpression -> multiplicativeExpression
Rule 121   additiveExpression -> multiplicativeExpression additiveOperator additiveExpression
Rule 122   multiplicativeExpression -> asExpression
Rule 123   multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression
Rule 124   asExpression -> prefixUnaryExpression
Rule 125   asExpression -> prefixUnaryExpression asOperator type
Rule 126   prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression
Rule 127   prefixUnaryExpression -> postfixUnaryExpression
Rule 128   unaryPrefix -> label
Rule 129   unaryPrefix -> prefixUnaryOperator
Rule 130   prefixUnaryExpressionRecursive -> unaryPrefix
Rule 131   prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive
Rule 132   postfixUnaryExpressionRecursive -> postfixUnarySuffix
Rule 133   postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive
Rule 134   postfixUnaryExpression -> primaryExpression
Rule 135   postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive
Rule 136   postfixUnarySuffix -> postfixUnaryOperator
Rule 137   postfixUnarySuffix -> typeArguments
Rule 138   postfixUnarySuffix -> callSuffix
Rule 139   postfixUnarySuffix -> indexingSuffix
Rule 140   postfixUnarySuffix -> navigationSuffix
Rule 141   directlyAssignableExpression -> postfixUnaryExpression assignableSuffix
Rule 142   directlyAssignableExpression -> simpleIdentifier
Rule 143   directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression
Rule 144   parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN
Rule 145   assignableExpression -> prefixUnaryExpression
Rule 146   assignableExpression -> parenthesizedAssignableExpression
Rule 147   parenthesizedAssignableExpression -> LPAREN assignableExpression RPAREN
Rule 148   assignableSuffix -> typeArguments
Rule 149   assignableSuffix -> indexingSuffix
Rule 150   assignableSuffix -> navigationSuffix
Rule 151   indexingSuffix -> LCCT indexingSuffixRecursive RCCT
Rule 152   indexingSuffix -> LCCT RCCT
Rule 153   indexingSuffixRecursive -> expression
Rule 154   indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive
Rule 155   navigationSuffix -> memberAccessOperator simpleIdentifier CLASS
Rule 156   navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS
Rule 157   callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda
Rule 158   callSuffix -> optionalTypeArguments optionalValueArguments
Rule 159   optionalTypeArguments -> typeArguments
Rule 160   optionalTypeArguments -> <empty>
Rule 161   optionalValueArguments -> valueArguments
Rule 162   optionalValueArguments -> <empty>
Rule 163   annotatedLambda -> lambdaLiteral
Rule 164   typeArguments -> MENOR typeArgumentsRecursive MAIOR
Rule 165   typeArguments -> MENOR MAIOR
Rule 166   typeArgumentsRecursive -> typeProjection
Rule 167   typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive
Rule 168   valueArgumentsRecursive -> valueArgument
Rule 169   valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive
Rule 170   valueArguments -> LPAREN RPAREN
Rule 171   valueArguments -> LPAREN valueArgumentsRecursive RPAREN
Rule 172   valueArgument -> simpleIdentifier ATRIBUICAO MULT expression
Rule 173   valueArgument -> simpleIdentifier ATRIBUICAO expression
Rule 174   valueArgument -> expression
Rule 175   primaryExpression -> parenthesizedExpression
Rule 176   primaryExpression -> simpleIdentifier
Rule 177   primaryExpression -> LITERAL_STRING
Rule 178   primaryExpression -> NUMBER
Rule 179   primaryExpression -> callableReference
Rule 180   primaryExpression -> functionLiteral
Rule 181   primaryExpression -> collectionLiteral
Rule 182   primaryExpression -> ifExpression
Rule 183   primaryExpression -> jumpExpression
Rule 184   parenthesizedExpression -> LPAREN expression RPAREN
Rule 185   collectionLiteral -> LCCT collectionLiteralRecursive RCCT
Rule 186   collectionLiteral -> LCCT RCCT
Rule 187   collectionLiteralRecursive -> expression
Rule 188   collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive
Rule 189   parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN
Rule 190   parametersWithOptionalType -> LPAREN RPAREN
Rule 191   parametersWithOptionalTypeRecursive -> parameterWithOptionalType
Rule 192   parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA
Rule 193   parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType
Rule 194   optionalParameterModifiers -> parameterModifiers
Rule 195   optionalParameterModifiers -> <empty>
Rule 196   parameterModifiers -> VARARG
Rule 197   parameterModifiers -> NOINLINE
Rule 198   parameterModifiers -> CROSSINLINE
Rule 199   lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE
Rule 200   optionsLambdaLiteral -> statements
Rule 201   optionsLambdaLiteral -> lambdaParameters SETA statements
Rule 202   optionsLambdaLiteral -> SETA statements
Rule 203   lambdaParameters -> lambdaParameter
Rule 204   lambdaParameters -> lambdaParameter COMMA lambdaParameters
Rule 205   lambdaParameter -> variableDeclaration
Rule 206   lambdaParameter -> multiVariableDeclaration optionalType
Rule 207   optionalTypePonto -> type PONTO
Rule 208   optionalTypePonto -> <empty>
Rule 209   optionalTypeConstraints -> typeConstraints
Rule 210   optionalTypeConstraints -> <empty>
Rule 211   optionalFunctionBody -> functionBody
Rule 212   optionalFunctionBody -> <empty>
Rule 213   anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
Rule 214   functionLiteral -> lambdaLiteral
Rule 215   functionLiteral -> anonymousFunction
Rule 216   typeConstraints -> simpleIdentifier DOISP type
Rule 217   ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV
Rule 218   ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
Rule 219   controlStructureBodyOrPV -> controlStructureBody
Rule 220   controlStructureBodyOrPV -> PV
Rule 221   optionalPV -> PV
Rule 222   optionalPV -> <empty>
Rule 223   jumpExpression -> RETURN expression
Rule 224   jumpExpression -> RETURN_AT expression
Rule 225   jumpExpression -> CONTINUE
Rule 226   jumpExpression -> CONTINUE_AT
Rule 227   jumpExpression -> BREAK
Rule 228   jumpExpression -> BREAK_AT
Rule 229   callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass
Rule 230   optionalReceiverType -> receiverType
Rule 231   optionalReceiverType -> <empty>
Rule 232   simpleIdentifierOrClass -> simpleIdentifier
Rule 233   simpleIdentifierOrClass -> CLASS
Rule 234   assignmentAndOperator -> MAISIGUAL
Rule 235   assignmentAndOperator -> MENOSIGUAL
Rule 236   assignmentAndOperator -> MULTIGUAL
Rule 237   assignmentAndOperator -> DIVIGUAL
Rule 238   assignmentAndOperator -> MODIGUAL
Rule 239   equalityOperator -> DIFERENTE
Rule 240   equalityOperator -> IDENTIDADE
Rule 241   equalityOperator -> IGUALDADE
Rule 242   equalityOperator -> SEMIDENTIDADE
Rule 243   comparisonOperator -> MENOR
Rule 244   comparisonOperator -> MAIOR
Rule 245   comparisonOperator -> MENORIGUAL
Rule 246   comparisonOperator -> MAIORIGUAL
Rule 247   inOperator -> IN
Rule 248   inOperator -> NOT_IN
Rule 249   isOperator -> IS
Rule 250   isOperator -> NOT_IS
Rule 251   additiveOperator -> PLUS
Rule 252   additiveOperator -> MINUS
Rule 253   multiplicativeOperator -> MULT
Rule 254   multiplicativeOperator -> DIVIDE
Rule 255   multiplicativeOperator -> MOD
Rule 256   asOperator -> AS
Rule 257   asOperator -> AS asOperator
Rule 258   prefixUnaryOperator -> INCREMENTO
Rule 259   prefixUnaryOperator -> DECREMENTO
Rule 260   prefixUnaryOperator -> MINUS
Rule 261   prefixUnaryOperator -> PLUS
Rule 262   prefixUnaryOperator -> NOT
Rule 263   postfixUnaryOperator -> INCREMENTO
Rule 264   postfixUnaryOperator -> DECREMENTO
Rule 265   memberAccessOperator -> safeNav
Rule 266   memberAccessOperator -> COLONCOLON
Rule 267   safeNav -> PONTO
Rule 268   label -> simpleIdentifier
Rule 269   simpleIdentifier -> ID
Rule 270   simpleIdentifier -> CROSSINLINE
Rule 271   simpleIdentifier -> IMPORT
Rule 272   simpleIdentifier -> INIT
Rule 273   simpleIdentifier -> NOINLINE
Rule 274   simpleIdentifier -> OUT
Rule 275   simpleIdentifier -> VARARG
Rule 276   simpleIdentifier -> WHERE
Rule 277   simpleIdentifier -> OPERATOR

Terminals, with rules where they appear

AND                  : 101
AS                   : 256 257
ATRIBUICAO           : 17 26 31 96 172 173
BOOLEAN              : 
BREAK                : 227
BREAK_AT             : 228
CHAR                 : 
CLASS                : 155 156 233
COLONCOLON           : 229 266
COMMA                : 19 20 21 30 38 64 65 93 154 167 169 188 192 192 204
CONST                : 
CONSTRUCTOR          : 
CONTINUE             : 225
CONTINUE_AT          : 226
CROSSINLINE          : 198 270
DECREMENTO           : 259 264
DIFERENTE            : 239
DIVIDE               : 254
DIVIGUAL             : 237
DO                   : 90 91
DOISP                : 3 24 33 39 216
DOUBLE               : 
ELSE                 : 218
ELVIS                : 115
EOF                  : 
FALSE                : 
FLOAT                : 
FOR                  : 86 87
FUN                  : 7 213
FUNCTION             : 
ID                   : 269
IDENTIDADE           : 240
IF                   : 217 218
IGUALDADE            : 241
IMPORT               : 271
IN                   : 50 86 87 247
INCREMENTO           : 258 263
INIT                 : 272
INT                  : 
IS                   : 249
LCCT                 : 151 152 185 186
LCHAVE               : 80 199
LITERAL_STRING       : 177
LONG                 : 
LPAREN               : 27 28 35 36 67 68 86 87 88 89 90 91 94 95 144 147 170 171 184 189 190 217 218
MAIOR                : 18 164 165 244
MAIORIGUAL           : 246
MAISIGUAL            : 234
MENOR                : 18 164 165 243
MENORIGUAL           : 245
MENOSIGUAL           : 235
MINUS                : 252 260
MOD                  : 255
MODIGUAL             : 238
MULT                 : 172 253
MULTIGUAL            : 236
NOINLINE             : 197 273
NOT                  : 262
NOT_IN               : 248
NOT_IS               : 250
NULL                 : 
NULLABLE             : 
NUMBER               : 178
OBJECT               : 
OPERATOR             : 277
OR                   : 99
OUT                  : 51 274
PLUS                 : 251 261
PONTO                : 59 207 267
PONTOPONTO           : 119
PV                   : 8 89 220 221
RCCT                 : 151 152 185 186
RCHAVE               : 80 199
RETURN               : 223
RETURN_AT            : 224
RPAREN               : 27 28 35 36 67 68 86 87 88 89 90 91 94 95 144 147 170 171 184 189 190 217 218
SEMIDENTIDADE        : 242
SETA                 : 59 60 201 202
SMARTCAST            : 
STRING               : 
SUSPEND              : 48
THIS                 : 
TRUE                 : 
VAL                  : 14
VAR                  : 13
VARARG               : 196 275
WHEN                 : 
WHERE                : 276
WHILE                : 88 89 90 91
error                : 

Nonterminals, with rules where they appear

additiveExpression   : 118 119 121
additiveOperator     : 121
annotatedLambda      : 157
anonymousFunction    : 215
asExpression         : 97 122 123
asOperator           : 125 257
assignableExpression : 147
assignableSuffix     : 141
assignment           : 73
assignmentAndOperator : 97
block                : 5 25 78
callSuffix           : 138
callableReference    : 179
chamadaDeFuncao      : 77
collectionLiteral    : 181
collectionLiteralRecursive : 185 188
comparison           : 102 103
comparisonOperator   : 105
conjunction          : 98 99 101
controlStructureBody : 84 86 88 90 219
controlStructureBodyOrPV : 217 218
directlyAssignableExpression : 96 144
disjunction          : 12 99
doWhileStatement     : 83
elvisExpression      : 106 107 112 115
elvisOrType          : 108 109
equality             : 100 101 103
equalityOperator     : 103
expression           : 17 26 31 75 86 87 88 89 90 91 96 97 153 154 172 173 174 184 187 188 217 218 223 224
forStatement         : 81
functionBody         : 211
functionDeclaration  : 1 2 72
functionLiteral      : 180
functionType         : 44
functionTypeParameters : 59 60
functionValueParameter : 29 30
functionValueParameters : 7
functionValueParametersRecursive : 27 30
genericVariableDeclaration : 17 86 87
ifExpression         : 182
inOperator           : 110
inOrIs               : 108 109
indexingSuffix       : 139 149
indexingSuffixRecursive : 151 154
infixFunctionCall    : 114 115 117
infixOperation       : 104 105 105
infixOperationRecursive : 106 109
isOperator           : 111
jumpExpression       : 183
kotlinFile           : 1 0
label                : 128
lambdaLiteral        : 163 214
lambdaParameter      : 203 204
lambdaParameters     : 201 204
loopStatement        : 74
memberAccessOperator : 155 156
multiVariableDeclaration : 10 206
multiVariableDeclarationRecursive : 35 38
multiplicativeExpression : 120 121 123
multiplicativeOperator : 123
navigationSuffix     : 140 150
optionalBlock        : 7
optionalCOMMA        : 18 67
optionalControlStructureBody : 218
optionalFunctionBody : 213
optionalPV           : 218
optionalParameterModifiers : 193
optionalParameterOrType : 64 65 67
optionalPv           : 17
optionalReceiverType : 229
optionalType         : 7 193 206 213
optionalTypeArguments : 157 158
optionalTypeConstraints : 213
optionalTypeModifiers : 
optionalTypeParameters : 17
optionalTypePonto    : 213
optionalValueArguments : 157 158
optionsLambdaLiteral : 199
optype               : 40 41
parameter            : 31 32 61
parameterModifiers   : 194
parameterOrTypeRecursive : 65 67
parameterWithOptionalType : 191 192
parametersFunction   : 93 95
parametersWithOptionalType : 213
parametersWithOptionalTypeRecursive : 189 192
parenthesizedAssignableExpression : 146
parenthesizedDirectlyAssignableExpression : 143
parenthesizedExpression : 156 175
parenthesizedType    : 43 69
postfixUnaryExpression : 126 127 141
postfixUnaryExpressionRecursive : 133 135
postfixUnaryOperator : 136
postfixUnarySuffix   : 132 133
prefixUnaryExpression : 124 125 145
prefixUnaryExpressionRecursive : 126 131
prefixUnaryOperator  : 129
primaryExpression    : 92 93 134 135
propertyDeclaration  : 76
rangeExpression      : 116 117 119
receiverType         : 59 230
safeNav              : 265
simpleIdentifier     : 7 23 24 33 34 39 53 54 117 142 155 172 173 176 193 216 232 268
simpleIdentifierOrClass : 229
simpleUserType       : 52
statement            : 70 71 79 94 95
statements           : 71 80 200 201 202
type                 : 3 24 33 39 55 56 59 60 62 68 113 125 207 216
typeArguments        : 53 137 148 159
typeArgumentsRecursive : 164 167
typeConstraints      : 209
typeModifier         : 46 47 69
typeModifiers        : 40 42 47
typeParameter        : 18 19 20
typeParameters       : 15
typeParametersRecursive : 18 20
typeProjection       : 57 166 167
typeProjectionModifier : 58
typeProjectionModifiers : 55 58
unaryPrefix          : 130 131
userType             : 45
valueArgument        : 168 169
valueArguments       : 161
valueArgumentsRecursive : 169 171
varOrVal             : 17
variableDeclaration  : 11 37 38 205
varianceModifier     : 49
whileStatement       : 82

Parsing method: LALR

state 0

    (0) S' -> . kotlinFile
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock

    FUN             shift and go to state 3

    kotlinFile                     shift and go to state 1
    functionDeclaration            shift and go to state 2

state 1

    (0) S' -> kotlinFile .



state 2

    (1) kotlinFile -> functionDeclaration . kotlinFile
    (2) kotlinFile -> functionDeclaration .
    (1) kotlinFile -> . functionDeclaration kotlinFile
    (2) kotlinFile -> . functionDeclaration
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock

    $end            reduce using rule 2 (kotlinFile -> functionDeclaration .)
    FUN             shift and go to state 3

    functionDeclaration            shift and go to state 2
    kotlinFile                     shift and go to state 4

state 3

    (7) functionDeclaration -> FUN . simpleIdentifier functionValueParameters optionalType optionalBlock
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 5

state 4

    (1) kotlinFile -> functionDeclaration kotlinFile .

    $end            reduce using rule 1 (kotlinFile -> functionDeclaration kotlinFile .)


state 5

    (7) functionDeclaration -> FUN simpleIdentifier . functionValueParameters optionalType optionalBlock
    (27) functionValueParameters -> . LPAREN functionValueParametersRecursive RPAREN
    (28) functionValueParameters -> . LPAREN RPAREN

    LPAREN          shift and go to state 16

    functionValueParameters        shift and go to state 15

state 6

    (269) simpleIdentifier -> ID .

    LPAREN          reduce using rule 269 (simpleIdentifier -> ID .)
    DOISP           reduce using rule 269 (simpleIdentifier -> ID .)
    MENOR           reduce using rule 269 (simpleIdentifier -> ID .)
    LCHAVE          reduce using rule 269 (simpleIdentifier -> ID .)
    FUN             reduce using rule 269 (simpleIdentifier -> ID .)
    $end            reduce using rule 269 (simpleIdentifier -> ID .)
    FOR             reduce using rule 269 (simpleIdentifier -> ID .)
    WHILE           reduce using rule 269 (simpleIdentifier -> ID .)
    DO              reduce using rule 269 (simpleIdentifier -> ID .)
    VAR             reduce using rule 269 (simpleIdentifier -> ID .)
    VAL             reduce using rule 269 (simpleIdentifier -> ID .)
    ID              reduce using rule 269 (simpleIdentifier -> ID .)
    CROSSINLINE     reduce using rule 269 (simpleIdentifier -> ID .)
    IMPORT          reduce using rule 269 (simpleIdentifier -> ID .)
    INIT            reduce using rule 269 (simpleIdentifier -> ID .)
    NOINLINE        reduce using rule 269 (simpleIdentifier -> ID .)
    OUT             reduce using rule 269 (simpleIdentifier -> ID .)
    VARARG          reduce using rule 269 (simpleIdentifier -> ID .)
    WHERE           reduce using rule 269 (simpleIdentifier -> ID .)
    OPERATOR        reduce using rule 269 (simpleIdentifier -> ID .)
    LITERAL_STRING  reduce using rule 269 (simpleIdentifier -> ID .)
    NUMBER          reduce using rule 269 (simpleIdentifier -> ID .)
    LCCT            reduce using rule 269 (simpleIdentifier -> ID .)
    IF              reduce using rule 269 (simpleIdentifier -> ID .)
    RETURN          reduce using rule 269 (simpleIdentifier -> ID .)
    RETURN_AT       reduce using rule 269 (simpleIdentifier -> ID .)
    CONTINUE        reduce using rule 269 (simpleIdentifier -> ID .)
    CONTINUE_AT     reduce using rule 269 (simpleIdentifier -> ID .)
    BREAK           reduce using rule 269 (simpleIdentifier -> ID .)
    BREAK_AT        reduce using rule 269 (simpleIdentifier -> ID .)
    INCREMENTO      reduce using rule 269 (simpleIdentifier -> ID .)
    DECREMENTO      reduce using rule 269 (simpleIdentifier -> ID .)
    MINUS           reduce using rule 269 (simpleIdentifier -> ID .)
    PLUS            reduce using rule 269 (simpleIdentifier -> ID .)
    NOT             reduce using rule 269 (simpleIdentifier -> ID .)
    SUSPEND         reduce using rule 269 (simpleIdentifier -> ID .)
    COLONCOLON      reduce using rule 269 (simpleIdentifier -> ID .)
    RCHAVE          reduce using rule 269 (simpleIdentifier -> ID .)
    PONTO           reduce using rule 269 (simpleIdentifier -> ID .)
    AS              reduce using rule 269 (simpleIdentifier -> ID .)
    MAISIGUAL       reduce using rule 269 (simpleIdentifier -> ID .)
    MENOSIGUAL      reduce using rule 269 (simpleIdentifier -> ID .)
    MULTIGUAL       reduce using rule 269 (simpleIdentifier -> ID .)
    DIVIGUAL        reduce using rule 269 (simpleIdentifier -> ID .)
    MODIGUAL        reduce using rule 269 (simpleIdentifier -> ID .)
    MULT            reduce using rule 269 (simpleIdentifier -> ID .)
    DIVIDE          reduce using rule 269 (simpleIdentifier -> ID .)
    MOD             reduce using rule 269 (simpleIdentifier -> ID .)
    PONTOPONTO      reduce using rule 269 (simpleIdentifier -> ID .)
    ELVIS           reduce using rule 269 (simpleIdentifier -> ID .)
    IN              reduce using rule 269 (simpleIdentifier -> ID .)
    NOT_IN          reduce using rule 269 (simpleIdentifier -> ID .)
    IS              reduce using rule 269 (simpleIdentifier -> ID .)
    NOT_IS          reduce using rule 269 (simpleIdentifier -> ID .)
    MAIOR           reduce using rule 269 (simpleIdentifier -> ID .)
    MENORIGUAL      reduce using rule 269 (simpleIdentifier -> ID .)
    MAIORIGUAL      reduce using rule 269 (simpleIdentifier -> ID .)
    DIFERENTE       reduce using rule 269 (simpleIdentifier -> ID .)
    IDENTIDADE      reduce using rule 269 (simpleIdentifier -> ID .)
    IGUALDADE       reduce using rule 269 (simpleIdentifier -> ID .)
    SEMIDENTIDADE   reduce using rule 269 (simpleIdentifier -> ID .)
    AND             reduce using rule 269 (simpleIdentifier -> ID .)
    OR              reduce using rule 269 (simpleIdentifier -> ID .)
    COMMA           reduce using rule 269 (simpleIdentifier -> ID .)
    RPAREN          reduce using rule 269 (simpleIdentifier -> ID .)
    RCCT            reduce using rule 269 (simpleIdentifier -> ID .)
    PV              reduce using rule 269 (simpleIdentifier -> ID .)
    ELSE            reduce using rule 269 (simpleIdentifier -> ID .)
    SETA            reduce using rule 269 (simpleIdentifier -> ID .)
    ATRIBUICAO      reduce using rule 269 (simpleIdentifier -> ID .)
    CLASS           reduce using rule 269 (simpleIdentifier -> ID .)


state 7

    (270) simpleIdentifier -> CROSSINLINE .

    LPAREN          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DOISP           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MENOR           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    LCHAVE          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    FUN             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    $end            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    FOR             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    WHILE           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DO              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    VAR             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    VAL             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    ID              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IMPORT          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    INIT            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    NOINLINE        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    OUT             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    VARARG          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    WHERE           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    OPERATOR        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    LITERAL_STRING  reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    NUMBER          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    LCCT            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IF              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RETURN          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RETURN_AT       reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    CONTINUE_AT     reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    BREAK           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    BREAK_AT        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    INCREMENTO      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DECREMENTO      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MINUS           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    PLUS            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    NOT             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    SUSPEND         reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    COLONCOLON      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RCHAVE          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    PONTO           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    AS              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MAISIGUAL       reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MENOSIGUAL      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MULTIGUAL       reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DIVIGUAL        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MODIGUAL        reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MULT            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DIVIDE          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MOD             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    PONTOPONTO      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    ELVIS           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IN              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    NOT_IN          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IS              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    NOT_IS          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MAIOR           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MENORIGUAL      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    MAIORIGUAL      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    DIFERENTE       reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IDENTIDADE      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    IGUALDADE       reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    SEMIDENTIDADE   reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    AND             reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    OR              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    COMMA           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RPAREN          reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    RCCT            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    PV              reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    ELSE            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    SETA            reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    ATRIBUICAO      reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)
    CLASS           reduce using rule 270 (simpleIdentifier -> CROSSINLINE .)


state 8

    (271) simpleIdentifier -> IMPORT .

    LPAREN          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DOISP           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MENOR           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    LCHAVE          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    FUN             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    $end            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    FOR             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    WHILE           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DO              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    VAR             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    VAL             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    ID              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    CROSSINLINE     reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IMPORT          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    INIT            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    NOINLINE        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    OUT             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    VARARG          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    WHERE           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    OPERATOR        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    LITERAL_STRING  reduce using rule 271 (simpleIdentifier -> IMPORT .)
    NUMBER          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    LCCT            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IF              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    RETURN          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    RETURN_AT       reduce using rule 271 (simpleIdentifier -> IMPORT .)
    CONTINUE        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    CONTINUE_AT     reduce using rule 271 (simpleIdentifier -> IMPORT .)
    BREAK           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    BREAK_AT        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    INCREMENTO      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DECREMENTO      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MINUS           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    PLUS            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    NOT             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    SUSPEND         reduce using rule 271 (simpleIdentifier -> IMPORT .)
    COLONCOLON      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    RCHAVE          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    PONTO           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    AS              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MAISIGUAL       reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MENOSIGUAL      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MULTIGUAL       reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DIVIGUAL        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MODIGUAL        reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MULT            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DIVIDE          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MOD             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    PONTOPONTO      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    ELVIS           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IN              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    NOT_IN          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IS              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    NOT_IS          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MAIOR           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MENORIGUAL      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    MAIORIGUAL      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    DIFERENTE       reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IDENTIDADE      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    IGUALDADE       reduce using rule 271 (simpleIdentifier -> IMPORT .)
    SEMIDENTIDADE   reduce using rule 271 (simpleIdentifier -> IMPORT .)
    AND             reduce using rule 271 (simpleIdentifier -> IMPORT .)
    OR              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    COMMA           reduce using rule 271 (simpleIdentifier -> IMPORT .)
    RPAREN          reduce using rule 271 (simpleIdentifier -> IMPORT .)
    RCCT            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    PV              reduce using rule 271 (simpleIdentifier -> IMPORT .)
    ELSE            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    SETA            reduce using rule 271 (simpleIdentifier -> IMPORT .)
    ATRIBUICAO      reduce using rule 271 (simpleIdentifier -> IMPORT .)
    CLASS           reduce using rule 271 (simpleIdentifier -> IMPORT .)


state 9

    (272) simpleIdentifier -> INIT .

    LPAREN          reduce using rule 272 (simpleIdentifier -> INIT .)
    DOISP           reduce using rule 272 (simpleIdentifier -> INIT .)
    MENOR           reduce using rule 272 (simpleIdentifier -> INIT .)
    LCHAVE          reduce using rule 272 (simpleIdentifier -> INIT .)
    FUN             reduce using rule 272 (simpleIdentifier -> INIT .)
    $end            reduce using rule 272 (simpleIdentifier -> INIT .)
    FOR             reduce using rule 272 (simpleIdentifier -> INIT .)
    WHILE           reduce using rule 272 (simpleIdentifier -> INIT .)
    DO              reduce using rule 272 (simpleIdentifier -> INIT .)
    VAR             reduce using rule 272 (simpleIdentifier -> INIT .)
    VAL             reduce using rule 272 (simpleIdentifier -> INIT .)
    ID              reduce using rule 272 (simpleIdentifier -> INIT .)
    CROSSINLINE     reduce using rule 272 (simpleIdentifier -> INIT .)
    IMPORT          reduce using rule 272 (simpleIdentifier -> INIT .)
    INIT            reduce using rule 272 (simpleIdentifier -> INIT .)
    NOINLINE        reduce using rule 272 (simpleIdentifier -> INIT .)
    OUT             reduce using rule 272 (simpleIdentifier -> INIT .)
    VARARG          reduce using rule 272 (simpleIdentifier -> INIT .)
    WHERE           reduce using rule 272 (simpleIdentifier -> INIT .)
    OPERATOR        reduce using rule 272 (simpleIdentifier -> INIT .)
    LITERAL_STRING  reduce using rule 272 (simpleIdentifier -> INIT .)
    NUMBER          reduce using rule 272 (simpleIdentifier -> INIT .)
    LCCT            reduce using rule 272 (simpleIdentifier -> INIT .)
    IF              reduce using rule 272 (simpleIdentifier -> INIT .)
    RETURN          reduce using rule 272 (simpleIdentifier -> INIT .)
    RETURN_AT       reduce using rule 272 (simpleIdentifier -> INIT .)
    CONTINUE        reduce using rule 272 (simpleIdentifier -> INIT .)
    CONTINUE_AT     reduce using rule 272 (simpleIdentifier -> INIT .)
    BREAK           reduce using rule 272 (simpleIdentifier -> INIT .)
    BREAK_AT        reduce using rule 272 (simpleIdentifier -> INIT .)
    INCREMENTO      reduce using rule 272 (simpleIdentifier -> INIT .)
    DECREMENTO      reduce using rule 272 (simpleIdentifier -> INIT .)
    MINUS           reduce using rule 272 (simpleIdentifier -> INIT .)
    PLUS            reduce using rule 272 (simpleIdentifier -> INIT .)
    NOT             reduce using rule 272 (simpleIdentifier -> INIT .)
    SUSPEND         reduce using rule 272 (simpleIdentifier -> INIT .)
    COLONCOLON      reduce using rule 272 (simpleIdentifier -> INIT .)
    RCHAVE          reduce using rule 272 (simpleIdentifier -> INIT .)
    PONTO           reduce using rule 272 (simpleIdentifier -> INIT .)
    AS              reduce using rule 272 (simpleIdentifier -> INIT .)
    MAISIGUAL       reduce using rule 272 (simpleIdentifier -> INIT .)
    MENOSIGUAL      reduce using rule 272 (simpleIdentifier -> INIT .)
    MULTIGUAL       reduce using rule 272 (simpleIdentifier -> INIT .)
    DIVIGUAL        reduce using rule 272 (simpleIdentifier -> INIT .)
    MODIGUAL        reduce using rule 272 (simpleIdentifier -> INIT .)
    MULT            reduce using rule 272 (simpleIdentifier -> INIT .)
    DIVIDE          reduce using rule 272 (simpleIdentifier -> INIT .)
    MOD             reduce using rule 272 (simpleIdentifier -> INIT .)
    PONTOPONTO      reduce using rule 272 (simpleIdentifier -> INIT .)
    ELVIS           reduce using rule 272 (simpleIdentifier -> INIT .)
    IN              reduce using rule 272 (simpleIdentifier -> INIT .)
    NOT_IN          reduce using rule 272 (simpleIdentifier -> INIT .)
    IS              reduce using rule 272 (simpleIdentifier -> INIT .)
    NOT_IS          reduce using rule 272 (simpleIdentifier -> INIT .)
    MAIOR           reduce using rule 272 (simpleIdentifier -> INIT .)
    MENORIGUAL      reduce using rule 272 (simpleIdentifier -> INIT .)
    MAIORIGUAL      reduce using rule 272 (simpleIdentifier -> INIT .)
    DIFERENTE       reduce using rule 272 (simpleIdentifier -> INIT .)
    IDENTIDADE      reduce using rule 272 (simpleIdentifier -> INIT .)
    IGUALDADE       reduce using rule 272 (simpleIdentifier -> INIT .)
    SEMIDENTIDADE   reduce using rule 272 (simpleIdentifier -> INIT .)
    AND             reduce using rule 272 (simpleIdentifier -> INIT .)
    OR              reduce using rule 272 (simpleIdentifier -> INIT .)
    COMMA           reduce using rule 272 (simpleIdentifier -> INIT .)
    RPAREN          reduce using rule 272 (simpleIdentifier -> INIT .)
    RCCT            reduce using rule 272 (simpleIdentifier -> INIT .)
    PV              reduce using rule 272 (simpleIdentifier -> INIT .)
    ELSE            reduce using rule 272 (simpleIdentifier -> INIT .)
    SETA            reduce using rule 272 (simpleIdentifier -> INIT .)
    ATRIBUICAO      reduce using rule 272 (simpleIdentifier -> INIT .)
    CLASS           reduce using rule 272 (simpleIdentifier -> INIT .)


state 10

    (273) simpleIdentifier -> NOINLINE .

    LPAREN          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DOISP           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MENOR           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    LCHAVE          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    FUN             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    $end            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    FOR             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    WHILE           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DO              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    VAR             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    VAL             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    ID              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    CROSSINLINE     reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IMPORT          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    INIT            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    NOINLINE        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    OUT             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    VARARG          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    WHERE           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    OPERATOR        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    LITERAL_STRING  reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    NUMBER          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    LCCT            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IF              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RETURN          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RETURN_AT       reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    CONTINUE        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    CONTINUE_AT     reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    BREAK           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    BREAK_AT        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    INCREMENTO      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DECREMENTO      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MINUS           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    PLUS            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    NOT             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    SUSPEND         reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    COLONCOLON      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RCHAVE          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    PONTO           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    AS              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MAISIGUAL       reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MENOSIGUAL      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MULTIGUAL       reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DIVIGUAL        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MODIGUAL        reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MULT            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DIVIDE          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MOD             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    PONTOPONTO      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    ELVIS           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IN              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    NOT_IN          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IS              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    NOT_IS          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MAIOR           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MENORIGUAL      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    MAIORIGUAL      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    DIFERENTE       reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IDENTIDADE      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    IGUALDADE       reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    SEMIDENTIDADE   reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    AND             reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    OR              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    COMMA           reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RPAREN          reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    RCCT            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    PV              reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    ELSE            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    SETA            reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    ATRIBUICAO      reduce using rule 273 (simpleIdentifier -> NOINLINE .)
    CLASS           reduce using rule 273 (simpleIdentifier -> NOINLINE .)


state 11

    (274) simpleIdentifier -> OUT .

    LPAREN          reduce using rule 274 (simpleIdentifier -> OUT .)
    DOISP           reduce using rule 274 (simpleIdentifier -> OUT .)
    MENOR           reduce using rule 274 (simpleIdentifier -> OUT .)
    LCHAVE          reduce using rule 274 (simpleIdentifier -> OUT .)
    FUN             reduce using rule 274 (simpleIdentifier -> OUT .)
    $end            reduce using rule 274 (simpleIdentifier -> OUT .)
    FOR             reduce using rule 274 (simpleIdentifier -> OUT .)
    WHILE           reduce using rule 274 (simpleIdentifier -> OUT .)
    DO              reduce using rule 274 (simpleIdentifier -> OUT .)
    VAR             reduce using rule 274 (simpleIdentifier -> OUT .)
    VAL             reduce using rule 274 (simpleIdentifier -> OUT .)
    ID              reduce using rule 274 (simpleIdentifier -> OUT .)
    CROSSINLINE     reduce using rule 274 (simpleIdentifier -> OUT .)
    IMPORT          reduce using rule 274 (simpleIdentifier -> OUT .)
    INIT            reduce using rule 274 (simpleIdentifier -> OUT .)
    NOINLINE        reduce using rule 274 (simpleIdentifier -> OUT .)
    OUT             reduce using rule 274 (simpleIdentifier -> OUT .)
    VARARG          reduce using rule 274 (simpleIdentifier -> OUT .)
    WHERE           reduce using rule 274 (simpleIdentifier -> OUT .)
    OPERATOR        reduce using rule 274 (simpleIdentifier -> OUT .)
    LITERAL_STRING  reduce using rule 274 (simpleIdentifier -> OUT .)
    NUMBER          reduce using rule 274 (simpleIdentifier -> OUT .)
    LCCT            reduce using rule 274 (simpleIdentifier -> OUT .)
    IF              reduce using rule 274 (simpleIdentifier -> OUT .)
    RETURN          reduce using rule 274 (simpleIdentifier -> OUT .)
    RETURN_AT       reduce using rule 274 (simpleIdentifier -> OUT .)
    CONTINUE        reduce using rule 274 (simpleIdentifier -> OUT .)
    CONTINUE_AT     reduce using rule 274 (simpleIdentifier -> OUT .)
    BREAK           reduce using rule 274 (simpleIdentifier -> OUT .)
    BREAK_AT        reduce using rule 274 (simpleIdentifier -> OUT .)
    INCREMENTO      reduce using rule 274 (simpleIdentifier -> OUT .)
    DECREMENTO      reduce using rule 274 (simpleIdentifier -> OUT .)
    MINUS           reduce using rule 274 (simpleIdentifier -> OUT .)
    PLUS            reduce using rule 274 (simpleIdentifier -> OUT .)
    NOT             reduce using rule 274 (simpleIdentifier -> OUT .)
    SUSPEND         reduce using rule 274 (simpleIdentifier -> OUT .)
    COLONCOLON      reduce using rule 274 (simpleIdentifier -> OUT .)
    RCHAVE          reduce using rule 274 (simpleIdentifier -> OUT .)
    PONTO           reduce using rule 274 (simpleIdentifier -> OUT .)
    AS              reduce using rule 274 (simpleIdentifier -> OUT .)
    MAISIGUAL       reduce using rule 274 (simpleIdentifier -> OUT .)
    MENOSIGUAL      reduce using rule 274 (simpleIdentifier -> OUT .)
    MULTIGUAL       reduce using rule 274 (simpleIdentifier -> OUT .)
    DIVIGUAL        reduce using rule 274 (simpleIdentifier -> OUT .)
    MODIGUAL        reduce using rule 274 (simpleIdentifier -> OUT .)
    MULT            reduce using rule 274 (simpleIdentifier -> OUT .)
    DIVIDE          reduce using rule 274 (simpleIdentifier -> OUT .)
    MOD             reduce using rule 274 (simpleIdentifier -> OUT .)
    PONTOPONTO      reduce using rule 274 (simpleIdentifier -> OUT .)
    ELVIS           reduce using rule 274 (simpleIdentifier -> OUT .)
    IN              reduce using rule 274 (simpleIdentifier -> OUT .)
    NOT_IN          reduce using rule 274 (simpleIdentifier -> OUT .)
    IS              reduce using rule 274 (simpleIdentifier -> OUT .)
    NOT_IS          reduce using rule 274 (simpleIdentifier -> OUT .)
    MAIOR           reduce using rule 274 (simpleIdentifier -> OUT .)
    MENORIGUAL      reduce using rule 274 (simpleIdentifier -> OUT .)
    MAIORIGUAL      reduce using rule 274 (simpleIdentifier -> OUT .)
    DIFERENTE       reduce using rule 274 (simpleIdentifier -> OUT .)
    IDENTIDADE      reduce using rule 274 (simpleIdentifier -> OUT .)
    IGUALDADE       reduce using rule 274 (simpleIdentifier -> OUT .)
    SEMIDENTIDADE   reduce using rule 274 (simpleIdentifier -> OUT .)
    AND             reduce using rule 274 (simpleIdentifier -> OUT .)
    OR              reduce using rule 274 (simpleIdentifier -> OUT .)
    COMMA           reduce using rule 274 (simpleIdentifier -> OUT .)
    RPAREN          reduce using rule 274 (simpleIdentifier -> OUT .)
    RCCT            reduce using rule 274 (simpleIdentifier -> OUT .)
    PV              reduce using rule 274 (simpleIdentifier -> OUT .)
    ELSE            reduce using rule 274 (simpleIdentifier -> OUT .)
    SETA            reduce using rule 274 (simpleIdentifier -> OUT .)
    ATRIBUICAO      reduce using rule 274 (simpleIdentifier -> OUT .)
    CLASS           reduce using rule 274 (simpleIdentifier -> OUT .)


state 12

    (275) simpleIdentifier -> VARARG .

    LPAREN          reduce using rule 275 (simpleIdentifier -> VARARG .)
    DOISP           reduce using rule 275 (simpleIdentifier -> VARARG .)
    MENOR           reduce using rule 275 (simpleIdentifier -> VARARG .)
    LCHAVE          reduce using rule 275 (simpleIdentifier -> VARARG .)
    FUN             reduce using rule 275 (simpleIdentifier -> VARARG .)
    $end            reduce using rule 275 (simpleIdentifier -> VARARG .)
    FOR             reduce using rule 275 (simpleIdentifier -> VARARG .)
    WHILE           reduce using rule 275 (simpleIdentifier -> VARARG .)
    DO              reduce using rule 275 (simpleIdentifier -> VARARG .)
    VAR             reduce using rule 275 (simpleIdentifier -> VARARG .)
    VAL             reduce using rule 275 (simpleIdentifier -> VARARG .)
    ID              reduce using rule 275 (simpleIdentifier -> VARARG .)
    CROSSINLINE     reduce using rule 275 (simpleIdentifier -> VARARG .)
    IMPORT          reduce using rule 275 (simpleIdentifier -> VARARG .)
    INIT            reduce using rule 275 (simpleIdentifier -> VARARG .)
    NOINLINE        reduce using rule 275 (simpleIdentifier -> VARARG .)
    OUT             reduce using rule 275 (simpleIdentifier -> VARARG .)
    VARARG          reduce using rule 275 (simpleIdentifier -> VARARG .)
    WHERE           reduce using rule 275 (simpleIdentifier -> VARARG .)
    OPERATOR        reduce using rule 275 (simpleIdentifier -> VARARG .)
    LITERAL_STRING  reduce using rule 275 (simpleIdentifier -> VARARG .)
    NUMBER          reduce using rule 275 (simpleIdentifier -> VARARG .)
    LCCT            reduce using rule 275 (simpleIdentifier -> VARARG .)
    IF              reduce using rule 275 (simpleIdentifier -> VARARG .)
    RETURN          reduce using rule 275 (simpleIdentifier -> VARARG .)
    RETURN_AT       reduce using rule 275 (simpleIdentifier -> VARARG .)
    CONTINUE        reduce using rule 275 (simpleIdentifier -> VARARG .)
    CONTINUE_AT     reduce using rule 275 (simpleIdentifier -> VARARG .)
    BREAK           reduce using rule 275 (simpleIdentifier -> VARARG .)
    BREAK_AT        reduce using rule 275 (simpleIdentifier -> VARARG .)
    INCREMENTO      reduce using rule 275 (simpleIdentifier -> VARARG .)
    DECREMENTO      reduce using rule 275 (simpleIdentifier -> VARARG .)
    MINUS           reduce using rule 275 (simpleIdentifier -> VARARG .)
    PLUS            reduce using rule 275 (simpleIdentifier -> VARARG .)
    NOT             reduce using rule 275 (simpleIdentifier -> VARARG .)
    SUSPEND         reduce using rule 275 (simpleIdentifier -> VARARG .)
    COLONCOLON      reduce using rule 275 (simpleIdentifier -> VARARG .)
    RCHAVE          reduce using rule 275 (simpleIdentifier -> VARARG .)
    PONTO           reduce using rule 275 (simpleIdentifier -> VARARG .)
    AS              reduce using rule 275 (simpleIdentifier -> VARARG .)
    MAISIGUAL       reduce using rule 275 (simpleIdentifier -> VARARG .)
    MENOSIGUAL      reduce using rule 275 (simpleIdentifier -> VARARG .)
    MULTIGUAL       reduce using rule 275 (simpleIdentifier -> VARARG .)
    DIVIGUAL        reduce using rule 275 (simpleIdentifier -> VARARG .)
    MODIGUAL        reduce using rule 275 (simpleIdentifier -> VARARG .)
    MULT            reduce using rule 275 (simpleIdentifier -> VARARG .)
    DIVIDE          reduce using rule 275 (simpleIdentifier -> VARARG .)
    MOD             reduce using rule 275 (simpleIdentifier -> VARARG .)
    PONTOPONTO      reduce using rule 275 (simpleIdentifier -> VARARG .)
    ELVIS           reduce using rule 275 (simpleIdentifier -> VARARG .)
    IN              reduce using rule 275 (simpleIdentifier -> VARARG .)
    NOT_IN          reduce using rule 275 (simpleIdentifier -> VARARG .)
    IS              reduce using rule 275 (simpleIdentifier -> VARARG .)
    NOT_IS          reduce using rule 275 (simpleIdentifier -> VARARG .)
    MAIOR           reduce using rule 275 (simpleIdentifier -> VARARG .)
    MENORIGUAL      reduce using rule 275 (simpleIdentifier -> VARARG .)
    MAIORIGUAL      reduce using rule 275 (simpleIdentifier -> VARARG .)
    DIFERENTE       reduce using rule 275 (simpleIdentifier -> VARARG .)
    IDENTIDADE      reduce using rule 275 (simpleIdentifier -> VARARG .)
    IGUALDADE       reduce using rule 275 (simpleIdentifier -> VARARG .)
    SEMIDENTIDADE   reduce using rule 275 (simpleIdentifier -> VARARG .)
    AND             reduce using rule 275 (simpleIdentifier -> VARARG .)
    OR              reduce using rule 275 (simpleIdentifier -> VARARG .)
    COMMA           reduce using rule 275 (simpleIdentifier -> VARARG .)
    RPAREN          reduce using rule 275 (simpleIdentifier -> VARARG .)
    RCCT            reduce using rule 275 (simpleIdentifier -> VARARG .)
    PV              reduce using rule 275 (simpleIdentifier -> VARARG .)
    ELSE            reduce using rule 275 (simpleIdentifier -> VARARG .)
    SETA            reduce using rule 275 (simpleIdentifier -> VARARG .)
    ATRIBUICAO      reduce using rule 275 (simpleIdentifier -> VARARG .)
    CLASS           reduce using rule 275 (simpleIdentifier -> VARARG .)


state 13

    (276) simpleIdentifier -> WHERE .

    LPAREN          reduce using rule 276 (simpleIdentifier -> WHERE .)
    DOISP           reduce using rule 276 (simpleIdentifier -> WHERE .)
    MENOR           reduce using rule 276 (simpleIdentifier -> WHERE .)
    LCHAVE          reduce using rule 276 (simpleIdentifier -> WHERE .)
    FUN             reduce using rule 276 (simpleIdentifier -> WHERE .)
    $end            reduce using rule 276 (simpleIdentifier -> WHERE .)
    FOR             reduce using rule 276 (simpleIdentifier -> WHERE .)
    WHILE           reduce using rule 276 (simpleIdentifier -> WHERE .)
    DO              reduce using rule 276 (simpleIdentifier -> WHERE .)
    VAR             reduce using rule 276 (simpleIdentifier -> WHERE .)
    VAL             reduce using rule 276 (simpleIdentifier -> WHERE .)
    ID              reduce using rule 276 (simpleIdentifier -> WHERE .)
    CROSSINLINE     reduce using rule 276 (simpleIdentifier -> WHERE .)
    IMPORT          reduce using rule 276 (simpleIdentifier -> WHERE .)
    INIT            reduce using rule 276 (simpleIdentifier -> WHERE .)
    NOINLINE        reduce using rule 276 (simpleIdentifier -> WHERE .)
    OUT             reduce using rule 276 (simpleIdentifier -> WHERE .)
    VARARG          reduce using rule 276 (simpleIdentifier -> WHERE .)
    WHERE           reduce using rule 276 (simpleIdentifier -> WHERE .)
    OPERATOR        reduce using rule 276 (simpleIdentifier -> WHERE .)
    LITERAL_STRING  reduce using rule 276 (simpleIdentifier -> WHERE .)
    NUMBER          reduce using rule 276 (simpleIdentifier -> WHERE .)
    LCCT            reduce using rule 276 (simpleIdentifier -> WHERE .)
    IF              reduce using rule 276 (simpleIdentifier -> WHERE .)
    RETURN          reduce using rule 276 (simpleIdentifier -> WHERE .)
    RETURN_AT       reduce using rule 276 (simpleIdentifier -> WHERE .)
    CONTINUE        reduce using rule 276 (simpleIdentifier -> WHERE .)
    CONTINUE_AT     reduce using rule 276 (simpleIdentifier -> WHERE .)
    BREAK           reduce using rule 276 (simpleIdentifier -> WHERE .)
    BREAK_AT        reduce using rule 276 (simpleIdentifier -> WHERE .)
    INCREMENTO      reduce using rule 276 (simpleIdentifier -> WHERE .)
    DECREMENTO      reduce using rule 276 (simpleIdentifier -> WHERE .)
    MINUS           reduce using rule 276 (simpleIdentifier -> WHERE .)
    PLUS            reduce using rule 276 (simpleIdentifier -> WHERE .)
    NOT             reduce using rule 276 (simpleIdentifier -> WHERE .)
    SUSPEND         reduce using rule 276 (simpleIdentifier -> WHERE .)
    COLONCOLON      reduce using rule 276 (simpleIdentifier -> WHERE .)
    RCHAVE          reduce using rule 276 (simpleIdentifier -> WHERE .)
    PONTO           reduce using rule 276 (simpleIdentifier -> WHERE .)
    AS              reduce using rule 276 (simpleIdentifier -> WHERE .)
    MAISIGUAL       reduce using rule 276 (simpleIdentifier -> WHERE .)
    MENOSIGUAL      reduce using rule 276 (simpleIdentifier -> WHERE .)
    MULTIGUAL       reduce using rule 276 (simpleIdentifier -> WHERE .)
    DIVIGUAL        reduce using rule 276 (simpleIdentifier -> WHERE .)
    MODIGUAL        reduce using rule 276 (simpleIdentifier -> WHERE .)
    MULT            reduce using rule 276 (simpleIdentifier -> WHERE .)
    DIVIDE          reduce using rule 276 (simpleIdentifier -> WHERE .)
    MOD             reduce using rule 276 (simpleIdentifier -> WHERE .)
    PONTOPONTO      reduce using rule 276 (simpleIdentifier -> WHERE .)
    ELVIS           reduce using rule 276 (simpleIdentifier -> WHERE .)
    IN              reduce using rule 276 (simpleIdentifier -> WHERE .)
    NOT_IN          reduce using rule 276 (simpleIdentifier -> WHERE .)
    IS              reduce using rule 276 (simpleIdentifier -> WHERE .)
    NOT_IS          reduce using rule 276 (simpleIdentifier -> WHERE .)
    MAIOR           reduce using rule 276 (simpleIdentifier -> WHERE .)
    MENORIGUAL      reduce using rule 276 (simpleIdentifier -> WHERE .)
    MAIORIGUAL      reduce using rule 276 (simpleIdentifier -> WHERE .)
    DIFERENTE       reduce using rule 276 (simpleIdentifier -> WHERE .)
    IDENTIDADE      reduce using rule 276 (simpleIdentifier -> WHERE .)
    IGUALDADE       reduce using rule 276 (simpleIdentifier -> WHERE .)
    SEMIDENTIDADE   reduce using rule 276 (simpleIdentifier -> WHERE .)
    AND             reduce using rule 276 (simpleIdentifier -> WHERE .)
    OR              reduce using rule 276 (simpleIdentifier -> WHERE .)
    COMMA           reduce using rule 276 (simpleIdentifier -> WHERE .)
    RPAREN          reduce using rule 276 (simpleIdentifier -> WHERE .)
    RCCT            reduce using rule 276 (simpleIdentifier -> WHERE .)
    PV              reduce using rule 276 (simpleIdentifier -> WHERE .)
    ELSE            reduce using rule 276 (simpleIdentifier -> WHERE .)
    SETA            reduce using rule 276 (simpleIdentifier -> WHERE .)
    ATRIBUICAO      reduce using rule 276 (simpleIdentifier -> WHERE .)
    CLASS           reduce using rule 276 (simpleIdentifier -> WHERE .)


state 14

    (277) simpleIdentifier -> OPERATOR .

    LPAREN          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DOISP           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MENOR           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    LCHAVE          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    FUN             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    $end            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    FOR             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    WHILE           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DO              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    VAR             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    VAL             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    ID              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    CROSSINLINE     reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IMPORT          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    INIT            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    NOINLINE        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    OUT             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    VARARG          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    WHERE           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    OPERATOR        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    LITERAL_STRING  reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    NUMBER          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    LCCT            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IF              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    RETURN          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    RETURN_AT       reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    CONTINUE        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    CONTINUE_AT     reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    BREAK           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    BREAK_AT        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    INCREMENTO      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DECREMENTO      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MINUS           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    PLUS            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    NOT             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    SUSPEND         reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    COLONCOLON      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    RCHAVE          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    PONTO           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    AS              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MAISIGUAL       reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MENOSIGUAL      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MULTIGUAL       reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DIVIGUAL        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MODIGUAL        reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MULT            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DIVIDE          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MOD             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    PONTOPONTO      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    ELVIS           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IN              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    NOT_IN          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IS              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    NOT_IS          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MAIOR           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MENORIGUAL      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    MAIORIGUAL      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    DIFERENTE       reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IDENTIDADE      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    IGUALDADE       reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    SEMIDENTIDADE   reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    AND             reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    OR              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    COMMA           reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    RPAREN          reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    RCCT            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    PV              reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    ELSE            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    SETA            reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    ATRIBUICAO      reduce using rule 277 (simpleIdentifier -> OPERATOR .)
    CLASS           reduce using rule 277 (simpleIdentifier -> OPERATOR .)


state 15

    (7) functionDeclaration -> FUN simpleIdentifier functionValueParameters . optionalType optionalBlock
    (3) optionalType -> . DOISP type
    (4) optionalType -> .

    DOISP           shift and go to state 18
    LCHAVE          reduce using rule 4 (optionalType -> .)
    FUN             reduce using rule 4 (optionalType -> .)
    $end            reduce using rule 4 (optionalType -> .)
    LPAREN          reduce using rule 4 (optionalType -> .)
    FOR             reduce using rule 4 (optionalType -> .)
    WHILE           reduce using rule 4 (optionalType -> .)
    DO              reduce using rule 4 (optionalType -> .)
    VAR             reduce using rule 4 (optionalType -> .)
    VAL             reduce using rule 4 (optionalType -> .)
    ID              reduce using rule 4 (optionalType -> .)
    CROSSINLINE     reduce using rule 4 (optionalType -> .)
    IMPORT          reduce using rule 4 (optionalType -> .)
    INIT            reduce using rule 4 (optionalType -> .)
    NOINLINE        reduce using rule 4 (optionalType -> .)
    OUT             reduce using rule 4 (optionalType -> .)
    VARARG          reduce using rule 4 (optionalType -> .)
    WHERE           reduce using rule 4 (optionalType -> .)
    OPERATOR        reduce using rule 4 (optionalType -> .)
    LITERAL_STRING  reduce using rule 4 (optionalType -> .)
    NUMBER          reduce using rule 4 (optionalType -> .)
    LCCT            reduce using rule 4 (optionalType -> .)
    IF              reduce using rule 4 (optionalType -> .)
    RETURN          reduce using rule 4 (optionalType -> .)
    RETURN_AT       reduce using rule 4 (optionalType -> .)
    CONTINUE        reduce using rule 4 (optionalType -> .)
    CONTINUE_AT     reduce using rule 4 (optionalType -> .)
    BREAK           reduce using rule 4 (optionalType -> .)
    BREAK_AT        reduce using rule 4 (optionalType -> .)
    INCREMENTO      reduce using rule 4 (optionalType -> .)
    DECREMENTO      reduce using rule 4 (optionalType -> .)
    MINUS           reduce using rule 4 (optionalType -> .)
    PLUS            reduce using rule 4 (optionalType -> .)
    NOT             reduce using rule 4 (optionalType -> .)
    SUSPEND         reduce using rule 4 (optionalType -> .)
    COLONCOLON      reduce using rule 4 (optionalType -> .)
    RCHAVE          reduce using rule 4 (optionalType -> .)
    MENOR           reduce using rule 4 (optionalType -> .)
    PONTO           reduce using rule 4 (optionalType -> .)
    AS              reduce using rule 4 (optionalType -> .)
    MAISIGUAL       reduce using rule 4 (optionalType -> .)
    MENOSIGUAL      reduce using rule 4 (optionalType -> .)
    MULTIGUAL       reduce using rule 4 (optionalType -> .)
    DIVIGUAL        reduce using rule 4 (optionalType -> .)
    MODIGUAL        reduce using rule 4 (optionalType -> .)
    MULT            reduce using rule 4 (optionalType -> .)
    DIVIDE          reduce using rule 4 (optionalType -> .)
    MOD             reduce using rule 4 (optionalType -> .)
    PONTOPONTO      reduce using rule 4 (optionalType -> .)
    ELVIS           reduce using rule 4 (optionalType -> .)
    IN              reduce using rule 4 (optionalType -> .)
    NOT_IN          reduce using rule 4 (optionalType -> .)
    IS              reduce using rule 4 (optionalType -> .)
    NOT_IS          reduce using rule 4 (optionalType -> .)
    MAIOR           reduce using rule 4 (optionalType -> .)
    MENORIGUAL      reduce using rule 4 (optionalType -> .)
    MAIORIGUAL      reduce using rule 4 (optionalType -> .)
    DIFERENTE       reduce using rule 4 (optionalType -> .)
    IDENTIDADE      reduce using rule 4 (optionalType -> .)
    IGUALDADE       reduce using rule 4 (optionalType -> .)
    SEMIDENTIDADE   reduce using rule 4 (optionalType -> .)
    AND             reduce using rule 4 (optionalType -> .)
    OR              reduce using rule 4 (optionalType -> .)
    COMMA           reduce using rule 4 (optionalType -> .)
    RPAREN          reduce using rule 4 (optionalType -> .)
    RCCT            reduce using rule 4 (optionalType -> .)
    PV              reduce using rule 4 (optionalType -> .)
    ELSE            reduce using rule 4 (optionalType -> .)

    optionalType                   shift and go to state 17

state 16

    (27) functionValueParameters -> LPAREN . functionValueParametersRecursive RPAREN
    (28) functionValueParameters -> LPAREN . RPAREN
    (29) functionValueParametersRecursive -> . functionValueParameter
    (30) functionValueParametersRecursive -> . functionValueParameter COMMA functionValueParametersRecursive
    (31) functionValueParameter -> . parameter ATRIBUICAO expression
    (32) functionValueParameter -> . parameter
    (39) parameter -> . simpleIdentifier DOISP type
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    RPAREN          shift and go to state 20
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    functionValueParametersRecursive shift and go to state 19
    functionValueParameter         shift and go to state 21
    parameter                      shift and go to state 22
    simpleIdentifier               shift and go to state 23

state 17

    (7) functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType . optionalBlock
    (5) optionalBlock -> . block
    (6) optionalBlock -> .
    (80) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    FUN             reduce using rule 6 (optionalBlock -> .)
    $end            reduce using rule 6 (optionalBlock -> .)
    LPAREN          reduce using rule 6 (optionalBlock -> .)
    FOR             reduce using rule 6 (optionalBlock -> .)
    WHILE           reduce using rule 6 (optionalBlock -> .)
    DO              reduce using rule 6 (optionalBlock -> .)
    VAR             reduce using rule 6 (optionalBlock -> .)
    VAL             reduce using rule 6 (optionalBlock -> .)
    ID              reduce using rule 6 (optionalBlock -> .)
    CROSSINLINE     reduce using rule 6 (optionalBlock -> .)
    IMPORT          reduce using rule 6 (optionalBlock -> .)
    INIT            reduce using rule 6 (optionalBlock -> .)
    NOINLINE        reduce using rule 6 (optionalBlock -> .)
    OUT             reduce using rule 6 (optionalBlock -> .)
    VARARG          reduce using rule 6 (optionalBlock -> .)
    WHERE           reduce using rule 6 (optionalBlock -> .)
    OPERATOR        reduce using rule 6 (optionalBlock -> .)
    LITERAL_STRING  reduce using rule 6 (optionalBlock -> .)
    NUMBER          reduce using rule 6 (optionalBlock -> .)
    LCCT            reduce using rule 6 (optionalBlock -> .)
    IF              reduce using rule 6 (optionalBlock -> .)
    RETURN          reduce using rule 6 (optionalBlock -> .)
    RETURN_AT       reduce using rule 6 (optionalBlock -> .)
    CONTINUE        reduce using rule 6 (optionalBlock -> .)
    CONTINUE_AT     reduce using rule 6 (optionalBlock -> .)
    BREAK           reduce using rule 6 (optionalBlock -> .)
    BREAK_AT        reduce using rule 6 (optionalBlock -> .)
    INCREMENTO      reduce using rule 6 (optionalBlock -> .)
    DECREMENTO      reduce using rule 6 (optionalBlock -> .)
    MINUS           reduce using rule 6 (optionalBlock -> .)
    PLUS            reduce using rule 6 (optionalBlock -> .)
    NOT             reduce using rule 6 (optionalBlock -> .)
    SUSPEND         reduce using rule 6 (optionalBlock -> .)
    COLONCOLON      reduce using rule 6 (optionalBlock -> .)
    RCHAVE          reduce using rule 6 (optionalBlock -> .)
    MENOR           reduce using rule 6 (optionalBlock -> .)
    PONTO           reduce using rule 6 (optionalBlock -> .)
    AS              reduce using rule 6 (optionalBlock -> .)
    MAISIGUAL       reduce using rule 6 (optionalBlock -> .)
    MENOSIGUAL      reduce using rule 6 (optionalBlock -> .)
    MULTIGUAL       reduce using rule 6 (optionalBlock -> .)
    DIVIGUAL        reduce using rule 6 (optionalBlock -> .)
    MODIGUAL        reduce using rule 6 (optionalBlock -> .)
    MULT            reduce using rule 6 (optionalBlock -> .)
    DIVIDE          reduce using rule 6 (optionalBlock -> .)
    MOD             reduce using rule 6 (optionalBlock -> .)
    PONTOPONTO      reduce using rule 6 (optionalBlock -> .)
    ELVIS           reduce using rule 6 (optionalBlock -> .)
    IN              reduce using rule 6 (optionalBlock -> .)
    NOT_IN          reduce using rule 6 (optionalBlock -> .)
    IS              reduce using rule 6 (optionalBlock -> .)
    NOT_IS          reduce using rule 6 (optionalBlock -> .)
    MAIOR           reduce using rule 6 (optionalBlock -> .)
    MENORIGUAL      reduce using rule 6 (optionalBlock -> .)
    MAIORIGUAL      reduce using rule 6 (optionalBlock -> .)
    DIFERENTE       reduce using rule 6 (optionalBlock -> .)
    IDENTIDADE      reduce using rule 6 (optionalBlock -> .)
    IGUALDADE       reduce using rule 6 (optionalBlock -> .)
    SEMIDENTIDADE   reduce using rule 6 (optionalBlock -> .)
    AND             reduce using rule 6 (optionalBlock -> .)
    OR              reduce using rule 6 (optionalBlock -> .)
    COMMA           reduce using rule 6 (optionalBlock -> .)
    RPAREN          reduce using rule 6 (optionalBlock -> .)
    RCCT            reduce using rule 6 (optionalBlock -> .)
    PV              reduce using rule 6 (optionalBlock -> .)
    ELSE            reduce using rule 6 (optionalBlock -> .)
    LCHAVE          shift and go to state 26

  ! LCHAVE          [ reduce using rule 6 (optionalBlock -> .) ]

    optionalBlock                  shift and go to state 24
    block                          shift and go to state 25

state 18

    (3) optionalType -> DOISP . type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    type                           shift and go to state 27
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 19

    (27) functionValueParameters -> LPAREN functionValueParametersRecursive . RPAREN

    RPAREN          shift and go to state 40


state 20

    (28) functionValueParameters -> LPAREN RPAREN .

    DOISP           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    FUN             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    $end            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    LPAREN          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    FOR             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    WHILE           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    DO              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    VAR             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    VAL             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    ID              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IMPORT          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    INIT            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    OUT             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    VARARG          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    WHERE           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NUMBER          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    LCCT            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IF              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    RETURN          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    BREAK           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MINUS           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    PLUS            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NOT             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MENOR           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    PONTO           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    AS              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MULT            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MOD             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    ELVIS           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IN              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IS              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MAIOR           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    AND             reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    OR              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    COMMA           reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    RPAREN          reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    RCCT            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    PV              reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)
    ELSE            reduce using rule 28 (functionValueParameters -> LPAREN RPAREN .)


state 21

    (29) functionValueParametersRecursive -> functionValueParameter .
    (30) functionValueParametersRecursive -> functionValueParameter . COMMA functionValueParametersRecursive

    RPAREN          reduce using rule 29 (functionValueParametersRecursive -> functionValueParameter .)
    COMMA           shift and go to state 41


state 22

    (31) functionValueParameter -> parameter . ATRIBUICAO expression
    (32) functionValueParameter -> parameter .

    ATRIBUICAO      shift and go to state 42
    COMMA           reduce using rule 32 (functionValueParameter -> parameter .)
    RPAREN          reduce using rule 32 (functionValueParameter -> parameter .)


state 23

    (39) parameter -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 43


state 24

    (7) functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .

    FUN             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    $end            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LPAREN          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    FOR             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    WHILE           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DO              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    VAR             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    VAL             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ID              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CROSSINLINE     reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IMPORT          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    INIT            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOINLINE        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OUT             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    VARARG          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    WHERE           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OPERATOR        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LITERAL_STRING  reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NUMBER          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LCCT            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IF              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RETURN          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RETURN_AT       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CONTINUE        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    CONTINUE_AT     reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    BREAK           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    BREAK_AT        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    LCHAVE          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    INCREMENTO      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DECREMENTO      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MINUS           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PLUS            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOT             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    SUSPEND         reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    COLONCOLON      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RCHAVE          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MENOR           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PONTO           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    AS              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MAISIGUAL       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MENOSIGUAL      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MULTIGUAL       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DIVIGUAL        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MODIGUAL        reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MULT            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DIVIDE          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MOD             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PONTOPONTO      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ELVIS           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IN              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOT_IN          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IS              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    NOT_IS          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MAIOR           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MENORIGUAL      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    MAIORIGUAL      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    DIFERENTE       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IDENTIDADE      reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    IGUALDADE       reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    SEMIDENTIDADE   reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    AND             reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    OR              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    COMMA           reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RPAREN          reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    RCCT            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    PV              reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)
    ELSE            reduce using rule 7 (functionDeclaration -> FUN simpleIdentifier functionValueParameters optionalType optionalBlock .)


state 25

    (5) optionalBlock -> block .

    FUN             reduce using rule 5 (optionalBlock -> block .)
    $end            reduce using rule 5 (optionalBlock -> block .)
    LPAREN          reduce using rule 5 (optionalBlock -> block .)
    FOR             reduce using rule 5 (optionalBlock -> block .)
    WHILE           reduce using rule 5 (optionalBlock -> block .)
    DO              reduce using rule 5 (optionalBlock -> block .)
    VAR             reduce using rule 5 (optionalBlock -> block .)
    VAL             reduce using rule 5 (optionalBlock -> block .)
    ID              reduce using rule 5 (optionalBlock -> block .)
    CROSSINLINE     reduce using rule 5 (optionalBlock -> block .)
    IMPORT          reduce using rule 5 (optionalBlock -> block .)
    INIT            reduce using rule 5 (optionalBlock -> block .)
    NOINLINE        reduce using rule 5 (optionalBlock -> block .)
    OUT             reduce using rule 5 (optionalBlock -> block .)
    VARARG          reduce using rule 5 (optionalBlock -> block .)
    WHERE           reduce using rule 5 (optionalBlock -> block .)
    OPERATOR        reduce using rule 5 (optionalBlock -> block .)
    LITERAL_STRING  reduce using rule 5 (optionalBlock -> block .)
    NUMBER          reduce using rule 5 (optionalBlock -> block .)
    LCCT            reduce using rule 5 (optionalBlock -> block .)
    IF              reduce using rule 5 (optionalBlock -> block .)
    RETURN          reduce using rule 5 (optionalBlock -> block .)
    RETURN_AT       reduce using rule 5 (optionalBlock -> block .)
    CONTINUE        reduce using rule 5 (optionalBlock -> block .)
    CONTINUE_AT     reduce using rule 5 (optionalBlock -> block .)
    BREAK           reduce using rule 5 (optionalBlock -> block .)
    BREAK_AT        reduce using rule 5 (optionalBlock -> block .)
    LCHAVE          reduce using rule 5 (optionalBlock -> block .)
    INCREMENTO      reduce using rule 5 (optionalBlock -> block .)
    DECREMENTO      reduce using rule 5 (optionalBlock -> block .)
    MINUS           reduce using rule 5 (optionalBlock -> block .)
    PLUS            reduce using rule 5 (optionalBlock -> block .)
    NOT             reduce using rule 5 (optionalBlock -> block .)
    SUSPEND         reduce using rule 5 (optionalBlock -> block .)
    COLONCOLON      reduce using rule 5 (optionalBlock -> block .)
    RCHAVE          reduce using rule 5 (optionalBlock -> block .)
    MENOR           reduce using rule 5 (optionalBlock -> block .)
    PONTO           reduce using rule 5 (optionalBlock -> block .)
    AS              reduce using rule 5 (optionalBlock -> block .)
    MAISIGUAL       reduce using rule 5 (optionalBlock -> block .)
    MENOSIGUAL      reduce using rule 5 (optionalBlock -> block .)
    MULTIGUAL       reduce using rule 5 (optionalBlock -> block .)
    DIVIGUAL        reduce using rule 5 (optionalBlock -> block .)
    MODIGUAL        reduce using rule 5 (optionalBlock -> block .)
    MULT            reduce using rule 5 (optionalBlock -> block .)
    DIVIDE          reduce using rule 5 (optionalBlock -> block .)
    MOD             reduce using rule 5 (optionalBlock -> block .)
    PONTOPONTO      reduce using rule 5 (optionalBlock -> block .)
    ELVIS           reduce using rule 5 (optionalBlock -> block .)
    IN              reduce using rule 5 (optionalBlock -> block .)
    NOT_IN          reduce using rule 5 (optionalBlock -> block .)
    IS              reduce using rule 5 (optionalBlock -> block .)
    NOT_IS          reduce using rule 5 (optionalBlock -> block .)
    MAIOR           reduce using rule 5 (optionalBlock -> block .)
    MENORIGUAL      reduce using rule 5 (optionalBlock -> block .)
    MAIORIGUAL      reduce using rule 5 (optionalBlock -> block .)
    DIFERENTE       reduce using rule 5 (optionalBlock -> block .)
    IDENTIDADE      reduce using rule 5 (optionalBlock -> block .)
    IGUALDADE       reduce using rule 5 (optionalBlock -> block .)
    SEMIDENTIDADE   reduce using rule 5 (optionalBlock -> block .)
    AND             reduce using rule 5 (optionalBlock -> block .)
    OR              reduce using rule 5 (optionalBlock -> block .)
    COMMA           reduce using rule 5 (optionalBlock -> block .)
    RPAREN          reduce using rule 5 (optionalBlock -> block .)
    RCCT            reduce using rule 5 (optionalBlock -> block .)
    PV              reduce using rule 5 (optionalBlock -> block .)
    ELSE            reduce using rule 5 (optionalBlock -> block .)


state 26

    (80) block -> LCHAVE . statements RCHAVE
    (70) statements -> . statement
    (71) statements -> . statement statements
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    FUN             shift and go to state 53
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

    statements                     shift and go to state 45
    statement                      shift and go to state 46
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    expression                     shift and go to state 50
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    simpleIdentifier               shift and go to state 54
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 27

    (3) optionalType -> DOISP type .

    LCHAVE          reduce using rule 3 (optionalType -> DOISP type .)
    FUN             reduce using rule 3 (optionalType -> DOISP type .)
    $end            reduce using rule 3 (optionalType -> DOISP type .)
    LPAREN          reduce using rule 3 (optionalType -> DOISP type .)
    FOR             reduce using rule 3 (optionalType -> DOISP type .)
    WHILE           reduce using rule 3 (optionalType -> DOISP type .)
    DO              reduce using rule 3 (optionalType -> DOISP type .)
    VAR             reduce using rule 3 (optionalType -> DOISP type .)
    VAL             reduce using rule 3 (optionalType -> DOISP type .)
    ID              reduce using rule 3 (optionalType -> DOISP type .)
    CROSSINLINE     reduce using rule 3 (optionalType -> DOISP type .)
    IMPORT          reduce using rule 3 (optionalType -> DOISP type .)
    INIT            reduce using rule 3 (optionalType -> DOISP type .)
    NOINLINE        reduce using rule 3 (optionalType -> DOISP type .)
    OUT             reduce using rule 3 (optionalType -> DOISP type .)
    VARARG          reduce using rule 3 (optionalType -> DOISP type .)
    WHERE           reduce using rule 3 (optionalType -> DOISP type .)
    OPERATOR        reduce using rule 3 (optionalType -> DOISP type .)
    LITERAL_STRING  reduce using rule 3 (optionalType -> DOISP type .)
    NUMBER          reduce using rule 3 (optionalType -> DOISP type .)
    LCCT            reduce using rule 3 (optionalType -> DOISP type .)
    IF              reduce using rule 3 (optionalType -> DOISP type .)
    RETURN          reduce using rule 3 (optionalType -> DOISP type .)
    RETURN_AT       reduce using rule 3 (optionalType -> DOISP type .)
    CONTINUE        reduce using rule 3 (optionalType -> DOISP type .)
    CONTINUE_AT     reduce using rule 3 (optionalType -> DOISP type .)
    BREAK           reduce using rule 3 (optionalType -> DOISP type .)
    BREAK_AT        reduce using rule 3 (optionalType -> DOISP type .)
    INCREMENTO      reduce using rule 3 (optionalType -> DOISP type .)
    DECREMENTO      reduce using rule 3 (optionalType -> DOISP type .)
    MINUS           reduce using rule 3 (optionalType -> DOISP type .)
    PLUS            reduce using rule 3 (optionalType -> DOISP type .)
    NOT             reduce using rule 3 (optionalType -> DOISP type .)
    SUSPEND         reduce using rule 3 (optionalType -> DOISP type .)
    COLONCOLON      reduce using rule 3 (optionalType -> DOISP type .)
    RCHAVE          reduce using rule 3 (optionalType -> DOISP type .)
    MENOR           reduce using rule 3 (optionalType -> DOISP type .)
    PONTO           reduce using rule 3 (optionalType -> DOISP type .)
    AS              reduce using rule 3 (optionalType -> DOISP type .)
    MAISIGUAL       reduce using rule 3 (optionalType -> DOISP type .)
    MENOSIGUAL      reduce using rule 3 (optionalType -> DOISP type .)
    MULTIGUAL       reduce using rule 3 (optionalType -> DOISP type .)
    DIVIGUAL        reduce using rule 3 (optionalType -> DOISP type .)
    MODIGUAL        reduce using rule 3 (optionalType -> DOISP type .)
    MULT            reduce using rule 3 (optionalType -> DOISP type .)
    DIVIDE          reduce using rule 3 (optionalType -> DOISP type .)
    MOD             reduce using rule 3 (optionalType -> DOISP type .)
    PONTOPONTO      reduce using rule 3 (optionalType -> DOISP type .)
    ELVIS           reduce using rule 3 (optionalType -> DOISP type .)
    IN              reduce using rule 3 (optionalType -> DOISP type .)
    NOT_IN          reduce using rule 3 (optionalType -> DOISP type .)
    IS              reduce using rule 3 (optionalType -> DOISP type .)
    NOT_IS          reduce using rule 3 (optionalType -> DOISP type .)
    MAIOR           reduce using rule 3 (optionalType -> DOISP type .)
    MENORIGUAL      reduce using rule 3 (optionalType -> DOISP type .)
    MAIORIGUAL      reduce using rule 3 (optionalType -> DOISP type .)
    DIFERENTE       reduce using rule 3 (optionalType -> DOISP type .)
    IDENTIDADE      reduce using rule 3 (optionalType -> DOISP type .)
    IGUALDADE       reduce using rule 3 (optionalType -> DOISP type .)
    SEMIDENTIDADE   reduce using rule 3 (optionalType -> DOISP type .)
    AND             reduce using rule 3 (optionalType -> DOISP type .)
    OR              reduce using rule 3 (optionalType -> DOISP type .)
    COMMA           reduce using rule 3 (optionalType -> DOISP type .)
    RPAREN          reduce using rule 3 (optionalType -> DOISP type .)
    RCCT            reduce using rule 3 (optionalType -> DOISP type .)
    PV              reduce using rule 3 (optionalType -> DOISP type .)
    ELSE            reduce using rule 3 (optionalType -> DOISP type .)
    SETA            reduce using rule 3 (optionalType -> DOISP type .)
    ATRIBUICAO      reduce using rule 3 (optionalType -> DOISP type .)


state 28

    (40) type -> typeModifiers . optype
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (48) typeModifier -> . SUSPEND
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    LPAREN          shift and go to state 35
    SUSPEND         shift and go to state 34
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    optype                         shift and go to state 111
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    typeModifier                   shift and go to state 106
    simpleIdentifier               shift and go to state 39

state 29

    (41) type -> optype .

    LCHAVE          reduce using rule 41 (type -> optype .)
    FUN             reduce using rule 41 (type -> optype .)
    $end            reduce using rule 41 (type -> optype .)
    LPAREN          reduce using rule 41 (type -> optype .)
    FOR             reduce using rule 41 (type -> optype .)
    WHILE           reduce using rule 41 (type -> optype .)
    DO              reduce using rule 41 (type -> optype .)
    VAR             reduce using rule 41 (type -> optype .)
    VAL             reduce using rule 41 (type -> optype .)
    ID              reduce using rule 41 (type -> optype .)
    CROSSINLINE     reduce using rule 41 (type -> optype .)
    IMPORT          reduce using rule 41 (type -> optype .)
    INIT            reduce using rule 41 (type -> optype .)
    NOINLINE        reduce using rule 41 (type -> optype .)
    OUT             reduce using rule 41 (type -> optype .)
    VARARG          reduce using rule 41 (type -> optype .)
    WHERE           reduce using rule 41 (type -> optype .)
    OPERATOR        reduce using rule 41 (type -> optype .)
    LITERAL_STRING  reduce using rule 41 (type -> optype .)
    NUMBER          reduce using rule 41 (type -> optype .)
    LCCT            reduce using rule 41 (type -> optype .)
    IF              reduce using rule 41 (type -> optype .)
    RETURN          reduce using rule 41 (type -> optype .)
    RETURN_AT       reduce using rule 41 (type -> optype .)
    CONTINUE        reduce using rule 41 (type -> optype .)
    CONTINUE_AT     reduce using rule 41 (type -> optype .)
    BREAK           reduce using rule 41 (type -> optype .)
    BREAK_AT        reduce using rule 41 (type -> optype .)
    INCREMENTO      reduce using rule 41 (type -> optype .)
    DECREMENTO      reduce using rule 41 (type -> optype .)
    MINUS           reduce using rule 41 (type -> optype .)
    PLUS            reduce using rule 41 (type -> optype .)
    NOT             reduce using rule 41 (type -> optype .)
    SUSPEND         reduce using rule 41 (type -> optype .)
    COLONCOLON      reduce using rule 41 (type -> optype .)
    RCHAVE          reduce using rule 41 (type -> optype .)
    MENOR           reduce using rule 41 (type -> optype .)
    PONTO           reduce using rule 41 (type -> optype .)
    AS              reduce using rule 41 (type -> optype .)
    MAISIGUAL       reduce using rule 41 (type -> optype .)
    MENOSIGUAL      reduce using rule 41 (type -> optype .)
    MULTIGUAL       reduce using rule 41 (type -> optype .)
    DIVIGUAL        reduce using rule 41 (type -> optype .)
    MODIGUAL        reduce using rule 41 (type -> optype .)
    MULT            reduce using rule 41 (type -> optype .)
    DIVIDE          reduce using rule 41 (type -> optype .)
    MOD             reduce using rule 41 (type -> optype .)
    PONTOPONTO      reduce using rule 41 (type -> optype .)
    ELVIS           reduce using rule 41 (type -> optype .)
    IN              reduce using rule 41 (type -> optype .)
    NOT_IN          reduce using rule 41 (type -> optype .)
    IS              reduce using rule 41 (type -> optype .)
    NOT_IS          reduce using rule 41 (type -> optype .)
    MAIOR           reduce using rule 41 (type -> optype .)
    MENORIGUAL      reduce using rule 41 (type -> optype .)
    MAIORIGUAL      reduce using rule 41 (type -> optype .)
    DIFERENTE       reduce using rule 41 (type -> optype .)
    IDENTIDADE      reduce using rule 41 (type -> optype .)
    IGUALDADE       reduce using rule 41 (type -> optype .)
    SEMIDENTIDADE   reduce using rule 41 (type -> optype .)
    AND             reduce using rule 41 (type -> optype .)
    OR              reduce using rule 41 (type -> optype .)
    COMMA           reduce using rule 41 (type -> optype .)
    RPAREN          reduce using rule 41 (type -> optype .)
    RCCT            reduce using rule 41 (type -> optype .)
    PV              reduce using rule 41 (type -> optype .)
    ELSE            reduce using rule 41 (type -> optype .)
    SETA            reduce using rule 41 (type -> optype .)
    ATRIBUICAO      reduce using rule 41 (type -> optype .)


state 30

    (46) typeModifiers -> typeModifier .
    (47) typeModifiers -> typeModifier . typeModifiers
    (69) receiverType -> typeModifier . parenthesizedType
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (68) parenthesizedType -> . LPAREN type RPAREN
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    ID              reduce using rule 46 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 46 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 46 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 46 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 46 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 46 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 46 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 46 (typeModifiers -> typeModifier .)
    OPERATOR        reduce using rule 46 (typeModifiers -> typeModifier .)
    LPAREN          shift and go to state 115
    SUSPEND         shift and go to state 34

  ! LPAREN          [ reduce using rule 46 (typeModifiers -> typeModifier .) ]
  ! SUSPEND         [ reduce using rule 46 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 112
    typeModifiers                  shift and go to state 113
    parenthesizedType              shift and go to state 114

state 31

    (43) optype -> parenthesizedType .

    LCHAVE          reduce using rule 43 (optype -> parenthesizedType .)
    FUN             reduce using rule 43 (optype -> parenthesizedType .)
    $end            reduce using rule 43 (optype -> parenthesizedType .)
    LPAREN          reduce using rule 43 (optype -> parenthesizedType .)
    FOR             reduce using rule 43 (optype -> parenthesizedType .)
    WHILE           reduce using rule 43 (optype -> parenthesizedType .)
    DO              reduce using rule 43 (optype -> parenthesizedType .)
    VAR             reduce using rule 43 (optype -> parenthesizedType .)
    VAL             reduce using rule 43 (optype -> parenthesizedType .)
    ID              reduce using rule 43 (optype -> parenthesizedType .)
    CROSSINLINE     reduce using rule 43 (optype -> parenthesizedType .)
    IMPORT          reduce using rule 43 (optype -> parenthesizedType .)
    INIT            reduce using rule 43 (optype -> parenthesizedType .)
    NOINLINE        reduce using rule 43 (optype -> parenthesizedType .)
    OUT             reduce using rule 43 (optype -> parenthesizedType .)
    VARARG          reduce using rule 43 (optype -> parenthesizedType .)
    WHERE           reduce using rule 43 (optype -> parenthesizedType .)
    OPERATOR        reduce using rule 43 (optype -> parenthesizedType .)
    LITERAL_STRING  reduce using rule 43 (optype -> parenthesizedType .)
    NUMBER          reduce using rule 43 (optype -> parenthesizedType .)
    LCCT            reduce using rule 43 (optype -> parenthesizedType .)
    IF              reduce using rule 43 (optype -> parenthesizedType .)
    RETURN          reduce using rule 43 (optype -> parenthesizedType .)
    RETURN_AT       reduce using rule 43 (optype -> parenthesizedType .)
    CONTINUE        reduce using rule 43 (optype -> parenthesizedType .)
    CONTINUE_AT     reduce using rule 43 (optype -> parenthesizedType .)
    BREAK           reduce using rule 43 (optype -> parenthesizedType .)
    BREAK_AT        reduce using rule 43 (optype -> parenthesizedType .)
    INCREMENTO      reduce using rule 43 (optype -> parenthesizedType .)
    DECREMENTO      reduce using rule 43 (optype -> parenthesizedType .)
    MINUS           reduce using rule 43 (optype -> parenthesizedType .)
    PLUS            reduce using rule 43 (optype -> parenthesizedType .)
    NOT             reduce using rule 43 (optype -> parenthesizedType .)
    SUSPEND         reduce using rule 43 (optype -> parenthesizedType .)
    COLONCOLON      reduce using rule 43 (optype -> parenthesizedType .)
    RCHAVE          reduce using rule 43 (optype -> parenthesizedType .)
    MENOR           reduce using rule 43 (optype -> parenthesizedType .)
    PONTO           reduce using rule 43 (optype -> parenthesizedType .)
    AS              reduce using rule 43 (optype -> parenthesizedType .)
    MAISIGUAL       reduce using rule 43 (optype -> parenthesizedType .)
    MENOSIGUAL      reduce using rule 43 (optype -> parenthesizedType .)
    MULTIGUAL       reduce using rule 43 (optype -> parenthesizedType .)
    DIVIGUAL        reduce using rule 43 (optype -> parenthesizedType .)
    MODIGUAL        reduce using rule 43 (optype -> parenthesizedType .)
    MULT            reduce using rule 43 (optype -> parenthesizedType .)
    DIVIDE          reduce using rule 43 (optype -> parenthesizedType .)
    MOD             reduce using rule 43 (optype -> parenthesizedType .)
    PONTOPONTO      reduce using rule 43 (optype -> parenthesizedType .)
    ELVIS           reduce using rule 43 (optype -> parenthesizedType .)
    IN              reduce using rule 43 (optype -> parenthesizedType .)
    NOT_IN          reduce using rule 43 (optype -> parenthesizedType .)
    IS              reduce using rule 43 (optype -> parenthesizedType .)
    NOT_IS          reduce using rule 43 (optype -> parenthesizedType .)
    MAIOR           reduce using rule 43 (optype -> parenthesizedType .)
    MENORIGUAL      reduce using rule 43 (optype -> parenthesizedType .)
    MAIORIGUAL      reduce using rule 43 (optype -> parenthesizedType .)
    DIFERENTE       reduce using rule 43 (optype -> parenthesizedType .)
    IDENTIDADE      reduce using rule 43 (optype -> parenthesizedType .)
    IGUALDADE       reduce using rule 43 (optype -> parenthesizedType .)
    SEMIDENTIDADE   reduce using rule 43 (optype -> parenthesizedType .)
    AND             reduce using rule 43 (optype -> parenthesizedType .)
    OR              reduce using rule 43 (optype -> parenthesizedType .)
    COMMA           reduce using rule 43 (optype -> parenthesizedType .)
    RPAREN          reduce using rule 43 (optype -> parenthesizedType .)
    RCCT            reduce using rule 43 (optype -> parenthesizedType .)
    PV              reduce using rule 43 (optype -> parenthesizedType .)
    ELSE            reduce using rule 43 (optype -> parenthesizedType .)
    SETA            reduce using rule 43 (optype -> parenthesizedType .)
    ATRIBUICAO      reduce using rule 43 (optype -> parenthesizedType .)


state 32

    (44) optype -> functionType .

    LCHAVE          reduce using rule 44 (optype -> functionType .)
    FUN             reduce using rule 44 (optype -> functionType .)
    $end            reduce using rule 44 (optype -> functionType .)
    LPAREN          reduce using rule 44 (optype -> functionType .)
    FOR             reduce using rule 44 (optype -> functionType .)
    WHILE           reduce using rule 44 (optype -> functionType .)
    DO              reduce using rule 44 (optype -> functionType .)
    VAR             reduce using rule 44 (optype -> functionType .)
    VAL             reduce using rule 44 (optype -> functionType .)
    ID              reduce using rule 44 (optype -> functionType .)
    CROSSINLINE     reduce using rule 44 (optype -> functionType .)
    IMPORT          reduce using rule 44 (optype -> functionType .)
    INIT            reduce using rule 44 (optype -> functionType .)
    NOINLINE        reduce using rule 44 (optype -> functionType .)
    OUT             reduce using rule 44 (optype -> functionType .)
    VARARG          reduce using rule 44 (optype -> functionType .)
    WHERE           reduce using rule 44 (optype -> functionType .)
    OPERATOR        reduce using rule 44 (optype -> functionType .)
    LITERAL_STRING  reduce using rule 44 (optype -> functionType .)
    NUMBER          reduce using rule 44 (optype -> functionType .)
    LCCT            reduce using rule 44 (optype -> functionType .)
    IF              reduce using rule 44 (optype -> functionType .)
    RETURN          reduce using rule 44 (optype -> functionType .)
    RETURN_AT       reduce using rule 44 (optype -> functionType .)
    CONTINUE        reduce using rule 44 (optype -> functionType .)
    CONTINUE_AT     reduce using rule 44 (optype -> functionType .)
    BREAK           reduce using rule 44 (optype -> functionType .)
    BREAK_AT        reduce using rule 44 (optype -> functionType .)
    INCREMENTO      reduce using rule 44 (optype -> functionType .)
    DECREMENTO      reduce using rule 44 (optype -> functionType .)
    MINUS           reduce using rule 44 (optype -> functionType .)
    PLUS            reduce using rule 44 (optype -> functionType .)
    NOT             reduce using rule 44 (optype -> functionType .)
    SUSPEND         reduce using rule 44 (optype -> functionType .)
    COLONCOLON      reduce using rule 44 (optype -> functionType .)
    RCHAVE          reduce using rule 44 (optype -> functionType .)
    MENOR           reduce using rule 44 (optype -> functionType .)
    PONTO           reduce using rule 44 (optype -> functionType .)
    AS              reduce using rule 44 (optype -> functionType .)
    MAISIGUAL       reduce using rule 44 (optype -> functionType .)
    MENOSIGUAL      reduce using rule 44 (optype -> functionType .)
    MULTIGUAL       reduce using rule 44 (optype -> functionType .)
    DIVIGUAL        reduce using rule 44 (optype -> functionType .)
    MODIGUAL        reduce using rule 44 (optype -> functionType .)
    MULT            reduce using rule 44 (optype -> functionType .)
    DIVIDE          reduce using rule 44 (optype -> functionType .)
    MOD             reduce using rule 44 (optype -> functionType .)
    PONTOPONTO      reduce using rule 44 (optype -> functionType .)
    ELVIS           reduce using rule 44 (optype -> functionType .)
    IN              reduce using rule 44 (optype -> functionType .)
    NOT_IN          reduce using rule 44 (optype -> functionType .)
    IS              reduce using rule 44 (optype -> functionType .)
    NOT_IS          reduce using rule 44 (optype -> functionType .)
    MAIOR           reduce using rule 44 (optype -> functionType .)
    MENORIGUAL      reduce using rule 44 (optype -> functionType .)
    MAIORIGUAL      reduce using rule 44 (optype -> functionType .)
    DIFERENTE       reduce using rule 44 (optype -> functionType .)
    IDENTIDADE      reduce using rule 44 (optype -> functionType .)
    IGUALDADE       reduce using rule 44 (optype -> functionType .)
    SEMIDENTIDADE   reduce using rule 44 (optype -> functionType .)
    AND             reduce using rule 44 (optype -> functionType .)
    OR              reduce using rule 44 (optype -> functionType .)
    COMMA           reduce using rule 44 (optype -> functionType .)
    RPAREN          reduce using rule 44 (optype -> functionType .)
    RCCT            reduce using rule 44 (optype -> functionType .)
    PV              reduce using rule 44 (optype -> functionType .)
    ELSE            reduce using rule 44 (optype -> functionType .)
    SETA            reduce using rule 44 (optype -> functionType .)
    ATRIBUICAO      reduce using rule 44 (optype -> functionType .)


state 33

    (45) optype -> userType .

    LCHAVE          reduce using rule 45 (optype -> userType .)
    FUN             reduce using rule 45 (optype -> userType .)
    $end            reduce using rule 45 (optype -> userType .)
    LPAREN          reduce using rule 45 (optype -> userType .)
    FOR             reduce using rule 45 (optype -> userType .)
    WHILE           reduce using rule 45 (optype -> userType .)
    DO              reduce using rule 45 (optype -> userType .)
    VAR             reduce using rule 45 (optype -> userType .)
    VAL             reduce using rule 45 (optype -> userType .)
    ID              reduce using rule 45 (optype -> userType .)
    CROSSINLINE     reduce using rule 45 (optype -> userType .)
    IMPORT          reduce using rule 45 (optype -> userType .)
    INIT            reduce using rule 45 (optype -> userType .)
    NOINLINE        reduce using rule 45 (optype -> userType .)
    OUT             reduce using rule 45 (optype -> userType .)
    VARARG          reduce using rule 45 (optype -> userType .)
    WHERE           reduce using rule 45 (optype -> userType .)
    OPERATOR        reduce using rule 45 (optype -> userType .)
    LITERAL_STRING  reduce using rule 45 (optype -> userType .)
    NUMBER          reduce using rule 45 (optype -> userType .)
    LCCT            reduce using rule 45 (optype -> userType .)
    IF              reduce using rule 45 (optype -> userType .)
    RETURN          reduce using rule 45 (optype -> userType .)
    RETURN_AT       reduce using rule 45 (optype -> userType .)
    CONTINUE        reduce using rule 45 (optype -> userType .)
    CONTINUE_AT     reduce using rule 45 (optype -> userType .)
    BREAK           reduce using rule 45 (optype -> userType .)
    BREAK_AT        reduce using rule 45 (optype -> userType .)
    INCREMENTO      reduce using rule 45 (optype -> userType .)
    DECREMENTO      reduce using rule 45 (optype -> userType .)
    MINUS           reduce using rule 45 (optype -> userType .)
    PLUS            reduce using rule 45 (optype -> userType .)
    NOT             reduce using rule 45 (optype -> userType .)
    SUSPEND         reduce using rule 45 (optype -> userType .)
    COLONCOLON      reduce using rule 45 (optype -> userType .)
    RCHAVE          reduce using rule 45 (optype -> userType .)
    MENOR           reduce using rule 45 (optype -> userType .)
    PONTO           reduce using rule 45 (optype -> userType .)
    AS              reduce using rule 45 (optype -> userType .)
    MAISIGUAL       reduce using rule 45 (optype -> userType .)
    MENOSIGUAL      reduce using rule 45 (optype -> userType .)
    MULTIGUAL       reduce using rule 45 (optype -> userType .)
    DIVIGUAL        reduce using rule 45 (optype -> userType .)
    MODIGUAL        reduce using rule 45 (optype -> userType .)
    MULT            reduce using rule 45 (optype -> userType .)
    DIVIDE          reduce using rule 45 (optype -> userType .)
    MOD             reduce using rule 45 (optype -> userType .)
    PONTOPONTO      reduce using rule 45 (optype -> userType .)
    ELVIS           reduce using rule 45 (optype -> userType .)
    IN              reduce using rule 45 (optype -> userType .)
    NOT_IN          reduce using rule 45 (optype -> userType .)
    IS              reduce using rule 45 (optype -> userType .)
    NOT_IS          reduce using rule 45 (optype -> userType .)
    MAIOR           reduce using rule 45 (optype -> userType .)
    MENORIGUAL      reduce using rule 45 (optype -> userType .)
    MAIORIGUAL      reduce using rule 45 (optype -> userType .)
    DIFERENTE       reduce using rule 45 (optype -> userType .)
    IDENTIDADE      reduce using rule 45 (optype -> userType .)
    IGUALDADE       reduce using rule 45 (optype -> userType .)
    SEMIDENTIDADE   reduce using rule 45 (optype -> userType .)
    AND             reduce using rule 45 (optype -> userType .)
    OR              reduce using rule 45 (optype -> userType .)
    COMMA           reduce using rule 45 (optype -> userType .)
    RPAREN          reduce using rule 45 (optype -> userType .)
    RCCT            reduce using rule 45 (optype -> userType .)
    PV              reduce using rule 45 (optype -> userType .)
    ELSE            reduce using rule 45 (optype -> userType .)
    SETA            reduce using rule 45 (optype -> userType .)
    ATRIBUICAO      reduce using rule 45 (optype -> userType .)


state 34

    (48) typeModifier -> SUSPEND .

    LPAREN          reduce using rule 48 (typeModifier -> SUSPEND .)
    SUSPEND         reduce using rule 48 (typeModifier -> SUSPEND .)
    ID              reduce using rule 48 (typeModifier -> SUSPEND .)
    CROSSINLINE     reduce using rule 48 (typeModifier -> SUSPEND .)
    IMPORT          reduce using rule 48 (typeModifier -> SUSPEND .)
    INIT            reduce using rule 48 (typeModifier -> SUSPEND .)
    NOINLINE        reduce using rule 48 (typeModifier -> SUSPEND .)
    OUT             reduce using rule 48 (typeModifier -> SUSPEND .)
    VARARG          reduce using rule 48 (typeModifier -> SUSPEND .)
    WHERE           reduce using rule 48 (typeModifier -> SUSPEND .)
    OPERATOR        reduce using rule 48 (typeModifier -> SUSPEND .)


state 35

    (68) parenthesizedType -> LPAREN . type RPAREN
    (67) functionTypeParameters -> LPAREN . optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (61) optionalParameterOrType -> . parameter
    (62) optionalParameterOrType -> . type
    (63) optionalParameterOrType -> .
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (39) parameter -> . simpleIdentifier DOISP type
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier

    COMMA           reduce using rule 63 (optionalParameterOrType -> .)
    RPAREN          reduce using rule 63 (optionalParameterOrType -> .)
    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    type                           shift and go to state 116
    optionalParameterOrType        shift and go to state 117
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    parameter                      shift and go to state 118
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    simpleIdentifier               shift and go to state 119
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38

state 36

    (59) functionType -> receiverType . PONTO functionTypeParameters SETA type

    PONTO           shift and go to state 120


state 37

    (60) functionType -> functionTypeParameters . SETA type

    SETA            shift and go to state 121


state 38

    (52) userType -> simpleUserType .

    LCHAVE          reduce using rule 52 (userType -> simpleUserType .)
    FUN             reduce using rule 52 (userType -> simpleUserType .)
    $end            reduce using rule 52 (userType -> simpleUserType .)
    LPAREN          reduce using rule 52 (userType -> simpleUserType .)
    FOR             reduce using rule 52 (userType -> simpleUserType .)
    WHILE           reduce using rule 52 (userType -> simpleUserType .)
    DO              reduce using rule 52 (userType -> simpleUserType .)
    VAR             reduce using rule 52 (userType -> simpleUserType .)
    VAL             reduce using rule 52 (userType -> simpleUserType .)
    ID              reduce using rule 52 (userType -> simpleUserType .)
    CROSSINLINE     reduce using rule 52 (userType -> simpleUserType .)
    IMPORT          reduce using rule 52 (userType -> simpleUserType .)
    INIT            reduce using rule 52 (userType -> simpleUserType .)
    NOINLINE        reduce using rule 52 (userType -> simpleUserType .)
    OUT             reduce using rule 52 (userType -> simpleUserType .)
    VARARG          reduce using rule 52 (userType -> simpleUserType .)
    WHERE           reduce using rule 52 (userType -> simpleUserType .)
    OPERATOR        reduce using rule 52 (userType -> simpleUserType .)
    LITERAL_STRING  reduce using rule 52 (userType -> simpleUserType .)
    NUMBER          reduce using rule 52 (userType -> simpleUserType .)
    LCCT            reduce using rule 52 (userType -> simpleUserType .)
    IF              reduce using rule 52 (userType -> simpleUserType .)
    RETURN          reduce using rule 52 (userType -> simpleUserType .)
    RETURN_AT       reduce using rule 52 (userType -> simpleUserType .)
    CONTINUE        reduce using rule 52 (userType -> simpleUserType .)
    CONTINUE_AT     reduce using rule 52 (userType -> simpleUserType .)
    BREAK           reduce using rule 52 (userType -> simpleUserType .)
    BREAK_AT        reduce using rule 52 (userType -> simpleUserType .)
    INCREMENTO      reduce using rule 52 (userType -> simpleUserType .)
    DECREMENTO      reduce using rule 52 (userType -> simpleUserType .)
    MINUS           reduce using rule 52 (userType -> simpleUserType .)
    PLUS            reduce using rule 52 (userType -> simpleUserType .)
    NOT             reduce using rule 52 (userType -> simpleUserType .)
    SUSPEND         reduce using rule 52 (userType -> simpleUserType .)
    COLONCOLON      reduce using rule 52 (userType -> simpleUserType .)
    RCHAVE          reduce using rule 52 (userType -> simpleUserType .)
    MENOR           reduce using rule 52 (userType -> simpleUserType .)
    PONTO           reduce using rule 52 (userType -> simpleUserType .)
    AS              reduce using rule 52 (userType -> simpleUserType .)
    MAISIGUAL       reduce using rule 52 (userType -> simpleUserType .)
    MENOSIGUAL      reduce using rule 52 (userType -> simpleUserType .)
    MULTIGUAL       reduce using rule 52 (userType -> simpleUserType .)
    DIVIGUAL        reduce using rule 52 (userType -> simpleUserType .)
    MODIGUAL        reduce using rule 52 (userType -> simpleUserType .)
    MULT            reduce using rule 52 (userType -> simpleUserType .)
    DIVIDE          reduce using rule 52 (userType -> simpleUserType .)
    MOD             reduce using rule 52 (userType -> simpleUserType .)
    PONTOPONTO      reduce using rule 52 (userType -> simpleUserType .)
    ELVIS           reduce using rule 52 (userType -> simpleUserType .)
    IN              reduce using rule 52 (userType -> simpleUserType .)
    NOT_IN          reduce using rule 52 (userType -> simpleUserType .)
    IS              reduce using rule 52 (userType -> simpleUserType .)
    NOT_IS          reduce using rule 52 (userType -> simpleUserType .)
    MAIOR           reduce using rule 52 (userType -> simpleUserType .)
    MENORIGUAL      reduce using rule 52 (userType -> simpleUserType .)
    MAIORIGUAL      reduce using rule 52 (userType -> simpleUserType .)
    DIFERENTE       reduce using rule 52 (userType -> simpleUserType .)
    IDENTIDADE      reduce using rule 52 (userType -> simpleUserType .)
    IGUALDADE       reduce using rule 52 (userType -> simpleUserType .)
    SEMIDENTIDADE   reduce using rule 52 (userType -> simpleUserType .)
    AND             reduce using rule 52 (userType -> simpleUserType .)
    OR              reduce using rule 52 (userType -> simpleUserType .)
    COMMA           reduce using rule 52 (userType -> simpleUserType .)
    RPAREN          reduce using rule 52 (userType -> simpleUserType .)
    RCCT            reduce using rule 52 (userType -> simpleUserType .)
    PV              reduce using rule 52 (userType -> simpleUserType .)
    ELSE            reduce using rule 52 (userType -> simpleUserType .)
    SETA            reduce using rule 52 (userType -> simpleUserType .)
    ATRIBUICAO      reduce using rule 52 (userType -> simpleUserType .)


state 39

    (53) simpleUserType -> simpleIdentifier . typeArguments
    (54) simpleUserType -> simpleIdentifier .
    (164) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (165) typeArguments -> . MENOR MAIOR

  ! shift/reduce conflict for MENOR resolved as shift
    LCHAVE          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    FUN             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    $end            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LPAREN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    FOR             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    WHILE           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DO              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    VAR             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    VAL             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ID              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IMPORT          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    INIT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOINLINE        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    OUT             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    VARARG          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    WHERE           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    OPERATOR        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NUMBER          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LCCT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IF              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RETURN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RETURN_AT       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CONTINUE        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    BREAK           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    BREAK_AT        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    INCREMENTO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DECREMENTO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MINUS           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PLUS            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOT             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    SUSPEND         reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    COLONCOLON      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RCHAVE          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PONTO           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    AS              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MODIGUAL        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MULT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DIVIDE          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MOD             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ELVIS           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IN              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOT_IN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IS              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOT_IS          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MAIOR           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DIFERENTE       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IGUALDADE       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    AND             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    OR              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RPAREN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RCCT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PV              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ELSE            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    SETA            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 123

  ! MENOR           [ reduce using rule 54 (simpleUserType -> simpleIdentifier .) ]

    typeArguments                  shift and go to state 122

state 40

    (27) functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .

    DOISP           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LCHAVE          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    FUN             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    $end            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LPAREN          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    FOR             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    WHILE           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DO              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    VAR             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    VAL             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ID              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CROSSINLINE     reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IMPORT          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    INIT            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOINLINE        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OUT             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    VARARG          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    WHERE           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OPERATOR        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NUMBER          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    LCCT            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IF              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RETURN          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RETURN_AT       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CONTINUE        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    BREAK           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    BREAK_AT        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    INCREMENTO      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DECREMENTO      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MINUS           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PLUS            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOT             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    SUSPEND         reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    COLONCOLON      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RCHAVE          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MENOR           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PONTO           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    AS              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MAISIGUAL       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MULTIGUAL       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DIVIGUAL        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MODIGUAL        reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MULT            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DIVIDE          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MOD             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PONTOPONTO      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ELVIS           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IN              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOT_IN          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IS              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    NOT_IS          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MAIOR           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MENORIGUAL      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    DIFERENTE       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IDENTIDADE      reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    IGUALDADE       reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    AND             reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    OR              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    COMMA           reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RPAREN          reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    RCCT            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    PV              reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)
    ELSE            reduce using rule 27 (functionValueParameters -> LPAREN functionValueParametersRecursive RPAREN .)


state 41

    (30) functionValueParametersRecursive -> functionValueParameter COMMA . functionValueParametersRecursive
    (29) functionValueParametersRecursive -> . functionValueParameter
    (30) functionValueParametersRecursive -> . functionValueParameter COMMA functionValueParametersRecursive
    (31) functionValueParameter -> . parameter ATRIBUICAO expression
    (32) functionValueParameter -> . parameter
    (39) parameter -> . simpleIdentifier DOISP type
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    functionValueParameter         shift and go to state 21
    functionValueParametersRecursive shift and go to state 124
    parameter                      shift and go to state 22
    simpleIdentifier               shift and go to state 23

state 42

    (31) functionValueParameter -> parameter ATRIBUICAO . expression
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 125
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 43

    (39) parameter -> simpleIdentifier DOISP . type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 39
    type                           shift and go to state 131
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38

state 44

    (199) lambdaLiteral -> LCHAVE . optionsLambdaLiteral RCHAVE
    (200) optionsLambdaLiteral -> . statements
    (201) optionsLambdaLiteral -> . lambdaParameters SETA statements
    (202) optionsLambdaLiteral -> . SETA statements
    (70) statements -> . statement
    (71) statements -> . statement statements
    (203) lambdaParameters -> . lambdaParameter
    (204) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (205) lambdaParameter -> . variableDeclaration
    (206) lambdaParameter -> . multiVariableDeclaration optionalType
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (35) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> . LPAREN RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    SETA            shift and go to state 135
    FUN             shift and go to state 53
    LPAREN          shift and go to state 140
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

    optionsLambdaLiteral           shift and go to state 132
    statements                     shift and go to state 133
    lambdaParameters               shift and go to state 134
    statement                      shift and go to state 46
    lambdaParameter                shift and go to state 136
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    expression                     shift and go to state 50
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    variableDeclaration            shift and go to state 137
    multiVariableDeclaration       shift and go to state 138
    simpleIdentifier               shift and go to state 139
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 45

    (80) block -> LCHAVE statements . RCHAVE

    RCHAVE          shift and go to state 141


state 46

    (70) statements -> statement .
    (71) statements -> statement . statements
    (94) chamadaDeFuncao -> statement . LPAREN RPAREN
    (95) chamadaDeFuncao -> statement . LPAREN parametersFunction RPAREN
    (70) statements -> . statement
    (71) statements -> . statement statements
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    RCHAVE          reduce using rule 70 (statements -> statement .)
    LPAREN          shift and go to state 143
    FUN             shift and go to state 53
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

    statement                      shift and go to state 46
    statements                     shift and go to state 142
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    expression                     shift and go to state 50
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    simpleIdentifier               shift and go to state 54
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 47

    (72) statement -> functionDeclaration .

    LPAREN          reduce using rule 72 (statement -> functionDeclaration .)
    FUN             reduce using rule 72 (statement -> functionDeclaration .)
    FOR             reduce using rule 72 (statement -> functionDeclaration .)
    WHILE           reduce using rule 72 (statement -> functionDeclaration .)
    DO              reduce using rule 72 (statement -> functionDeclaration .)
    VAR             reduce using rule 72 (statement -> functionDeclaration .)
    VAL             reduce using rule 72 (statement -> functionDeclaration .)
    ID              reduce using rule 72 (statement -> functionDeclaration .)
    CROSSINLINE     reduce using rule 72 (statement -> functionDeclaration .)
    IMPORT          reduce using rule 72 (statement -> functionDeclaration .)
    INIT            reduce using rule 72 (statement -> functionDeclaration .)
    NOINLINE        reduce using rule 72 (statement -> functionDeclaration .)
    OUT             reduce using rule 72 (statement -> functionDeclaration .)
    VARARG          reduce using rule 72 (statement -> functionDeclaration .)
    WHERE           reduce using rule 72 (statement -> functionDeclaration .)
    OPERATOR        reduce using rule 72 (statement -> functionDeclaration .)
    LITERAL_STRING  reduce using rule 72 (statement -> functionDeclaration .)
    NUMBER          reduce using rule 72 (statement -> functionDeclaration .)
    LCCT            reduce using rule 72 (statement -> functionDeclaration .)
    IF              reduce using rule 72 (statement -> functionDeclaration .)
    RETURN          reduce using rule 72 (statement -> functionDeclaration .)
    RETURN_AT       reduce using rule 72 (statement -> functionDeclaration .)
    CONTINUE        reduce using rule 72 (statement -> functionDeclaration .)
    CONTINUE_AT     reduce using rule 72 (statement -> functionDeclaration .)
    BREAK           reduce using rule 72 (statement -> functionDeclaration .)
    BREAK_AT        reduce using rule 72 (statement -> functionDeclaration .)
    LCHAVE          reduce using rule 72 (statement -> functionDeclaration .)
    INCREMENTO      reduce using rule 72 (statement -> functionDeclaration .)
    DECREMENTO      reduce using rule 72 (statement -> functionDeclaration .)
    MINUS           reduce using rule 72 (statement -> functionDeclaration .)
    PLUS            reduce using rule 72 (statement -> functionDeclaration .)
    NOT             reduce using rule 72 (statement -> functionDeclaration .)
    SUSPEND         reduce using rule 72 (statement -> functionDeclaration .)
    COLONCOLON      reduce using rule 72 (statement -> functionDeclaration .)
    RCHAVE          reduce using rule 72 (statement -> functionDeclaration .)
    MENOR           reduce using rule 72 (statement -> functionDeclaration .)
    PONTO           reduce using rule 72 (statement -> functionDeclaration .)
    AS              reduce using rule 72 (statement -> functionDeclaration .)
    MAISIGUAL       reduce using rule 72 (statement -> functionDeclaration .)
    MENOSIGUAL      reduce using rule 72 (statement -> functionDeclaration .)
    MULTIGUAL       reduce using rule 72 (statement -> functionDeclaration .)
    DIVIGUAL        reduce using rule 72 (statement -> functionDeclaration .)
    MODIGUAL        reduce using rule 72 (statement -> functionDeclaration .)
    MULT            reduce using rule 72 (statement -> functionDeclaration .)
    DIVIDE          reduce using rule 72 (statement -> functionDeclaration .)
    MOD             reduce using rule 72 (statement -> functionDeclaration .)
    PONTOPONTO      reduce using rule 72 (statement -> functionDeclaration .)
    ELVIS           reduce using rule 72 (statement -> functionDeclaration .)
    IN              reduce using rule 72 (statement -> functionDeclaration .)
    NOT_IN          reduce using rule 72 (statement -> functionDeclaration .)
    IS              reduce using rule 72 (statement -> functionDeclaration .)
    NOT_IS          reduce using rule 72 (statement -> functionDeclaration .)
    MAIOR           reduce using rule 72 (statement -> functionDeclaration .)
    MENORIGUAL      reduce using rule 72 (statement -> functionDeclaration .)
    MAIORIGUAL      reduce using rule 72 (statement -> functionDeclaration .)
    DIFERENTE       reduce using rule 72 (statement -> functionDeclaration .)
    IDENTIDADE      reduce using rule 72 (statement -> functionDeclaration .)
    IGUALDADE       reduce using rule 72 (statement -> functionDeclaration .)
    SEMIDENTIDADE   reduce using rule 72 (statement -> functionDeclaration .)
    AND             reduce using rule 72 (statement -> functionDeclaration .)
    OR              reduce using rule 72 (statement -> functionDeclaration .)
    COMMA           reduce using rule 72 (statement -> functionDeclaration .)
    RPAREN          reduce using rule 72 (statement -> functionDeclaration .)
    RCCT            reduce using rule 72 (statement -> functionDeclaration .)
    PV              reduce using rule 72 (statement -> functionDeclaration .)
    ELSE            reduce using rule 72 (statement -> functionDeclaration .)


state 48

    (73) statement -> assignment .

    LPAREN          reduce using rule 73 (statement -> assignment .)
    FUN             reduce using rule 73 (statement -> assignment .)
    FOR             reduce using rule 73 (statement -> assignment .)
    WHILE           reduce using rule 73 (statement -> assignment .)
    DO              reduce using rule 73 (statement -> assignment .)
    VAR             reduce using rule 73 (statement -> assignment .)
    VAL             reduce using rule 73 (statement -> assignment .)
    ID              reduce using rule 73 (statement -> assignment .)
    CROSSINLINE     reduce using rule 73 (statement -> assignment .)
    IMPORT          reduce using rule 73 (statement -> assignment .)
    INIT            reduce using rule 73 (statement -> assignment .)
    NOINLINE        reduce using rule 73 (statement -> assignment .)
    OUT             reduce using rule 73 (statement -> assignment .)
    VARARG          reduce using rule 73 (statement -> assignment .)
    WHERE           reduce using rule 73 (statement -> assignment .)
    OPERATOR        reduce using rule 73 (statement -> assignment .)
    LITERAL_STRING  reduce using rule 73 (statement -> assignment .)
    NUMBER          reduce using rule 73 (statement -> assignment .)
    LCCT            reduce using rule 73 (statement -> assignment .)
    IF              reduce using rule 73 (statement -> assignment .)
    RETURN          reduce using rule 73 (statement -> assignment .)
    RETURN_AT       reduce using rule 73 (statement -> assignment .)
    CONTINUE        reduce using rule 73 (statement -> assignment .)
    CONTINUE_AT     reduce using rule 73 (statement -> assignment .)
    BREAK           reduce using rule 73 (statement -> assignment .)
    BREAK_AT        reduce using rule 73 (statement -> assignment .)
    LCHAVE          reduce using rule 73 (statement -> assignment .)
    INCREMENTO      reduce using rule 73 (statement -> assignment .)
    DECREMENTO      reduce using rule 73 (statement -> assignment .)
    MINUS           reduce using rule 73 (statement -> assignment .)
    PLUS            reduce using rule 73 (statement -> assignment .)
    NOT             reduce using rule 73 (statement -> assignment .)
    SUSPEND         reduce using rule 73 (statement -> assignment .)
    COLONCOLON      reduce using rule 73 (statement -> assignment .)
    RCHAVE          reduce using rule 73 (statement -> assignment .)
    MENOR           reduce using rule 73 (statement -> assignment .)
    PONTO           reduce using rule 73 (statement -> assignment .)
    AS              reduce using rule 73 (statement -> assignment .)
    MAISIGUAL       reduce using rule 73 (statement -> assignment .)
    MENOSIGUAL      reduce using rule 73 (statement -> assignment .)
    MULTIGUAL       reduce using rule 73 (statement -> assignment .)
    DIVIGUAL        reduce using rule 73 (statement -> assignment .)
    MODIGUAL        reduce using rule 73 (statement -> assignment .)
    MULT            reduce using rule 73 (statement -> assignment .)
    DIVIDE          reduce using rule 73 (statement -> assignment .)
    MOD             reduce using rule 73 (statement -> assignment .)
    PONTOPONTO      reduce using rule 73 (statement -> assignment .)
    ELVIS           reduce using rule 73 (statement -> assignment .)
    IN              reduce using rule 73 (statement -> assignment .)
    NOT_IN          reduce using rule 73 (statement -> assignment .)
    IS              reduce using rule 73 (statement -> assignment .)
    NOT_IS          reduce using rule 73 (statement -> assignment .)
    MAIOR           reduce using rule 73 (statement -> assignment .)
    MENORIGUAL      reduce using rule 73 (statement -> assignment .)
    MAIORIGUAL      reduce using rule 73 (statement -> assignment .)
    DIFERENTE       reduce using rule 73 (statement -> assignment .)
    IDENTIDADE      reduce using rule 73 (statement -> assignment .)
    IGUALDADE       reduce using rule 73 (statement -> assignment .)
    SEMIDENTIDADE   reduce using rule 73 (statement -> assignment .)
    AND             reduce using rule 73 (statement -> assignment .)
    OR              reduce using rule 73 (statement -> assignment .)
    COMMA           reduce using rule 73 (statement -> assignment .)
    RPAREN          reduce using rule 73 (statement -> assignment .)
    RCCT            reduce using rule 73 (statement -> assignment .)
    PV              reduce using rule 73 (statement -> assignment .)
    ELSE            reduce using rule 73 (statement -> assignment .)


state 49

    (74) statement -> loopStatement .

    LPAREN          reduce using rule 74 (statement -> loopStatement .)
    FUN             reduce using rule 74 (statement -> loopStatement .)
    FOR             reduce using rule 74 (statement -> loopStatement .)
    WHILE           reduce using rule 74 (statement -> loopStatement .)
    DO              reduce using rule 74 (statement -> loopStatement .)
    VAR             reduce using rule 74 (statement -> loopStatement .)
    VAL             reduce using rule 74 (statement -> loopStatement .)
    ID              reduce using rule 74 (statement -> loopStatement .)
    CROSSINLINE     reduce using rule 74 (statement -> loopStatement .)
    IMPORT          reduce using rule 74 (statement -> loopStatement .)
    INIT            reduce using rule 74 (statement -> loopStatement .)
    NOINLINE        reduce using rule 74 (statement -> loopStatement .)
    OUT             reduce using rule 74 (statement -> loopStatement .)
    VARARG          reduce using rule 74 (statement -> loopStatement .)
    WHERE           reduce using rule 74 (statement -> loopStatement .)
    OPERATOR        reduce using rule 74 (statement -> loopStatement .)
    LITERAL_STRING  reduce using rule 74 (statement -> loopStatement .)
    NUMBER          reduce using rule 74 (statement -> loopStatement .)
    LCCT            reduce using rule 74 (statement -> loopStatement .)
    IF              reduce using rule 74 (statement -> loopStatement .)
    RETURN          reduce using rule 74 (statement -> loopStatement .)
    RETURN_AT       reduce using rule 74 (statement -> loopStatement .)
    CONTINUE        reduce using rule 74 (statement -> loopStatement .)
    CONTINUE_AT     reduce using rule 74 (statement -> loopStatement .)
    BREAK           reduce using rule 74 (statement -> loopStatement .)
    BREAK_AT        reduce using rule 74 (statement -> loopStatement .)
    LCHAVE          reduce using rule 74 (statement -> loopStatement .)
    INCREMENTO      reduce using rule 74 (statement -> loopStatement .)
    DECREMENTO      reduce using rule 74 (statement -> loopStatement .)
    MINUS           reduce using rule 74 (statement -> loopStatement .)
    PLUS            reduce using rule 74 (statement -> loopStatement .)
    NOT             reduce using rule 74 (statement -> loopStatement .)
    SUSPEND         reduce using rule 74 (statement -> loopStatement .)
    COLONCOLON      reduce using rule 74 (statement -> loopStatement .)
    RCHAVE          reduce using rule 74 (statement -> loopStatement .)
    MENOR           reduce using rule 74 (statement -> loopStatement .)
    PONTO           reduce using rule 74 (statement -> loopStatement .)
    AS              reduce using rule 74 (statement -> loopStatement .)
    MAISIGUAL       reduce using rule 74 (statement -> loopStatement .)
    MENOSIGUAL      reduce using rule 74 (statement -> loopStatement .)
    MULTIGUAL       reduce using rule 74 (statement -> loopStatement .)
    DIVIGUAL        reduce using rule 74 (statement -> loopStatement .)
    MODIGUAL        reduce using rule 74 (statement -> loopStatement .)
    MULT            reduce using rule 74 (statement -> loopStatement .)
    DIVIDE          reduce using rule 74 (statement -> loopStatement .)
    MOD             reduce using rule 74 (statement -> loopStatement .)
    PONTOPONTO      reduce using rule 74 (statement -> loopStatement .)
    ELVIS           reduce using rule 74 (statement -> loopStatement .)
    IN              reduce using rule 74 (statement -> loopStatement .)
    NOT_IN          reduce using rule 74 (statement -> loopStatement .)
    IS              reduce using rule 74 (statement -> loopStatement .)
    NOT_IS          reduce using rule 74 (statement -> loopStatement .)
    MAIOR           reduce using rule 74 (statement -> loopStatement .)
    MENORIGUAL      reduce using rule 74 (statement -> loopStatement .)
    MAIORIGUAL      reduce using rule 74 (statement -> loopStatement .)
    DIFERENTE       reduce using rule 74 (statement -> loopStatement .)
    IDENTIDADE      reduce using rule 74 (statement -> loopStatement .)
    IGUALDADE       reduce using rule 74 (statement -> loopStatement .)
    SEMIDENTIDADE   reduce using rule 74 (statement -> loopStatement .)
    AND             reduce using rule 74 (statement -> loopStatement .)
    OR              reduce using rule 74 (statement -> loopStatement .)
    COMMA           reduce using rule 74 (statement -> loopStatement .)
    RPAREN          reduce using rule 74 (statement -> loopStatement .)
    RCCT            reduce using rule 74 (statement -> loopStatement .)
    PV              reduce using rule 74 (statement -> loopStatement .)
    ELSE            reduce using rule 74 (statement -> loopStatement .)


state 50

    (75) statement -> expression .

    LPAREN          reduce using rule 75 (statement -> expression .)
    FUN             reduce using rule 75 (statement -> expression .)
    FOR             reduce using rule 75 (statement -> expression .)
    WHILE           reduce using rule 75 (statement -> expression .)
    DO              reduce using rule 75 (statement -> expression .)
    VAR             reduce using rule 75 (statement -> expression .)
    VAL             reduce using rule 75 (statement -> expression .)
    ID              reduce using rule 75 (statement -> expression .)
    CROSSINLINE     reduce using rule 75 (statement -> expression .)
    IMPORT          reduce using rule 75 (statement -> expression .)
    INIT            reduce using rule 75 (statement -> expression .)
    NOINLINE        reduce using rule 75 (statement -> expression .)
    OUT             reduce using rule 75 (statement -> expression .)
    VARARG          reduce using rule 75 (statement -> expression .)
    WHERE           reduce using rule 75 (statement -> expression .)
    OPERATOR        reduce using rule 75 (statement -> expression .)
    LITERAL_STRING  reduce using rule 75 (statement -> expression .)
    NUMBER          reduce using rule 75 (statement -> expression .)
    LCCT            reduce using rule 75 (statement -> expression .)
    IF              reduce using rule 75 (statement -> expression .)
    RETURN          reduce using rule 75 (statement -> expression .)
    RETURN_AT       reduce using rule 75 (statement -> expression .)
    CONTINUE        reduce using rule 75 (statement -> expression .)
    CONTINUE_AT     reduce using rule 75 (statement -> expression .)
    BREAK           reduce using rule 75 (statement -> expression .)
    BREAK_AT        reduce using rule 75 (statement -> expression .)
    LCHAVE          reduce using rule 75 (statement -> expression .)
    INCREMENTO      reduce using rule 75 (statement -> expression .)
    DECREMENTO      reduce using rule 75 (statement -> expression .)
    MINUS           reduce using rule 75 (statement -> expression .)
    PLUS            reduce using rule 75 (statement -> expression .)
    NOT             reduce using rule 75 (statement -> expression .)
    SUSPEND         reduce using rule 75 (statement -> expression .)
    COLONCOLON      reduce using rule 75 (statement -> expression .)
    RCHAVE          reduce using rule 75 (statement -> expression .)
    MENOR           reduce using rule 75 (statement -> expression .)
    PONTO           reduce using rule 75 (statement -> expression .)
    AS              reduce using rule 75 (statement -> expression .)
    MAISIGUAL       reduce using rule 75 (statement -> expression .)
    MENOSIGUAL      reduce using rule 75 (statement -> expression .)
    MULTIGUAL       reduce using rule 75 (statement -> expression .)
    DIVIGUAL        reduce using rule 75 (statement -> expression .)
    MODIGUAL        reduce using rule 75 (statement -> expression .)
    MULT            reduce using rule 75 (statement -> expression .)
    DIVIDE          reduce using rule 75 (statement -> expression .)
    MOD             reduce using rule 75 (statement -> expression .)
    PONTOPONTO      reduce using rule 75 (statement -> expression .)
    ELVIS           reduce using rule 75 (statement -> expression .)
    IN              reduce using rule 75 (statement -> expression .)
    NOT_IN          reduce using rule 75 (statement -> expression .)
    IS              reduce using rule 75 (statement -> expression .)
    NOT_IS          reduce using rule 75 (statement -> expression .)
    MAIOR           reduce using rule 75 (statement -> expression .)
    MENORIGUAL      reduce using rule 75 (statement -> expression .)
    MAIORIGUAL      reduce using rule 75 (statement -> expression .)
    DIFERENTE       reduce using rule 75 (statement -> expression .)
    IDENTIDADE      reduce using rule 75 (statement -> expression .)
    IGUALDADE       reduce using rule 75 (statement -> expression .)
    SEMIDENTIDADE   reduce using rule 75 (statement -> expression .)
    AND             reduce using rule 75 (statement -> expression .)
    OR              reduce using rule 75 (statement -> expression .)
    COMMA           reduce using rule 75 (statement -> expression .)
    RPAREN          reduce using rule 75 (statement -> expression .)
    RCCT            reduce using rule 75 (statement -> expression .)
    PV              reduce using rule 75 (statement -> expression .)
    ELSE            reduce using rule 75 (statement -> expression .)


state 51

    (76) statement -> propertyDeclaration .

    LPAREN          reduce using rule 76 (statement -> propertyDeclaration .)
    FUN             reduce using rule 76 (statement -> propertyDeclaration .)
    FOR             reduce using rule 76 (statement -> propertyDeclaration .)
    WHILE           reduce using rule 76 (statement -> propertyDeclaration .)
    DO              reduce using rule 76 (statement -> propertyDeclaration .)
    VAR             reduce using rule 76 (statement -> propertyDeclaration .)
    VAL             reduce using rule 76 (statement -> propertyDeclaration .)
    ID              reduce using rule 76 (statement -> propertyDeclaration .)
    CROSSINLINE     reduce using rule 76 (statement -> propertyDeclaration .)
    IMPORT          reduce using rule 76 (statement -> propertyDeclaration .)
    INIT            reduce using rule 76 (statement -> propertyDeclaration .)
    NOINLINE        reduce using rule 76 (statement -> propertyDeclaration .)
    OUT             reduce using rule 76 (statement -> propertyDeclaration .)
    VARARG          reduce using rule 76 (statement -> propertyDeclaration .)
    WHERE           reduce using rule 76 (statement -> propertyDeclaration .)
    OPERATOR        reduce using rule 76 (statement -> propertyDeclaration .)
    LITERAL_STRING  reduce using rule 76 (statement -> propertyDeclaration .)
    NUMBER          reduce using rule 76 (statement -> propertyDeclaration .)
    LCCT            reduce using rule 76 (statement -> propertyDeclaration .)
    IF              reduce using rule 76 (statement -> propertyDeclaration .)
    RETURN          reduce using rule 76 (statement -> propertyDeclaration .)
    RETURN_AT       reduce using rule 76 (statement -> propertyDeclaration .)
    CONTINUE        reduce using rule 76 (statement -> propertyDeclaration .)
    CONTINUE_AT     reduce using rule 76 (statement -> propertyDeclaration .)
    BREAK           reduce using rule 76 (statement -> propertyDeclaration .)
    BREAK_AT        reduce using rule 76 (statement -> propertyDeclaration .)
    LCHAVE          reduce using rule 76 (statement -> propertyDeclaration .)
    INCREMENTO      reduce using rule 76 (statement -> propertyDeclaration .)
    DECREMENTO      reduce using rule 76 (statement -> propertyDeclaration .)
    MINUS           reduce using rule 76 (statement -> propertyDeclaration .)
    PLUS            reduce using rule 76 (statement -> propertyDeclaration .)
    NOT             reduce using rule 76 (statement -> propertyDeclaration .)
    SUSPEND         reduce using rule 76 (statement -> propertyDeclaration .)
    COLONCOLON      reduce using rule 76 (statement -> propertyDeclaration .)
    RCHAVE          reduce using rule 76 (statement -> propertyDeclaration .)
    MENOR           reduce using rule 76 (statement -> propertyDeclaration .)
    PONTO           reduce using rule 76 (statement -> propertyDeclaration .)
    AS              reduce using rule 76 (statement -> propertyDeclaration .)
    MAISIGUAL       reduce using rule 76 (statement -> propertyDeclaration .)
    MENOSIGUAL      reduce using rule 76 (statement -> propertyDeclaration .)
    MULTIGUAL       reduce using rule 76 (statement -> propertyDeclaration .)
    DIVIGUAL        reduce using rule 76 (statement -> propertyDeclaration .)
    MODIGUAL        reduce using rule 76 (statement -> propertyDeclaration .)
    MULT            reduce using rule 76 (statement -> propertyDeclaration .)
    DIVIDE          reduce using rule 76 (statement -> propertyDeclaration .)
    MOD             reduce using rule 76 (statement -> propertyDeclaration .)
    PONTOPONTO      reduce using rule 76 (statement -> propertyDeclaration .)
    ELVIS           reduce using rule 76 (statement -> propertyDeclaration .)
    IN              reduce using rule 76 (statement -> propertyDeclaration .)
    NOT_IN          reduce using rule 76 (statement -> propertyDeclaration .)
    IS              reduce using rule 76 (statement -> propertyDeclaration .)
    NOT_IS          reduce using rule 76 (statement -> propertyDeclaration .)
    MAIOR           reduce using rule 76 (statement -> propertyDeclaration .)
    MENORIGUAL      reduce using rule 76 (statement -> propertyDeclaration .)
    MAIORIGUAL      reduce using rule 76 (statement -> propertyDeclaration .)
    DIFERENTE       reduce using rule 76 (statement -> propertyDeclaration .)
    IDENTIDADE      reduce using rule 76 (statement -> propertyDeclaration .)
    IGUALDADE       reduce using rule 76 (statement -> propertyDeclaration .)
    SEMIDENTIDADE   reduce using rule 76 (statement -> propertyDeclaration .)
    AND             reduce using rule 76 (statement -> propertyDeclaration .)
    OR              reduce using rule 76 (statement -> propertyDeclaration .)
    COMMA           reduce using rule 76 (statement -> propertyDeclaration .)
    RPAREN          reduce using rule 76 (statement -> propertyDeclaration .)
    RCCT            reduce using rule 76 (statement -> propertyDeclaration .)
    PV              reduce using rule 76 (statement -> propertyDeclaration .)
    ELSE            reduce using rule 76 (statement -> propertyDeclaration .)


state 52

    (77) statement -> chamadaDeFuncao .

    LPAREN          reduce using rule 77 (statement -> chamadaDeFuncao .)
    FUN             reduce using rule 77 (statement -> chamadaDeFuncao .)
    FOR             reduce using rule 77 (statement -> chamadaDeFuncao .)
    WHILE           reduce using rule 77 (statement -> chamadaDeFuncao .)
    DO              reduce using rule 77 (statement -> chamadaDeFuncao .)
    VAR             reduce using rule 77 (statement -> chamadaDeFuncao .)
    VAL             reduce using rule 77 (statement -> chamadaDeFuncao .)
    ID              reduce using rule 77 (statement -> chamadaDeFuncao .)
    CROSSINLINE     reduce using rule 77 (statement -> chamadaDeFuncao .)
    IMPORT          reduce using rule 77 (statement -> chamadaDeFuncao .)
    INIT            reduce using rule 77 (statement -> chamadaDeFuncao .)
    NOINLINE        reduce using rule 77 (statement -> chamadaDeFuncao .)
    OUT             reduce using rule 77 (statement -> chamadaDeFuncao .)
    VARARG          reduce using rule 77 (statement -> chamadaDeFuncao .)
    WHERE           reduce using rule 77 (statement -> chamadaDeFuncao .)
    OPERATOR        reduce using rule 77 (statement -> chamadaDeFuncao .)
    LITERAL_STRING  reduce using rule 77 (statement -> chamadaDeFuncao .)
    NUMBER          reduce using rule 77 (statement -> chamadaDeFuncao .)
    LCCT            reduce using rule 77 (statement -> chamadaDeFuncao .)
    IF              reduce using rule 77 (statement -> chamadaDeFuncao .)
    RETURN          reduce using rule 77 (statement -> chamadaDeFuncao .)
    RETURN_AT       reduce using rule 77 (statement -> chamadaDeFuncao .)
    CONTINUE        reduce using rule 77 (statement -> chamadaDeFuncao .)
    CONTINUE_AT     reduce using rule 77 (statement -> chamadaDeFuncao .)
    BREAK           reduce using rule 77 (statement -> chamadaDeFuncao .)
    BREAK_AT        reduce using rule 77 (statement -> chamadaDeFuncao .)
    LCHAVE          reduce using rule 77 (statement -> chamadaDeFuncao .)
    INCREMENTO      reduce using rule 77 (statement -> chamadaDeFuncao .)
    DECREMENTO      reduce using rule 77 (statement -> chamadaDeFuncao .)
    MINUS           reduce using rule 77 (statement -> chamadaDeFuncao .)
    PLUS            reduce using rule 77 (statement -> chamadaDeFuncao .)
    NOT             reduce using rule 77 (statement -> chamadaDeFuncao .)
    SUSPEND         reduce using rule 77 (statement -> chamadaDeFuncao .)
    COLONCOLON      reduce using rule 77 (statement -> chamadaDeFuncao .)
    RCHAVE          reduce using rule 77 (statement -> chamadaDeFuncao .)
    MENOR           reduce using rule 77 (statement -> chamadaDeFuncao .)
    PONTO           reduce using rule 77 (statement -> chamadaDeFuncao .)
    AS              reduce using rule 77 (statement -> chamadaDeFuncao .)
    MAISIGUAL       reduce using rule 77 (statement -> chamadaDeFuncao .)
    MENOSIGUAL      reduce using rule 77 (statement -> chamadaDeFuncao .)
    MULTIGUAL       reduce using rule 77 (statement -> chamadaDeFuncao .)
    DIVIGUAL        reduce using rule 77 (statement -> chamadaDeFuncao .)
    MODIGUAL        reduce using rule 77 (statement -> chamadaDeFuncao .)
    MULT            reduce using rule 77 (statement -> chamadaDeFuncao .)
    DIVIDE          reduce using rule 77 (statement -> chamadaDeFuncao .)
    MOD             reduce using rule 77 (statement -> chamadaDeFuncao .)
    PONTOPONTO      reduce using rule 77 (statement -> chamadaDeFuncao .)
    ELVIS           reduce using rule 77 (statement -> chamadaDeFuncao .)
    IN              reduce using rule 77 (statement -> chamadaDeFuncao .)
    NOT_IN          reduce using rule 77 (statement -> chamadaDeFuncao .)
    IS              reduce using rule 77 (statement -> chamadaDeFuncao .)
    NOT_IS          reduce using rule 77 (statement -> chamadaDeFuncao .)
    MAIOR           reduce using rule 77 (statement -> chamadaDeFuncao .)
    MENORIGUAL      reduce using rule 77 (statement -> chamadaDeFuncao .)
    MAIORIGUAL      reduce using rule 77 (statement -> chamadaDeFuncao .)
    DIFERENTE       reduce using rule 77 (statement -> chamadaDeFuncao .)
    IDENTIDADE      reduce using rule 77 (statement -> chamadaDeFuncao .)
    IGUALDADE       reduce using rule 77 (statement -> chamadaDeFuncao .)
    SEMIDENTIDADE   reduce using rule 77 (statement -> chamadaDeFuncao .)
    AND             reduce using rule 77 (statement -> chamadaDeFuncao .)
    OR              reduce using rule 77 (statement -> chamadaDeFuncao .)
    COMMA           reduce using rule 77 (statement -> chamadaDeFuncao .)
    RPAREN          reduce using rule 77 (statement -> chamadaDeFuncao .)
    RCCT            reduce using rule 77 (statement -> chamadaDeFuncao .)
    PV              reduce using rule 77 (statement -> chamadaDeFuncao .)
    ELSE            reduce using rule 77 (statement -> chamadaDeFuncao .)


state 53

    (7) functionDeclaration -> FUN . simpleIdentifier functionValueParameters optionalType optionalBlock
    (213) anonymousFunction -> FUN . optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (207) optionalTypePonto -> . type PONTO
    (208) optionalTypePonto -> .
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier

  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35

  ! LPAREN          [ reduce using rule 208 (optionalTypePonto -> .) ]

    simpleIdentifier               shift and go to state 144
    optionalTypePonto              shift and go to state 145
    type                           shift and go to state 146
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38

state 54

    (142) directlyAssignableExpression -> simpleIdentifier .
    (176) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 142 (directlyAssignableExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 176 (primaryExpression -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 142 (directlyAssignableExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 142 (directlyAssignableExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    FUN             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VAR             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VAL             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NUMBER          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IF              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RETURN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RETURN_AT       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CONTINUE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    BREAK           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    BREAK_AT        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SUSPEND         reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 176 (primaryExpression -> simpleIdentifier .)

  ! RPAREN          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]


state 55

    (96) assignment -> directlyAssignableExpression . ATRIBUICAO expression

    ATRIBUICAO      shift and go to state 147


state 56

    (97) assignment -> asExpression . assignmentAndOperator expression
    (122) multiplicativeExpression -> asExpression .
    (123) multiplicativeExpression -> asExpression . multiplicativeOperator multiplicativeExpression
    (234) assignmentAndOperator -> . MAISIGUAL
    (235) assignmentAndOperator -> . MENOSIGUAL
    (236) assignmentAndOperator -> . MULTIGUAL
    (237) assignmentAndOperator -> . DIVIGUAL
    (238) assignmentAndOperator -> . MODIGUAL
    (253) multiplicativeOperator -> . MULT
    (254) multiplicativeOperator -> . DIVIDE
    (255) multiplicativeOperator -> . MOD

  ! shift/reduce conflict for MAISIGUAL resolved as shift
  ! shift/reduce conflict for MENOSIGUAL resolved as shift
  ! shift/reduce conflict for MULTIGUAL resolved as shift
  ! shift/reduce conflict for DIVIGUAL resolved as shift
  ! shift/reduce conflict for MODIGUAL resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    PLUS            reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MINUS           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    PONTOPONTO      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    ID              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    CROSSINLINE     reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IMPORT          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    INIT            reduce using rule 122 (multiplicativeExpression -> asExpression .)
    NOINLINE        reduce using rule 122 (multiplicativeExpression -> asExpression .)
    OUT             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    VARARG          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    WHERE           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    OPERATOR        reduce using rule 122 (multiplicativeExpression -> asExpression .)
    ELVIS           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IN              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    NOT_IN          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IS              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    NOT_IS          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MENOR           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MAIOR           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MENORIGUAL      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MAIORIGUAL      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    DIFERENTE       reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IDENTIDADE      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IGUALDADE       reduce using rule 122 (multiplicativeExpression -> asExpression .)
    SEMIDENTIDADE   reduce using rule 122 (multiplicativeExpression -> asExpression .)
    AND             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    OR              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    LPAREN          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    FUN             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    FOR             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    WHILE           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    DO              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    VAR             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    VAL             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    LITERAL_STRING  reduce using rule 122 (multiplicativeExpression -> asExpression .)
    NUMBER          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    LCCT            reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IF              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    RETURN          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    RETURN_AT       reduce using rule 122 (multiplicativeExpression -> asExpression .)
    CONTINUE        reduce using rule 122 (multiplicativeExpression -> asExpression .)
    CONTINUE_AT     reduce using rule 122 (multiplicativeExpression -> asExpression .)
    BREAK           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    BREAK_AT        reduce using rule 122 (multiplicativeExpression -> asExpression .)
    LCHAVE          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    INCREMENTO      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    DECREMENTO      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    NOT             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    SUSPEND         reduce using rule 122 (multiplicativeExpression -> asExpression .)
    COLONCOLON      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    RCHAVE          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    PONTO           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    AS              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    COMMA           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    RPAREN          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    RCCT            reduce using rule 122 (multiplicativeExpression -> asExpression .)
    PV              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    ELSE            reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MAISIGUAL       shift and go to state 150
    MENOSIGUAL      shift and go to state 151
    MULTIGUAL       shift and go to state 152
    DIVIGUAL        shift and go to state 153
    MODIGUAL        shift and go to state 154
    MULT            shift and go to state 155
    DIVIDE          shift and go to state 156
    MOD             shift and go to state 157

  ! MAISIGUAL       [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]
  ! MENOSIGUAL      [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]
  ! MULTIGUAL       [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]
  ! DIVIGUAL        [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]
  ! MODIGUAL        [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]
  ! MULT            [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]
  ! DIVIDE          [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]
  ! MOD             [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]

    assignmentAndOperator          shift and go to state 148
    multiplicativeOperator         shift and go to state 149

state 57

    (81) loopStatement -> forStatement .

    LPAREN          reduce using rule 81 (loopStatement -> forStatement .)
    FUN             reduce using rule 81 (loopStatement -> forStatement .)
    FOR             reduce using rule 81 (loopStatement -> forStatement .)
    WHILE           reduce using rule 81 (loopStatement -> forStatement .)
    DO              reduce using rule 81 (loopStatement -> forStatement .)
    VAR             reduce using rule 81 (loopStatement -> forStatement .)
    VAL             reduce using rule 81 (loopStatement -> forStatement .)
    ID              reduce using rule 81 (loopStatement -> forStatement .)
    CROSSINLINE     reduce using rule 81 (loopStatement -> forStatement .)
    IMPORT          reduce using rule 81 (loopStatement -> forStatement .)
    INIT            reduce using rule 81 (loopStatement -> forStatement .)
    NOINLINE        reduce using rule 81 (loopStatement -> forStatement .)
    OUT             reduce using rule 81 (loopStatement -> forStatement .)
    VARARG          reduce using rule 81 (loopStatement -> forStatement .)
    WHERE           reduce using rule 81 (loopStatement -> forStatement .)
    OPERATOR        reduce using rule 81 (loopStatement -> forStatement .)
    LITERAL_STRING  reduce using rule 81 (loopStatement -> forStatement .)
    NUMBER          reduce using rule 81 (loopStatement -> forStatement .)
    LCCT            reduce using rule 81 (loopStatement -> forStatement .)
    IF              reduce using rule 81 (loopStatement -> forStatement .)
    RETURN          reduce using rule 81 (loopStatement -> forStatement .)
    RETURN_AT       reduce using rule 81 (loopStatement -> forStatement .)
    CONTINUE        reduce using rule 81 (loopStatement -> forStatement .)
    CONTINUE_AT     reduce using rule 81 (loopStatement -> forStatement .)
    BREAK           reduce using rule 81 (loopStatement -> forStatement .)
    BREAK_AT        reduce using rule 81 (loopStatement -> forStatement .)
    LCHAVE          reduce using rule 81 (loopStatement -> forStatement .)
    INCREMENTO      reduce using rule 81 (loopStatement -> forStatement .)
    DECREMENTO      reduce using rule 81 (loopStatement -> forStatement .)
    MINUS           reduce using rule 81 (loopStatement -> forStatement .)
    PLUS            reduce using rule 81 (loopStatement -> forStatement .)
    NOT             reduce using rule 81 (loopStatement -> forStatement .)
    SUSPEND         reduce using rule 81 (loopStatement -> forStatement .)
    COLONCOLON      reduce using rule 81 (loopStatement -> forStatement .)
    RCHAVE          reduce using rule 81 (loopStatement -> forStatement .)
    MENOR           reduce using rule 81 (loopStatement -> forStatement .)
    PONTO           reduce using rule 81 (loopStatement -> forStatement .)
    AS              reduce using rule 81 (loopStatement -> forStatement .)
    MAISIGUAL       reduce using rule 81 (loopStatement -> forStatement .)
    MENOSIGUAL      reduce using rule 81 (loopStatement -> forStatement .)
    MULTIGUAL       reduce using rule 81 (loopStatement -> forStatement .)
    DIVIGUAL        reduce using rule 81 (loopStatement -> forStatement .)
    MODIGUAL        reduce using rule 81 (loopStatement -> forStatement .)
    MULT            reduce using rule 81 (loopStatement -> forStatement .)
    DIVIDE          reduce using rule 81 (loopStatement -> forStatement .)
    MOD             reduce using rule 81 (loopStatement -> forStatement .)
    PONTOPONTO      reduce using rule 81 (loopStatement -> forStatement .)
    ELVIS           reduce using rule 81 (loopStatement -> forStatement .)
    IN              reduce using rule 81 (loopStatement -> forStatement .)
    NOT_IN          reduce using rule 81 (loopStatement -> forStatement .)
    IS              reduce using rule 81 (loopStatement -> forStatement .)
    NOT_IS          reduce using rule 81 (loopStatement -> forStatement .)
    MAIOR           reduce using rule 81 (loopStatement -> forStatement .)
    MENORIGUAL      reduce using rule 81 (loopStatement -> forStatement .)
    MAIORIGUAL      reduce using rule 81 (loopStatement -> forStatement .)
    DIFERENTE       reduce using rule 81 (loopStatement -> forStatement .)
    IDENTIDADE      reduce using rule 81 (loopStatement -> forStatement .)
    IGUALDADE       reduce using rule 81 (loopStatement -> forStatement .)
    SEMIDENTIDADE   reduce using rule 81 (loopStatement -> forStatement .)
    AND             reduce using rule 81 (loopStatement -> forStatement .)
    OR              reduce using rule 81 (loopStatement -> forStatement .)
    COMMA           reduce using rule 81 (loopStatement -> forStatement .)
    RPAREN          reduce using rule 81 (loopStatement -> forStatement .)
    RCCT            reduce using rule 81 (loopStatement -> forStatement .)
    PV              reduce using rule 81 (loopStatement -> forStatement .)
    ELSE            reduce using rule 81 (loopStatement -> forStatement .)


state 58

    (82) loopStatement -> whileStatement .

    LPAREN          reduce using rule 82 (loopStatement -> whileStatement .)
    FUN             reduce using rule 82 (loopStatement -> whileStatement .)
    FOR             reduce using rule 82 (loopStatement -> whileStatement .)
    WHILE           reduce using rule 82 (loopStatement -> whileStatement .)
    DO              reduce using rule 82 (loopStatement -> whileStatement .)
    VAR             reduce using rule 82 (loopStatement -> whileStatement .)
    VAL             reduce using rule 82 (loopStatement -> whileStatement .)
    ID              reduce using rule 82 (loopStatement -> whileStatement .)
    CROSSINLINE     reduce using rule 82 (loopStatement -> whileStatement .)
    IMPORT          reduce using rule 82 (loopStatement -> whileStatement .)
    INIT            reduce using rule 82 (loopStatement -> whileStatement .)
    NOINLINE        reduce using rule 82 (loopStatement -> whileStatement .)
    OUT             reduce using rule 82 (loopStatement -> whileStatement .)
    VARARG          reduce using rule 82 (loopStatement -> whileStatement .)
    WHERE           reduce using rule 82 (loopStatement -> whileStatement .)
    OPERATOR        reduce using rule 82 (loopStatement -> whileStatement .)
    LITERAL_STRING  reduce using rule 82 (loopStatement -> whileStatement .)
    NUMBER          reduce using rule 82 (loopStatement -> whileStatement .)
    LCCT            reduce using rule 82 (loopStatement -> whileStatement .)
    IF              reduce using rule 82 (loopStatement -> whileStatement .)
    RETURN          reduce using rule 82 (loopStatement -> whileStatement .)
    RETURN_AT       reduce using rule 82 (loopStatement -> whileStatement .)
    CONTINUE        reduce using rule 82 (loopStatement -> whileStatement .)
    CONTINUE_AT     reduce using rule 82 (loopStatement -> whileStatement .)
    BREAK           reduce using rule 82 (loopStatement -> whileStatement .)
    BREAK_AT        reduce using rule 82 (loopStatement -> whileStatement .)
    LCHAVE          reduce using rule 82 (loopStatement -> whileStatement .)
    INCREMENTO      reduce using rule 82 (loopStatement -> whileStatement .)
    DECREMENTO      reduce using rule 82 (loopStatement -> whileStatement .)
    MINUS           reduce using rule 82 (loopStatement -> whileStatement .)
    PLUS            reduce using rule 82 (loopStatement -> whileStatement .)
    NOT             reduce using rule 82 (loopStatement -> whileStatement .)
    SUSPEND         reduce using rule 82 (loopStatement -> whileStatement .)
    COLONCOLON      reduce using rule 82 (loopStatement -> whileStatement .)
    RCHAVE          reduce using rule 82 (loopStatement -> whileStatement .)
    MENOR           reduce using rule 82 (loopStatement -> whileStatement .)
    PONTO           reduce using rule 82 (loopStatement -> whileStatement .)
    AS              reduce using rule 82 (loopStatement -> whileStatement .)
    MAISIGUAL       reduce using rule 82 (loopStatement -> whileStatement .)
    MENOSIGUAL      reduce using rule 82 (loopStatement -> whileStatement .)
    MULTIGUAL       reduce using rule 82 (loopStatement -> whileStatement .)
    DIVIGUAL        reduce using rule 82 (loopStatement -> whileStatement .)
    MODIGUAL        reduce using rule 82 (loopStatement -> whileStatement .)
    MULT            reduce using rule 82 (loopStatement -> whileStatement .)
    DIVIDE          reduce using rule 82 (loopStatement -> whileStatement .)
    MOD             reduce using rule 82 (loopStatement -> whileStatement .)
    PONTOPONTO      reduce using rule 82 (loopStatement -> whileStatement .)
    ELVIS           reduce using rule 82 (loopStatement -> whileStatement .)
    IN              reduce using rule 82 (loopStatement -> whileStatement .)
    NOT_IN          reduce using rule 82 (loopStatement -> whileStatement .)
    IS              reduce using rule 82 (loopStatement -> whileStatement .)
    NOT_IS          reduce using rule 82 (loopStatement -> whileStatement .)
    MAIOR           reduce using rule 82 (loopStatement -> whileStatement .)
    MENORIGUAL      reduce using rule 82 (loopStatement -> whileStatement .)
    MAIORIGUAL      reduce using rule 82 (loopStatement -> whileStatement .)
    DIFERENTE       reduce using rule 82 (loopStatement -> whileStatement .)
    IDENTIDADE      reduce using rule 82 (loopStatement -> whileStatement .)
    IGUALDADE       reduce using rule 82 (loopStatement -> whileStatement .)
    SEMIDENTIDADE   reduce using rule 82 (loopStatement -> whileStatement .)
    AND             reduce using rule 82 (loopStatement -> whileStatement .)
    OR              reduce using rule 82 (loopStatement -> whileStatement .)
    COMMA           reduce using rule 82 (loopStatement -> whileStatement .)
    RPAREN          reduce using rule 82 (loopStatement -> whileStatement .)
    RCCT            reduce using rule 82 (loopStatement -> whileStatement .)
    PV              reduce using rule 82 (loopStatement -> whileStatement .)
    ELSE            reduce using rule 82 (loopStatement -> whileStatement .)


state 59

    (83) loopStatement -> doWhileStatement .

    LPAREN          reduce using rule 83 (loopStatement -> doWhileStatement .)
    FUN             reduce using rule 83 (loopStatement -> doWhileStatement .)
    FOR             reduce using rule 83 (loopStatement -> doWhileStatement .)
    WHILE           reduce using rule 83 (loopStatement -> doWhileStatement .)
    DO              reduce using rule 83 (loopStatement -> doWhileStatement .)
    VAR             reduce using rule 83 (loopStatement -> doWhileStatement .)
    VAL             reduce using rule 83 (loopStatement -> doWhileStatement .)
    ID              reduce using rule 83 (loopStatement -> doWhileStatement .)
    CROSSINLINE     reduce using rule 83 (loopStatement -> doWhileStatement .)
    IMPORT          reduce using rule 83 (loopStatement -> doWhileStatement .)
    INIT            reduce using rule 83 (loopStatement -> doWhileStatement .)
    NOINLINE        reduce using rule 83 (loopStatement -> doWhileStatement .)
    OUT             reduce using rule 83 (loopStatement -> doWhileStatement .)
    VARARG          reduce using rule 83 (loopStatement -> doWhileStatement .)
    WHERE           reduce using rule 83 (loopStatement -> doWhileStatement .)
    OPERATOR        reduce using rule 83 (loopStatement -> doWhileStatement .)
    LITERAL_STRING  reduce using rule 83 (loopStatement -> doWhileStatement .)
    NUMBER          reduce using rule 83 (loopStatement -> doWhileStatement .)
    LCCT            reduce using rule 83 (loopStatement -> doWhileStatement .)
    IF              reduce using rule 83 (loopStatement -> doWhileStatement .)
    RETURN          reduce using rule 83 (loopStatement -> doWhileStatement .)
    RETURN_AT       reduce using rule 83 (loopStatement -> doWhileStatement .)
    CONTINUE        reduce using rule 83 (loopStatement -> doWhileStatement .)
    CONTINUE_AT     reduce using rule 83 (loopStatement -> doWhileStatement .)
    BREAK           reduce using rule 83 (loopStatement -> doWhileStatement .)
    BREAK_AT        reduce using rule 83 (loopStatement -> doWhileStatement .)
    LCHAVE          reduce using rule 83 (loopStatement -> doWhileStatement .)
    INCREMENTO      reduce using rule 83 (loopStatement -> doWhileStatement .)
    DECREMENTO      reduce using rule 83 (loopStatement -> doWhileStatement .)
    MINUS           reduce using rule 83 (loopStatement -> doWhileStatement .)
    PLUS            reduce using rule 83 (loopStatement -> doWhileStatement .)
    NOT             reduce using rule 83 (loopStatement -> doWhileStatement .)
    SUSPEND         reduce using rule 83 (loopStatement -> doWhileStatement .)
    COLONCOLON      reduce using rule 83 (loopStatement -> doWhileStatement .)
    RCHAVE          reduce using rule 83 (loopStatement -> doWhileStatement .)
    MENOR           reduce using rule 83 (loopStatement -> doWhileStatement .)
    PONTO           reduce using rule 83 (loopStatement -> doWhileStatement .)
    AS              reduce using rule 83 (loopStatement -> doWhileStatement .)
    MAISIGUAL       reduce using rule 83 (loopStatement -> doWhileStatement .)
    MENOSIGUAL      reduce using rule 83 (loopStatement -> doWhileStatement .)
    MULTIGUAL       reduce using rule 83 (loopStatement -> doWhileStatement .)
    DIVIGUAL        reduce using rule 83 (loopStatement -> doWhileStatement .)
    MODIGUAL        reduce using rule 83 (loopStatement -> doWhileStatement .)
    MULT            reduce using rule 83 (loopStatement -> doWhileStatement .)
    DIVIDE          reduce using rule 83 (loopStatement -> doWhileStatement .)
    MOD             reduce using rule 83 (loopStatement -> doWhileStatement .)
    PONTOPONTO      reduce using rule 83 (loopStatement -> doWhileStatement .)
    ELVIS           reduce using rule 83 (loopStatement -> doWhileStatement .)
    IN              reduce using rule 83 (loopStatement -> doWhileStatement .)
    NOT_IN          reduce using rule 83 (loopStatement -> doWhileStatement .)
    IS              reduce using rule 83 (loopStatement -> doWhileStatement .)
    NOT_IS          reduce using rule 83 (loopStatement -> doWhileStatement .)
    MAIOR           reduce using rule 83 (loopStatement -> doWhileStatement .)
    MENORIGUAL      reduce using rule 83 (loopStatement -> doWhileStatement .)
    MAIORIGUAL      reduce using rule 83 (loopStatement -> doWhileStatement .)
    DIFERENTE       reduce using rule 83 (loopStatement -> doWhileStatement .)
    IDENTIDADE      reduce using rule 83 (loopStatement -> doWhileStatement .)
    IGUALDADE       reduce using rule 83 (loopStatement -> doWhileStatement .)
    SEMIDENTIDADE   reduce using rule 83 (loopStatement -> doWhileStatement .)
    AND             reduce using rule 83 (loopStatement -> doWhileStatement .)
    OR              reduce using rule 83 (loopStatement -> doWhileStatement .)
    COMMA           reduce using rule 83 (loopStatement -> doWhileStatement .)
    RPAREN          reduce using rule 83 (loopStatement -> doWhileStatement .)
    RCCT            reduce using rule 83 (loopStatement -> doWhileStatement .)
    PV              reduce using rule 83 (loopStatement -> doWhileStatement .)
    ELSE            reduce using rule 83 (loopStatement -> doWhileStatement .)


state 60

    (12) expression -> disjunction .

    LPAREN          reduce using rule 12 (expression -> disjunction .)
    FUN             reduce using rule 12 (expression -> disjunction .)
    FOR             reduce using rule 12 (expression -> disjunction .)
    WHILE           reduce using rule 12 (expression -> disjunction .)
    DO              reduce using rule 12 (expression -> disjunction .)
    VAR             reduce using rule 12 (expression -> disjunction .)
    VAL             reduce using rule 12 (expression -> disjunction .)
    ID              reduce using rule 12 (expression -> disjunction .)
    CROSSINLINE     reduce using rule 12 (expression -> disjunction .)
    IMPORT          reduce using rule 12 (expression -> disjunction .)
    INIT            reduce using rule 12 (expression -> disjunction .)
    NOINLINE        reduce using rule 12 (expression -> disjunction .)
    OUT             reduce using rule 12 (expression -> disjunction .)
    VARARG          reduce using rule 12 (expression -> disjunction .)
    WHERE           reduce using rule 12 (expression -> disjunction .)
    OPERATOR        reduce using rule 12 (expression -> disjunction .)
    LITERAL_STRING  reduce using rule 12 (expression -> disjunction .)
    NUMBER          reduce using rule 12 (expression -> disjunction .)
    LCCT            reduce using rule 12 (expression -> disjunction .)
    IF              reduce using rule 12 (expression -> disjunction .)
    RETURN          reduce using rule 12 (expression -> disjunction .)
    RETURN_AT       reduce using rule 12 (expression -> disjunction .)
    CONTINUE        reduce using rule 12 (expression -> disjunction .)
    CONTINUE_AT     reduce using rule 12 (expression -> disjunction .)
    BREAK           reduce using rule 12 (expression -> disjunction .)
    BREAK_AT        reduce using rule 12 (expression -> disjunction .)
    LCHAVE          reduce using rule 12 (expression -> disjunction .)
    INCREMENTO      reduce using rule 12 (expression -> disjunction .)
    DECREMENTO      reduce using rule 12 (expression -> disjunction .)
    MINUS           reduce using rule 12 (expression -> disjunction .)
    PLUS            reduce using rule 12 (expression -> disjunction .)
    NOT             reduce using rule 12 (expression -> disjunction .)
    SUSPEND         reduce using rule 12 (expression -> disjunction .)
    COLONCOLON      reduce using rule 12 (expression -> disjunction .)
    RCHAVE          reduce using rule 12 (expression -> disjunction .)
    COMMA           reduce using rule 12 (expression -> disjunction .)
    RPAREN          reduce using rule 12 (expression -> disjunction .)
    RCCT            reduce using rule 12 (expression -> disjunction .)
    MENOR           reduce using rule 12 (expression -> disjunction .)
    PONTO           reduce using rule 12 (expression -> disjunction .)
    AS              reduce using rule 12 (expression -> disjunction .)
    MAISIGUAL       reduce using rule 12 (expression -> disjunction .)
    MENOSIGUAL      reduce using rule 12 (expression -> disjunction .)
    MULTIGUAL       reduce using rule 12 (expression -> disjunction .)
    DIVIGUAL        reduce using rule 12 (expression -> disjunction .)
    MODIGUAL        reduce using rule 12 (expression -> disjunction .)
    MULT            reduce using rule 12 (expression -> disjunction .)
    DIVIDE          reduce using rule 12 (expression -> disjunction .)
    MOD             reduce using rule 12 (expression -> disjunction .)
    PONTOPONTO      reduce using rule 12 (expression -> disjunction .)
    ELVIS           reduce using rule 12 (expression -> disjunction .)
    IN              reduce using rule 12 (expression -> disjunction .)
    NOT_IN          reduce using rule 12 (expression -> disjunction .)
    IS              reduce using rule 12 (expression -> disjunction .)
    NOT_IS          reduce using rule 12 (expression -> disjunction .)
    MAIOR           reduce using rule 12 (expression -> disjunction .)
    MENORIGUAL      reduce using rule 12 (expression -> disjunction .)
    MAIORIGUAL      reduce using rule 12 (expression -> disjunction .)
    DIFERENTE       reduce using rule 12 (expression -> disjunction .)
    IDENTIDADE      reduce using rule 12 (expression -> disjunction .)
    IGUALDADE       reduce using rule 12 (expression -> disjunction .)
    SEMIDENTIDADE   reduce using rule 12 (expression -> disjunction .)
    AND             reduce using rule 12 (expression -> disjunction .)
    OR              reduce using rule 12 (expression -> disjunction .)
    PV              reduce using rule 12 (expression -> disjunction .)
    ELSE            reduce using rule 12 (expression -> disjunction .)


state 61

    (17) propertyDeclaration -> varOrVal . optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (15) optionalTypeParameters -> . typeParameters
    (16) optionalTypeParameters -> .
    (18) typeParameters -> . MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR

    LPAREN          reduce using rule 16 (optionalTypeParameters -> .)
    ID              reduce using rule 16 (optionalTypeParameters -> .)
    CROSSINLINE     reduce using rule 16 (optionalTypeParameters -> .)
    IMPORT          reduce using rule 16 (optionalTypeParameters -> .)
    INIT            reduce using rule 16 (optionalTypeParameters -> .)
    NOINLINE        reduce using rule 16 (optionalTypeParameters -> .)
    OUT             reduce using rule 16 (optionalTypeParameters -> .)
    VARARG          reduce using rule 16 (optionalTypeParameters -> .)
    WHERE           reduce using rule 16 (optionalTypeParameters -> .)
    OPERATOR        reduce using rule 16 (optionalTypeParameters -> .)
    MENOR           shift and go to state 160

    optionalTypeParameters         shift and go to state 158
    typeParameters                 shift and go to state 159

state 62

    (144) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (184) parenthesizedExpression -> LPAREN . expression RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (12) expression -> . disjunction
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (69) receiverType -> . typeModifier parenthesizedType
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (48) typeModifier -> . SUSPEND
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104

    directlyAssignableExpression   shift and go to state 161
    expression                     shift and go to state 162
    postfixUnaryExpression         shift and go to state 63
    simpleIdentifier               shift and go to state 54
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    disjunction                    shift and go to state 60
    primaryExpression              shift and go to state 72
    conjunction                    shift and go to state 69
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    equality                       shift and go to state 74
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    comparison                     shift and go to state 84
    receiverType                   shift and go to state 99
    infixOperation                 shift and go to state 98
    typeModifier                   shift and go to state 106
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    unaryPrefix                    shift and go to state 83
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97

state 63

    (141) directlyAssignableExpression -> postfixUnaryExpression . assignableSuffix
    (127) prefixUnaryExpression -> postfixUnaryExpression .
    (148) assignableSuffix -> . typeArguments
    (149) assignableSuffix -> . indexingSuffix
    (150) assignableSuffix -> . navigationSuffix
    (164) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (165) typeArguments -> . MENOR MAIOR
    (151) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (152) indexingSuffix -> . LCCT RCCT
    (155) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (156) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (265) memberAccessOperator -> . safeNav
    (266) memberAccessOperator -> . COLONCOLON
    (267) safeNav -> . PONTO

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    AS              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MODIGUAL        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULT            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIDE          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MOD             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    PLUS            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MINUS           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    ID              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IMPORT          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    INIT            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOINLINE        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    OUT             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    VARARG          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHERE           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    OPERATOR        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELVIS           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IN              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IN          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IS              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IS          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIOR           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIFERENTE       reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IGUALDADE       reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    AND             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    OR              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    LPAREN          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUN             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    FOR             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHILE           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    DO              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAR             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAL             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    NUMBER          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IF              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN_AT       reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK_AT        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCHAVE          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    INCREMENTO      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    DECREMENTO      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    SUSPEND         reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCHAVE          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    RPAREN          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    COMMA           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCCT            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    PV              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELSE            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOR           shift and go to state 123
    LCCT            shift and go to state 167
    COLONCOLON      shift and go to state 170
    PONTO           shift and go to state 171

  ! MENOR           [ reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! LCCT            [ reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .) ]
  ! PONTO           [ reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .) ]

    assignableSuffix               shift and go to state 163
    typeArguments                  shift and go to state 164
    indexingSuffix                 shift and go to state 165
    navigationSuffix               shift and go to state 166
    memberAccessOperator           shift and go to state 168
    safeNav                        shift and go to state 169

state 64

    (143) directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .

    ATRIBUICAO      reduce using rule 143 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)
    RPAREN          reduce using rule 143 (directlyAssignableExpression -> parenthesizedDirectlyAssignableExpression .)


state 65

    (124) asExpression -> prefixUnaryExpression .
    (125) asExpression -> prefixUnaryExpression . asOperator type
    (256) asOperator -> . AS
    (257) asOperator -> . AS asOperator

  ! shift/reduce conflict for AS resolved as shift
    MAISIGUAL       reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    MENOSIGUAL      reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    MULTIGUAL       reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    DIVIGUAL        reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    MODIGUAL        reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    MULT            reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    DIVIDE          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    MOD             reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    PLUS            reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    MINUS           reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    PONTOPONTO      reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    ID              reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    CROSSINLINE     reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    IMPORT          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    INIT            reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    NOINLINE        reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    OUT             reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    VARARG          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    WHERE           reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    OPERATOR        reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    ELVIS           reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    IN              reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    NOT_IN          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    IS              reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    NOT_IS          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    MENOR           reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    MAIOR           reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    MENORIGUAL      reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    MAIORIGUAL      reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    DIFERENTE       reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    IDENTIDADE      reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    IGUALDADE       reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    AND             reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    OR              reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    LPAREN          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    FUN             reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    FOR             reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    WHILE           reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    DO              reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    VAR             reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    VAL             reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    LITERAL_STRING  reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    NUMBER          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    LCCT            reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    IF              reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    RETURN          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    RETURN_AT       reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    CONTINUE        reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    CONTINUE_AT     reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    BREAK           reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    BREAK_AT        reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    LCHAVE          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    INCREMENTO      reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    DECREMENTO      reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    NOT             reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    SUSPEND         reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    COLONCOLON      reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    RCHAVE          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    RPAREN          reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    RCCT            reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    PONTO           reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    PV              reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    ELSE            reduce using rule 124 (asExpression -> prefixUnaryExpression .)
    AS              shift and go to state 173

  ! AS              [ reduce using rule 124 (asExpression -> prefixUnaryExpression .) ]

    asOperator                     shift and go to state 172

state 66

    (86) forStatement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> FOR . LPAREN genericVariableDeclaration IN expression RPAREN

    LPAREN          shift and go to state 174


state 67

    (88) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 175


state 68

    (90) doWhileStatement -> DO . controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> DO . WHILE LPAREN expression RPAREN
    (78) controlStructureBody -> . block
    (79) controlStructureBody -> . statement
    (80) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    WHILE           shift and go to state 177
    LCHAVE          shift and go to state 180
    FUN             shift and go to state 53
    FOR             shift and go to state 66
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

    controlStructureBody           shift and go to state 176
    expression                     shift and go to state 50
    block                          shift and go to state 178
    statement                      shift and go to state 179
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    simpleIdentifier               shift and go to state 54
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 69

    (98) disjunction -> conjunction .
    (99) disjunction -> conjunction . OR disjunction

  ! shift/reduce conflict for OR resolved as shift
    LPAREN          reduce using rule 98 (disjunction -> conjunction .)
    FUN             reduce using rule 98 (disjunction -> conjunction .)
    FOR             reduce using rule 98 (disjunction -> conjunction .)
    WHILE           reduce using rule 98 (disjunction -> conjunction .)
    DO              reduce using rule 98 (disjunction -> conjunction .)
    VAR             reduce using rule 98 (disjunction -> conjunction .)
    VAL             reduce using rule 98 (disjunction -> conjunction .)
    ID              reduce using rule 98 (disjunction -> conjunction .)
    CROSSINLINE     reduce using rule 98 (disjunction -> conjunction .)
    IMPORT          reduce using rule 98 (disjunction -> conjunction .)
    INIT            reduce using rule 98 (disjunction -> conjunction .)
    NOINLINE        reduce using rule 98 (disjunction -> conjunction .)
    OUT             reduce using rule 98 (disjunction -> conjunction .)
    VARARG          reduce using rule 98 (disjunction -> conjunction .)
    WHERE           reduce using rule 98 (disjunction -> conjunction .)
    OPERATOR        reduce using rule 98 (disjunction -> conjunction .)
    LITERAL_STRING  reduce using rule 98 (disjunction -> conjunction .)
    NUMBER          reduce using rule 98 (disjunction -> conjunction .)
    LCCT            reduce using rule 98 (disjunction -> conjunction .)
    IF              reduce using rule 98 (disjunction -> conjunction .)
    RETURN          reduce using rule 98 (disjunction -> conjunction .)
    RETURN_AT       reduce using rule 98 (disjunction -> conjunction .)
    CONTINUE        reduce using rule 98 (disjunction -> conjunction .)
    CONTINUE_AT     reduce using rule 98 (disjunction -> conjunction .)
    BREAK           reduce using rule 98 (disjunction -> conjunction .)
    BREAK_AT        reduce using rule 98 (disjunction -> conjunction .)
    LCHAVE          reduce using rule 98 (disjunction -> conjunction .)
    INCREMENTO      reduce using rule 98 (disjunction -> conjunction .)
    DECREMENTO      reduce using rule 98 (disjunction -> conjunction .)
    MINUS           reduce using rule 98 (disjunction -> conjunction .)
    PLUS            reduce using rule 98 (disjunction -> conjunction .)
    NOT             reduce using rule 98 (disjunction -> conjunction .)
    SUSPEND         reduce using rule 98 (disjunction -> conjunction .)
    COLONCOLON      reduce using rule 98 (disjunction -> conjunction .)
    RCHAVE          reduce using rule 98 (disjunction -> conjunction .)
    COMMA           reduce using rule 98 (disjunction -> conjunction .)
    RPAREN          reduce using rule 98 (disjunction -> conjunction .)
    RCCT            reduce using rule 98 (disjunction -> conjunction .)
    MENOR           reduce using rule 98 (disjunction -> conjunction .)
    PONTO           reduce using rule 98 (disjunction -> conjunction .)
    AS              reduce using rule 98 (disjunction -> conjunction .)
    MAISIGUAL       reduce using rule 98 (disjunction -> conjunction .)
    MENOSIGUAL      reduce using rule 98 (disjunction -> conjunction .)
    MULTIGUAL       reduce using rule 98 (disjunction -> conjunction .)
    DIVIGUAL        reduce using rule 98 (disjunction -> conjunction .)
    MODIGUAL        reduce using rule 98 (disjunction -> conjunction .)
    MULT            reduce using rule 98 (disjunction -> conjunction .)
    DIVIDE          reduce using rule 98 (disjunction -> conjunction .)
    MOD             reduce using rule 98 (disjunction -> conjunction .)
    PONTOPONTO      reduce using rule 98 (disjunction -> conjunction .)
    ELVIS           reduce using rule 98 (disjunction -> conjunction .)
    IN              reduce using rule 98 (disjunction -> conjunction .)
    NOT_IN          reduce using rule 98 (disjunction -> conjunction .)
    IS              reduce using rule 98 (disjunction -> conjunction .)
    NOT_IS          reduce using rule 98 (disjunction -> conjunction .)
    MAIOR           reduce using rule 98 (disjunction -> conjunction .)
    MENORIGUAL      reduce using rule 98 (disjunction -> conjunction .)
    MAIORIGUAL      reduce using rule 98 (disjunction -> conjunction .)
    DIFERENTE       reduce using rule 98 (disjunction -> conjunction .)
    IDENTIDADE      reduce using rule 98 (disjunction -> conjunction .)
    IGUALDADE       reduce using rule 98 (disjunction -> conjunction .)
    SEMIDENTIDADE   reduce using rule 98 (disjunction -> conjunction .)
    AND             reduce using rule 98 (disjunction -> conjunction .)
    PV              reduce using rule 98 (disjunction -> conjunction .)
    ELSE            reduce using rule 98 (disjunction -> conjunction .)
    OR              shift and go to state 181

  ! OR              [ reduce using rule 98 (disjunction -> conjunction .) ]


state 70

    (13) varOrVal -> VAR .

    MENOR           reduce using rule 13 (varOrVal -> VAR .)
    LPAREN          reduce using rule 13 (varOrVal -> VAR .)
    ID              reduce using rule 13 (varOrVal -> VAR .)
    CROSSINLINE     reduce using rule 13 (varOrVal -> VAR .)
    IMPORT          reduce using rule 13 (varOrVal -> VAR .)
    INIT            reduce using rule 13 (varOrVal -> VAR .)
    NOINLINE        reduce using rule 13 (varOrVal -> VAR .)
    OUT             reduce using rule 13 (varOrVal -> VAR .)
    VARARG          reduce using rule 13 (varOrVal -> VAR .)
    WHERE           reduce using rule 13 (varOrVal -> VAR .)
    OPERATOR        reduce using rule 13 (varOrVal -> VAR .)


state 71

    (14) varOrVal -> VAL .

    MENOR           reduce using rule 14 (varOrVal -> VAL .)
    LPAREN          reduce using rule 14 (varOrVal -> VAL .)
    ID              reduce using rule 14 (varOrVal -> VAL .)
    CROSSINLINE     reduce using rule 14 (varOrVal -> VAL .)
    IMPORT          reduce using rule 14 (varOrVal -> VAL .)
    INIT            reduce using rule 14 (varOrVal -> VAL .)
    NOINLINE        reduce using rule 14 (varOrVal -> VAL .)
    OUT             reduce using rule 14 (varOrVal -> VAL .)
    VARARG          reduce using rule 14 (varOrVal -> VAL .)
    WHERE           reduce using rule 14 (varOrVal -> VAL .)
    OPERATOR        reduce using rule 14 (varOrVal -> VAL .)


state 72

    (134) postfixUnaryExpression -> primaryExpression .
    (135) postfixUnaryExpression -> primaryExpression . postfixUnaryExpressionRecursive
    (132) postfixUnaryExpressionRecursive -> . postfixUnarySuffix
    (133) postfixUnaryExpressionRecursive -> . postfixUnarySuffix postfixUnaryExpressionRecursive
    (136) postfixUnarySuffix -> . postfixUnaryOperator
    (137) postfixUnarySuffix -> . typeArguments
    (138) postfixUnarySuffix -> . callSuffix
    (139) postfixUnarySuffix -> . indexingSuffix
    (140) postfixUnarySuffix -> . navigationSuffix
    (263) postfixUnaryOperator -> . INCREMENTO
    (264) postfixUnaryOperator -> . DECREMENTO
    (164) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (165) typeArguments -> . MENOR MAIOR
    (157) callSuffix -> . optionalTypeArguments optionalValueArguments annotatedLambda
    (158) callSuffix -> . optionalTypeArguments optionalValueArguments
    (151) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (152) indexingSuffix -> . LCCT RCCT
    (155) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (156) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (159) optionalTypeArguments -> . typeArguments
    (160) optionalTypeArguments -> .
    (265) memberAccessOperator -> . safeNav
    (266) memberAccessOperator -> . COLONCOLON
    (267) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for AS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ID resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IN resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for AND resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OR resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for FUN resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for FOR resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for WHILE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DO resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for VAR resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for VAL resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IF resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RETURN resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for BREAK resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for COMMA resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RCCT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PV resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ELSE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    AS              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MAISIGUAL       reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MENOSIGUAL      reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MULTIGUAL       reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    DIVIGUAL        reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MODIGUAL        reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MULT            reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    DIVIDE          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MOD             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    PLUS            reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MINUS           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    PONTOPONTO      reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    ID              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    CROSSINLINE     reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IMPORT          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    INIT            reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    NOINLINE        reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    OUT             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    VARARG          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    WHERE           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    OPERATOR        reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    ELVIS           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IN              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    NOT_IN          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IS              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    NOT_IS          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MAIOR           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MENORIGUAL      reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MAIORIGUAL      reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    DIFERENTE       reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IDENTIDADE      reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IGUALDADE       reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    SEMIDENTIDADE   reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    AND             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    OR              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    LPAREN          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    FUN             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    FOR             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    WHILE           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    DO              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    VAR             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    VAL             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    LITERAL_STRING  reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    NUMBER          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IF              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    RETURN          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    RETURN_AT       reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE        reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    CONTINUE_AT     reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    BREAK           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    BREAK_AT        reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    LCHAVE          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    NOT             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    SUSPEND         reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    RCHAVE          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    COMMA           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    RPAREN          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    RCCT            reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    PV              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    ELSE            reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    INCREMENTO      shift and go to state 189
    DECREMENTO      shift and go to state 190
    MENOR           shift and go to state 123
    LCCT            shift and go to state 167
    COLONCOLON      shift and go to state 170
    PONTO           shift and go to state 171

  ! MENOR           [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! LCCT            [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! PONTO           [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! INCREMENTO      [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! DECREMENTO      [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! LPAREN          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! LCHAVE          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! INCREMENTO      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DECREMENTO      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MENOR           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! LCCT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! COLONCOLON      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PONTO           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! AS              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MAISIGUAL       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MENOSIGUAL      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MULTIGUAL       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DIVIGUAL        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MODIGUAL        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MULT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DIVIDE          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MOD             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PLUS            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MINUS           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PONTOPONTO      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! ID              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! CROSSINLINE     [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IMPORT          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! INIT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOINLINE        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! OUT             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! VARARG          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! WHERE           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! OPERATOR        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! ELVIS           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IN              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOT_IN          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IS              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOT_IS          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MAIOR           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MENORIGUAL      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MAIORIGUAL      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DIFERENTE       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IDENTIDADE      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IGUALDADE       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! AND             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! OR              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! FUN             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! FOR             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! WHILE           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DO              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! VAR             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! VAL             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! LITERAL_STRING  [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NUMBER          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IF              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RETURN          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RETURN_AT       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! CONTINUE        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! CONTINUE_AT     [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! BREAK           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! BREAK_AT        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOT             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! SUSPEND         [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RCHAVE          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! COMMA           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RPAREN          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RCCT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PV              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! ELSE            [ reduce using rule 160 (optionalTypeArguments -> .) ]

    postfixUnaryExpressionRecursive shift and go to state 182
    postfixUnarySuffix             shift and go to state 183
    postfixUnaryOperator           shift and go to state 184
    typeArguments                  shift and go to state 185
    callSuffix                     shift and go to state 186
    indexingSuffix                 shift and go to state 187
    navigationSuffix               shift and go to state 188
    optionalTypeArguments          shift and go to state 191
    memberAccessOperator           shift and go to state 168
    safeNav                        shift and go to state 169

state 73

    (126) prefixUnaryExpression -> prefixUnaryExpressionRecursive . postfixUnaryExpression
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    postfixUnaryExpression         shift and go to state 192
    primaryExpression              shift and go to state 72
    parenthesizedExpression        shift and go to state 75
    simpleIdentifier               shift and go to state 193
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 74

    (100) conjunction -> equality .
    (101) conjunction -> equality . AND conjunction

  ! shift/reduce conflict for AND resolved as shift
    OR              reduce using rule 100 (conjunction -> equality .)
    LPAREN          reduce using rule 100 (conjunction -> equality .)
    FUN             reduce using rule 100 (conjunction -> equality .)
    FOR             reduce using rule 100 (conjunction -> equality .)
    WHILE           reduce using rule 100 (conjunction -> equality .)
    DO              reduce using rule 100 (conjunction -> equality .)
    VAR             reduce using rule 100 (conjunction -> equality .)
    VAL             reduce using rule 100 (conjunction -> equality .)
    ID              reduce using rule 100 (conjunction -> equality .)
    CROSSINLINE     reduce using rule 100 (conjunction -> equality .)
    IMPORT          reduce using rule 100 (conjunction -> equality .)
    INIT            reduce using rule 100 (conjunction -> equality .)
    NOINLINE        reduce using rule 100 (conjunction -> equality .)
    OUT             reduce using rule 100 (conjunction -> equality .)
    VARARG          reduce using rule 100 (conjunction -> equality .)
    WHERE           reduce using rule 100 (conjunction -> equality .)
    OPERATOR        reduce using rule 100 (conjunction -> equality .)
    LITERAL_STRING  reduce using rule 100 (conjunction -> equality .)
    NUMBER          reduce using rule 100 (conjunction -> equality .)
    LCCT            reduce using rule 100 (conjunction -> equality .)
    IF              reduce using rule 100 (conjunction -> equality .)
    RETURN          reduce using rule 100 (conjunction -> equality .)
    RETURN_AT       reduce using rule 100 (conjunction -> equality .)
    CONTINUE        reduce using rule 100 (conjunction -> equality .)
    CONTINUE_AT     reduce using rule 100 (conjunction -> equality .)
    BREAK           reduce using rule 100 (conjunction -> equality .)
    BREAK_AT        reduce using rule 100 (conjunction -> equality .)
    LCHAVE          reduce using rule 100 (conjunction -> equality .)
    INCREMENTO      reduce using rule 100 (conjunction -> equality .)
    DECREMENTO      reduce using rule 100 (conjunction -> equality .)
    MINUS           reduce using rule 100 (conjunction -> equality .)
    PLUS            reduce using rule 100 (conjunction -> equality .)
    NOT             reduce using rule 100 (conjunction -> equality .)
    SUSPEND         reduce using rule 100 (conjunction -> equality .)
    COLONCOLON      reduce using rule 100 (conjunction -> equality .)
    RCHAVE          reduce using rule 100 (conjunction -> equality .)
    COMMA           reduce using rule 100 (conjunction -> equality .)
    RPAREN          reduce using rule 100 (conjunction -> equality .)
    RCCT            reduce using rule 100 (conjunction -> equality .)
    MENOR           reduce using rule 100 (conjunction -> equality .)
    PONTO           reduce using rule 100 (conjunction -> equality .)
    AS              reduce using rule 100 (conjunction -> equality .)
    MAISIGUAL       reduce using rule 100 (conjunction -> equality .)
    MENOSIGUAL      reduce using rule 100 (conjunction -> equality .)
    MULTIGUAL       reduce using rule 100 (conjunction -> equality .)
    DIVIGUAL        reduce using rule 100 (conjunction -> equality .)
    MODIGUAL        reduce using rule 100 (conjunction -> equality .)
    MULT            reduce using rule 100 (conjunction -> equality .)
    DIVIDE          reduce using rule 100 (conjunction -> equality .)
    MOD             reduce using rule 100 (conjunction -> equality .)
    PONTOPONTO      reduce using rule 100 (conjunction -> equality .)
    ELVIS           reduce using rule 100 (conjunction -> equality .)
    IN              reduce using rule 100 (conjunction -> equality .)
    NOT_IN          reduce using rule 100 (conjunction -> equality .)
    IS              reduce using rule 100 (conjunction -> equality .)
    NOT_IS          reduce using rule 100 (conjunction -> equality .)
    MAIOR           reduce using rule 100 (conjunction -> equality .)
    MENORIGUAL      reduce using rule 100 (conjunction -> equality .)
    MAIORIGUAL      reduce using rule 100 (conjunction -> equality .)
    DIFERENTE       reduce using rule 100 (conjunction -> equality .)
    IDENTIDADE      reduce using rule 100 (conjunction -> equality .)
    IGUALDADE       reduce using rule 100 (conjunction -> equality .)
    SEMIDENTIDADE   reduce using rule 100 (conjunction -> equality .)
    PV              reduce using rule 100 (conjunction -> equality .)
    ELSE            reduce using rule 100 (conjunction -> equality .)
    AND             shift and go to state 194

  ! AND             [ reduce using rule 100 (conjunction -> equality .) ]


state 75

    (175) primaryExpression -> parenthesizedExpression .

    INCREMENTO      reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    DECREMENTO      reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MENOR           reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    LCCT            reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    COLONCOLON      reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    PONTO           reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    LPAREN          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    LCHAVE          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    AS              reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MAISIGUAL       reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MENOSIGUAL      reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MULTIGUAL       reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    DIVIGUAL        reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MODIGUAL        reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MULT            reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    DIVIDE          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MOD             reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    PLUS            reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MINUS           reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    PONTOPONTO      reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    ID              reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    CROSSINLINE     reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    IMPORT          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    INIT            reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    NOINLINE        reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    OUT             reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    VARARG          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    WHERE           reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    OPERATOR        reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    ELVIS           reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    IN              reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    NOT_IN          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    IS              reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    NOT_IS          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MAIOR           reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MENORIGUAL      reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    MAIORIGUAL      reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    DIFERENTE       reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    IDENTIDADE      reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    IGUALDADE       reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    SEMIDENTIDADE   reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    AND             reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    OR              reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    FUN             reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    FOR             reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    WHILE           reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    DO              reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    VAR             reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    VAL             reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    LITERAL_STRING  reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    NUMBER          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    IF              reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    RETURN          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    RETURN_AT       reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    CONTINUE        reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    CONTINUE_AT     reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    BREAK           reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    BREAK_AT        reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    NOT             reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    SUSPEND         reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    RCHAVE          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    COMMA           reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    RPAREN          reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    RCCT            reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    PV              reduce using rule 175 (primaryExpression -> parenthesizedExpression .)
    ELSE            reduce using rule 175 (primaryExpression -> parenthesizedExpression .)


state 76

    (177) primaryExpression -> LITERAL_STRING .

    INCREMENTO      reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    DECREMENTO      reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MENOR           reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    LCCT            reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    COLONCOLON      reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    PONTO           reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    LPAREN          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    LCHAVE          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    AS              reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MAISIGUAL       reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MENOSIGUAL      reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MULTIGUAL       reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    DIVIGUAL        reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MODIGUAL        reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MULT            reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    DIVIDE          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MOD             reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    PLUS            reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MINUS           reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    PONTOPONTO      reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    ID              reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    CROSSINLINE     reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    IMPORT          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    INIT            reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    NOINLINE        reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    OUT             reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    VARARG          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    WHERE           reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    OPERATOR        reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    ELVIS           reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    IN              reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    NOT_IN          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    IS              reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    NOT_IS          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MAIOR           reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MENORIGUAL      reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    MAIORIGUAL      reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    DIFERENTE       reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    IDENTIDADE      reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    IGUALDADE       reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    SEMIDENTIDADE   reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    AND             reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    OR              reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    FUN             reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    FOR             reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    WHILE           reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    DO              reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    VAR             reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    VAL             reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    LITERAL_STRING  reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    NUMBER          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    IF              reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    RETURN          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    RETURN_AT       reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    CONTINUE        reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    CONTINUE_AT     reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    BREAK           reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    BREAK_AT        reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    NOT             reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    SUSPEND         reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    RCHAVE          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    COMMA           reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    RPAREN          reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    RCCT            reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    PV              reduce using rule 177 (primaryExpression -> LITERAL_STRING .)
    ELSE            reduce using rule 177 (primaryExpression -> LITERAL_STRING .)


state 77

    (178) primaryExpression -> NUMBER .

    INCREMENTO      reduce using rule 178 (primaryExpression -> NUMBER .)
    DECREMENTO      reduce using rule 178 (primaryExpression -> NUMBER .)
    MENOR           reduce using rule 178 (primaryExpression -> NUMBER .)
    LCCT            reduce using rule 178 (primaryExpression -> NUMBER .)
    COLONCOLON      reduce using rule 178 (primaryExpression -> NUMBER .)
    PONTO           reduce using rule 178 (primaryExpression -> NUMBER .)
    LPAREN          reduce using rule 178 (primaryExpression -> NUMBER .)
    LCHAVE          reduce using rule 178 (primaryExpression -> NUMBER .)
    AS              reduce using rule 178 (primaryExpression -> NUMBER .)
    MAISIGUAL       reduce using rule 178 (primaryExpression -> NUMBER .)
    MENOSIGUAL      reduce using rule 178 (primaryExpression -> NUMBER .)
    MULTIGUAL       reduce using rule 178 (primaryExpression -> NUMBER .)
    DIVIGUAL        reduce using rule 178 (primaryExpression -> NUMBER .)
    MODIGUAL        reduce using rule 178 (primaryExpression -> NUMBER .)
    MULT            reduce using rule 178 (primaryExpression -> NUMBER .)
    DIVIDE          reduce using rule 178 (primaryExpression -> NUMBER .)
    MOD             reduce using rule 178 (primaryExpression -> NUMBER .)
    PLUS            reduce using rule 178 (primaryExpression -> NUMBER .)
    MINUS           reduce using rule 178 (primaryExpression -> NUMBER .)
    PONTOPONTO      reduce using rule 178 (primaryExpression -> NUMBER .)
    ID              reduce using rule 178 (primaryExpression -> NUMBER .)
    CROSSINLINE     reduce using rule 178 (primaryExpression -> NUMBER .)
    IMPORT          reduce using rule 178 (primaryExpression -> NUMBER .)
    INIT            reduce using rule 178 (primaryExpression -> NUMBER .)
    NOINLINE        reduce using rule 178 (primaryExpression -> NUMBER .)
    OUT             reduce using rule 178 (primaryExpression -> NUMBER .)
    VARARG          reduce using rule 178 (primaryExpression -> NUMBER .)
    WHERE           reduce using rule 178 (primaryExpression -> NUMBER .)
    OPERATOR        reduce using rule 178 (primaryExpression -> NUMBER .)
    ELVIS           reduce using rule 178 (primaryExpression -> NUMBER .)
    IN              reduce using rule 178 (primaryExpression -> NUMBER .)
    NOT_IN          reduce using rule 178 (primaryExpression -> NUMBER .)
    IS              reduce using rule 178 (primaryExpression -> NUMBER .)
    NOT_IS          reduce using rule 178 (primaryExpression -> NUMBER .)
    MAIOR           reduce using rule 178 (primaryExpression -> NUMBER .)
    MENORIGUAL      reduce using rule 178 (primaryExpression -> NUMBER .)
    MAIORIGUAL      reduce using rule 178 (primaryExpression -> NUMBER .)
    DIFERENTE       reduce using rule 178 (primaryExpression -> NUMBER .)
    IDENTIDADE      reduce using rule 178 (primaryExpression -> NUMBER .)
    IGUALDADE       reduce using rule 178 (primaryExpression -> NUMBER .)
    SEMIDENTIDADE   reduce using rule 178 (primaryExpression -> NUMBER .)
    AND             reduce using rule 178 (primaryExpression -> NUMBER .)
    OR              reduce using rule 178 (primaryExpression -> NUMBER .)
    FUN             reduce using rule 178 (primaryExpression -> NUMBER .)
    FOR             reduce using rule 178 (primaryExpression -> NUMBER .)
    WHILE           reduce using rule 178 (primaryExpression -> NUMBER .)
    DO              reduce using rule 178 (primaryExpression -> NUMBER .)
    VAR             reduce using rule 178 (primaryExpression -> NUMBER .)
    VAL             reduce using rule 178 (primaryExpression -> NUMBER .)
    LITERAL_STRING  reduce using rule 178 (primaryExpression -> NUMBER .)
    NUMBER          reduce using rule 178 (primaryExpression -> NUMBER .)
    IF              reduce using rule 178 (primaryExpression -> NUMBER .)
    RETURN          reduce using rule 178 (primaryExpression -> NUMBER .)
    RETURN_AT       reduce using rule 178 (primaryExpression -> NUMBER .)
    CONTINUE        reduce using rule 178 (primaryExpression -> NUMBER .)
    CONTINUE_AT     reduce using rule 178 (primaryExpression -> NUMBER .)
    BREAK           reduce using rule 178 (primaryExpression -> NUMBER .)
    BREAK_AT        reduce using rule 178 (primaryExpression -> NUMBER .)
    NOT             reduce using rule 178 (primaryExpression -> NUMBER .)
    SUSPEND         reduce using rule 178 (primaryExpression -> NUMBER .)
    RCHAVE          reduce using rule 178 (primaryExpression -> NUMBER .)
    COMMA           reduce using rule 178 (primaryExpression -> NUMBER .)
    RPAREN          reduce using rule 178 (primaryExpression -> NUMBER .)
    RCCT            reduce using rule 178 (primaryExpression -> NUMBER .)
    PV              reduce using rule 178 (primaryExpression -> NUMBER .)
    ELSE            reduce using rule 178 (primaryExpression -> NUMBER .)


state 78

    (179) primaryExpression -> callableReference .

    INCREMENTO      reduce using rule 179 (primaryExpression -> callableReference .)
    DECREMENTO      reduce using rule 179 (primaryExpression -> callableReference .)
    MENOR           reduce using rule 179 (primaryExpression -> callableReference .)
    LCCT            reduce using rule 179 (primaryExpression -> callableReference .)
    COLONCOLON      reduce using rule 179 (primaryExpression -> callableReference .)
    PONTO           reduce using rule 179 (primaryExpression -> callableReference .)
    LPAREN          reduce using rule 179 (primaryExpression -> callableReference .)
    LCHAVE          reduce using rule 179 (primaryExpression -> callableReference .)
    AS              reduce using rule 179 (primaryExpression -> callableReference .)
    MAISIGUAL       reduce using rule 179 (primaryExpression -> callableReference .)
    MENOSIGUAL      reduce using rule 179 (primaryExpression -> callableReference .)
    MULTIGUAL       reduce using rule 179 (primaryExpression -> callableReference .)
    DIVIGUAL        reduce using rule 179 (primaryExpression -> callableReference .)
    MODIGUAL        reduce using rule 179 (primaryExpression -> callableReference .)
    MULT            reduce using rule 179 (primaryExpression -> callableReference .)
    DIVIDE          reduce using rule 179 (primaryExpression -> callableReference .)
    MOD             reduce using rule 179 (primaryExpression -> callableReference .)
    PLUS            reduce using rule 179 (primaryExpression -> callableReference .)
    MINUS           reduce using rule 179 (primaryExpression -> callableReference .)
    PONTOPONTO      reduce using rule 179 (primaryExpression -> callableReference .)
    ID              reduce using rule 179 (primaryExpression -> callableReference .)
    CROSSINLINE     reduce using rule 179 (primaryExpression -> callableReference .)
    IMPORT          reduce using rule 179 (primaryExpression -> callableReference .)
    INIT            reduce using rule 179 (primaryExpression -> callableReference .)
    NOINLINE        reduce using rule 179 (primaryExpression -> callableReference .)
    OUT             reduce using rule 179 (primaryExpression -> callableReference .)
    VARARG          reduce using rule 179 (primaryExpression -> callableReference .)
    WHERE           reduce using rule 179 (primaryExpression -> callableReference .)
    OPERATOR        reduce using rule 179 (primaryExpression -> callableReference .)
    ELVIS           reduce using rule 179 (primaryExpression -> callableReference .)
    IN              reduce using rule 179 (primaryExpression -> callableReference .)
    NOT_IN          reduce using rule 179 (primaryExpression -> callableReference .)
    IS              reduce using rule 179 (primaryExpression -> callableReference .)
    NOT_IS          reduce using rule 179 (primaryExpression -> callableReference .)
    MAIOR           reduce using rule 179 (primaryExpression -> callableReference .)
    MENORIGUAL      reduce using rule 179 (primaryExpression -> callableReference .)
    MAIORIGUAL      reduce using rule 179 (primaryExpression -> callableReference .)
    DIFERENTE       reduce using rule 179 (primaryExpression -> callableReference .)
    IDENTIDADE      reduce using rule 179 (primaryExpression -> callableReference .)
    IGUALDADE       reduce using rule 179 (primaryExpression -> callableReference .)
    SEMIDENTIDADE   reduce using rule 179 (primaryExpression -> callableReference .)
    AND             reduce using rule 179 (primaryExpression -> callableReference .)
    OR              reduce using rule 179 (primaryExpression -> callableReference .)
    FUN             reduce using rule 179 (primaryExpression -> callableReference .)
    FOR             reduce using rule 179 (primaryExpression -> callableReference .)
    WHILE           reduce using rule 179 (primaryExpression -> callableReference .)
    DO              reduce using rule 179 (primaryExpression -> callableReference .)
    VAR             reduce using rule 179 (primaryExpression -> callableReference .)
    VAL             reduce using rule 179 (primaryExpression -> callableReference .)
    LITERAL_STRING  reduce using rule 179 (primaryExpression -> callableReference .)
    NUMBER          reduce using rule 179 (primaryExpression -> callableReference .)
    IF              reduce using rule 179 (primaryExpression -> callableReference .)
    RETURN          reduce using rule 179 (primaryExpression -> callableReference .)
    RETURN_AT       reduce using rule 179 (primaryExpression -> callableReference .)
    CONTINUE        reduce using rule 179 (primaryExpression -> callableReference .)
    CONTINUE_AT     reduce using rule 179 (primaryExpression -> callableReference .)
    BREAK           reduce using rule 179 (primaryExpression -> callableReference .)
    BREAK_AT        reduce using rule 179 (primaryExpression -> callableReference .)
    NOT             reduce using rule 179 (primaryExpression -> callableReference .)
    SUSPEND         reduce using rule 179 (primaryExpression -> callableReference .)
    RCHAVE          reduce using rule 179 (primaryExpression -> callableReference .)
    COMMA           reduce using rule 179 (primaryExpression -> callableReference .)
    RPAREN          reduce using rule 179 (primaryExpression -> callableReference .)
    RCCT            reduce using rule 179 (primaryExpression -> callableReference .)
    PV              reduce using rule 179 (primaryExpression -> callableReference .)
    ELSE            reduce using rule 179 (primaryExpression -> callableReference .)


state 79

    (180) primaryExpression -> functionLiteral .

    INCREMENTO      reduce using rule 180 (primaryExpression -> functionLiteral .)
    DECREMENTO      reduce using rule 180 (primaryExpression -> functionLiteral .)
    MENOR           reduce using rule 180 (primaryExpression -> functionLiteral .)
    LCCT            reduce using rule 180 (primaryExpression -> functionLiteral .)
    COLONCOLON      reduce using rule 180 (primaryExpression -> functionLiteral .)
    PONTO           reduce using rule 180 (primaryExpression -> functionLiteral .)
    LPAREN          reduce using rule 180 (primaryExpression -> functionLiteral .)
    LCHAVE          reduce using rule 180 (primaryExpression -> functionLiteral .)
    AS              reduce using rule 180 (primaryExpression -> functionLiteral .)
    MAISIGUAL       reduce using rule 180 (primaryExpression -> functionLiteral .)
    MENOSIGUAL      reduce using rule 180 (primaryExpression -> functionLiteral .)
    MULTIGUAL       reduce using rule 180 (primaryExpression -> functionLiteral .)
    DIVIGUAL        reduce using rule 180 (primaryExpression -> functionLiteral .)
    MODIGUAL        reduce using rule 180 (primaryExpression -> functionLiteral .)
    MULT            reduce using rule 180 (primaryExpression -> functionLiteral .)
    DIVIDE          reduce using rule 180 (primaryExpression -> functionLiteral .)
    MOD             reduce using rule 180 (primaryExpression -> functionLiteral .)
    PLUS            reduce using rule 180 (primaryExpression -> functionLiteral .)
    MINUS           reduce using rule 180 (primaryExpression -> functionLiteral .)
    PONTOPONTO      reduce using rule 180 (primaryExpression -> functionLiteral .)
    ID              reduce using rule 180 (primaryExpression -> functionLiteral .)
    CROSSINLINE     reduce using rule 180 (primaryExpression -> functionLiteral .)
    IMPORT          reduce using rule 180 (primaryExpression -> functionLiteral .)
    INIT            reduce using rule 180 (primaryExpression -> functionLiteral .)
    NOINLINE        reduce using rule 180 (primaryExpression -> functionLiteral .)
    OUT             reduce using rule 180 (primaryExpression -> functionLiteral .)
    VARARG          reduce using rule 180 (primaryExpression -> functionLiteral .)
    WHERE           reduce using rule 180 (primaryExpression -> functionLiteral .)
    OPERATOR        reduce using rule 180 (primaryExpression -> functionLiteral .)
    ELVIS           reduce using rule 180 (primaryExpression -> functionLiteral .)
    IN              reduce using rule 180 (primaryExpression -> functionLiteral .)
    NOT_IN          reduce using rule 180 (primaryExpression -> functionLiteral .)
    IS              reduce using rule 180 (primaryExpression -> functionLiteral .)
    NOT_IS          reduce using rule 180 (primaryExpression -> functionLiteral .)
    MAIOR           reduce using rule 180 (primaryExpression -> functionLiteral .)
    MENORIGUAL      reduce using rule 180 (primaryExpression -> functionLiteral .)
    MAIORIGUAL      reduce using rule 180 (primaryExpression -> functionLiteral .)
    DIFERENTE       reduce using rule 180 (primaryExpression -> functionLiteral .)
    IDENTIDADE      reduce using rule 180 (primaryExpression -> functionLiteral .)
    IGUALDADE       reduce using rule 180 (primaryExpression -> functionLiteral .)
    SEMIDENTIDADE   reduce using rule 180 (primaryExpression -> functionLiteral .)
    AND             reduce using rule 180 (primaryExpression -> functionLiteral .)
    OR              reduce using rule 180 (primaryExpression -> functionLiteral .)
    FUN             reduce using rule 180 (primaryExpression -> functionLiteral .)
    FOR             reduce using rule 180 (primaryExpression -> functionLiteral .)
    WHILE           reduce using rule 180 (primaryExpression -> functionLiteral .)
    DO              reduce using rule 180 (primaryExpression -> functionLiteral .)
    VAR             reduce using rule 180 (primaryExpression -> functionLiteral .)
    VAL             reduce using rule 180 (primaryExpression -> functionLiteral .)
    LITERAL_STRING  reduce using rule 180 (primaryExpression -> functionLiteral .)
    NUMBER          reduce using rule 180 (primaryExpression -> functionLiteral .)
    IF              reduce using rule 180 (primaryExpression -> functionLiteral .)
    RETURN          reduce using rule 180 (primaryExpression -> functionLiteral .)
    RETURN_AT       reduce using rule 180 (primaryExpression -> functionLiteral .)
    CONTINUE        reduce using rule 180 (primaryExpression -> functionLiteral .)
    CONTINUE_AT     reduce using rule 180 (primaryExpression -> functionLiteral .)
    BREAK           reduce using rule 180 (primaryExpression -> functionLiteral .)
    BREAK_AT        reduce using rule 180 (primaryExpression -> functionLiteral .)
    NOT             reduce using rule 180 (primaryExpression -> functionLiteral .)
    SUSPEND         reduce using rule 180 (primaryExpression -> functionLiteral .)
    RCHAVE          reduce using rule 180 (primaryExpression -> functionLiteral .)
    COMMA           reduce using rule 180 (primaryExpression -> functionLiteral .)
    RPAREN          reduce using rule 180 (primaryExpression -> functionLiteral .)
    RCCT            reduce using rule 180 (primaryExpression -> functionLiteral .)
    PV              reduce using rule 180 (primaryExpression -> functionLiteral .)
    ELSE            reduce using rule 180 (primaryExpression -> functionLiteral .)


state 80

    (181) primaryExpression -> collectionLiteral .

    INCREMENTO      reduce using rule 181 (primaryExpression -> collectionLiteral .)
    DECREMENTO      reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MENOR           reduce using rule 181 (primaryExpression -> collectionLiteral .)
    LCCT            reduce using rule 181 (primaryExpression -> collectionLiteral .)
    COLONCOLON      reduce using rule 181 (primaryExpression -> collectionLiteral .)
    PONTO           reduce using rule 181 (primaryExpression -> collectionLiteral .)
    LPAREN          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    LCHAVE          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    AS              reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MAISIGUAL       reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MENOSIGUAL      reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MULTIGUAL       reduce using rule 181 (primaryExpression -> collectionLiteral .)
    DIVIGUAL        reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MODIGUAL        reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MULT            reduce using rule 181 (primaryExpression -> collectionLiteral .)
    DIVIDE          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MOD             reduce using rule 181 (primaryExpression -> collectionLiteral .)
    PLUS            reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MINUS           reduce using rule 181 (primaryExpression -> collectionLiteral .)
    PONTOPONTO      reduce using rule 181 (primaryExpression -> collectionLiteral .)
    ID              reduce using rule 181 (primaryExpression -> collectionLiteral .)
    CROSSINLINE     reduce using rule 181 (primaryExpression -> collectionLiteral .)
    IMPORT          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    INIT            reduce using rule 181 (primaryExpression -> collectionLiteral .)
    NOINLINE        reduce using rule 181 (primaryExpression -> collectionLiteral .)
    OUT             reduce using rule 181 (primaryExpression -> collectionLiteral .)
    VARARG          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    WHERE           reduce using rule 181 (primaryExpression -> collectionLiteral .)
    OPERATOR        reduce using rule 181 (primaryExpression -> collectionLiteral .)
    ELVIS           reduce using rule 181 (primaryExpression -> collectionLiteral .)
    IN              reduce using rule 181 (primaryExpression -> collectionLiteral .)
    NOT_IN          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    IS              reduce using rule 181 (primaryExpression -> collectionLiteral .)
    NOT_IS          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MAIOR           reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MENORIGUAL      reduce using rule 181 (primaryExpression -> collectionLiteral .)
    MAIORIGUAL      reduce using rule 181 (primaryExpression -> collectionLiteral .)
    DIFERENTE       reduce using rule 181 (primaryExpression -> collectionLiteral .)
    IDENTIDADE      reduce using rule 181 (primaryExpression -> collectionLiteral .)
    IGUALDADE       reduce using rule 181 (primaryExpression -> collectionLiteral .)
    SEMIDENTIDADE   reduce using rule 181 (primaryExpression -> collectionLiteral .)
    AND             reduce using rule 181 (primaryExpression -> collectionLiteral .)
    OR              reduce using rule 181 (primaryExpression -> collectionLiteral .)
    FUN             reduce using rule 181 (primaryExpression -> collectionLiteral .)
    FOR             reduce using rule 181 (primaryExpression -> collectionLiteral .)
    WHILE           reduce using rule 181 (primaryExpression -> collectionLiteral .)
    DO              reduce using rule 181 (primaryExpression -> collectionLiteral .)
    VAR             reduce using rule 181 (primaryExpression -> collectionLiteral .)
    VAL             reduce using rule 181 (primaryExpression -> collectionLiteral .)
    LITERAL_STRING  reduce using rule 181 (primaryExpression -> collectionLiteral .)
    NUMBER          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    IF              reduce using rule 181 (primaryExpression -> collectionLiteral .)
    RETURN          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    RETURN_AT       reduce using rule 181 (primaryExpression -> collectionLiteral .)
    CONTINUE        reduce using rule 181 (primaryExpression -> collectionLiteral .)
    CONTINUE_AT     reduce using rule 181 (primaryExpression -> collectionLiteral .)
    BREAK           reduce using rule 181 (primaryExpression -> collectionLiteral .)
    BREAK_AT        reduce using rule 181 (primaryExpression -> collectionLiteral .)
    NOT             reduce using rule 181 (primaryExpression -> collectionLiteral .)
    SUSPEND         reduce using rule 181 (primaryExpression -> collectionLiteral .)
    RCHAVE          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    COMMA           reduce using rule 181 (primaryExpression -> collectionLiteral .)
    RPAREN          reduce using rule 181 (primaryExpression -> collectionLiteral .)
    RCCT            reduce using rule 181 (primaryExpression -> collectionLiteral .)
    PV              reduce using rule 181 (primaryExpression -> collectionLiteral .)
    ELSE            reduce using rule 181 (primaryExpression -> collectionLiteral .)


state 81

    (182) primaryExpression -> ifExpression .

    INCREMENTO      reduce using rule 182 (primaryExpression -> ifExpression .)
    DECREMENTO      reduce using rule 182 (primaryExpression -> ifExpression .)
    MENOR           reduce using rule 182 (primaryExpression -> ifExpression .)
    LCCT            reduce using rule 182 (primaryExpression -> ifExpression .)
    COLONCOLON      reduce using rule 182 (primaryExpression -> ifExpression .)
    PONTO           reduce using rule 182 (primaryExpression -> ifExpression .)
    LPAREN          reduce using rule 182 (primaryExpression -> ifExpression .)
    LCHAVE          reduce using rule 182 (primaryExpression -> ifExpression .)
    AS              reduce using rule 182 (primaryExpression -> ifExpression .)
    MAISIGUAL       reduce using rule 182 (primaryExpression -> ifExpression .)
    MENOSIGUAL      reduce using rule 182 (primaryExpression -> ifExpression .)
    MULTIGUAL       reduce using rule 182 (primaryExpression -> ifExpression .)
    DIVIGUAL        reduce using rule 182 (primaryExpression -> ifExpression .)
    MODIGUAL        reduce using rule 182 (primaryExpression -> ifExpression .)
    MULT            reduce using rule 182 (primaryExpression -> ifExpression .)
    DIVIDE          reduce using rule 182 (primaryExpression -> ifExpression .)
    MOD             reduce using rule 182 (primaryExpression -> ifExpression .)
    PLUS            reduce using rule 182 (primaryExpression -> ifExpression .)
    MINUS           reduce using rule 182 (primaryExpression -> ifExpression .)
    PONTOPONTO      reduce using rule 182 (primaryExpression -> ifExpression .)
    ID              reduce using rule 182 (primaryExpression -> ifExpression .)
    CROSSINLINE     reduce using rule 182 (primaryExpression -> ifExpression .)
    IMPORT          reduce using rule 182 (primaryExpression -> ifExpression .)
    INIT            reduce using rule 182 (primaryExpression -> ifExpression .)
    NOINLINE        reduce using rule 182 (primaryExpression -> ifExpression .)
    OUT             reduce using rule 182 (primaryExpression -> ifExpression .)
    VARARG          reduce using rule 182 (primaryExpression -> ifExpression .)
    WHERE           reduce using rule 182 (primaryExpression -> ifExpression .)
    OPERATOR        reduce using rule 182 (primaryExpression -> ifExpression .)
    ELVIS           reduce using rule 182 (primaryExpression -> ifExpression .)
    IN              reduce using rule 182 (primaryExpression -> ifExpression .)
    NOT_IN          reduce using rule 182 (primaryExpression -> ifExpression .)
    IS              reduce using rule 182 (primaryExpression -> ifExpression .)
    NOT_IS          reduce using rule 182 (primaryExpression -> ifExpression .)
    MAIOR           reduce using rule 182 (primaryExpression -> ifExpression .)
    MENORIGUAL      reduce using rule 182 (primaryExpression -> ifExpression .)
    MAIORIGUAL      reduce using rule 182 (primaryExpression -> ifExpression .)
    DIFERENTE       reduce using rule 182 (primaryExpression -> ifExpression .)
    IDENTIDADE      reduce using rule 182 (primaryExpression -> ifExpression .)
    IGUALDADE       reduce using rule 182 (primaryExpression -> ifExpression .)
    SEMIDENTIDADE   reduce using rule 182 (primaryExpression -> ifExpression .)
    AND             reduce using rule 182 (primaryExpression -> ifExpression .)
    OR              reduce using rule 182 (primaryExpression -> ifExpression .)
    FUN             reduce using rule 182 (primaryExpression -> ifExpression .)
    FOR             reduce using rule 182 (primaryExpression -> ifExpression .)
    WHILE           reduce using rule 182 (primaryExpression -> ifExpression .)
    DO              reduce using rule 182 (primaryExpression -> ifExpression .)
    VAR             reduce using rule 182 (primaryExpression -> ifExpression .)
    VAL             reduce using rule 182 (primaryExpression -> ifExpression .)
    LITERAL_STRING  reduce using rule 182 (primaryExpression -> ifExpression .)
    NUMBER          reduce using rule 182 (primaryExpression -> ifExpression .)
    IF              reduce using rule 182 (primaryExpression -> ifExpression .)
    RETURN          reduce using rule 182 (primaryExpression -> ifExpression .)
    RETURN_AT       reduce using rule 182 (primaryExpression -> ifExpression .)
    CONTINUE        reduce using rule 182 (primaryExpression -> ifExpression .)
    CONTINUE_AT     reduce using rule 182 (primaryExpression -> ifExpression .)
    BREAK           reduce using rule 182 (primaryExpression -> ifExpression .)
    BREAK_AT        reduce using rule 182 (primaryExpression -> ifExpression .)
    NOT             reduce using rule 182 (primaryExpression -> ifExpression .)
    SUSPEND         reduce using rule 182 (primaryExpression -> ifExpression .)
    RCHAVE          reduce using rule 182 (primaryExpression -> ifExpression .)
    COMMA           reduce using rule 182 (primaryExpression -> ifExpression .)
    RPAREN          reduce using rule 182 (primaryExpression -> ifExpression .)
    RCCT            reduce using rule 182 (primaryExpression -> ifExpression .)
    PV              reduce using rule 182 (primaryExpression -> ifExpression .)
    ELSE            reduce using rule 182 (primaryExpression -> ifExpression .)


state 82

    (183) primaryExpression -> jumpExpression .

    INCREMENTO      reduce using rule 183 (primaryExpression -> jumpExpression .)
    DECREMENTO      reduce using rule 183 (primaryExpression -> jumpExpression .)
    MENOR           reduce using rule 183 (primaryExpression -> jumpExpression .)
    LCCT            reduce using rule 183 (primaryExpression -> jumpExpression .)
    COLONCOLON      reduce using rule 183 (primaryExpression -> jumpExpression .)
    PONTO           reduce using rule 183 (primaryExpression -> jumpExpression .)
    LPAREN          reduce using rule 183 (primaryExpression -> jumpExpression .)
    LCHAVE          reduce using rule 183 (primaryExpression -> jumpExpression .)
    AS              reduce using rule 183 (primaryExpression -> jumpExpression .)
    MAISIGUAL       reduce using rule 183 (primaryExpression -> jumpExpression .)
    MENOSIGUAL      reduce using rule 183 (primaryExpression -> jumpExpression .)
    MULTIGUAL       reduce using rule 183 (primaryExpression -> jumpExpression .)
    DIVIGUAL        reduce using rule 183 (primaryExpression -> jumpExpression .)
    MODIGUAL        reduce using rule 183 (primaryExpression -> jumpExpression .)
    MULT            reduce using rule 183 (primaryExpression -> jumpExpression .)
    DIVIDE          reduce using rule 183 (primaryExpression -> jumpExpression .)
    MOD             reduce using rule 183 (primaryExpression -> jumpExpression .)
    PLUS            reduce using rule 183 (primaryExpression -> jumpExpression .)
    MINUS           reduce using rule 183 (primaryExpression -> jumpExpression .)
    PONTOPONTO      reduce using rule 183 (primaryExpression -> jumpExpression .)
    ID              reduce using rule 183 (primaryExpression -> jumpExpression .)
    CROSSINLINE     reduce using rule 183 (primaryExpression -> jumpExpression .)
    IMPORT          reduce using rule 183 (primaryExpression -> jumpExpression .)
    INIT            reduce using rule 183 (primaryExpression -> jumpExpression .)
    NOINLINE        reduce using rule 183 (primaryExpression -> jumpExpression .)
    OUT             reduce using rule 183 (primaryExpression -> jumpExpression .)
    VARARG          reduce using rule 183 (primaryExpression -> jumpExpression .)
    WHERE           reduce using rule 183 (primaryExpression -> jumpExpression .)
    OPERATOR        reduce using rule 183 (primaryExpression -> jumpExpression .)
    ELVIS           reduce using rule 183 (primaryExpression -> jumpExpression .)
    IN              reduce using rule 183 (primaryExpression -> jumpExpression .)
    NOT_IN          reduce using rule 183 (primaryExpression -> jumpExpression .)
    IS              reduce using rule 183 (primaryExpression -> jumpExpression .)
    NOT_IS          reduce using rule 183 (primaryExpression -> jumpExpression .)
    MAIOR           reduce using rule 183 (primaryExpression -> jumpExpression .)
    MENORIGUAL      reduce using rule 183 (primaryExpression -> jumpExpression .)
    MAIORIGUAL      reduce using rule 183 (primaryExpression -> jumpExpression .)
    DIFERENTE       reduce using rule 183 (primaryExpression -> jumpExpression .)
    IDENTIDADE      reduce using rule 183 (primaryExpression -> jumpExpression .)
    IGUALDADE       reduce using rule 183 (primaryExpression -> jumpExpression .)
    SEMIDENTIDADE   reduce using rule 183 (primaryExpression -> jumpExpression .)
    AND             reduce using rule 183 (primaryExpression -> jumpExpression .)
    OR              reduce using rule 183 (primaryExpression -> jumpExpression .)
    FUN             reduce using rule 183 (primaryExpression -> jumpExpression .)
    FOR             reduce using rule 183 (primaryExpression -> jumpExpression .)
    WHILE           reduce using rule 183 (primaryExpression -> jumpExpression .)
    DO              reduce using rule 183 (primaryExpression -> jumpExpression .)
    VAR             reduce using rule 183 (primaryExpression -> jumpExpression .)
    VAL             reduce using rule 183 (primaryExpression -> jumpExpression .)
    LITERAL_STRING  reduce using rule 183 (primaryExpression -> jumpExpression .)
    NUMBER          reduce using rule 183 (primaryExpression -> jumpExpression .)
    IF              reduce using rule 183 (primaryExpression -> jumpExpression .)
    RETURN          reduce using rule 183 (primaryExpression -> jumpExpression .)
    RETURN_AT       reduce using rule 183 (primaryExpression -> jumpExpression .)
    CONTINUE        reduce using rule 183 (primaryExpression -> jumpExpression .)
    CONTINUE_AT     reduce using rule 183 (primaryExpression -> jumpExpression .)
    BREAK           reduce using rule 183 (primaryExpression -> jumpExpression .)
    BREAK_AT        reduce using rule 183 (primaryExpression -> jumpExpression .)
    NOT             reduce using rule 183 (primaryExpression -> jumpExpression .)
    SUSPEND         reduce using rule 183 (primaryExpression -> jumpExpression .)
    RCHAVE          reduce using rule 183 (primaryExpression -> jumpExpression .)
    COMMA           reduce using rule 183 (primaryExpression -> jumpExpression .)
    RPAREN          reduce using rule 183 (primaryExpression -> jumpExpression .)
    RCCT            reduce using rule 183 (primaryExpression -> jumpExpression .)
    PV              reduce using rule 183 (primaryExpression -> jumpExpression .)
    ELSE            reduce using rule 183 (primaryExpression -> jumpExpression .)


state 83

    (130) prefixUnaryExpressionRecursive -> unaryPrefix .
    (131) prefixUnaryExpressionRecursive -> unaryPrefix . prefixUnaryExpressionRecursive
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
    LITERAL_STRING  reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    NUMBER          reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    LPAREN          reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    LCCT            reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    IF              reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    RETURN          reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    RETURN_AT       reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    CONTINUE        reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    CONTINUE_AT     reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    BREAK           reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    BREAK_AT        reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    LCHAVE          reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    FUN             reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    SUSPEND         reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    COLONCOLON      reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .)
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

  ! ID              [ reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! CROSSINLINE     [ reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! IMPORT          [ reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! INIT            [ reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! NOINLINE        [ reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! OUT             [ reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! VARARG          [ reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! WHERE           [ reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]
  ! OPERATOR        [ reduce using rule 130 (prefixUnaryExpressionRecursive -> unaryPrefix .) ]

    unaryPrefix                    shift and go to state 83
    prefixUnaryExpressionRecursive shift and go to state 195
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    simpleIdentifier               shift and go to state 196

state 84

    (102) equality -> comparison .
    (103) equality -> comparison . equalityOperator equality
    (239) equalityOperator -> . DIFERENTE
    (240) equalityOperator -> . IDENTIDADE
    (241) equalityOperator -> . IGUALDADE
    (242) equalityOperator -> . SEMIDENTIDADE

  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for IDENTIDADE resolved as shift
  ! shift/reduce conflict for IGUALDADE resolved as shift
  ! shift/reduce conflict for SEMIDENTIDADE resolved as shift
    AND             reduce using rule 102 (equality -> comparison .)
    OR              reduce using rule 102 (equality -> comparison .)
    LPAREN          reduce using rule 102 (equality -> comparison .)
    FUN             reduce using rule 102 (equality -> comparison .)
    FOR             reduce using rule 102 (equality -> comparison .)
    WHILE           reduce using rule 102 (equality -> comparison .)
    DO              reduce using rule 102 (equality -> comparison .)
    VAR             reduce using rule 102 (equality -> comparison .)
    VAL             reduce using rule 102 (equality -> comparison .)
    ID              reduce using rule 102 (equality -> comparison .)
    CROSSINLINE     reduce using rule 102 (equality -> comparison .)
    IMPORT          reduce using rule 102 (equality -> comparison .)
    INIT            reduce using rule 102 (equality -> comparison .)
    NOINLINE        reduce using rule 102 (equality -> comparison .)
    OUT             reduce using rule 102 (equality -> comparison .)
    VARARG          reduce using rule 102 (equality -> comparison .)
    WHERE           reduce using rule 102 (equality -> comparison .)
    OPERATOR        reduce using rule 102 (equality -> comparison .)
    LITERAL_STRING  reduce using rule 102 (equality -> comparison .)
    NUMBER          reduce using rule 102 (equality -> comparison .)
    LCCT            reduce using rule 102 (equality -> comparison .)
    IF              reduce using rule 102 (equality -> comparison .)
    RETURN          reduce using rule 102 (equality -> comparison .)
    RETURN_AT       reduce using rule 102 (equality -> comparison .)
    CONTINUE        reduce using rule 102 (equality -> comparison .)
    CONTINUE_AT     reduce using rule 102 (equality -> comparison .)
    BREAK           reduce using rule 102 (equality -> comparison .)
    BREAK_AT        reduce using rule 102 (equality -> comparison .)
    LCHAVE          reduce using rule 102 (equality -> comparison .)
    INCREMENTO      reduce using rule 102 (equality -> comparison .)
    DECREMENTO      reduce using rule 102 (equality -> comparison .)
    MINUS           reduce using rule 102 (equality -> comparison .)
    PLUS            reduce using rule 102 (equality -> comparison .)
    NOT             reduce using rule 102 (equality -> comparison .)
    SUSPEND         reduce using rule 102 (equality -> comparison .)
    COLONCOLON      reduce using rule 102 (equality -> comparison .)
    RCHAVE          reduce using rule 102 (equality -> comparison .)
    COMMA           reduce using rule 102 (equality -> comparison .)
    RPAREN          reduce using rule 102 (equality -> comparison .)
    RCCT            reduce using rule 102 (equality -> comparison .)
    MENOR           reduce using rule 102 (equality -> comparison .)
    PONTO           reduce using rule 102 (equality -> comparison .)
    AS              reduce using rule 102 (equality -> comparison .)
    MAISIGUAL       reduce using rule 102 (equality -> comparison .)
    MENOSIGUAL      reduce using rule 102 (equality -> comparison .)
    MULTIGUAL       reduce using rule 102 (equality -> comparison .)
    DIVIGUAL        reduce using rule 102 (equality -> comparison .)
    MODIGUAL        reduce using rule 102 (equality -> comparison .)
    MULT            reduce using rule 102 (equality -> comparison .)
    DIVIDE          reduce using rule 102 (equality -> comparison .)
    MOD             reduce using rule 102 (equality -> comparison .)
    PONTOPONTO      reduce using rule 102 (equality -> comparison .)
    ELVIS           reduce using rule 102 (equality -> comparison .)
    IN              reduce using rule 102 (equality -> comparison .)
    NOT_IN          reduce using rule 102 (equality -> comparison .)
    IS              reduce using rule 102 (equality -> comparison .)
    NOT_IS          reduce using rule 102 (equality -> comparison .)
    MAIOR           reduce using rule 102 (equality -> comparison .)
    MENORIGUAL      reduce using rule 102 (equality -> comparison .)
    MAIORIGUAL      reduce using rule 102 (equality -> comparison .)
    PV              reduce using rule 102 (equality -> comparison .)
    ELSE            reduce using rule 102 (equality -> comparison .)
    DIFERENTE       shift and go to state 198
    IDENTIDADE      shift and go to state 199
    IGUALDADE       shift and go to state 200
    SEMIDENTIDADE   shift and go to state 201

  ! DIFERENTE       [ reduce using rule 102 (equality -> comparison .) ]
  ! IDENTIDADE      [ reduce using rule 102 (equality -> comparison .) ]
  ! IGUALDADE       [ reduce using rule 102 (equality -> comparison .) ]
  ! SEMIDENTIDADE   [ reduce using rule 102 (equality -> comparison .) ]

    equalityOperator               shift and go to state 197

state 85

    (229) callableReference -> optionalReceiverType . COLONCOLON simpleIdentifierOrClass

    COLONCOLON      shift and go to state 202


state 86

    (214) functionLiteral -> lambdaLiteral .

    INCREMENTO      reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    DECREMENTO      reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MENOR           reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    LCCT            reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    COLONCOLON      reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    PONTO           reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    LPAREN          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    LCHAVE          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    AS              reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MAISIGUAL       reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MENOSIGUAL      reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MODIGUAL        reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MULT            reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    DIVIDE          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MOD             reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    PLUS            reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MINUS           reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    ID              reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    IMPORT          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    INIT            reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    NOINLINE        reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    OUT             reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    VARARG          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    WHERE           reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    OPERATOR        reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    ELVIS           reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    IN              reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    NOT_IN          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    IS              reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    NOT_IS          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MAIOR           reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    DIFERENTE       reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    IGUALDADE       reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    AND             reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    OR              reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    FUN             reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    FOR             reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    WHILE           reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    DO              reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    VAR             reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    VAL             reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    NUMBER          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    IF              reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    RETURN          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    RETURN_AT       reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    CONTINUE        reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    BREAK           reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    BREAK_AT        reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    NOT             reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    SUSPEND         reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    RCHAVE          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    COMMA           reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    RPAREN          reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    RCCT            reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    PV              reduce using rule 214 (functionLiteral -> lambdaLiteral .)
    ELSE            reduce using rule 214 (functionLiteral -> lambdaLiteral .)


state 87

    (215) functionLiteral -> anonymousFunction .

    INCREMENTO      reduce using rule 215 (functionLiteral -> anonymousFunction .)
    DECREMENTO      reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MENOR           reduce using rule 215 (functionLiteral -> anonymousFunction .)
    LCCT            reduce using rule 215 (functionLiteral -> anonymousFunction .)
    COLONCOLON      reduce using rule 215 (functionLiteral -> anonymousFunction .)
    PONTO           reduce using rule 215 (functionLiteral -> anonymousFunction .)
    LPAREN          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    LCHAVE          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    AS              reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MAISIGUAL       reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MENOSIGUAL      reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MULTIGUAL       reduce using rule 215 (functionLiteral -> anonymousFunction .)
    DIVIGUAL        reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MODIGUAL        reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MULT            reduce using rule 215 (functionLiteral -> anonymousFunction .)
    DIVIDE          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MOD             reduce using rule 215 (functionLiteral -> anonymousFunction .)
    PLUS            reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MINUS           reduce using rule 215 (functionLiteral -> anonymousFunction .)
    PONTOPONTO      reduce using rule 215 (functionLiteral -> anonymousFunction .)
    ID              reduce using rule 215 (functionLiteral -> anonymousFunction .)
    CROSSINLINE     reduce using rule 215 (functionLiteral -> anonymousFunction .)
    IMPORT          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    INIT            reduce using rule 215 (functionLiteral -> anonymousFunction .)
    NOINLINE        reduce using rule 215 (functionLiteral -> anonymousFunction .)
    OUT             reduce using rule 215 (functionLiteral -> anonymousFunction .)
    VARARG          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    WHERE           reduce using rule 215 (functionLiteral -> anonymousFunction .)
    OPERATOR        reduce using rule 215 (functionLiteral -> anonymousFunction .)
    ELVIS           reduce using rule 215 (functionLiteral -> anonymousFunction .)
    IN              reduce using rule 215 (functionLiteral -> anonymousFunction .)
    NOT_IN          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    IS              reduce using rule 215 (functionLiteral -> anonymousFunction .)
    NOT_IS          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MAIOR           reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MENORIGUAL      reduce using rule 215 (functionLiteral -> anonymousFunction .)
    MAIORIGUAL      reduce using rule 215 (functionLiteral -> anonymousFunction .)
    DIFERENTE       reduce using rule 215 (functionLiteral -> anonymousFunction .)
    IDENTIDADE      reduce using rule 215 (functionLiteral -> anonymousFunction .)
    IGUALDADE       reduce using rule 215 (functionLiteral -> anonymousFunction .)
    SEMIDENTIDADE   reduce using rule 215 (functionLiteral -> anonymousFunction .)
    AND             reduce using rule 215 (functionLiteral -> anonymousFunction .)
    OR              reduce using rule 215 (functionLiteral -> anonymousFunction .)
    FUN             reduce using rule 215 (functionLiteral -> anonymousFunction .)
    FOR             reduce using rule 215 (functionLiteral -> anonymousFunction .)
    WHILE           reduce using rule 215 (functionLiteral -> anonymousFunction .)
    DO              reduce using rule 215 (functionLiteral -> anonymousFunction .)
    VAR             reduce using rule 215 (functionLiteral -> anonymousFunction .)
    VAL             reduce using rule 215 (functionLiteral -> anonymousFunction .)
    LITERAL_STRING  reduce using rule 215 (functionLiteral -> anonymousFunction .)
    NUMBER          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    IF              reduce using rule 215 (functionLiteral -> anonymousFunction .)
    RETURN          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    RETURN_AT       reduce using rule 215 (functionLiteral -> anonymousFunction .)
    CONTINUE        reduce using rule 215 (functionLiteral -> anonymousFunction .)
    CONTINUE_AT     reduce using rule 215 (functionLiteral -> anonymousFunction .)
    BREAK           reduce using rule 215 (functionLiteral -> anonymousFunction .)
    BREAK_AT        reduce using rule 215 (functionLiteral -> anonymousFunction .)
    NOT             reduce using rule 215 (functionLiteral -> anonymousFunction .)
    SUSPEND         reduce using rule 215 (functionLiteral -> anonymousFunction .)
    RCHAVE          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    COMMA           reduce using rule 215 (functionLiteral -> anonymousFunction .)
    RPAREN          reduce using rule 215 (functionLiteral -> anonymousFunction .)
    RCCT            reduce using rule 215 (functionLiteral -> anonymousFunction .)
    PV              reduce using rule 215 (functionLiteral -> anonymousFunction .)
    ELSE            reduce using rule 215 (functionLiteral -> anonymousFunction .)


state 88

    (185) collectionLiteral -> LCCT . collectionLiteralRecursive RCCT
    (186) collectionLiteral -> LCCT . RCCT
    (187) collectionLiteralRecursive -> . expression
    (188) collectionLiteralRecursive -> . expression COMMA collectionLiteralRecursive
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    RCCT            shift and go to state 204
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    collectionLiteralRecursive     shift and go to state 203
    expression                     shift and go to state 205
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 89

    (217) ifExpression -> IF . LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> IF . LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV

    LPAREN          shift and go to state 206


state 90

    (223) jumpExpression -> RETURN . expression
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 207
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 91

    (224) jumpExpression -> RETURN_AT . expression
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 208
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 92

    (225) jumpExpression -> CONTINUE .

    INCREMENTO      reduce using rule 225 (jumpExpression -> CONTINUE .)
    DECREMENTO      reduce using rule 225 (jumpExpression -> CONTINUE .)
    MENOR           reduce using rule 225 (jumpExpression -> CONTINUE .)
    LCCT            reduce using rule 225 (jumpExpression -> CONTINUE .)
    COLONCOLON      reduce using rule 225 (jumpExpression -> CONTINUE .)
    PONTO           reduce using rule 225 (jumpExpression -> CONTINUE .)
    LPAREN          reduce using rule 225 (jumpExpression -> CONTINUE .)
    LCHAVE          reduce using rule 225 (jumpExpression -> CONTINUE .)
    AS              reduce using rule 225 (jumpExpression -> CONTINUE .)
    MAISIGUAL       reduce using rule 225 (jumpExpression -> CONTINUE .)
    MENOSIGUAL      reduce using rule 225 (jumpExpression -> CONTINUE .)
    MULTIGUAL       reduce using rule 225 (jumpExpression -> CONTINUE .)
    DIVIGUAL        reduce using rule 225 (jumpExpression -> CONTINUE .)
    MODIGUAL        reduce using rule 225 (jumpExpression -> CONTINUE .)
    MULT            reduce using rule 225 (jumpExpression -> CONTINUE .)
    DIVIDE          reduce using rule 225 (jumpExpression -> CONTINUE .)
    MOD             reduce using rule 225 (jumpExpression -> CONTINUE .)
    PLUS            reduce using rule 225 (jumpExpression -> CONTINUE .)
    MINUS           reduce using rule 225 (jumpExpression -> CONTINUE .)
    PONTOPONTO      reduce using rule 225 (jumpExpression -> CONTINUE .)
    ID              reduce using rule 225 (jumpExpression -> CONTINUE .)
    CROSSINLINE     reduce using rule 225 (jumpExpression -> CONTINUE .)
    IMPORT          reduce using rule 225 (jumpExpression -> CONTINUE .)
    INIT            reduce using rule 225 (jumpExpression -> CONTINUE .)
    NOINLINE        reduce using rule 225 (jumpExpression -> CONTINUE .)
    OUT             reduce using rule 225 (jumpExpression -> CONTINUE .)
    VARARG          reduce using rule 225 (jumpExpression -> CONTINUE .)
    WHERE           reduce using rule 225 (jumpExpression -> CONTINUE .)
    OPERATOR        reduce using rule 225 (jumpExpression -> CONTINUE .)
    ELVIS           reduce using rule 225 (jumpExpression -> CONTINUE .)
    IN              reduce using rule 225 (jumpExpression -> CONTINUE .)
    NOT_IN          reduce using rule 225 (jumpExpression -> CONTINUE .)
    IS              reduce using rule 225 (jumpExpression -> CONTINUE .)
    NOT_IS          reduce using rule 225 (jumpExpression -> CONTINUE .)
    MAIOR           reduce using rule 225 (jumpExpression -> CONTINUE .)
    MENORIGUAL      reduce using rule 225 (jumpExpression -> CONTINUE .)
    MAIORIGUAL      reduce using rule 225 (jumpExpression -> CONTINUE .)
    DIFERENTE       reduce using rule 225 (jumpExpression -> CONTINUE .)
    IDENTIDADE      reduce using rule 225 (jumpExpression -> CONTINUE .)
    IGUALDADE       reduce using rule 225 (jumpExpression -> CONTINUE .)
    SEMIDENTIDADE   reduce using rule 225 (jumpExpression -> CONTINUE .)
    AND             reduce using rule 225 (jumpExpression -> CONTINUE .)
    OR              reduce using rule 225 (jumpExpression -> CONTINUE .)
    FUN             reduce using rule 225 (jumpExpression -> CONTINUE .)
    FOR             reduce using rule 225 (jumpExpression -> CONTINUE .)
    WHILE           reduce using rule 225 (jumpExpression -> CONTINUE .)
    DO              reduce using rule 225 (jumpExpression -> CONTINUE .)
    VAR             reduce using rule 225 (jumpExpression -> CONTINUE .)
    VAL             reduce using rule 225 (jumpExpression -> CONTINUE .)
    LITERAL_STRING  reduce using rule 225 (jumpExpression -> CONTINUE .)
    NUMBER          reduce using rule 225 (jumpExpression -> CONTINUE .)
    IF              reduce using rule 225 (jumpExpression -> CONTINUE .)
    RETURN          reduce using rule 225 (jumpExpression -> CONTINUE .)
    RETURN_AT       reduce using rule 225 (jumpExpression -> CONTINUE .)
    CONTINUE        reduce using rule 225 (jumpExpression -> CONTINUE .)
    CONTINUE_AT     reduce using rule 225 (jumpExpression -> CONTINUE .)
    BREAK           reduce using rule 225 (jumpExpression -> CONTINUE .)
    BREAK_AT        reduce using rule 225 (jumpExpression -> CONTINUE .)
    NOT             reduce using rule 225 (jumpExpression -> CONTINUE .)
    SUSPEND         reduce using rule 225 (jumpExpression -> CONTINUE .)
    RCHAVE          reduce using rule 225 (jumpExpression -> CONTINUE .)
    COMMA           reduce using rule 225 (jumpExpression -> CONTINUE .)
    RPAREN          reduce using rule 225 (jumpExpression -> CONTINUE .)
    RCCT            reduce using rule 225 (jumpExpression -> CONTINUE .)
    PV              reduce using rule 225 (jumpExpression -> CONTINUE .)
    ELSE            reduce using rule 225 (jumpExpression -> CONTINUE .)


state 93

    (226) jumpExpression -> CONTINUE_AT .

    INCREMENTO      reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    DECREMENTO      reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MENOR           reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    LCCT            reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    COLONCOLON      reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    PONTO           reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    LPAREN          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    LCHAVE          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    AS              reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MAISIGUAL       reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MENOSIGUAL      reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MULTIGUAL       reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    DIVIGUAL        reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MODIGUAL        reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MULT            reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    DIVIDE          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MOD             reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    PLUS            reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MINUS           reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    PONTOPONTO      reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    ID              reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    CROSSINLINE     reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    IMPORT          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    INIT            reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    NOINLINE        reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    OUT             reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    VARARG          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    WHERE           reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    OPERATOR        reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    ELVIS           reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    IN              reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    NOT_IN          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    IS              reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    NOT_IS          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MAIOR           reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MENORIGUAL      reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    MAIORIGUAL      reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    DIFERENTE       reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    IDENTIDADE      reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    IGUALDADE       reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    SEMIDENTIDADE   reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    AND             reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    OR              reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    FUN             reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    FOR             reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    WHILE           reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    DO              reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    VAR             reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    VAL             reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    LITERAL_STRING  reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    NUMBER          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    IF              reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    RETURN          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    RETURN_AT       reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    CONTINUE        reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    CONTINUE_AT     reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    BREAK           reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    BREAK_AT        reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    NOT             reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    SUSPEND         reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    RCHAVE          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    COMMA           reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    RPAREN          reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    RCCT            reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    PV              reduce using rule 226 (jumpExpression -> CONTINUE_AT .)
    ELSE            reduce using rule 226 (jumpExpression -> CONTINUE_AT .)


state 94

    (227) jumpExpression -> BREAK .

    INCREMENTO      reduce using rule 227 (jumpExpression -> BREAK .)
    DECREMENTO      reduce using rule 227 (jumpExpression -> BREAK .)
    MENOR           reduce using rule 227 (jumpExpression -> BREAK .)
    LCCT            reduce using rule 227 (jumpExpression -> BREAK .)
    COLONCOLON      reduce using rule 227 (jumpExpression -> BREAK .)
    PONTO           reduce using rule 227 (jumpExpression -> BREAK .)
    LPAREN          reduce using rule 227 (jumpExpression -> BREAK .)
    LCHAVE          reduce using rule 227 (jumpExpression -> BREAK .)
    AS              reduce using rule 227 (jumpExpression -> BREAK .)
    MAISIGUAL       reduce using rule 227 (jumpExpression -> BREAK .)
    MENOSIGUAL      reduce using rule 227 (jumpExpression -> BREAK .)
    MULTIGUAL       reduce using rule 227 (jumpExpression -> BREAK .)
    DIVIGUAL        reduce using rule 227 (jumpExpression -> BREAK .)
    MODIGUAL        reduce using rule 227 (jumpExpression -> BREAK .)
    MULT            reduce using rule 227 (jumpExpression -> BREAK .)
    DIVIDE          reduce using rule 227 (jumpExpression -> BREAK .)
    MOD             reduce using rule 227 (jumpExpression -> BREAK .)
    PLUS            reduce using rule 227 (jumpExpression -> BREAK .)
    MINUS           reduce using rule 227 (jumpExpression -> BREAK .)
    PONTOPONTO      reduce using rule 227 (jumpExpression -> BREAK .)
    ID              reduce using rule 227 (jumpExpression -> BREAK .)
    CROSSINLINE     reduce using rule 227 (jumpExpression -> BREAK .)
    IMPORT          reduce using rule 227 (jumpExpression -> BREAK .)
    INIT            reduce using rule 227 (jumpExpression -> BREAK .)
    NOINLINE        reduce using rule 227 (jumpExpression -> BREAK .)
    OUT             reduce using rule 227 (jumpExpression -> BREAK .)
    VARARG          reduce using rule 227 (jumpExpression -> BREAK .)
    WHERE           reduce using rule 227 (jumpExpression -> BREAK .)
    OPERATOR        reduce using rule 227 (jumpExpression -> BREAK .)
    ELVIS           reduce using rule 227 (jumpExpression -> BREAK .)
    IN              reduce using rule 227 (jumpExpression -> BREAK .)
    NOT_IN          reduce using rule 227 (jumpExpression -> BREAK .)
    IS              reduce using rule 227 (jumpExpression -> BREAK .)
    NOT_IS          reduce using rule 227 (jumpExpression -> BREAK .)
    MAIOR           reduce using rule 227 (jumpExpression -> BREAK .)
    MENORIGUAL      reduce using rule 227 (jumpExpression -> BREAK .)
    MAIORIGUAL      reduce using rule 227 (jumpExpression -> BREAK .)
    DIFERENTE       reduce using rule 227 (jumpExpression -> BREAK .)
    IDENTIDADE      reduce using rule 227 (jumpExpression -> BREAK .)
    IGUALDADE       reduce using rule 227 (jumpExpression -> BREAK .)
    SEMIDENTIDADE   reduce using rule 227 (jumpExpression -> BREAK .)
    AND             reduce using rule 227 (jumpExpression -> BREAK .)
    OR              reduce using rule 227 (jumpExpression -> BREAK .)
    FUN             reduce using rule 227 (jumpExpression -> BREAK .)
    FOR             reduce using rule 227 (jumpExpression -> BREAK .)
    WHILE           reduce using rule 227 (jumpExpression -> BREAK .)
    DO              reduce using rule 227 (jumpExpression -> BREAK .)
    VAR             reduce using rule 227 (jumpExpression -> BREAK .)
    VAL             reduce using rule 227 (jumpExpression -> BREAK .)
    LITERAL_STRING  reduce using rule 227 (jumpExpression -> BREAK .)
    NUMBER          reduce using rule 227 (jumpExpression -> BREAK .)
    IF              reduce using rule 227 (jumpExpression -> BREAK .)
    RETURN          reduce using rule 227 (jumpExpression -> BREAK .)
    RETURN_AT       reduce using rule 227 (jumpExpression -> BREAK .)
    CONTINUE        reduce using rule 227 (jumpExpression -> BREAK .)
    CONTINUE_AT     reduce using rule 227 (jumpExpression -> BREAK .)
    BREAK           reduce using rule 227 (jumpExpression -> BREAK .)
    BREAK_AT        reduce using rule 227 (jumpExpression -> BREAK .)
    NOT             reduce using rule 227 (jumpExpression -> BREAK .)
    SUSPEND         reduce using rule 227 (jumpExpression -> BREAK .)
    RCHAVE          reduce using rule 227 (jumpExpression -> BREAK .)
    COMMA           reduce using rule 227 (jumpExpression -> BREAK .)
    RPAREN          reduce using rule 227 (jumpExpression -> BREAK .)
    RCCT            reduce using rule 227 (jumpExpression -> BREAK .)
    PV              reduce using rule 227 (jumpExpression -> BREAK .)
    ELSE            reduce using rule 227 (jumpExpression -> BREAK .)


state 95

    (228) jumpExpression -> BREAK_AT .

    INCREMENTO      reduce using rule 228 (jumpExpression -> BREAK_AT .)
    DECREMENTO      reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MENOR           reduce using rule 228 (jumpExpression -> BREAK_AT .)
    LCCT            reduce using rule 228 (jumpExpression -> BREAK_AT .)
    COLONCOLON      reduce using rule 228 (jumpExpression -> BREAK_AT .)
    PONTO           reduce using rule 228 (jumpExpression -> BREAK_AT .)
    LPAREN          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    LCHAVE          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    AS              reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MAISIGUAL       reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MENOSIGUAL      reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MULTIGUAL       reduce using rule 228 (jumpExpression -> BREAK_AT .)
    DIVIGUAL        reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MODIGUAL        reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MULT            reduce using rule 228 (jumpExpression -> BREAK_AT .)
    DIVIDE          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MOD             reduce using rule 228 (jumpExpression -> BREAK_AT .)
    PLUS            reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MINUS           reduce using rule 228 (jumpExpression -> BREAK_AT .)
    PONTOPONTO      reduce using rule 228 (jumpExpression -> BREAK_AT .)
    ID              reduce using rule 228 (jumpExpression -> BREAK_AT .)
    CROSSINLINE     reduce using rule 228 (jumpExpression -> BREAK_AT .)
    IMPORT          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    INIT            reduce using rule 228 (jumpExpression -> BREAK_AT .)
    NOINLINE        reduce using rule 228 (jumpExpression -> BREAK_AT .)
    OUT             reduce using rule 228 (jumpExpression -> BREAK_AT .)
    VARARG          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    WHERE           reduce using rule 228 (jumpExpression -> BREAK_AT .)
    OPERATOR        reduce using rule 228 (jumpExpression -> BREAK_AT .)
    ELVIS           reduce using rule 228 (jumpExpression -> BREAK_AT .)
    IN              reduce using rule 228 (jumpExpression -> BREAK_AT .)
    NOT_IN          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    IS              reduce using rule 228 (jumpExpression -> BREAK_AT .)
    NOT_IS          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MAIOR           reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MENORIGUAL      reduce using rule 228 (jumpExpression -> BREAK_AT .)
    MAIORIGUAL      reduce using rule 228 (jumpExpression -> BREAK_AT .)
    DIFERENTE       reduce using rule 228 (jumpExpression -> BREAK_AT .)
    IDENTIDADE      reduce using rule 228 (jumpExpression -> BREAK_AT .)
    IGUALDADE       reduce using rule 228 (jumpExpression -> BREAK_AT .)
    SEMIDENTIDADE   reduce using rule 228 (jumpExpression -> BREAK_AT .)
    AND             reduce using rule 228 (jumpExpression -> BREAK_AT .)
    OR              reduce using rule 228 (jumpExpression -> BREAK_AT .)
    FUN             reduce using rule 228 (jumpExpression -> BREAK_AT .)
    FOR             reduce using rule 228 (jumpExpression -> BREAK_AT .)
    WHILE           reduce using rule 228 (jumpExpression -> BREAK_AT .)
    DO              reduce using rule 228 (jumpExpression -> BREAK_AT .)
    VAR             reduce using rule 228 (jumpExpression -> BREAK_AT .)
    VAL             reduce using rule 228 (jumpExpression -> BREAK_AT .)
    LITERAL_STRING  reduce using rule 228 (jumpExpression -> BREAK_AT .)
    NUMBER          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    IF              reduce using rule 228 (jumpExpression -> BREAK_AT .)
    RETURN          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    RETURN_AT       reduce using rule 228 (jumpExpression -> BREAK_AT .)
    CONTINUE        reduce using rule 228 (jumpExpression -> BREAK_AT .)
    CONTINUE_AT     reduce using rule 228 (jumpExpression -> BREAK_AT .)
    BREAK           reduce using rule 228 (jumpExpression -> BREAK_AT .)
    BREAK_AT        reduce using rule 228 (jumpExpression -> BREAK_AT .)
    NOT             reduce using rule 228 (jumpExpression -> BREAK_AT .)
    SUSPEND         reduce using rule 228 (jumpExpression -> BREAK_AT .)
    RCHAVE          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    COMMA           reduce using rule 228 (jumpExpression -> BREAK_AT .)
    RPAREN          reduce using rule 228 (jumpExpression -> BREAK_AT .)
    RCCT            reduce using rule 228 (jumpExpression -> BREAK_AT .)
    PV              reduce using rule 228 (jumpExpression -> BREAK_AT .)
    ELSE            reduce using rule 228 (jumpExpression -> BREAK_AT .)


state 96

    (128) unaryPrefix -> label .

    INCREMENTO      reduce using rule 128 (unaryPrefix -> label .)
    DECREMENTO      reduce using rule 128 (unaryPrefix -> label .)
    MINUS           reduce using rule 128 (unaryPrefix -> label .)
    PLUS            reduce using rule 128 (unaryPrefix -> label .)
    NOT             reduce using rule 128 (unaryPrefix -> label .)
    ID              reduce using rule 128 (unaryPrefix -> label .)
    CROSSINLINE     reduce using rule 128 (unaryPrefix -> label .)
    IMPORT          reduce using rule 128 (unaryPrefix -> label .)
    INIT            reduce using rule 128 (unaryPrefix -> label .)
    NOINLINE        reduce using rule 128 (unaryPrefix -> label .)
    OUT             reduce using rule 128 (unaryPrefix -> label .)
    VARARG          reduce using rule 128 (unaryPrefix -> label .)
    WHERE           reduce using rule 128 (unaryPrefix -> label .)
    OPERATOR        reduce using rule 128 (unaryPrefix -> label .)
    LITERAL_STRING  reduce using rule 128 (unaryPrefix -> label .)
    NUMBER          reduce using rule 128 (unaryPrefix -> label .)
    LPAREN          reduce using rule 128 (unaryPrefix -> label .)
    LCCT            reduce using rule 128 (unaryPrefix -> label .)
    IF              reduce using rule 128 (unaryPrefix -> label .)
    RETURN          reduce using rule 128 (unaryPrefix -> label .)
    RETURN_AT       reduce using rule 128 (unaryPrefix -> label .)
    CONTINUE        reduce using rule 128 (unaryPrefix -> label .)
    CONTINUE_AT     reduce using rule 128 (unaryPrefix -> label .)
    BREAK           reduce using rule 128 (unaryPrefix -> label .)
    BREAK_AT        reduce using rule 128 (unaryPrefix -> label .)
    LCHAVE          reduce using rule 128 (unaryPrefix -> label .)
    FUN             reduce using rule 128 (unaryPrefix -> label .)
    SUSPEND         reduce using rule 128 (unaryPrefix -> label .)
    COLONCOLON      reduce using rule 128 (unaryPrefix -> label .)


state 97

    (129) unaryPrefix -> prefixUnaryOperator .

    INCREMENTO      reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    DECREMENTO      reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    MINUS           reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    PLUS            reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    NOT             reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    ID              reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    CROSSINLINE     reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    IMPORT          reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    INIT            reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    NOINLINE        reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    OUT             reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    VARARG          reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    WHERE           reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    OPERATOR        reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    LITERAL_STRING  reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    NUMBER          reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    LPAREN          reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    LCCT            reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    IF              reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    RETURN          reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    RETURN_AT       reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE        reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    CONTINUE_AT     reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    BREAK           reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    BREAK_AT        reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    LCHAVE          reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    FUN             reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    SUSPEND         reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)
    COLONCOLON      reduce using rule 129 (unaryPrefix -> prefixUnaryOperator .)


state 98

    (104) comparison -> infixOperation .
    (105) comparison -> infixOperation . comparisonOperator infixOperation
    (243) comparisonOperator -> . MENOR
    (244) comparisonOperator -> . MAIOR
    (245) comparisonOperator -> . MENORIGUAL
    (246) comparisonOperator -> . MAIORIGUAL

  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAIOR resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for MAIORIGUAL resolved as shift
    DIFERENTE       reduce using rule 104 (comparison -> infixOperation .)
    IDENTIDADE      reduce using rule 104 (comparison -> infixOperation .)
    IGUALDADE       reduce using rule 104 (comparison -> infixOperation .)
    SEMIDENTIDADE   reduce using rule 104 (comparison -> infixOperation .)
    AND             reduce using rule 104 (comparison -> infixOperation .)
    OR              reduce using rule 104 (comparison -> infixOperation .)
    LPAREN          reduce using rule 104 (comparison -> infixOperation .)
    FUN             reduce using rule 104 (comparison -> infixOperation .)
    FOR             reduce using rule 104 (comparison -> infixOperation .)
    WHILE           reduce using rule 104 (comparison -> infixOperation .)
    DO              reduce using rule 104 (comparison -> infixOperation .)
    VAR             reduce using rule 104 (comparison -> infixOperation .)
    VAL             reduce using rule 104 (comparison -> infixOperation .)
    ID              reduce using rule 104 (comparison -> infixOperation .)
    CROSSINLINE     reduce using rule 104 (comparison -> infixOperation .)
    IMPORT          reduce using rule 104 (comparison -> infixOperation .)
    INIT            reduce using rule 104 (comparison -> infixOperation .)
    NOINLINE        reduce using rule 104 (comparison -> infixOperation .)
    OUT             reduce using rule 104 (comparison -> infixOperation .)
    VARARG          reduce using rule 104 (comparison -> infixOperation .)
    WHERE           reduce using rule 104 (comparison -> infixOperation .)
    OPERATOR        reduce using rule 104 (comparison -> infixOperation .)
    LITERAL_STRING  reduce using rule 104 (comparison -> infixOperation .)
    NUMBER          reduce using rule 104 (comparison -> infixOperation .)
    LCCT            reduce using rule 104 (comparison -> infixOperation .)
    IF              reduce using rule 104 (comparison -> infixOperation .)
    RETURN          reduce using rule 104 (comparison -> infixOperation .)
    RETURN_AT       reduce using rule 104 (comparison -> infixOperation .)
    CONTINUE        reduce using rule 104 (comparison -> infixOperation .)
    CONTINUE_AT     reduce using rule 104 (comparison -> infixOperation .)
    BREAK           reduce using rule 104 (comparison -> infixOperation .)
    BREAK_AT        reduce using rule 104 (comparison -> infixOperation .)
    LCHAVE          reduce using rule 104 (comparison -> infixOperation .)
    INCREMENTO      reduce using rule 104 (comparison -> infixOperation .)
    DECREMENTO      reduce using rule 104 (comparison -> infixOperation .)
    MINUS           reduce using rule 104 (comparison -> infixOperation .)
    PLUS            reduce using rule 104 (comparison -> infixOperation .)
    NOT             reduce using rule 104 (comparison -> infixOperation .)
    SUSPEND         reduce using rule 104 (comparison -> infixOperation .)
    COLONCOLON      reduce using rule 104 (comparison -> infixOperation .)
    RCHAVE          reduce using rule 104 (comparison -> infixOperation .)
    COMMA           reduce using rule 104 (comparison -> infixOperation .)
    RPAREN          reduce using rule 104 (comparison -> infixOperation .)
    RCCT            reduce using rule 104 (comparison -> infixOperation .)
    PONTO           reduce using rule 104 (comparison -> infixOperation .)
    AS              reduce using rule 104 (comparison -> infixOperation .)
    MAISIGUAL       reduce using rule 104 (comparison -> infixOperation .)
    MENOSIGUAL      reduce using rule 104 (comparison -> infixOperation .)
    MULTIGUAL       reduce using rule 104 (comparison -> infixOperation .)
    DIVIGUAL        reduce using rule 104 (comparison -> infixOperation .)
    MODIGUAL        reduce using rule 104 (comparison -> infixOperation .)
    MULT            reduce using rule 104 (comparison -> infixOperation .)
    DIVIDE          reduce using rule 104 (comparison -> infixOperation .)
    MOD             reduce using rule 104 (comparison -> infixOperation .)
    PONTOPONTO      reduce using rule 104 (comparison -> infixOperation .)
    ELVIS           reduce using rule 104 (comparison -> infixOperation .)
    IN              reduce using rule 104 (comparison -> infixOperation .)
    NOT_IN          reduce using rule 104 (comparison -> infixOperation .)
    IS              reduce using rule 104 (comparison -> infixOperation .)
    NOT_IS          reduce using rule 104 (comparison -> infixOperation .)
    PV              reduce using rule 104 (comparison -> infixOperation .)
    ELSE            reduce using rule 104 (comparison -> infixOperation .)
    MENOR           shift and go to state 210
    MAIOR           shift and go to state 211
    MENORIGUAL      shift and go to state 212
    MAIORIGUAL      shift and go to state 213

  ! MENOR           [ reduce using rule 104 (comparison -> infixOperation .) ]
  ! MAIOR           [ reduce using rule 104 (comparison -> infixOperation .) ]
  ! MENORIGUAL      [ reduce using rule 104 (comparison -> infixOperation .) ]
  ! MAIORIGUAL      [ reduce using rule 104 (comparison -> infixOperation .) ]

    comparisonOperator             shift and go to state 209

state 99

    (230) optionalReceiverType -> receiverType .

    COLONCOLON      reduce using rule 230 (optionalReceiverType -> receiverType .)


state 100

    (258) prefixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    OPERATOR        reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    LCHAVE          reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 258 (prefixUnaryOperator -> INCREMENTO .)


state 101

    (259) prefixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    OPERATOR        reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    LCHAVE          reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 259 (prefixUnaryOperator -> DECREMENTO .)


state 102

    (260) prefixUnaryOperator -> MINUS .

    INCREMENTO      reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    DECREMENTO      reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    MINUS           reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    PLUS            reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    NOT             reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    ID              reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    CROSSINLINE     reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    IMPORT          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    INIT            reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    NOINLINE        reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    OUT             reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    VARARG          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    WHERE           reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    OPERATOR        reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    LITERAL_STRING  reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    NUMBER          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    LPAREN          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    LCCT            reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    IF              reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    RETURN          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    RETURN_AT       reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    CONTINUE        reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    BREAK           reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    BREAK_AT        reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    LCHAVE          reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    FUN             reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    SUSPEND         reduce using rule 260 (prefixUnaryOperator -> MINUS .)
    COLONCOLON      reduce using rule 260 (prefixUnaryOperator -> MINUS .)


state 103

    (261) prefixUnaryOperator -> PLUS .

    INCREMENTO      reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    DECREMENTO      reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    MINUS           reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    PLUS            reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    NOT             reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    ID              reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    CROSSINLINE     reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    IMPORT          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    INIT            reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    NOINLINE        reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    OUT             reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    VARARG          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    WHERE           reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    OPERATOR        reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    LITERAL_STRING  reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    NUMBER          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    LPAREN          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    LCCT            reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    IF              reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    RETURN          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    RETURN_AT       reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    CONTINUE        reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    BREAK           reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    BREAK_AT        reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    LCHAVE          reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    FUN             reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    SUSPEND         reduce using rule 261 (prefixUnaryOperator -> PLUS .)
    COLONCOLON      reduce using rule 261 (prefixUnaryOperator -> PLUS .)


state 104

    (262) prefixUnaryOperator -> NOT .

    INCREMENTO      reduce using rule 262 (prefixUnaryOperator -> NOT .)
    DECREMENTO      reduce using rule 262 (prefixUnaryOperator -> NOT .)
    MINUS           reduce using rule 262 (prefixUnaryOperator -> NOT .)
    PLUS            reduce using rule 262 (prefixUnaryOperator -> NOT .)
    NOT             reduce using rule 262 (prefixUnaryOperator -> NOT .)
    ID              reduce using rule 262 (prefixUnaryOperator -> NOT .)
    CROSSINLINE     reduce using rule 262 (prefixUnaryOperator -> NOT .)
    IMPORT          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    INIT            reduce using rule 262 (prefixUnaryOperator -> NOT .)
    NOINLINE        reduce using rule 262 (prefixUnaryOperator -> NOT .)
    OUT             reduce using rule 262 (prefixUnaryOperator -> NOT .)
    VARARG          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    WHERE           reduce using rule 262 (prefixUnaryOperator -> NOT .)
    OPERATOR        reduce using rule 262 (prefixUnaryOperator -> NOT .)
    LITERAL_STRING  reduce using rule 262 (prefixUnaryOperator -> NOT .)
    NUMBER          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    LPAREN          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    LCCT            reduce using rule 262 (prefixUnaryOperator -> NOT .)
    IF              reduce using rule 262 (prefixUnaryOperator -> NOT .)
    RETURN          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    RETURN_AT       reduce using rule 262 (prefixUnaryOperator -> NOT .)
    CONTINUE        reduce using rule 262 (prefixUnaryOperator -> NOT .)
    CONTINUE_AT     reduce using rule 262 (prefixUnaryOperator -> NOT .)
    BREAK           reduce using rule 262 (prefixUnaryOperator -> NOT .)
    BREAK_AT        reduce using rule 262 (prefixUnaryOperator -> NOT .)
    LCHAVE          reduce using rule 262 (prefixUnaryOperator -> NOT .)
    FUN             reduce using rule 262 (prefixUnaryOperator -> NOT .)
    SUSPEND         reduce using rule 262 (prefixUnaryOperator -> NOT .)
    COLONCOLON      reduce using rule 262 (prefixUnaryOperator -> NOT .)


state 105

    (106) infixOperation -> elvisExpression . infixOperationRecursive
    (107) infixOperation -> elvisExpression .
    (108) infixOperationRecursive -> . inOrIs elvisOrType
    (109) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (110) inOrIs -> . inOperator
    (111) inOrIs -> . isOperator
    (247) inOperator -> . IN
    (248) inOperator -> . NOT_IN
    (249) isOperator -> . IS
    (250) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    MENOR           reduce using rule 107 (infixOperation -> elvisExpression .)
    MAIOR           reduce using rule 107 (infixOperation -> elvisExpression .)
    MENORIGUAL      reduce using rule 107 (infixOperation -> elvisExpression .)
    MAIORIGUAL      reduce using rule 107 (infixOperation -> elvisExpression .)
    DIFERENTE       reduce using rule 107 (infixOperation -> elvisExpression .)
    IDENTIDADE      reduce using rule 107 (infixOperation -> elvisExpression .)
    IGUALDADE       reduce using rule 107 (infixOperation -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 107 (infixOperation -> elvisExpression .)
    AND             reduce using rule 107 (infixOperation -> elvisExpression .)
    OR              reduce using rule 107 (infixOperation -> elvisExpression .)
    LPAREN          reduce using rule 107 (infixOperation -> elvisExpression .)
    FUN             reduce using rule 107 (infixOperation -> elvisExpression .)
    FOR             reduce using rule 107 (infixOperation -> elvisExpression .)
    WHILE           reduce using rule 107 (infixOperation -> elvisExpression .)
    DO              reduce using rule 107 (infixOperation -> elvisExpression .)
    VAR             reduce using rule 107 (infixOperation -> elvisExpression .)
    VAL             reduce using rule 107 (infixOperation -> elvisExpression .)
    ID              reduce using rule 107 (infixOperation -> elvisExpression .)
    CROSSINLINE     reduce using rule 107 (infixOperation -> elvisExpression .)
    IMPORT          reduce using rule 107 (infixOperation -> elvisExpression .)
    INIT            reduce using rule 107 (infixOperation -> elvisExpression .)
    NOINLINE        reduce using rule 107 (infixOperation -> elvisExpression .)
    OUT             reduce using rule 107 (infixOperation -> elvisExpression .)
    VARARG          reduce using rule 107 (infixOperation -> elvisExpression .)
    WHERE           reduce using rule 107 (infixOperation -> elvisExpression .)
    OPERATOR        reduce using rule 107 (infixOperation -> elvisExpression .)
    LITERAL_STRING  reduce using rule 107 (infixOperation -> elvisExpression .)
    NUMBER          reduce using rule 107 (infixOperation -> elvisExpression .)
    LCCT            reduce using rule 107 (infixOperation -> elvisExpression .)
    IF              reduce using rule 107 (infixOperation -> elvisExpression .)
    RETURN          reduce using rule 107 (infixOperation -> elvisExpression .)
    RETURN_AT       reduce using rule 107 (infixOperation -> elvisExpression .)
    CONTINUE        reduce using rule 107 (infixOperation -> elvisExpression .)
    CONTINUE_AT     reduce using rule 107 (infixOperation -> elvisExpression .)
    BREAK           reduce using rule 107 (infixOperation -> elvisExpression .)
    BREAK_AT        reduce using rule 107 (infixOperation -> elvisExpression .)
    LCHAVE          reduce using rule 107 (infixOperation -> elvisExpression .)
    INCREMENTO      reduce using rule 107 (infixOperation -> elvisExpression .)
    DECREMENTO      reduce using rule 107 (infixOperation -> elvisExpression .)
    MINUS           reduce using rule 107 (infixOperation -> elvisExpression .)
    PLUS            reduce using rule 107 (infixOperation -> elvisExpression .)
    NOT             reduce using rule 107 (infixOperation -> elvisExpression .)
    SUSPEND         reduce using rule 107 (infixOperation -> elvisExpression .)
    COLONCOLON      reduce using rule 107 (infixOperation -> elvisExpression .)
    RCHAVE          reduce using rule 107 (infixOperation -> elvisExpression .)
    COMMA           reduce using rule 107 (infixOperation -> elvisExpression .)
    RPAREN          reduce using rule 107 (infixOperation -> elvisExpression .)
    RCCT            reduce using rule 107 (infixOperation -> elvisExpression .)
    PONTO           reduce using rule 107 (infixOperation -> elvisExpression .)
    AS              reduce using rule 107 (infixOperation -> elvisExpression .)
    MAISIGUAL       reduce using rule 107 (infixOperation -> elvisExpression .)
    MENOSIGUAL      reduce using rule 107 (infixOperation -> elvisExpression .)
    MULTIGUAL       reduce using rule 107 (infixOperation -> elvisExpression .)
    DIVIGUAL        reduce using rule 107 (infixOperation -> elvisExpression .)
    MODIGUAL        reduce using rule 107 (infixOperation -> elvisExpression .)
    MULT            reduce using rule 107 (infixOperation -> elvisExpression .)
    DIVIDE          reduce using rule 107 (infixOperation -> elvisExpression .)
    MOD             reduce using rule 107 (infixOperation -> elvisExpression .)
    PONTOPONTO      reduce using rule 107 (infixOperation -> elvisExpression .)
    ELVIS           reduce using rule 107 (infixOperation -> elvisExpression .)
    PV              reduce using rule 107 (infixOperation -> elvisExpression .)
    ELSE            reduce using rule 107 (infixOperation -> elvisExpression .)
    IN              shift and go to state 218
    NOT_IN          shift and go to state 219
    IS              shift and go to state 220
    NOT_IS          shift and go to state 221

  ! IN              [ reduce using rule 107 (infixOperation -> elvisExpression .) ]
  ! NOT_IN          [ reduce using rule 107 (infixOperation -> elvisExpression .) ]
  ! IS              [ reduce using rule 107 (infixOperation -> elvisExpression .) ]
  ! NOT_IS          [ reduce using rule 107 (infixOperation -> elvisExpression .) ]

    infixOperationRecursive        shift and go to state 214
    inOrIs                         shift and go to state 215
    inOperator                     shift and go to state 216
    isOperator                     shift and go to state 217

state 106

    (69) receiverType -> typeModifier . parenthesizedType
    (68) parenthesizedType -> . LPAREN type RPAREN

    LPAREN          shift and go to state 115

    parenthesizedType              shift and go to state 114

state 107

    (114) elvisExpression -> infixFunctionCall .
    (115) elvisExpression -> infixFunctionCall . ELVIS elvisExpression

  ! shift/reduce conflict for ELVIS resolved as shift
    IN              reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    NOT_IN          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    IS              reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    NOT_IS          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MENOR           reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MAIOR           reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MENORIGUAL      reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MAIORIGUAL      reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    DIFERENTE       reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    IDENTIDADE      reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    IGUALDADE       reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    AND             reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    OR              reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    LPAREN          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    FUN             reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    FOR             reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    WHILE           reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    DO              reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    VAR             reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    VAL             reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    ID              reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    CROSSINLINE     reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    IMPORT          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    INIT            reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    NOINLINE        reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    OUT             reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    VARARG          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    WHERE           reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    OPERATOR        reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    LITERAL_STRING  reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    NUMBER          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    LCCT            reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    IF              reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    RETURN          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    RETURN_AT       reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    CONTINUE        reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    CONTINUE_AT     reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    BREAK           reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    BREAK_AT        reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    LCHAVE          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    INCREMENTO      reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    DECREMENTO      reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MINUS           reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    PLUS            reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    NOT             reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    SUSPEND         reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    COLONCOLON      reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    RCHAVE          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    COMMA           reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    RPAREN          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    RCCT            reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    PONTO           reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    AS              reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MAISIGUAL       reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MENOSIGUAL      reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MULTIGUAL       reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    DIVIGUAL        reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MODIGUAL        reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MULT            reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    DIVIDE          reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    MOD             reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    PONTOPONTO      reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    PV              reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    ELSE            reduce using rule 114 (elvisExpression -> infixFunctionCall .)
    ELVIS           shift and go to state 222

  ! ELVIS           [ reduce using rule 114 (elvisExpression -> infixFunctionCall .) ]


state 108

    (116) infixFunctionCall -> rangeExpression .
    (117) infixFunctionCall -> rangeExpression . simpleIdentifier infixFunctionCall
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
    ELVIS           reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    IN              reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    NOT_IN          reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    IS              reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    NOT_IS          reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MENOR           reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MAIOR           reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MENORIGUAL      reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MAIORIGUAL      reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    DIFERENTE       reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    IDENTIDADE      reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    IGUALDADE       reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    SEMIDENTIDADE   reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    AND             reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    OR              reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    LPAREN          reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    FUN             reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    FOR             reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    WHILE           reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    DO              reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    VAR             reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    VAL             reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    LITERAL_STRING  reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    NUMBER          reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    LCCT            reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    IF              reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    RETURN          reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    RETURN_AT       reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    CONTINUE        reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    CONTINUE_AT     reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    BREAK           reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    BREAK_AT        reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    LCHAVE          reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    INCREMENTO      reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    DECREMENTO      reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MINUS           reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    PLUS            reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    NOT             reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    SUSPEND         reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    COLONCOLON      reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    RCHAVE          reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    COMMA           reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    RPAREN          reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    RCCT            reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    PONTO           reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    AS              reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MAISIGUAL       reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MENOSIGUAL      reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MULTIGUAL       reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    DIVIGUAL        reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MODIGUAL        reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MULT            reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    DIVIDE          reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    MOD             reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    PONTOPONTO      reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    PV              reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    ELSE            reduce using rule 116 (infixFunctionCall -> rangeExpression .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

  ! ID              [ reduce using rule 116 (infixFunctionCall -> rangeExpression .) ]
  ! CROSSINLINE     [ reduce using rule 116 (infixFunctionCall -> rangeExpression .) ]
  ! IMPORT          [ reduce using rule 116 (infixFunctionCall -> rangeExpression .) ]
  ! INIT            [ reduce using rule 116 (infixFunctionCall -> rangeExpression .) ]
  ! NOINLINE        [ reduce using rule 116 (infixFunctionCall -> rangeExpression .) ]
  ! OUT             [ reduce using rule 116 (infixFunctionCall -> rangeExpression .) ]
  ! VARARG          [ reduce using rule 116 (infixFunctionCall -> rangeExpression .) ]
  ! WHERE           [ reduce using rule 116 (infixFunctionCall -> rangeExpression .) ]
  ! OPERATOR        [ reduce using rule 116 (infixFunctionCall -> rangeExpression .) ]

    simpleIdentifier               shift and go to state 223

state 109

    (118) rangeExpression -> additiveExpression .
    (119) rangeExpression -> additiveExpression . PONTOPONTO rangeExpression

  ! shift/reduce conflict for PONTOPONTO resolved as shift
    ID              reduce using rule 118 (rangeExpression -> additiveExpression .)
    CROSSINLINE     reduce using rule 118 (rangeExpression -> additiveExpression .)
    IMPORT          reduce using rule 118 (rangeExpression -> additiveExpression .)
    INIT            reduce using rule 118 (rangeExpression -> additiveExpression .)
    NOINLINE        reduce using rule 118 (rangeExpression -> additiveExpression .)
    OUT             reduce using rule 118 (rangeExpression -> additiveExpression .)
    VARARG          reduce using rule 118 (rangeExpression -> additiveExpression .)
    WHERE           reduce using rule 118 (rangeExpression -> additiveExpression .)
    OPERATOR        reduce using rule 118 (rangeExpression -> additiveExpression .)
    ELVIS           reduce using rule 118 (rangeExpression -> additiveExpression .)
    IN              reduce using rule 118 (rangeExpression -> additiveExpression .)
    NOT_IN          reduce using rule 118 (rangeExpression -> additiveExpression .)
    IS              reduce using rule 118 (rangeExpression -> additiveExpression .)
    NOT_IS          reduce using rule 118 (rangeExpression -> additiveExpression .)
    MENOR           reduce using rule 118 (rangeExpression -> additiveExpression .)
    MAIOR           reduce using rule 118 (rangeExpression -> additiveExpression .)
    MENORIGUAL      reduce using rule 118 (rangeExpression -> additiveExpression .)
    MAIORIGUAL      reduce using rule 118 (rangeExpression -> additiveExpression .)
    DIFERENTE       reduce using rule 118 (rangeExpression -> additiveExpression .)
    IDENTIDADE      reduce using rule 118 (rangeExpression -> additiveExpression .)
    IGUALDADE       reduce using rule 118 (rangeExpression -> additiveExpression .)
    SEMIDENTIDADE   reduce using rule 118 (rangeExpression -> additiveExpression .)
    AND             reduce using rule 118 (rangeExpression -> additiveExpression .)
    OR              reduce using rule 118 (rangeExpression -> additiveExpression .)
    LPAREN          reduce using rule 118 (rangeExpression -> additiveExpression .)
    FUN             reduce using rule 118 (rangeExpression -> additiveExpression .)
    FOR             reduce using rule 118 (rangeExpression -> additiveExpression .)
    WHILE           reduce using rule 118 (rangeExpression -> additiveExpression .)
    DO              reduce using rule 118 (rangeExpression -> additiveExpression .)
    VAR             reduce using rule 118 (rangeExpression -> additiveExpression .)
    VAL             reduce using rule 118 (rangeExpression -> additiveExpression .)
    LITERAL_STRING  reduce using rule 118 (rangeExpression -> additiveExpression .)
    NUMBER          reduce using rule 118 (rangeExpression -> additiveExpression .)
    LCCT            reduce using rule 118 (rangeExpression -> additiveExpression .)
    IF              reduce using rule 118 (rangeExpression -> additiveExpression .)
    RETURN          reduce using rule 118 (rangeExpression -> additiveExpression .)
    RETURN_AT       reduce using rule 118 (rangeExpression -> additiveExpression .)
    CONTINUE        reduce using rule 118 (rangeExpression -> additiveExpression .)
    CONTINUE_AT     reduce using rule 118 (rangeExpression -> additiveExpression .)
    BREAK           reduce using rule 118 (rangeExpression -> additiveExpression .)
    BREAK_AT        reduce using rule 118 (rangeExpression -> additiveExpression .)
    LCHAVE          reduce using rule 118 (rangeExpression -> additiveExpression .)
    INCREMENTO      reduce using rule 118 (rangeExpression -> additiveExpression .)
    DECREMENTO      reduce using rule 118 (rangeExpression -> additiveExpression .)
    MINUS           reduce using rule 118 (rangeExpression -> additiveExpression .)
    PLUS            reduce using rule 118 (rangeExpression -> additiveExpression .)
    NOT             reduce using rule 118 (rangeExpression -> additiveExpression .)
    SUSPEND         reduce using rule 118 (rangeExpression -> additiveExpression .)
    COLONCOLON      reduce using rule 118 (rangeExpression -> additiveExpression .)
    RCHAVE          reduce using rule 118 (rangeExpression -> additiveExpression .)
    COMMA           reduce using rule 118 (rangeExpression -> additiveExpression .)
    RPAREN          reduce using rule 118 (rangeExpression -> additiveExpression .)
    RCCT            reduce using rule 118 (rangeExpression -> additiveExpression .)
    PONTO           reduce using rule 118 (rangeExpression -> additiveExpression .)
    AS              reduce using rule 118 (rangeExpression -> additiveExpression .)
    MAISIGUAL       reduce using rule 118 (rangeExpression -> additiveExpression .)
    MENOSIGUAL      reduce using rule 118 (rangeExpression -> additiveExpression .)
    MULTIGUAL       reduce using rule 118 (rangeExpression -> additiveExpression .)
    DIVIGUAL        reduce using rule 118 (rangeExpression -> additiveExpression .)
    MODIGUAL        reduce using rule 118 (rangeExpression -> additiveExpression .)
    MULT            reduce using rule 118 (rangeExpression -> additiveExpression .)
    DIVIDE          reduce using rule 118 (rangeExpression -> additiveExpression .)
    MOD             reduce using rule 118 (rangeExpression -> additiveExpression .)
    PV              reduce using rule 118 (rangeExpression -> additiveExpression .)
    ELSE            reduce using rule 118 (rangeExpression -> additiveExpression .)
    PONTOPONTO      shift and go to state 224

  ! PONTOPONTO      [ reduce using rule 118 (rangeExpression -> additiveExpression .) ]


state 110

    (120) additiveExpression -> multiplicativeExpression .
    (121) additiveExpression -> multiplicativeExpression . additiveOperator additiveExpression
    (251) additiveOperator -> . PLUS
    (252) additiveOperator -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PONTOPONTO      reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    ID              reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    CROSSINLINE     reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    IMPORT          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    INIT            reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    NOINLINE        reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    OUT             reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    VARARG          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    WHERE           reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    OPERATOR        reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    ELVIS           reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    IN              reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    NOT_IN          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    IS              reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    NOT_IS          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    MENOR           reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    MAIOR           reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    MENORIGUAL      reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    DIFERENTE       reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    IDENTIDADE      reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    IGUALDADE       reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    AND             reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    OR              reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    LPAREN          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    FUN             reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    FOR             reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    WHILE           reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    DO              reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    VAR             reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    VAL             reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    NUMBER          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    LCCT            reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    IF              reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    RETURN          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    RETURN_AT       reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    CONTINUE        reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    BREAK           reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    BREAK_AT        reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    LCHAVE          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    INCREMENTO      reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    DECREMENTO      reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    NOT             reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    SUSPEND         reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    COLONCOLON      reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    RCHAVE          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    COMMA           reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    RPAREN          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    RCCT            reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    PONTO           reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    AS              reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    MAISIGUAL       reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    MENOSIGUAL      reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    MULTIGUAL       reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    DIVIGUAL        reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    MODIGUAL        reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    MULT            reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    DIVIDE          reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    MOD             reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    PV              reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    ELSE            reduce using rule 120 (additiveExpression -> multiplicativeExpression .)
    PLUS            shift and go to state 226
    MINUS           shift and go to state 227

  ! MINUS           [ reduce using rule 120 (additiveExpression -> multiplicativeExpression .) ]
  ! PLUS            [ reduce using rule 120 (additiveExpression -> multiplicativeExpression .) ]

    additiveOperator               shift and go to state 225

state 111

    (40) type -> typeModifiers optype .

    LCHAVE          reduce using rule 40 (type -> typeModifiers optype .)
    FUN             reduce using rule 40 (type -> typeModifiers optype .)
    $end            reduce using rule 40 (type -> typeModifiers optype .)
    LPAREN          reduce using rule 40 (type -> typeModifiers optype .)
    FOR             reduce using rule 40 (type -> typeModifiers optype .)
    WHILE           reduce using rule 40 (type -> typeModifiers optype .)
    DO              reduce using rule 40 (type -> typeModifiers optype .)
    VAR             reduce using rule 40 (type -> typeModifiers optype .)
    VAL             reduce using rule 40 (type -> typeModifiers optype .)
    ID              reduce using rule 40 (type -> typeModifiers optype .)
    CROSSINLINE     reduce using rule 40 (type -> typeModifiers optype .)
    IMPORT          reduce using rule 40 (type -> typeModifiers optype .)
    INIT            reduce using rule 40 (type -> typeModifiers optype .)
    NOINLINE        reduce using rule 40 (type -> typeModifiers optype .)
    OUT             reduce using rule 40 (type -> typeModifiers optype .)
    VARARG          reduce using rule 40 (type -> typeModifiers optype .)
    WHERE           reduce using rule 40 (type -> typeModifiers optype .)
    OPERATOR        reduce using rule 40 (type -> typeModifiers optype .)
    LITERAL_STRING  reduce using rule 40 (type -> typeModifiers optype .)
    NUMBER          reduce using rule 40 (type -> typeModifiers optype .)
    LCCT            reduce using rule 40 (type -> typeModifiers optype .)
    IF              reduce using rule 40 (type -> typeModifiers optype .)
    RETURN          reduce using rule 40 (type -> typeModifiers optype .)
    RETURN_AT       reduce using rule 40 (type -> typeModifiers optype .)
    CONTINUE        reduce using rule 40 (type -> typeModifiers optype .)
    CONTINUE_AT     reduce using rule 40 (type -> typeModifiers optype .)
    BREAK           reduce using rule 40 (type -> typeModifiers optype .)
    BREAK_AT        reduce using rule 40 (type -> typeModifiers optype .)
    INCREMENTO      reduce using rule 40 (type -> typeModifiers optype .)
    DECREMENTO      reduce using rule 40 (type -> typeModifiers optype .)
    MINUS           reduce using rule 40 (type -> typeModifiers optype .)
    PLUS            reduce using rule 40 (type -> typeModifiers optype .)
    NOT             reduce using rule 40 (type -> typeModifiers optype .)
    SUSPEND         reduce using rule 40 (type -> typeModifiers optype .)
    COLONCOLON      reduce using rule 40 (type -> typeModifiers optype .)
    RCHAVE          reduce using rule 40 (type -> typeModifiers optype .)
    MENOR           reduce using rule 40 (type -> typeModifiers optype .)
    PONTO           reduce using rule 40 (type -> typeModifiers optype .)
    AS              reduce using rule 40 (type -> typeModifiers optype .)
    MAISIGUAL       reduce using rule 40 (type -> typeModifiers optype .)
    MENOSIGUAL      reduce using rule 40 (type -> typeModifiers optype .)
    MULTIGUAL       reduce using rule 40 (type -> typeModifiers optype .)
    DIVIGUAL        reduce using rule 40 (type -> typeModifiers optype .)
    MODIGUAL        reduce using rule 40 (type -> typeModifiers optype .)
    MULT            reduce using rule 40 (type -> typeModifiers optype .)
    DIVIDE          reduce using rule 40 (type -> typeModifiers optype .)
    MOD             reduce using rule 40 (type -> typeModifiers optype .)
    PONTOPONTO      reduce using rule 40 (type -> typeModifiers optype .)
    ELVIS           reduce using rule 40 (type -> typeModifiers optype .)
    IN              reduce using rule 40 (type -> typeModifiers optype .)
    NOT_IN          reduce using rule 40 (type -> typeModifiers optype .)
    IS              reduce using rule 40 (type -> typeModifiers optype .)
    NOT_IS          reduce using rule 40 (type -> typeModifiers optype .)
    MAIOR           reduce using rule 40 (type -> typeModifiers optype .)
    MENORIGUAL      reduce using rule 40 (type -> typeModifiers optype .)
    MAIORIGUAL      reduce using rule 40 (type -> typeModifiers optype .)
    DIFERENTE       reduce using rule 40 (type -> typeModifiers optype .)
    IDENTIDADE      reduce using rule 40 (type -> typeModifiers optype .)
    IGUALDADE       reduce using rule 40 (type -> typeModifiers optype .)
    SEMIDENTIDADE   reduce using rule 40 (type -> typeModifiers optype .)
    AND             reduce using rule 40 (type -> typeModifiers optype .)
    OR              reduce using rule 40 (type -> typeModifiers optype .)
    COMMA           reduce using rule 40 (type -> typeModifiers optype .)
    RPAREN          reduce using rule 40 (type -> typeModifiers optype .)
    RCCT            reduce using rule 40 (type -> typeModifiers optype .)
    PV              reduce using rule 40 (type -> typeModifiers optype .)
    ELSE            reduce using rule 40 (type -> typeModifiers optype .)
    SETA            reduce using rule 40 (type -> typeModifiers optype .)
    ATRIBUICAO      reduce using rule 40 (type -> typeModifiers optype .)


state 112

    (46) typeModifiers -> typeModifier .
    (47) typeModifiers -> typeModifier . typeModifiers
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (48) typeModifier -> . SUSPEND

  ! shift/reduce conflict for SUSPEND resolved as shift
    LPAREN          reduce using rule 46 (typeModifiers -> typeModifier .)
    ID              reduce using rule 46 (typeModifiers -> typeModifier .)
    CROSSINLINE     reduce using rule 46 (typeModifiers -> typeModifier .)
    IMPORT          reduce using rule 46 (typeModifiers -> typeModifier .)
    INIT            reduce using rule 46 (typeModifiers -> typeModifier .)
    NOINLINE        reduce using rule 46 (typeModifiers -> typeModifier .)
    OUT             reduce using rule 46 (typeModifiers -> typeModifier .)
    VARARG          reduce using rule 46 (typeModifiers -> typeModifier .)
    WHERE           reduce using rule 46 (typeModifiers -> typeModifier .)
    OPERATOR        reduce using rule 46 (typeModifiers -> typeModifier .)
    SUSPEND         shift and go to state 34

  ! SUSPEND         [ reduce using rule 46 (typeModifiers -> typeModifier .) ]

    typeModifier                   shift and go to state 112
    typeModifiers                  shift and go to state 113

state 113

    (47) typeModifiers -> typeModifier typeModifiers .

    LPAREN          reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    SUSPEND         reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    ID              reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    CROSSINLINE     reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    IMPORT          reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    INIT            reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    NOINLINE        reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    OUT             reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    VARARG          reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    WHERE           reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)
    OPERATOR        reduce using rule 47 (typeModifiers -> typeModifier typeModifiers .)


state 114

    (69) receiverType -> typeModifier parenthesizedType .

    PONTO           reduce using rule 69 (receiverType -> typeModifier parenthesizedType .)
    COLONCOLON      reduce using rule 69 (receiverType -> typeModifier parenthesizedType .)


state 115

    (68) parenthesizedType -> LPAREN . type RPAREN
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    type                           shift and go to state 228
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 116

    (68) parenthesizedType -> LPAREN type . RPAREN
    (62) optionalParameterOrType -> type .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 229
    COMMA           reduce using rule 62 (optionalParameterOrType -> type .)

  ! RPAREN          [ reduce using rule 62 (optionalParameterOrType -> type .) ]


state 117

    (67) functionTypeParameters -> LPAREN optionalParameterOrType . parameterOrTypeRecursive optionalCOMMA RPAREN
    (64) parameterOrTypeRecursive -> . COMMA optionalParameterOrType
    (65) parameterOrTypeRecursive -> . COMMA optionalParameterOrType parameterOrTypeRecursive
    (66) parameterOrTypeRecursive -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 231
    RPAREN          reduce using rule 66 (parameterOrTypeRecursive -> .)

  ! COMMA           [ reduce using rule 66 (parameterOrTypeRecursive -> .) ]

    parameterOrTypeRecursive       shift and go to state 230

state 118

    (61) optionalParameterOrType -> parameter .

    COMMA           reduce using rule 61 (optionalParameterOrType -> parameter .)
    RPAREN          reduce using rule 61 (optionalParameterOrType -> parameter .)


state 119

    (39) parameter -> simpleIdentifier . DOISP type
    (53) simpleUserType -> simpleIdentifier . typeArguments
    (54) simpleUserType -> simpleIdentifier .
    (164) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (165) typeArguments -> . MENOR MAIOR

    DOISP           shift and go to state 43
    RPAREN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 123

    typeArguments                  shift and go to state 122

state 120

    (59) functionType -> receiverType PONTO . functionTypeParameters SETA type
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN

    LPAREN          shift and go to state 233

    functionTypeParameters         shift and go to state 232

state 121

    (60) functionType -> functionTypeParameters SETA . type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    functionTypeParameters         shift and go to state 37
    type                           shift and go to state 234
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 122

    (53) simpleUserType -> simpleIdentifier typeArguments .

    LCHAVE          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    FUN             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    $end            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    LPAREN          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    FOR             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    WHILE           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    DO              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    VAR             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    VAL             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    ID              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    CROSSINLINE     reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IMPORT          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    INIT            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NOINLINE        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    OUT             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    VARARG          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    WHERE           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    OPERATOR        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    LITERAL_STRING  reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NUMBER          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    LCCT            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IF              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    RETURN_AT       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    CONTINUE_AT     reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    BREAK_AT        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    INCREMENTO      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    DECREMENTO      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MINUS           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    PLUS            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    SUSPEND         reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    COLONCOLON      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    RCHAVE          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOR           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTO           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    AS              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MAISIGUAL       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MENOSIGUAL      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MULTIGUAL       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIGUAL        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MODIGUAL        reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MULT            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    DIVIDE          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MOD             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    PONTOPONTO      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    ELVIS           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IN              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IN          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IS              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    NOT_IS          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIOR           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MENORIGUAL      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    MAIORIGUAL      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    DIFERENTE       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IDENTIDADE      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    IGUALDADE       reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    SEMIDENTIDADE   reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    AND             reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    OR              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    COMMA           reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    RPAREN          reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    RCCT            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    PV              reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    ELSE            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    SETA            reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)
    ATRIBUICAO      reduce using rule 53 (simpleUserType -> simpleIdentifier typeArguments .)


state 123

    (164) typeArguments -> MENOR . typeArgumentsRecursive MAIOR
    (165) typeArguments -> MENOR . MAIOR
    (166) typeArgumentsRecursive -> . typeProjection
    (167) typeArgumentsRecursive -> . typeProjection COMMA typeArgumentsRecursive
    (55) typeProjection -> . typeProjectionModifiers type
    (56) typeProjection -> . type
    (57) typeProjectionModifiers -> . typeProjection
    (58) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (49) typeProjectionModifier -> . varianceModifier
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (50) varianceModifier -> . IN
    (51) varianceModifier -> . OUT
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    MAIOR           shift and go to state 236
    IN              shift and go to state 242
    OUT             shift and go to state 243
    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeArgumentsRecursive         shift and go to state 235
    typeProjection                 shift and go to state 237
    typeProjectionModifiers        shift and go to state 238
    type                           shift and go to state 239
    typeProjectionModifier         shift and go to state 240
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    varianceModifier               shift and go to state 241
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 124

    (30) functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive .

    RPAREN          reduce using rule 30 (functionValueParametersRecursive -> functionValueParameter COMMA functionValueParametersRecursive .)


state 125

    (31) functionValueParameter -> parameter ATRIBUICAO expression .

    COMMA           reduce using rule 31 (functionValueParameter -> parameter ATRIBUICAO expression .)
    RPAREN          reduce using rule 31 (functionValueParameter -> parameter ATRIBUICAO expression .)


state 126

    (176) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 176 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    FUN             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VAR             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VAL             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NUMBER          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IF              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RETURN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RETURN_AT       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CONTINUE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    BREAK           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    BREAK_AT        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SUSPEND         reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 176 (primaryExpression -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]


state 127

    (122) multiplicativeExpression -> asExpression .
    (123) multiplicativeExpression -> asExpression . multiplicativeOperator multiplicativeExpression
    (253) multiplicativeOperator -> . MULT
    (254) multiplicativeOperator -> . DIVIDE
    (255) multiplicativeOperator -> . MOD

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    PLUS            reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MINUS           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    PONTOPONTO      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    ID              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    CROSSINLINE     reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IMPORT          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    INIT            reduce using rule 122 (multiplicativeExpression -> asExpression .)
    NOINLINE        reduce using rule 122 (multiplicativeExpression -> asExpression .)
    OUT             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    VARARG          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    WHERE           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    OPERATOR        reduce using rule 122 (multiplicativeExpression -> asExpression .)
    ELVIS           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IN              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    NOT_IN          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IS              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    NOT_IS          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MENOR           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MAIOR           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MENORIGUAL      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MAIORIGUAL      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    DIFERENTE       reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IDENTIDADE      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IGUALDADE       reduce using rule 122 (multiplicativeExpression -> asExpression .)
    SEMIDENTIDADE   reduce using rule 122 (multiplicativeExpression -> asExpression .)
    AND             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    OR              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    COMMA           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    RPAREN          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    RCCT            reduce using rule 122 (multiplicativeExpression -> asExpression .)
    LPAREN          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    FUN             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    FOR             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    WHILE           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    DO              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    VAR             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    VAL             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    LITERAL_STRING  reduce using rule 122 (multiplicativeExpression -> asExpression .)
    NUMBER          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    LCCT            reduce using rule 122 (multiplicativeExpression -> asExpression .)
    IF              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    RETURN          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    RETURN_AT       reduce using rule 122 (multiplicativeExpression -> asExpression .)
    CONTINUE        reduce using rule 122 (multiplicativeExpression -> asExpression .)
    CONTINUE_AT     reduce using rule 122 (multiplicativeExpression -> asExpression .)
    BREAK           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    BREAK_AT        reduce using rule 122 (multiplicativeExpression -> asExpression .)
    LCHAVE          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    INCREMENTO      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    DECREMENTO      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    NOT             reduce using rule 122 (multiplicativeExpression -> asExpression .)
    SUSPEND         reduce using rule 122 (multiplicativeExpression -> asExpression .)
    COLONCOLON      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    RCHAVE          reduce using rule 122 (multiplicativeExpression -> asExpression .)
    PONTO           reduce using rule 122 (multiplicativeExpression -> asExpression .)
    AS              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MAISIGUAL       reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MENOSIGUAL      reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MULTIGUAL       reduce using rule 122 (multiplicativeExpression -> asExpression .)
    DIVIGUAL        reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MODIGUAL        reduce using rule 122 (multiplicativeExpression -> asExpression .)
    PV              reduce using rule 122 (multiplicativeExpression -> asExpression .)
    ELSE            reduce using rule 122 (multiplicativeExpression -> asExpression .)
    MULT            shift and go to state 155
    DIVIDE          shift and go to state 156
    MOD             shift and go to state 157

  ! MULT            [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]
  ! DIVIDE          [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]
  ! MOD             [ reduce using rule 122 (multiplicativeExpression -> asExpression .) ]

    multiplicativeOperator         shift and go to state 149

state 128

    (127) prefixUnaryExpression -> postfixUnaryExpression .

    AS              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULT            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIDE          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MOD             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    PLUS            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MINUS           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    ID              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IMPORT          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    INIT            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOINLINE        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    OUT             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    VARARG          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHERE           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    OPERATOR        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELVIS           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IN              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IN          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IS              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT_IS          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOR           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIOR           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIFERENTE       reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IGUALDADE       reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    AND             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    OR              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    COMMA           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    RPAREN          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCCT            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    LPAREN          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    FUN             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    FOR             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    WHILE           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    DO              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAR             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    VAL             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    NUMBER          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCCT            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    IF              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    RETURN_AT       reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    BREAK_AT        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    LCHAVE          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    INCREMENTO      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    DECREMENTO      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    NOT             reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    SUSPEND         reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    COLONCOLON      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    RCHAVE          reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    PONTO           reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    MODIGUAL        reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    PV              reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)
    ELSE            reduce using rule 127 (prefixUnaryExpression -> postfixUnaryExpression .)


state 129

    (184) parenthesizedExpression -> LPAREN . expression RPAREN
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 162
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 130

    (213) anonymousFunction -> FUN . optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (207) optionalTypePonto -> . type PONTO
    (208) optionalTypePonto -> .
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

  ! shift/reduce conflict for LPAREN resolved as shift
    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

  ! LPAREN          [ reduce using rule 208 (optionalTypePonto -> .) ]

    optionalTypePonto              shift and go to state 145
    type                           shift and go to state 146
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 131

    (39) parameter -> simpleIdentifier DOISP type .

    ATRIBUICAO      reduce using rule 39 (parameter -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 39 (parameter -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 39 (parameter -> simpleIdentifier DOISP type .)


state 132

    (199) lambdaLiteral -> LCHAVE optionsLambdaLiteral . RCHAVE

    RCHAVE          shift and go to state 244


state 133

    (200) optionsLambdaLiteral -> statements .

    RCHAVE          reduce using rule 200 (optionsLambdaLiteral -> statements .)


state 134

    (201) optionsLambdaLiteral -> lambdaParameters . SETA statements

    SETA            shift and go to state 245


state 135

    (202) optionsLambdaLiteral -> SETA . statements
    (70) statements -> . statement
    (71) statements -> . statement statements
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    FUN             shift and go to state 53
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

    statements                     shift and go to state 246
    statement                      shift and go to state 46
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    expression                     shift and go to state 50
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    simpleIdentifier               shift and go to state 54
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 136

    (203) lambdaParameters -> lambdaParameter .
    (204) lambdaParameters -> lambdaParameter . COMMA lambdaParameters

    SETA            reduce using rule 203 (lambdaParameters -> lambdaParameter .)
    COMMA           shift and go to state 247


state 137

    (205) lambdaParameter -> variableDeclaration .

    COMMA           reduce using rule 205 (lambdaParameter -> variableDeclaration .)
    SETA            reduce using rule 205 (lambdaParameter -> variableDeclaration .)


state 138

    (206) lambdaParameter -> multiVariableDeclaration . optionalType
    (3) optionalType -> . DOISP type
    (4) optionalType -> .

    DOISP           shift and go to state 18
    COMMA           reduce using rule 4 (optionalType -> .)
    SETA            reduce using rule 4 (optionalType -> .)

    optionalType                   shift and go to state 248

state 139

    (33) variableDeclaration -> simpleIdentifier . DOISP type
    (34) variableDeclaration -> simpleIdentifier .
    (142) directlyAssignableExpression -> simpleIdentifier .
    (176) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 176 (primaryExpression -> simpleIdentifier .)
    DOISP           shift and go to state 249
    COMMA           reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 142 (directlyAssignableExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    FUN             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VAR             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VAL             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NUMBER          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IF              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RETURN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RETURN_AT       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CONTINUE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    BREAK           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    BREAK_AT        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SUSPEND         reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]


state 140

    (35) multiVariableDeclaration -> LPAREN . multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> LPAREN . RPAREN
    (144) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (184) parenthesizedExpression -> LPAREN . expression RPAREN
    (37) multiVariableDeclarationRecursive -> . variableDeclaration
    (38) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (12) expression -> . disjunction
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (69) receiverType -> . typeModifier parenthesizedType
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (48) typeModifier -> . SUSPEND
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT

    RPAREN          shift and go to state 251
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104

    multiVariableDeclarationRecursive shift and go to state 250
    directlyAssignableExpression   shift and go to state 161
    expression                     shift and go to state 162
    variableDeclaration            shift and go to state 252
    postfixUnaryExpression         shift and go to state 63
    simpleIdentifier               shift and go to state 253
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    disjunction                    shift and go to state 60
    primaryExpression              shift and go to state 72
    conjunction                    shift and go to state 69
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    equality                       shift and go to state 74
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    comparison                     shift and go to state 84
    receiverType                   shift and go to state 99
    infixOperation                 shift and go to state 98
    typeModifier                   shift and go to state 106
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    unaryPrefix                    shift and go to state 83
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97

state 141

    (80) block -> LCHAVE statements RCHAVE .

    FUN             reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    $end            reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    LPAREN          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    FOR             reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    WHILE           reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    DO              reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    VAR             reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    VAL             reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    ID              reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    CROSSINLINE     reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    IMPORT          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    INIT            reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    NOINLINE        reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    OUT             reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    VARARG          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    WHERE           reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    OPERATOR        reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    LITERAL_STRING  reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    NUMBER          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    LCCT            reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    IF              reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    RETURN          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    RETURN_AT       reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    CONTINUE        reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    CONTINUE_AT     reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    BREAK           reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    BREAK_AT        reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    LCHAVE          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    INCREMENTO      reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    DECREMENTO      reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MINUS           reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    PLUS            reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    NOT             reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    SUSPEND         reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    COLONCOLON      reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    RCHAVE          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MENOR           reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    PONTO           reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    AS              reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MAISIGUAL       reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MENOSIGUAL      reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MULTIGUAL       reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    DIVIGUAL        reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MODIGUAL        reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MULT            reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    DIVIDE          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MOD             reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    PONTOPONTO      reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    ELVIS           reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    IN              reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    NOT_IN          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    IS              reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    NOT_IS          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MAIOR           reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MENORIGUAL      reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    MAIORIGUAL      reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    DIFERENTE       reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    IDENTIDADE      reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    IGUALDADE       reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    SEMIDENTIDADE   reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    AND             reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    OR              reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    COMMA           reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    RPAREN          reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    RCCT            reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    PV              reduce using rule 80 (block -> LCHAVE statements RCHAVE .)
    ELSE            reduce using rule 80 (block -> LCHAVE statements RCHAVE .)


state 142

    (71) statements -> statement statements .

    RCHAVE          reduce using rule 71 (statements -> statement statements .)


state 143

    (94) chamadaDeFuncao -> statement LPAREN . RPAREN
    (95) chamadaDeFuncao -> statement LPAREN . parametersFunction RPAREN
    (144) parenthesizedDirectlyAssignableExpression -> LPAREN . directlyAssignableExpression RPAREN
    (184) parenthesizedExpression -> LPAREN . expression RPAREN
    (92) parametersFunction -> . primaryExpression
    (93) parametersFunction -> . primaryExpression COMMA parametersFunction
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (12) expression -> . disjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (69) receiverType -> . typeModifier parenthesizedType
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (48) typeModifier -> . SUSPEND
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT

    RPAREN          shift and go to state 254
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104

    parametersFunction             shift and go to state 255
    directlyAssignableExpression   shift and go to state 161
    expression                     shift and go to state 162
    primaryExpression              shift and go to state 256
    postfixUnaryExpression         shift and go to state 63
    simpleIdentifier               shift and go to state 54
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    disjunction                    shift and go to state 60
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    conjunction                    shift and go to state 69
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    equality                       shift and go to state 74
    receiverType                   shift and go to state 99
    comparison                     shift and go to state 84
    typeModifier                   shift and go to state 106
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    unaryPrefix                    shift and go to state 83
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97

state 144

    (7) functionDeclaration -> FUN simpleIdentifier . functionValueParameters optionalType optionalBlock
    (53) simpleUserType -> simpleIdentifier . typeArguments
    (54) simpleUserType -> simpleIdentifier .
    (27) functionValueParameters -> . LPAREN functionValueParametersRecursive RPAREN
    (28) functionValueParameters -> . LPAREN RPAREN
    (164) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (165) typeArguments -> . MENOR MAIOR

    PONTO           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LPAREN          shift and go to state 16
    MENOR           shift and go to state 123

    functionValueParameters        shift and go to state 15
    typeArguments                  shift and go to state 122

state 145

    (213) anonymousFunction -> FUN optionalTypePonto . parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (189) parametersWithOptionalType -> . LPAREN parametersWithOptionalTypeRecursive RPAREN
    (190) parametersWithOptionalType -> . LPAREN RPAREN

    LPAREN          shift and go to state 258

    parametersWithOptionalType     shift and go to state 257

state 146

    (207) optionalTypePonto -> type . PONTO

    PONTO           shift and go to state 259


state 147

    (96) assignment -> directlyAssignableExpression ATRIBUICAO . expression
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 260
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 148

    (97) assignment -> asExpression assignmentAndOperator . expression
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    asExpression                   shift and go to state 127
    expression                     shift and go to state 261
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 149

    (123) multiplicativeExpression -> asExpression multiplicativeOperator . multiplicativeExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    asExpression                   shift and go to state 127
    multiplicativeExpression       shift and go to state 262
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    simpleIdentifier               shift and go to state 126
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 150

    (234) assignmentAndOperator -> MAISIGUAL .

    LITERAL_STRING  reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    NUMBER          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    INCREMENTO      reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    DECREMENTO      reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    MINUS           reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    PLUS            reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    NOT             reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    LPAREN          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    ID              reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    CROSSINLINE     reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    IMPORT          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    INIT            reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    NOINLINE        reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    OUT             reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    VARARG          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    WHERE           reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    OPERATOR        reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    LCCT            reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    IF              reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    RETURN          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    RETURN_AT       reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    CONTINUE        reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    CONTINUE_AT     reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    BREAK           reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    BREAK_AT        reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    LCHAVE          reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    FUN             reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    SUSPEND         reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)
    COLONCOLON      reduce using rule 234 (assignmentAndOperator -> MAISIGUAL .)


state 151

    (235) assignmentAndOperator -> MENOSIGUAL .

    LITERAL_STRING  reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    NUMBER          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    INCREMENTO      reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    DECREMENTO      reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    MINUS           reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    PLUS            reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    NOT             reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    LPAREN          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    ID              reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    CROSSINLINE     reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    IMPORT          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    INIT            reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    NOINLINE        reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    OUT             reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    VARARG          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    WHERE           reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    OPERATOR        reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    LCCT            reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    IF              reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    RETURN          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    RETURN_AT       reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    CONTINUE        reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    CONTINUE_AT     reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    BREAK           reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    BREAK_AT        reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    LCHAVE          reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    FUN             reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    SUSPEND         reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)
    COLONCOLON      reduce using rule 235 (assignmentAndOperator -> MENOSIGUAL .)


state 152

    (236) assignmentAndOperator -> MULTIGUAL .

    LITERAL_STRING  reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    NUMBER          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    INCREMENTO      reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    DECREMENTO      reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    MINUS           reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    PLUS            reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    NOT             reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    LPAREN          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    ID              reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    CROSSINLINE     reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    IMPORT          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    INIT            reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    NOINLINE        reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    OUT             reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    VARARG          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    WHERE           reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    OPERATOR        reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    LCCT            reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    IF              reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    RETURN          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    RETURN_AT       reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE        reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    CONTINUE_AT     reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    BREAK           reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    BREAK_AT        reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    LCHAVE          reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    FUN             reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    SUSPEND         reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)
    COLONCOLON      reduce using rule 236 (assignmentAndOperator -> MULTIGUAL .)


state 153

    (237) assignmentAndOperator -> DIVIGUAL .

    LITERAL_STRING  reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    NUMBER          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    INCREMENTO      reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    DECREMENTO      reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    MINUS           reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    PLUS            reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    NOT             reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    LPAREN          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    ID              reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    CROSSINLINE     reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    IMPORT          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    INIT            reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    NOINLINE        reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    OUT             reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    VARARG          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    WHERE           reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    OPERATOR        reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    LCCT            reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    IF              reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    RETURN          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    RETURN_AT       reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE        reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    CONTINUE_AT     reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    BREAK           reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    BREAK_AT        reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    LCHAVE          reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    FUN             reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    SUSPEND         reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)
    COLONCOLON      reduce using rule 237 (assignmentAndOperator -> DIVIGUAL .)


state 154

    (238) assignmentAndOperator -> MODIGUAL .

    LITERAL_STRING  reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    NUMBER          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    INCREMENTO      reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    DECREMENTO      reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    MINUS           reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    PLUS            reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    NOT             reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    LPAREN          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    ID              reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    CROSSINLINE     reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    IMPORT          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    INIT            reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    NOINLINE        reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    OUT             reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    VARARG          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    WHERE           reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    OPERATOR        reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    LCCT            reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    IF              reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    RETURN          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    RETURN_AT       reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE        reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    CONTINUE_AT     reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    BREAK           reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    BREAK_AT        reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    LCHAVE          reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    FUN             reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    SUSPEND         reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)
    COLONCOLON      reduce using rule 238 (assignmentAndOperator -> MODIGUAL .)


state 155

    (253) multiplicativeOperator -> MULT .

    LITERAL_STRING  reduce using rule 253 (multiplicativeOperator -> MULT .)
    NUMBER          reduce using rule 253 (multiplicativeOperator -> MULT .)
    INCREMENTO      reduce using rule 253 (multiplicativeOperator -> MULT .)
    DECREMENTO      reduce using rule 253 (multiplicativeOperator -> MULT .)
    MINUS           reduce using rule 253 (multiplicativeOperator -> MULT .)
    PLUS            reduce using rule 253 (multiplicativeOperator -> MULT .)
    NOT             reduce using rule 253 (multiplicativeOperator -> MULT .)
    LPAREN          reduce using rule 253 (multiplicativeOperator -> MULT .)
    ID              reduce using rule 253 (multiplicativeOperator -> MULT .)
    CROSSINLINE     reduce using rule 253 (multiplicativeOperator -> MULT .)
    IMPORT          reduce using rule 253 (multiplicativeOperator -> MULT .)
    INIT            reduce using rule 253 (multiplicativeOperator -> MULT .)
    NOINLINE        reduce using rule 253 (multiplicativeOperator -> MULT .)
    OUT             reduce using rule 253 (multiplicativeOperator -> MULT .)
    VARARG          reduce using rule 253 (multiplicativeOperator -> MULT .)
    WHERE           reduce using rule 253 (multiplicativeOperator -> MULT .)
    OPERATOR        reduce using rule 253 (multiplicativeOperator -> MULT .)
    LCCT            reduce using rule 253 (multiplicativeOperator -> MULT .)
    IF              reduce using rule 253 (multiplicativeOperator -> MULT .)
    RETURN          reduce using rule 253 (multiplicativeOperator -> MULT .)
    RETURN_AT       reduce using rule 253 (multiplicativeOperator -> MULT .)
    CONTINUE        reduce using rule 253 (multiplicativeOperator -> MULT .)
    CONTINUE_AT     reduce using rule 253 (multiplicativeOperator -> MULT .)
    BREAK           reduce using rule 253 (multiplicativeOperator -> MULT .)
    BREAK_AT        reduce using rule 253 (multiplicativeOperator -> MULT .)
    LCHAVE          reduce using rule 253 (multiplicativeOperator -> MULT .)
    FUN             reduce using rule 253 (multiplicativeOperator -> MULT .)
    SUSPEND         reduce using rule 253 (multiplicativeOperator -> MULT .)
    COLONCOLON      reduce using rule 253 (multiplicativeOperator -> MULT .)


state 156

    (254) multiplicativeOperator -> DIVIDE .

    LITERAL_STRING  reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    NUMBER          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    INCREMENTO      reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    DECREMENTO      reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    MINUS           reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    PLUS            reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    NOT             reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    LPAREN          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    ID              reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    CROSSINLINE     reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    IMPORT          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    INIT            reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    NOINLINE        reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    OUT             reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    VARARG          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    WHERE           reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    OPERATOR        reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    LCCT            reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    IF              reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    RETURN          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    RETURN_AT       reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    CONTINUE        reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    CONTINUE_AT     reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    BREAK           reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    BREAK_AT        reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    LCHAVE          reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    FUN             reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    SUSPEND         reduce using rule 254 (multiplicativeOperator -> DIVIDE .)
    COLONCOLON      reduce using rule 254 (multiplicativeOperator -> DIVIDE .)


state 157

    (255) multiplicativeOperator -> MOD .

    LITERAL_STRING  reduce using rule 255 (multiplicativeOperator -> MOD .)
    NUMBER          reduce using rule 255 (multiplicativeOperator -> MOD .)
    INCREMENTO      reduce using rule 255 (multiplicativeOperator -> MOD .)
    DECREMENTO      reduce using rule 255 (multiplicativeOperator -> MOD .)
    MINUS           reduce using rule 255 (multiplicativeOperator -> MOD .)
    PLUS            reduce using rule 255 (multiplicativeOperator -> MOD .)
    NOT             reduce using rule 255 (multiplicativeOperator -> MOD .)
    LPAREN          reduce using rule 255 (multiplicativeOperator -> MOD .)
    ID              reduce using rule 255 (multiplicativeOperator -> MOD .)
    CROSSINLINE     reduce using rule 255 (multiplicativeOperator -> MOD .)
    IMPORT          reduce using rule 255 (multiplicativeOperator -> MOD .)
    INIT            reduce using rule 255 (multiplicativeOperator -> MOD .)
    NOINLINE        reduce using rule 255 (multiplicativeOperator -> MOD .)
    OUT             reduce using rule 255 (multiplicativeOperator -> MOD .)
    VARARG          reduce using rule 255 (multiplicativeOperator -> MOD .)
    WHERE           reduce using rule 255 (multiplicativeOperator -> MOD .)
    OPERATOR        reduce using rule 255 (multiplicativeOperator -> MOD .)
    LCCT            reduce using rule 255 (multiplicativeOperator -> MOD .)
    IF              reduce using rule 255 (multiplicativeOperator -> MOD .)
    RETURN          reduce using rule 255 (multiplicativeOperator -> MOD .)
    RETURN_AT       reduce using rule 255 (multiplicativeOperator -> MOD .)
    CONTINUE        reduce using rule 255 (multiplicativeOperator -> MOD .)
    CONTINUE_AT     reduce using rule 255 (multiplicativeOperator -> MOD .)
    BREAK           reduce using rule 255 (multiplicativeOperator -> MOD .)
    BREAK_AT        reduce using rule 255 (multiplicativeOperator -> MOD .)
    LCHAVE          reduce using rule 255 (multiplicativeOperator -> MOD .)
    FUN             reduce using rule 255 (multiplicativeOperator -> MOD .)
    SUSPEND         reduce using rule 255 (multiplicativeOperator -> MOD .)
    COLONCOLON      reduce using rule 255 (multiplicativeOperator -> MOD .)


state 158

    (17) propertyDeclaration -> varOrVal optionalTypeParameters . genericVariableDeclaration ATRIBUICAO expression optionalPv
    (10) genericVariableDeclaration -> . multiVariableDeclaration
    (11) genericVariableDeclaration -> . variableDeclaration
    (35) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> . LPAREN RPAREN
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    LPAREN          shift and go to state 266
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    genericVariableDeclaration     shift and go to state 263
    multiVariableDeclaration       shift and go to state 264
    variableDeclaration            shift and go to state 265
    simpleIdentifier               shift and go to state 267

state 159

    (15) optionalTypeParameters -> typeParameters .

    LPAREN          reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    ID              reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    CROSSINLINE     reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    IMPORT          reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    INIT            reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    NOINLINE        reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    OUT             reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    VARARG          reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    WHERE           reduce using rule 15 (optionalTypeParameters -> typeParameters .)
    OPERATOR        reduce using rule 15 (optionalTypeParameters -> typeParameters .)


state 160

    (18) typeParameters -> MENOR . typeParameter typeParametersRecursive optionalCOMMA MAIOR
    (23) typeParameter -> . simpleIdentifier
    (24) typeParameter -> . simpleIdentifier DOISP type
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeParameter                  shift and go to state 268
    simpleIdentifier               shift and go to state 269

state 161

    (144) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression . RPAREN

    RPAREN          shift and go to state 270


state 162

    (184) parenthesizedExpression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 271


state 163

    (141) directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .

    ATRIBUICAO      reduce using rule 141 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)
    RPAREN          reduce using rule 141 (directlyAssignableExpression -> postfixUnaryExpression assignableSuffix .)


state 164

    (148) assignableSuffix -> typeArguments .

    ATRIBUICAO      reduce using rule 148 (assignableSuffix -> typeArguments .)
    RPAREN          reduce using rule 148 (assignableSuffix -> typeArguments .)


state 165

    (149) assignableSuffix -> indexingSuffix .

    ATRIBUICAO      reduce using rule 149 (assignableSuffix -> indexingSuffix .)
    RPAREN          reduce using rule 149 (assignableSuffix -> indexingSuffix .)


state 166

    (150) assignableSuffix -> navigationSuffix .

    ATRIBUICAO      reduce using rule 150 (assignableSuffix -> navigationSuffix .)
    RPAREN          reduce using rule 150 (assignableSuffix -> navigationSuffix .)


state 167

    (151) indexingSuffix -> LCCT . indexingSuffixRecursive RCCT
    (152) indexingSuffix -> LCCT . RCCT
    (153) indexingSuffixRecursive -> . expression
    (154) indexingSuffixRecursive -> . expression COMMA indexingSuffixRecursive
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    RCCT            shift and go to state 273
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    indexingSuffixRecursive        shift and go to state 272
    expression                     shift and go to state 274
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 168

    (155) navigationSuffix -> memberAccessOperator . simpleIdentifier CLASS
    (156) navigationSuffix -> memberAccessOperator . parenthesizedExpression CLASS
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (184) parenthesizedExpression -> . LPAREN expression RPAREN

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 129

    simpleIdentifier               shift and go to state 275
    parenthesizedExpression        shift and go to state 276

state 169

    (265) memberAccessOperator -> safeNav .

    ID              reduce using rule 265 (memberAccessOperator -> safeNav .)
    CROSSINLINE     reduce using rule 265 (memberAccessOperator -> safeNav .)
    IMPORT          reduce using rule 265 (memberAccessOperator -> safeNav .)
    INIT            reduce using rule 265 (memberAccessOperator -> safeNav .)
    NOINLINE        reduce using rule 265 (memberAccessOperator -> safeNav .)
    OUT             reduce using rule 265 (memberAccessOperator -> safeNav .)
    VARARG          reduce using rule 265 (memberAccessOperator -> safeNav .)
    WHERE           reduce using rule 265 (memberAccessOperator -> safeNav .)
    OPERATOR        reduce using rule 265 (memberAccessOperator -> safeNav .)
    LPAREN          reduce using rule 265 (memberAccessOperator -> safeNav .)


state 170

    (266) memberAccessOperator -> COLONCOLON .

    ID              reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    CROSSINLINE     reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    IMPORT          reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    INIT            reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    NOINLINE        reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    OUT             reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    VARARG          reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    WHERE           reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    OPERATOR        reduce using rule 266 (memberAccessOperator -> COLONCOLON .)
    LPAREN          reduce using rule 266 (memberAccessOperator -> COLONCOLON .)


state 171

    (267) safeNav -> PONTO .

    ID              reduce using rule 267 (safeNav -> PONTO .)
    CROSSINLINE     reduce using rule 267 (safeNav -> PONTO .)
    IMPORT          reduce using rule 267 (safeNav -> PONTO .)
    INIT            reduce using rule 267 (safeNav -> PONTO .)
    NOINLINE        reduce using rule 267 (safeNav -> PONTO .)
    OUT             reduce using rule 267 (safeNav -> PONTO .)
    VARARG          reduce using rule 267 (safeNav -> PONTO .)
    WHERE           reduce using rule 267 (safeNav -> PONTO .)
    OPERATOR        reduce using rule 267 (safeNav -> PONTO .)
    LPAREN          reduce using rule 267 (safeNav -> PONTO .)


state 172

    (125) asExpression -> prefixUnaryExpression asOperator . type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    type                           shift and go to state 277
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 173

    (256) asOperator -> AS .
    (257) asOperator -> AS . asOperator
    (256) asOperator -> . AS
    (257) asOperator -> . AS asOperator

    SUSPEND         reduce using rule 256 (asOperator -> AS .)
    LPAREN          reduce using rule 256 (asOperator -> AS .)
    ID              reduce using rule 256 (asOperator -> AS .)
    CROSSINLINE     reduce using rule 256 (asOperator -> AS .)
    IMPORT          reduce using rule 256 (asOperator -> AS .)
    INIT            reduce using rule 256 (asOperator -> AS .)
    NOINLINE        reduce using rule 256 (asOperator -> AS .)
    OUT             reduce using rule 256 (asOperator -> AS .)
    VARARG          reduce using rule 256 (asOperator -> AS .)
    WHERE           reduce using rule 256 (asOperator -> AS .)
    OPERATOR        reduce using rule 256 (asOperator -> AS .)
    AS              shift and go to state 173

    asOperator                     shift and go to state 278

state 174

    (86) forStatement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> FOR LPAREN . genericVariableDeclaration IN expression RPAREN
    (10) genericVariableDeclaration -> . multiVariableDeclaration
    (11) genericVariableDeclaration -> . variableDeclaration
    (35) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> . LPAREN RPAREN
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    LPAREN          shift and go to state 266
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    genericVariableDeclaration     shift and go to state 279
    multiVariableDeclaration       shift and go to state 264
    variableDeclaration            shift and go to state 265
    simpleIdentifier               shift and go to state 267

state 175

    (88) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (89) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 280
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 176

    (90) doWhileStatement -> DO controlStructureBody . WHILE LPAREN expression RPAREN

    WHILE           shift and go to state 281


state 177

    (91) doWhileStatement -> DO WHILE . LPAREN expression RPAREN
    (88) whileStatement -> WHILE . LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> WHILE . LPAREN expression RPAREN PV

    LPAREN          shift and go to state 282


state 178

    (78) controlStructureBody -> block .

    WHILE           reduce using rule 78 (controlStructureBody -> block .)
    LPAREN          reduce using rule 78 (controlStructureBody -> block .)
    FUN             reduce using rule 78 (controlStructureBody -> block .)
    FOR             reduce using rule 78 (controlStructureBody -> block .)
    DO              reduce using rule 78 (controlStructureBody -> block .)
    VAR             reduce using rule 78 (controlStructureBody -> block .)
    VAL             reduce using rule 78 (controlStructureBody -> block .)
    ID              reduce using rule 78 (controlStructureBody -> block .)
    CROSSINLINE     reduce using rule 78 (controlStructureBody -> block .)
    IMPORT          reduce using rule 78 (controlStructureBody -> block .)
    INIT            reduce using rule 78 (controlStructureBody -> block .)
    NOINLINE        reduce using rule 78 (controlStructureBody -> block .)
    OUT             reduce using rule 78 (controlStructureBody -> block .)
    VARARG          reduce using rule 78 (controlStructureBody -> block .)
    WHERE           reduce using rule 78 (controlStructureBody -> block .)
    OPERATOR        reduce using rule 78 (controlStructureBody -> block .)
    LITERAL_STRING  reduce using rule 78 (controlStructureBody -> block .)
    NUMBER          reduce using rule 78 (controlStructureBody -> block .)
    LCCT            reduce using rule 78 (controlStructureBody -> block .)
    IF              reduce using rule 78 (controlStructureBody -> block .)
    RETURN          reduce using rule 78 (controlStructureBody -> block .)
    RETURN_AT       reduce using rule 78 (controlStructureBody -> block .)
    CONTINUE        reduce using rule 78 (controlStructureBody -> block .)
    CONTINUE_AT     reduce using rule 78 (controlStructureBody -> block .)
    BREAK           reduce using rule 78 (controlStructureBody -> block .)
    BREAK_AT        reduce using rule 78 (controlStructureBody -> block .)
    LCHAVE          reduce using rule 78 (controlStructureBody -> block .)
    INCREMENTO      reduce using rule 78 (controlStructureBody -> block .)
    DECREMENTO      reduce using rule 78 (controlStructureBody -> block .)
    MINUS           reduce using rule 78 (controlStructureBody -> block .)
    PLUS            reduce using rule 78 (controlStructureBody -> block .)
    NOT             reduce using rule 78 (controlStructureBody -> block .)
    SUSPEND         reduce using rule 78 (controlStructureBody -> block .)
    COLONCOLON      reduce using rule 78 (controlStructureBody -> block .)
    RCHAVE          reduce using rule 78 (controlStructureBody -> block .)
    MENOR           reduce using rule 78 (controlStructureBody -> block .)
    PONTO           reduce using rule 78 (controlStructureBody -> block .)
    AS              reduce using rule 78 (controlStructureBody -> block .)
    MAISIGUAL       reduce using rule 78 (controlStructureBody -> block .)
    MENOSIGUAL      reduce using rule 78 (controlStructureBody -> block .)
    MULTIGUAL       reduce using rule 78 (controlStructureBody -> block .)
    DIVIGUAL        reduce using rule 78 (controlStructureBody -> block .)
    MODIGUAL        reduce using rule 78 (controlStructureBody -> block .)
    MULT            reduce using rule 78 (controlStructureBody -> block .)
    DIVIDE          reduce using rule 78 (controlStructureBody -> block .)
    MOD             reduce using rule 78 (controlStructureBody -> block .)
    PONTOPONTO      reduce using rule 78 (controlStructureBody -> block .)
    ELVIS           reduce using rule 78 (controlStructureBody -> block .)
    IN              reduce using rule 78 (controlStructureBody -> block .)
    NOT_IN          reduce using rule 78 (controlStructureBody -> block .)
    IS              reduce using rule 78 (controlStructureBody -> block .)
    NOT_IS          reduce using rule 78 (controlStructureBody -> block .)
    MAIOR           reduce using rule 78 (controlStructureBody -> block .)
    MENORIGUAL      reduce using rule 78 (controlStructureBody -> block .)
    MAIORIGUAL      reduce using rule 78 (controlStructureBody -> block .)
    DIFERENTE       reduce using rule 78 (controlStructureBody -> block .)
    IDENTIDADE      reduce using rule 78 (controlStructureBody -> block .)
    IGUALDADE       reduce using rule 78 (controlStructureBody -> block .)
    SEMIDENTIDADE   reduce using rule 78 (controlStructureBody -> block .)
    AND             reduce using rule 78 (controlStructureBody -> block .)
    OR              reduce using rule 78 (controlStructureBody -> block .)
    COMMA           reduce using rule 78 (controlStructureBody -> block .)
    RPAREN          reduce using rule 78 (controlStructureBody -> block .)
    RCCT            reduce using rule 78 (controlStructureBody -> block .)
    PV              reduce using rule 78 (controlStructureBody -> block .)
    ELSE            reduce using rule 78 (controlStructureBody -> block .)


state 179

    (79) controlStructureBody -> statement .
    (94) chamadaDeFuncao -> statement . LPAREN RPAREN
    (95) chamadaDeFuncao -> statement . LPAREN parametersFunction RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    WHILE           reduce using rule 79 (controlStructureBody -> statement .)
    FUN             reduce using rule 79 (controlStructureBody -> statement .)
    FOR             reduce using rule 79 (controlStructureBody -> statement .)
    DO              reduce using rule 79 (controlStructureBody -> statement .)
    VAR             reduce using rule 79 (controlStructureBody -> statement .)
    VAL             reduce using rule 79 (controlStructureBody -> statement .)
    ID              reduce using rule 79 (controlStructureBody -> statement .)
    CROSSINLINE     reduce using rule 79 (controlStructureBody -> statement .)
    IMPORT          reduce using rule 79 (controlStructureBody -> statement .)
    INIT            reduce using rule 79 (controlStructureBody -> statement .)
    NOINLINE        reduce using rule 79 (controlStructureBody -> statement .)
    OUT             reduce using rule 79 (controlStructureBody -> statement .)
    VARARG          reduce using rule 79 (controlStructureBody -> statement .)
    WHERE           reduce using rule 79 (controlStructureBody -> statement .)
    OPERATOR        reduce using rule 79 (controlStructureBody -> statement .)
    LITERAL_STRING  reduce using rule 79 (controlStructureBody -> statement .)
    NUMBER          reduce using rule 79 (controlStructureBody -> statement .)
    LCCT            reduce using rule 79 (controlStructureBody -> statement .)
    IF              reduce using rule 79 (controlStructureBody -> statement .)
    RETURN          reduce using rule 79 (controlStructureBody -> statement .)
    RETURN_AT       reduce using rule 79 (controlStructureBody -> statement .)
    CONTINUE        reduce using rule 79 (controlStructureBody -> statement .)
    CONTINUE_AT     reduce using rule 79 (controlStructureBody -> statement .)
    BREAK           reduce using rule 79 (controlStructureBody -> statement .)
    BREAK_AT        reduce using rule 79 (controlStructureBody -> statement .)
    LCHAVE          reduce using rule 79 (controlStructureBody -> statement .)
    INCREMENTO      reduce using rule 79 (controlStructureBody -> statement .)
    DECREMENTO      reduce using rule 79 (controlStructureBody -> statement .)
    MINUS           reduce using rule 79 (controlStructureBody -> statement .)
    PLUS            reduce using rule 79 (controlStructureBody -> statement .)
    NOT             reduce using rule 79 (controlStructureBody -> statement .)
    SUSPEND         reduce using rule 79 (controlStructureBody -> statement .)
    COLONCOLON      reduce using rule 79 (controlStructureBody -> statement .)
    RCHAVE          reduce using rule 79 (controlStructureBody -> statement .)
    MENOR           reduce using rule 79 (controlStructureBody -> statement .)
    PONTO           reduce using rule 79 (controlStructureBody -> statement .)
    AS              reduce using rule 79 (controlStructureBody -> statement .)
    MAISIGUAL       reduce using rule 79 (controlStructureBody -> statement .)
    MENOSIGUAL      reduce using rule 79 (controlStructureBody -> statement .)
    MULTIGUAL       reduce using rule 79 (controlStructureBody -> statement .)
    DIVIGUAL        reduce using rule 79 (controlStructureBody -> statement .)
    MODIGUAL        reduce using rule 79 (controlStructureBody -> statement .)
    MULT            reduce using rule 79 (controlStructureBody -> statement .)
    DIVIDE          reduce using rule 79 (controlStructureBody -> statement .)
    MOD             reduce using rule 79 (controlStructureBody -> statement .)
    PONTOPONTO      reduce using rule 79 (controlStructureBody -> statement .)
    ELVIS           reduce using rule 79 (controlStructureBody -> statement .)
    IN              reduce using rule 79 (controlStructureBody -> statement .)
    NOT_IN          reduce using rule 79 (controlStructureBody -> statement .)
    IS              reduce using rule 79 (controlStructureBody -> statement .)
    NOT_IS          reduce using rule 79 (controlStructureBody -> statement .)
    MAIOR           reduce using rule 79 (controlStructureBody -> statement .)
    MENORIGUAL      reduce using rule 79 (controlStructureBody -> statement .)
    MAIORIGUAL      reduce using rule 79 (controlStructureBody -> statement .)
    DIFERENTE       reduce using rule 79 (controlStructureBody -> statement .)
    IDENTIDADE      reduce using rule 79 (controlStructureBody -> statement .)
    IGUALDADE       reduce using rule 79 (controlStructureBody -> statement .)
    SEMIDENTIDADE   reduce using rule 79 (controlStructureBody -> statement .)
    AND             reduce using rule 79 (controlStructureBody -> statement .)
    OR              reduce using rule 79 (controlStructureBody -> statement .)
    COMMA           reduce using rule 79 (controlStructureBody -> statement .)
    RPAREN          reduce using rule 79 (controlStructureBody -> statement .)
    RCCT            reduce using rule 79 (controlStructureBody -> statement .)
    PV              reduce using rule 79 (controlStructureBody -> statement .)
    ELSE            reduce using rule 79 (controlStructureBody -> statement .)
    LPAREN          shift and go to state 283

  ! LPAREN          [ reduce using rule 79 (controlStructureBody -> statement .) ]


state 180

    (80) block -> LCHAVE . statements RCHAVE
    (199) lambdaLiteral -> LCHAVE . optionsLambdaLiteral RCHAVE
    (70) statements -> . statement
    (71) statements -> . statement statements
    (200) optionsLambdaLiteral -> . statements
    (201) optionsLambdaLiteral -> . lambdaParameters SETA statements
    (202) optionsLambdaLiteral -> . SETA statements
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (203) lambdaParameters -> . lambdaParameter
    (204) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (205) lambdaParameter -> . variableDeclaration
    (206) lambdaParameter -> . multiVariableDeclaration optionalType
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (35) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> . LPAREN RPAREN
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    SETA            shift and go to state 135
    FUN             shift and go to state 53
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    LPAREN          shift and go to state 140
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

    statements                     shift and go to state 284
    optionsLambdaLiteral           shift and go to state 132
    statement                      shift and go to state 46
    lambdaParameters               shift and go to state 134
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    expression                     shift and go to state 50
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    lambdaParameter                shift and go to state 136
    simpleIdentifier               shift and go to state 253
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    variableDeclaration            shift and go to state 137
    multiVariableDeclaration       shift and go to state 138
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 181

    (99) disjunction -> conjunction OR . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    conjunction                    shift and go to state 69
    disjunction                    shift and go to state 285
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 182

    (135) postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .

    MENOR           reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LCCT            reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PONTO           reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    AS              reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAISIGUAL       reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENOSIGUAL      reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MULTIGUAL       reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIVIGUAL        reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MODIGUAL        reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MULT            reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIVIDE          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MOD             reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PLUS            reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MINUS           reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PONTOPONTO      reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ID              reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    INIT            reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OUT             reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VARARG          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    WHERE           reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ELVIS           reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IN              reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT_IN          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IS              reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT_IS          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAIOR           reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MENORIGUAL      reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    MAIORIGUAL      reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DIFERENTE       reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IDENTIDADE      reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IGUALDADE       reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    SEMIDENTIDADE   reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    AND             reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    OR              reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FUN             reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    FOR             reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    WHILE           reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DO              reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VAR             reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    VAL             reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LITERAL_STRING  reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    IF              reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RETURN          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    BREAK           reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    LCHAVE          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    INCREMENTO      reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    DECREMENTO      reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    NOT             reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RCHAVE          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    COMMA           reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RPAREN          reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    RCCT            reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    PV              reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)
    ELSE            reduce using rule 135 (postfixUnaryExpression -> primaryExpression postfixUnaryExpressionRecursive .)


state 183

    (132) postfixUnaryExpressionRecursive -> postfixUnarySuffix .
    (133) postfixUnaryExpressionRecursive -> postfixUnarySuffix . postfixUnaryExpressionRecursive
    (132) postfixUnaryExpressionRecursive -> . postfixUnarySuffix
    (133) postfixUnaryExpressionRecursive -> . postfixUnarySuffix postfixUnaryExpressionRecursive
    (136) postfixUnarySuffix -> . postfixUnaryOperator
    (137) postfixUnarySuffix -> . typeArguments
    (138) postfixUnarySuffix -> . callSuffix
    (139) postfixUnarySuffix -> . indexingSuffix
    (140) postfixUnarySuffix -> . navigationSuffix
    (263) postfixUnaryOperator -> . INCREMENTO
    (264) postfixUnaryOperator -> . DECREMENTO
    (164) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (165) typeArguments -> . MENOR MAIOR
    (157) callSuffix -> . optionalTypeArguments optionalValueArguments annotatedLambda
    (158) callSuffix -> . optionalTypeArguments optionalValueArguments
    (151) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (152) indexingSuffix -> . LCCT RCCT
    (155) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (156) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (159) optionalTypeArguments -> . typeArguments
    (160) optionalTypeArguments -> .
    (265) memberAccessOperator -> . safeNav
    (266) memberAccessOperator -> . COLONCOLON
    (267) safeNav -> . PONTO

  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PONTO resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for AS resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MULT resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MOD resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PLUS resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MINUS resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ID resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IMPORT resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for INIT resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OUT resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for VARARG resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for WHERE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ELVIS resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IN resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IS resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MAIOR resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for AND resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for OR resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for FUN resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for FOR resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for WHILE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for DO resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for VAR resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for VAL resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NUMBER resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for IF resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RETURN resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for BREAK resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for NOT resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for COMMA resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RPAREN resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for RCCT resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for PV resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! reduce/reduce conflict for ELSE resolved using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    AS              reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAISIGUAL       reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MENOSIGUAL      reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MULTIGUAL       reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIVIGUAL        reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MODIGUAL        reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MULT            reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIVIDE          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MOD             reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PLUS            reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MINUS           reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PONTOPONTO      reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ID              reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CROSSINLINE     reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IMPORT          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    INIT            reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOINLINE        reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OUT             reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VARARG          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    WHERE           reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OPERATOR        reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ELVIS           reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IN              reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT_IN          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IS              reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT_IS          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAIOR           reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MENORIGUAL      reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    MAIORIGUAL      reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DIFERENTE       reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IDENTIDADE      reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IGUALDADE       reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    SEMIDENTIDADE   reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    AND             reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    OR              reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    LPAREN          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FUN             reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    FOR             reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    WHILE           reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    DO              reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VAR             reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    VAL             reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    LITERAL_STRING  reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NUMBER          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    IF              reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RETURN          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RETURN_AT       reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONTINUE        reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    CONTINUE_AT     reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    BREAK           reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    BREAK_AT        reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    LCHAVE          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    NOT             reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    SUSPEND         reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RCHAVE          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    COMMA           reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RPAREN          reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    RCCT            reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    PV              reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    ELSE            reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .)
    INCREMENTO      shift and go to state 189
    DECREMENTO      shift and go to state 190
    MENOR           shift and go to state 123
    LCCT            shift and go to state 167
    COLONCOLON      shift and go to state 170
    PONTO           shift and go to state 171

  ! MENOR           [ reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! LCCT            [ reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! COLONCOLON      [ reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! PONTO           [ reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! INCREMENTO      [ reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! DECREMENTO      [ reduce using rule 132 (postfixUnaryExpressionRecursive -> postfixUnarySuffix .) ]
  ! LPAREN          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! LCHAVE          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! INCREMENTO      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DECREMENTO      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MENOR           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! LCCT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! COLONCOLON      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PONTO           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! AS              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MAISIGUAL       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MENOSIGUAL      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MULTIGUAL       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DIVIGUAL        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MODIGUAL        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MULT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DIVIDE          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MOD             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PLUS            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MINUS           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PONTOPONTO      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! ID              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! CROSSINLINE     [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IMPORT          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! INIT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOINLINE        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! OUT             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! VARARG          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! WHERE           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! OPERATOR        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! ELVIS           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IN              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOT_IN          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IS              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOT_IS          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MAIOR           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MENORIGUAL      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MAIORIGUAL      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DIFERENTE       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IDENTIDADE      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IGUALDADE       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! AND             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! OR              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! FUN             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! FOR             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! WHILE           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DO              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! VAR             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! VAL             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! LITERAL_STRING  [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NUMBER          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IF              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RETURN          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RETURN_AT       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! CONTINUE        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! CONTINUE_AT     [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! BREAK           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! BREAK_AT        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOT             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! SUSPEND         [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RCHAVE          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! COMMA           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RPAREN          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RCCT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PV              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! ELSE            [ reduce using rule 160 (optionalTypeArguments -> .) ]

    postfixUnarySuffix             shift and go to state 183
    postfixUnaryExpressionRecursive shift and go to state 286
    postfixUnaryOperator           shift and go to state 184
    typeArguments                  shift and go to state 185
    callSuffix                     shift and go to state 186
    indexingSuffix                 shift and go to state 187
    navigationSuffix               shift and go to state 188
    optionalTypeArguments          shift and go to state 191
    memberAccessOperator           shift and go to state 168
    safeNav                        shift and go to state 169

state 184

    (136) postfixUnarySuffix -> postfixUnaryOperator .

    INCREMENTO      reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    DECREMENTO      reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOR           reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCCT            reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    COLONCOLON      reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTO           reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    LPAREN          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    LCHAVE          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    AS              reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAISIGUAL       reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENOSIGUAL      reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULTIGUAL       reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIGUAL        reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MODIGUAL        reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MULT            reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIVIDE          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MOD             reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    PLUS            reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MINUS           reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    PONTOPONTO      reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    ID              reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    CROSSINLINE     reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    IMPORT          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    INIT            reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOINLINE        reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    OUT             reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    VARARG          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHERE           reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    OPERATOR        reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELVIS           reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    IN              reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IN          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    IS              reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT_IS          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIOR           reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MENORIGUAL      reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    MAIORIGUAL      reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    DIFERENTE       reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    IDENTIDADE      reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    IGUALDADE       reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    SEMIDENTIDADE   reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    AND             reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    OR              reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    FUN             reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    FOR             reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    WHILE           reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    DO              reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    VAR             reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    VAL             reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    LITERAL_STRING  reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    NUMBER          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    IF              reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    RETURN_AT       reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE        reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    CONTINUE_AT     reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK           reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    BREAK_AT        reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    NOT             reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    SUSPEND         reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCHAVE          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    COMMA           reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    RPAREN          reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    RCCT            reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    PV              reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)
    ELSE            reduce using rule 136 (postfixUnarySuffix -> postfixUnaryOperator .)


state 185

    (137) postfixUnarySuffix -> typeArguments .
    (159) optionalTypeArguments -> typeArguments .

  ! reduce/reduce conflict for LPAREN resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MENOR resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LCCT resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PONTO resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for AS resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MULT resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MOD resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PLUS resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MINUS resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ID resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IMPORT resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for INIT resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OUT resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for VARARG resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for WHERE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ELVIS resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IN resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IS resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MAIOR resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for AND resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for OR resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for FUN resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for FOR resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for WHILE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for DO resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for VAR resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for VAL resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NUMBER resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for IF resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RETURN resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for BREAK resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for NOT resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for COMMA resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RPAREN resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for RCCT resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for PV resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
  ! reduce/reduce conflict for ELSE resolved using rule 137 (postfixUnarySuffix -> typeArguments .)
    INCREMENTO      reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    DECREMENTO      reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MENOR           reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    LCCT            reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    COLONCOLON      reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    PONTO           reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    LPAREN          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    LCHAVE          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    AS              reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MAISIGUAL       reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MENOSIGUAL      reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MULTIGUAL       reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    DIVIGUAL        reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MODIGUAL        reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MULT            reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    DIVIDE          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MOD             reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    PLUS            reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MINUS           reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    PONTOPONTO      reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    ID              reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    CROSSINLINE     reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    IMPORT          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    INIT            reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    NOINLINE        reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    OUT             reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    VARARG          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    WHERE           reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    OPERATOR        reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    ELVIS           reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    IN              reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    NOT_IN          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    IS              reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    NOT_IS          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MAIOR           reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MENORIGUAL      reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    MAIORIGUAL      reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    DIFERENTE       reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    IDENTIDADE      reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    IGUALDADE       reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    SEMIDENTIDADE   reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    AND             reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    OR              reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    FUN             reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    FOR             reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    WHILE           reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    DO              reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    VAR             reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    VAL             reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    LITERAL_STRING  reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    NUMBER          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    IF              reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    RETURN          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    RETURN_AT       reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    CONTINUE        reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    CONTINUE_AT     reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    BREAK           reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    BREAK_AT        reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    NOT             reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    SUSPEND         reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    RCHAVE          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    COMMA           reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    RPAREN          reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    RCCT            reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    PV              reduce using rule 137 (postfixUnarySuffix -> typeArguments .)
    ELSE            reduce using rule 137 (postfixUnarySuffix -> typeArguments .)

  ! LPAREN          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! LCHAVE          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! INCREMENTO      [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! DECREMENTO      [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MENOR           [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! LCCT            [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! COLONCOLON      [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! PONTO           [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! AS              [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MAISIGUAL       [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MENOSIGUAL      [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MULTIGUAL       [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! DIVIGUAL        [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MODIGUAL        [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MULT            [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! DIVIDE          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MOD             [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! PLUS            [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MINUS           [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! PONTOPONTO      [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! ID              [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! CROSSINLINE     [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! IMPORT          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! INIT            [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! NOINLINE        [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! OUT             [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! VARARG          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! WHERE           [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! OPERATOR        [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! ELVIS           [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! IN              [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! NOT_IN          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! IS              [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! NOT_IS          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MAIOR           [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MENORIGUAL      [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! MAIORIGUAL      [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! DIFERENTE       [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! IDENTIDADE      [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! IGUALDADE       [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! SEMIDENTIDADE   [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! AND             [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! OR              [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! FUN             [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! FOR             [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! WHILE           [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! DO              [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! VAR             [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! VAL             [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! LITERAL_STRING  [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! NUMBER          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! IF              [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! RETURN          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! RETURN_AT       [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! CONTINUE        [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! CONTINUE_AT     [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! BREAK           [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! BREAK_AT        [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! NOT             [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! SUSPEND         [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! RCHAVE          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! COMMA           [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! RPAREN          [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! RCCT            [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! PV              [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]
  ! ELSE            [ reduce using rule 159 (optionalTypeArguments -> typeArguments .) ]


state 186

    (138) postfixUnarySuffix -> callSuffix .

    INCREMENTO      reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    DECREMENTO      reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MENOR           reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    LCCT            reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    COLONCOLON      reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    PONTO           reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    LPAREN          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    LCHAVE          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    AS              reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MAISIGUAL       reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MENOSIGUAL      reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MULTIGUAL       reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    DIVIGUAL        reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MODIGUAL        reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MULT            reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    DIVIDE          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MOD             reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    PLUS            reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MINUS           reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    PONTOPONTO      reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    ID              reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    CROSSINLINE     reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    IMPORT          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    INIT            reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    NOINLINE        reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    OUT             reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    VARARG          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    WHERE           reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    OPERATOR        reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    ELVIS           reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    IN              reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    NOT_IN          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    IS              reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    NOT_IS          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MAIOR           reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MENORIGUAL      reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    MAIORIGUAL      reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    DIFERENTE       reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    IDENTIDADE      reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    IGUALDADE       reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    SEMIDENTIDADE   reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    AND             reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    OR              reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    FUN             reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    FOR             reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    WHILE           reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    DO              reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    VAR             reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    VAL             reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    LITERAL_STRING  reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    NUMBER          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    IF              reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    RETURN          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    RETURN_AT       reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    CONTINUE        reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    CONTINUE_AT     reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    BREAK           reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    BREAK_AT        reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    NOT             reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    SUSPEND         reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    RCHAVE          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    COMMA           reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    RPAREN          reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    RCCT            reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    PV              reduce using rule 138 (postfixUnarySuffix -> callSuffix .)
    ELSE            reduce using rule 138 (postfixUnarySuffix -> callSuffix .)


state 187

    (139) postfixUnarySuffix -> indexingSuffix .

    INCREMENTO      reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    DECREMENTO      reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MENOR           reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    LCCT            reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    COLONCOLON      reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    PONTO           reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    LPAREN          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    LCHAVE          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    AS              reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MAISIGUAL       reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MENOSIGUAL      reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MULTIGUAL       reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    DIVIGUAL        reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MODIGUAL        reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MULT            reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    DIVIDE          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MOD             reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    PLUS            reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MINUS           reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    PONTOPONTO      reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    ID              reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    CROSSINLINE     reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    IMPORT          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    INIT            reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    NOINLINE        reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    OUT             reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    VARARG          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    WHERE           reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    OPERATOR        reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    ELVIS           reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    IN              reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IN          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    IS              reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    NOT_IS          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MAIOR           reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MENORIGUAL      reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    MAIORIGUAL      reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    DIFERENTE       reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    IDENTIDADE      reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    IGUALDADE       reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    SEMIDENTIDADE   reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    AND             reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    OR              reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    FUN             reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    FOR             reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    WHILE           reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    DO              reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    VAR             reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    VAL             reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    LITERAL_STRING  reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    NUMBER          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    IF              reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    RETURN          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    RETURN_AT       reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE        reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    CONTINUE_AT     reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    BREAK           reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    BREAK_AT        reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    NOT             reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    SUSPEND         reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    RCHAVE          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    COMMA           reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    RPAREN          reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    RCCT            reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    PV              reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)
    ELSE            reduce using rule 139 (postfixUnarySuffix -> indexingSuffix .)


state 188

    (140) postfixUnarySuffix -> navigationSuffix .

    INCREMENTO      reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    DECREMENTO      reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MENOR           reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    LCCT            reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    COLONCOLON      reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    PONTO           reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    LPAREN          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    LCHAVE          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    AS              reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MAISIGUAL       reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MENOSIGUAL      reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MULTIGUAL       reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    DIVIGUAL        reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MODIGUAL        reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MULT            reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    DIVIDE          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MOD             reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    PLUS            reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MINUS           reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    PONTOPONTO      reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    ID              reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    CROSSINLINE     reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    IMPORT          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    INIT            reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    NOINLINE        reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    OUT             reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    VARARG          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    WHERE           reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    OPERATOR        reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    ELVIS           reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    IN              reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IN          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    IS              reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    NOT_IS          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MAIOR           reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MENORIGUAL      reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    MAIORIGUAL      reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    DIFERENTE       reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    IDENTIDADE      reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    IGUALDADE       reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    SEMIDENTIDADE   reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    AND             reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    OR              reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    FUN             reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    FOR             reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    WHILE           reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    DO              reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    VAR             reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    VAL             reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    LITERAL_STRING  reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    NUMBER          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    IF              reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    RETURN          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    RETURN_AT       reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE        reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    CONTINUE_AT     reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    BREAK           reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    BREAK_AT        reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    NOT             reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    SUSPEND         reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    RCHAVE          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    COMMA           reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    RPAREN          reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    RCCT            reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    PV              reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)
    ELSE            reduce using rule 140 (postfixUnarySuffix -> navigationSuffix .)


state 189

    (263) postfixUnaryOperator -> INCREMENTO .

    INCREMENTO      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    DECREMENTO      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MENOR           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    LCCT            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    COLONCOLON      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    PONTO           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    LPAREN          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    LCHAVE          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    AS              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MAISIGUAL       reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MENOSIGUAL      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MULTIGUAL       reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    DIVIGUAL        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MODIGUAL        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MULT            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    DIVIDE          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MOD             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    PLUS            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MINUS           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    PONTOPONTO      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    ID              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    CROSSINLINE     reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IMPORT          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    INIT            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    NOINLINE        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    OUT             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    VARARG          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    WHERE           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    OPERATOR        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    ELVIS           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IN              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IN          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IS              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    NOT_IS          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MAIOR           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MENORIGUAL      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    MAIORIGUAL      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    DIFERENTE       reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IDENTIDADE      reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IGUALDADE       reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    SEMIDENTIDADE   reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    AND             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    OR              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    FUN             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    FOR             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    WHILE           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    DO              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    VAR             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    VAL             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    LITERAL_STRING  reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    NUMBER          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    IF              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    RETURN          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    RETURN_AT       reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    CONTINUE_AT     reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    BREAK           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    BREAK_AT        reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    NOT             reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    SUSPEND         reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    RCHAVE          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    COMMA           reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    RPAREN          reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    RCCT            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    PV              reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)
    ELSE            reduce using rule 263 (postfixUnaryOperator -> INCREMENTO .)


state 190

    (264) postfixUnaryOperator -> DECREMENTO .

    INCREMENTO      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    DECREMENTO      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MENOR           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    LCCT            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    COLONCOLON      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    PONTO           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    LPAREN          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    LCHAVE          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    AS              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MAISIGUAL       reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MENOSIGUAL      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MULTIGUAL       reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    DIVIGUAL        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MODIGUAL        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MULT            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    DIVIDE          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MOD             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    PLUS            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MINUS           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    PONTOPONTO      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    ID              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    CROSSINLINE     reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IMPORT          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    INIT            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    NOINLINE        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    OUT             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    VARARG          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    WHERE           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    OPERATOR        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    ELVIS           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IN              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IN          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IS              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    NOT_IS          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MAIOR           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MENORIGUAL      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    MAIORIGUAL      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    DIFERENTE       reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IDENTIDADE      reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IGUALDADE       reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    SEMIDENTIDADE   reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    AND             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    OR              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    FUN             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    FOR             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    WHILE           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    DO              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    VAR             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    VAL             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    LITERAL_STRING  reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    NUMBER          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    IF              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    RETURN          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    RETURN_AT       reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    CONTINUE_AT     reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    BREAK           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    BREAK_AT        reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    NOT             reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    SUSPEND         reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    RCHAVE          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    COMMA           reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    RPAREN          reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    RCCT            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    PV              reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)
    ELSE            reduce using rule 264 (postfixUnaryOperator -> DECREMENTO .)


state 191

    (157) callSuffix -> optionalTypeArguments . optionalValueArguments annotatedLambda
    (158) callSuffix -> optionalTypeArguments . optionalValueArguments
    (161) optionalValueArguments -> . valueArguments
    (162) optionalValueArguments -> .
    (170) valueArguments -> . LPAREN RPAREN
    (171) valueArguments -> . LPAREN valueArgumentsRecursive RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    LCHAVE          reduce using rule 162 (optionalValueArguments -> .)
    INCREMENTO      reduce using rule 162 (optionalValueArguments -> .)
    DECREMENTO      reduce using rule 162 (optionalValueArguments -> .)
    MENOR           reduce using rule 162 (optionalValueArguments -> .)
    LCCT            reduce using rule 162 (optionalValueArguments -> .)
    COLONCOLON      reduce using rule 162 (optionalValueArguments -> .)
    PONTO           reduce using rule 162 (optionalValueArguments -> .)
    AS              reduce using rule 162 (optionalValueArguments -> .)
    MAISIGUAL       reduce using rule 162 (optionalValueArguments -> .)
    MENOSIGUAL      reduce using rule 162 (optionalValueArguments -> .)
    MULTIGUAL       reduce using rule 162 (optionalValueArguments -> .)
    DIVIGUAL        reduce using rule 162 (optionalValueArguments -> .)
    MODIGUAL        reduce using rule 162 (optionalValueArguments -> .)
    MULT            reduce using rule 162 (optionalValueArguments -> .)
    DIVIDE          reduce using rule 162 (optionalValueArguments -> .)
    MOD             reduce using rule 162 (optionalValueArguments -> .)
    PLUS            reduce using rule 162 (optionalValueArguments -> .)
    MINUS           reduce using rule 162 (optionalValueArguments -> .)
    PONTOPONTO      reduce using rule 162 (optionalValueArguments -> .)
    ID              reduce using rule 162 (optionalValueArguments -> .)
    CROSSINLINE     reduce using rule 162 (optionalValueArguments -> .)
    IMPORT          reduce using rule 162 (optionalValueArguments -> .)
    INIT            reduce using rule 162 (optionalValueArguments -> .)
    NOINLINE        reduce using rule 162 (optionalValueArguments -> .)
    OUT             reduce using rule 162 (optionalValueArguments -> .)
    VARARG          reduce using rule 162 (optionalValueArguments -> .)
    WHERE           reduce using rule 162 (optionalValueArguments -> .)
    OPERATOR        reduce using rule 162 (optionalValueArguments -> .)
    ELVIS           reduce using rule 162 (optionalValueArguments -> .)
    IN              reduce using rule 162 (optionalValueArguments -> .)
    NOT_IN          reduce using rule 162 (optionalValueArguments -> .)
    IS              reduce using rule 162 (optionalValueArguments -> .)
    NOT_IS          reduce using rule 162 (optionalValueArguments -> .)
    MAIOR           reduce using rule 162 (optionalValueArguments -> .)
    MENORIGUAL      reduce using rule 162 (optionalValueArguments -> .)
    MAIORIGUAL      reduce using rule 162 (optionalValueArguments -> .)
    DIFERENTE       reduce using rule 162 (optionalValueArguments -> .)
    IDENTIDADE      reduce using rule 162 (optionalValueArguments -> .)
    IGUALDADE       reduce using rule 162 (optionalValueArguments -> .)
    SEMIDENTIDADE   reduce using rule 162 (optionalValueArguments -> .)
    AND             reduce using rule 162 (optionalValueArguments -> .)
    OR              reduce using rule 162 (optionalValueArguments -> .)
    FUN             reduce using rule 162 (optionalValueArguments -> .)
    FOR             reduce using rule 162 (optionalValueArguments -> .)
    WHILE           reduce using rule 162 (optionalValueArguments -> .)
    DO              reduce using rule 162 (optionalValueArguments -> .)
    VAR             reduce using rule 162 (optionalValueArguments -> .)
    VAL             reduce using rule 162 (optionalValueArguments -> .)
    LITERAL_STRING  reduce using rule 162 (optionalValueArguments -> .)
    NUMBER          reduce using rule 162 (optionalValueArguments -> .)
    IF              reduce using rule 162 (optionalValueArguments -> .)
    RETURN          reduce using rule 162 (optionalValueArguments -> .)
    RETURN_AT       reduce using rule 162 (optionalValueArguments -> .)
    CONTINUE        reduce using rule 162 (optionalValueArguments -> .)
    CONTINUE_AT     reduce using rule 162 (optionalValueArguments -> .)
    BREAK           reduce using rule 162 (optionalValueArguments -> .)
    BREAK_AT        reduce using rule 162 (optionalValueArguments -> .)
    NOT             reduce using rule 162 (optionalValueArguments -> .)
    SUSPEND         reduce using rule 162 (optionalValueArguments -> .)
    RCHAVE          reduce using rule 162 (optionalValueArguments -> .)
    COMMA           reduce using rule 162 (optionalValueArguments -> .)
    RPAREN          reduce using rule 162 (optionalValueArguments -> .)
    RCCT            reduce using rule 162 (optionalValueArguments -> .)
    PV              reduce using rule 162 (optionalValueArguments -> .)
    ELSE            reduce using rule 162 (optionalValueArguments -> .)
    LPAREN          shift and go to state 289

  ! LPAREN          [ reduce using rule 162 (optionalValueArguments -> .) ]

    optionalValueArguments         shift and go to state 287
    valueArguments                 shift and go to state 288

state 192

    (126) prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .

    AS              reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAISIGUAL       reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENOSIGUAL      reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MULTIGUAL       reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIVIGUAL        reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MODIGUAL        reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MULT            reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIVIDE          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MOD             reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PLUS            reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MINUS           reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PONTOPONTO      reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ID              reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CROSSINLINE     reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IMPORT          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    INIT            reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOINLINE        reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OUT             reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VARARG          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    WHERE           reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OPERATOR        reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ELVIS           reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IN              reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT_IN          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IS              reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT_IS          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENOR           reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAIOR           reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MENORIGUAL      reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    MAIORIGUAL      reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DIFERENTE       reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IDENTIDADE      reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IGUALDADE       reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    SEMIDENTIDADE   reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    AND             reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    OR              reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LPAREN          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FUN             reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    FOR             reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    WHILE           reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DO              reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VAR             reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    VAL             reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LITERAL_STRING  reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NUMBER          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LCCT            reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    IF              reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RETURN          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RETURN_AT       reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONTINUE        reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    CONTINUE_AT     reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    BREAK           reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    BREAK_AT        reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    LCHAVE          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    INCREMENTO      reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    DECREMENTO      reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    NOT             reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    SUSPEND         reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    COLONCOLON      reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RCHAVE          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    COMMA           reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RPAREN          reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    RCCT            reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PONTO           reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    PV              reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)
    ELSE            reduce using rule 126 (prefixUnaryExpression -> prefixUnaryExpressionRecursive postfixUnaryExpression .)


state 193

    (176) primaryExpression -> simpleIdentifier .

    LPAREN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    FUN             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VAR             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VAL             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NUMBER          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IF              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RETURN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RETURN_AT       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CONTINUE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    BREAK           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    BREAK_AT        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    INCREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SUSPEND         reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RCCT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PV              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ELSE            reduce using rule 176 (primaryExpression -> simpleIdentifier .)


state 194

    (101) conjunction -> equality AND . conjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    equality                       shift and go to state 74
    conjunction                    shift and go to state 290
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 195

    (131) prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .

    LITERAL_STRING  reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    ID              reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    INIT            reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    OUT             reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    VARARG          reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    WHERE           reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LCCT            reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    IF              reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    RETURN          reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    BREAK           reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    LCHAVE          reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    FUN             reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 131 (prefixUnaryExpressionRecursive -> unaryPrefix prefixUnaryExpressionRecursive .)


state 196

    (268) label -> simpleIdentifier .

    INCREMENTO      reduce using rule 268 (label -> simpleIdentifier .)
    DECREMENTO      reduce using rule 268 (label -> simpleIdentifier .)
    MINUS           reduce using rule 268 (label -> simpleIdentifier .)
    PLUS            reduce using rule 268 (label -> simpleIdentifier .)
    NOT             reduce using rule 268 (label -> simpleIdentifier .)
    ID              reduce using rule 268 (label -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 268 (label -> simpleIdentifier .)
    IMPORT          reduce using rule 268 (label -> simpleIdentifier .)
    INIT            reduce using rule 268 (label -> simpleIdentifier .)
    NOINLINE        reduce using rule 268 (label -> simpleIdentifier .)
    OUT             reduce using rule 268 (label -> simpleIdentifier .)
    VARARG          reduce using rule 268 (label -> simpleIdentifier .)
    WHERE           reduce using rule 268 (label -> simpleIdentifier .)
    OPERATOR        reduce using rule 268 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 268 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 268 (label -> simpleIdentifier .)
    LPAREN          reduce using rule 268 (label -> simpleIdentifier .)
    LCCT            reduce using rule 268 (label -> simpleIdentifier .)
    IF              reduce using rule 268 (label -> simpleIdentifier .)
    RETURN          reduce using rule 268 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 268 (label -> simpleIdentifier .)
    BREAK           reduce using rule 268 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 268 (label -> simpleIdentifier .)
    LCHAVE          reduce using rule 268 (label -> simpleIdentifier .)
    FUN             reduce using rule 268 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 268 (label -> simpleIdentifier .)
    COLONCOLON      reduce using rule 268 (label -> simpleIdentifier .)


state 197

    (103) equality -> comparison equalityOperator . equality
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    comparison                     shift and go to state 84
    equality                       shift and go to state 291
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 198

    (239) equalityOperator -> DIFERENTE .

    LITERAL_STRING  reduce using rule 239 (equalityOperator -> DIFERENTE .)
    NUMBER          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    INCREMENTO      reduce using rule 239 (equalityOperator -> DIFERENTE .)
    DECREMENTO      reduce using rule 239 (equalityOperator -> DIFERENTE .)
    MINUS           reduce using rule 239 (equalityOperator -> DIFERENTE .)
    PLUS            reduce using rule 239 (equalityOperator -> DIFERENTE .)
    NOT             reduce using rule 239 (equalityOperator -> DIFERENTE .)
    LPAREN          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    ID              reduce using rule 239 (equalityOperator -> DIFERENTE .)
    CROSSINLINE     reduce using rule 239 (equalityOperator -> DIFERENTE .)
    IMPORT          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    INIT            reduce using rule 239 (equalityOperator -> DIFERENTE .)
    NOINLINE        reduce using rule 239 (equalityOperator -> DIFERENTE .)
    OUT             reduce using rule 239 (equalityOperator -> DIFERENTE .)
    VARARG          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    WHERE           reduce using rule 239 (equalityOperator -> DIFERENTE .)
    OPERATOR        reduce using rule 239 (equalityOperator -> DIFERENTE .)
    LCCT            reduce using rule 239 (equalityOperator -> DIFERENTE .)
    IF              reduce using rule 239 (equalityOperator -> DIFERENTE .)
    RETURN          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    RETURN_AT       reduce using rule 239 (equalityOperator -> DIFERENTE .)
    CONTINUE        reduce using rule 239 (equalityOperator -> DIFERENTE .)
    CONTINUE_AT     reduce using rule 239 (equalityOperator -> DIFERENTE .)
    BREAK           reduce using rule 239 (equalityOperator -> DIFERENTE .)
    BREAK_AT        reduce using rule 239 (equalityOperator -> DIFERENTE .)
    LCHAVE          reduce using rule 239 (equalityOperator -> DIFERENTE .)
    FUN             reduce using rule 239 (equalityOperator -> DIFERENTE .)
    SUSPEND         reduce using rule 239 (equalityOperator -> DIFERENTE .)
    COLONCOLON      reduce using rule 239 (equalityOperator -> DIFERENTE .)


state 199

    (240) equalityOperator -> IDENTIDADE .

    LITERAL_STRING  reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    NUMBER          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    INCREMENTO      reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    DECREMENTO      reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    MINUS           reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    PLUS            reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    NOT             reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    LPAREN          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    ID              reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    CROSSINLINE     reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    IMPORT          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    INIT            reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    NOINLINE        reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    OUT             reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    VARARG          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    WHERE           reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    OPERATOR        reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    LCCT            reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    IF              reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    RETURN          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    RETURN_AT       reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    CONTINUE        reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    CONTINUE_AT     reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    BREAK           reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    BREAK_AT        reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    LCHAVE          reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    FUN             reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    SUSPEND         reduce using rule 240 (equalityOperator -> IDENTIDADE .)
    COLONCOLON      reduce using rule 240 (equalityOperator -> IDENTIDADE .)


state 200

    (241) equalityOperator -> IGUALDADE .

    LITERAL_STRING  reduce using rule 241 (equalityOperator -> IGUALDADE .)
    NUMBER          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    INCREMENTO      reduce using rule 241 (equalityOperator -> IGUALDADE .)
    DECREMENTO      reduce using rule 241 (equalityOperator -> IGUALDADE .)
    MINUS           reduce using rule 241 (equalityOperator -> IGUALDADE .)
    PLUS            reduce using rule 241 (equalityOperator -> IGUALDADE .)
    NOT             reduce using rule 241 (equalityOperator -> IGUALDADE .)
    LPAREN          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    ID              reduce using rule 241 (equalityOperator -> IGUALDADE .)
    CROSSINLINE     reduce using rule 241 (equalityOperator -> IGUALDADE .)
    IMPORT          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    INIT            reduce using rule 241 (equalityOperator -> IGUALDADE .)
    NOINLINE        reduce using rule 241 (equalityOperator -> IGUALDADE .)
    OUT             reduce using rule 241 (equalityOperator -> IGUALDADE .)
    VARARG          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    WHERE           reduce using rule 241 (equalityOperator -> IGUALDADE .)
    OPERATOR        reduce using rule 241 (equalityOperator -> IGUALDADE .)
    LCCT            reduce using rule 241 (equalityOperator -> IGUALDADE .)
    IF              reduce using rule 241 (equalityOperator -> IGUALDADE .)
    RETURN          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    RETURN_AT       reduce using rule 241 (equalityOperator -> IGUALDADE .)
    CONTINUE        reduce using rule 241 (equalityOperator -> IGUALDADE .)
    CONTINUE_AT     reduce using rule 241 (equalityOperator -> IGUALDADE .)
    BREAK           reduce using rule 241 (equalityOperator -> IGUALDADE .)
    BREAK_AT        reduce using rule 241 (equalityOperator -> IGUALDADE .)
    LCHAVE          reduce using rule 241 (equalityOperator -> IGUALDADE .)
    FUN             reduce using rule 241 (equalityOperator -> IGUALDADE .)
    SUSPEND         reduce using rule 241 (equalityOperator -> IGUALDADE .)
    COLONCOLON      reduce using rule 241 (equalityOperator -> IGUALDADE .)


state 201

    (242) equalityOperator -> SEMIDENTIDADE .

    LITERAL_STRING  reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    NUMBER          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    INCREMENTO      reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    DECREMENTO      reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    MINUS           reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    PLUS            reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    NOT             reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    LPAREN          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    ID              reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    CROSSINLINE     reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    IMPORT          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    INIT            reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    NOINLINE        reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    OUT             reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    VARARG          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    WHERE           reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    OPERATOR        reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    LCCT            reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    IF              reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    RETURN          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    RETURN_AT       reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE        reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    CONTINUE_AT     reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    BREAK           reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    BREAK_AT        reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    LCHAVE          reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    FUN             reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    SUSPEND         reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)
    COLONCOLON      reduce using rule 242 (equalityOperator -> SEMIDENTIDADE .)


state 202

    (229) callableReference -> optionalReceiverType COLONCOLON . simpleIdentifierOrClass
    (232) simpleIdentifierOrClass -> . simpleIdentifier
    (233) simpleIdentifierOrClass -> . CLASS
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    CLASS           shift and go to state 294
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifierOrClass        shift and go to state 292
    simpleIdentifier               shift and go to state 293

state 203

    (185) collectionLiteral -> LCCT collectionLiteralRecursive . RCCT

    RCCT            shift and go to state 295


state 204

    (186) collectionLiteral -> LCCT RCCT .

    INCREMENTO      reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    DECREMENTO      reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MENOR           reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    LCCT            reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    COLONCOLON      reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    PONTO           reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    LPAREN          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    LCHAVE          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    AS              reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MAISIGUAL       reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MENOSIGUAL      reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MODIGUAL        reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MULT            reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    DIVIDE          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MOD             reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    PLUS            reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MINUS           reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    ID              reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    IMPORT          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    INIT            reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    NOINLINE        reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    OUT             reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    VARARG          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    WHERE           reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    OPERATOR        reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    ELVIS           reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    IN              reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    NOT_IN          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    IS              reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    NOT_IS          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MAIOR           reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    DIFERENTE       reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    IGUALDADE       reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    AND             reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    OR              reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    FUN             reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    FOR             reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    WHILE           reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    DO              reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    VAR             reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    VAL             reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    NUMBER          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    IF              reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    RETURN          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    RETURN_AT       reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    CONTINUE        reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    BREAK           reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    BREAK_AT        reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    NOT             reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    SUSPEND         reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    RCHAVE          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    COMMA           reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    RPAREN          reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    RCCT            reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    PV              reduce using rule 186 (collectionLiteral -> LCCT RCCT .)
    ELSE            reduce using rule 186 (collectionLiteral -> LCCT RCCT .)


state 205

    (187) collectionLiteralRecursive -> expression .
    (188) collectionLiteralRecursive -> expression . COMMA collectionLiteralRecursive

    RCCT            reduce using rule 187 (collectionLiteralRecursive -> expression .)
    COMMA           shift and go to state 296


state 206

    (217) ifExpression -> IF LPAREN . expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> IF LPAREN . expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 297
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 207

    (223) jumpExpression -> RETURN expression .

    INCREMENTO      reduce using rule 223 (jumpExpression -> RETURN expression .)
    DECREMENTO      reduce using rule 223 (jumpExpression -> RETURN expression .)
    MENOR           reduce using rule 223 (jumpExpression -> RETURN expression .)
    LCCT            reduce using rule 223 (jumpExpression -> RETURN expression .)
    COLONCOLON      reduce using rule 223 (jumpExpression -> RETURN expression .)
    PONTO           reduce using rule 223 (jumpExpression -> RETURN expression .)
    LPAREN          reduce using rule 223 (jumpExpression -> RETURN expression .)
    LCHAVE          reduce using rule 223 (jumpExpression -> RETURN expression .)
    AS              reduce using rule 223 (jumpExpression -> RETURN expression .)
    MAISIGUAL       reduce using rule 223 (jumpExpression -> RETURN expression .)
    MENOSIGUAL      reduce using rule 223 (jumpExpression -> RETURN expression .)
    MULTIGUAL       reduce using rule 223 (jumpExpression -> RETURN expression .)
    DIVIGUAL        reduce using rule 223 (jumpExpression -> RETURN expression .)
    MODIGUAL        reduce using rule 223 (jumpExpression -> RETURN expression .)
    MULT            reduce using rule 223 (jumpExpression -> RETURN expression .)
    DIVIDE          reduce using rule 223 (jumpExpression -> RETURN expression .)
    MOD             reduce using rule 223 (jumpExpression -> RETURN expression .)
    PLUS            reduce using rule 223 (jumpExpression -> RETURN expression .)
    MINUS           reduce using rule 223 (jumpExpression -> RETURN expression .)
    PONTOPONTO      reduce using rule 223 (jumpExpression -> RETURN expression .)
    ID              reduce using rule 223 (jumpExpression -> RETURN expression .)
    CROSSINLINE     reduce using rule 223 (jumpExpression -> RETURN expression .)
    IMPORT          reduce using rule 223 (jumpExpression -> RETURN expression .)
    INIT            reduce using rule 223 (jumpExpression -> RETURN expression .)
    NOINLINE        reduce using rule 223 (jumpExpression -> RETURN expression .)
    OUT             reduce using rule 223 (jumpExpression -> RETURN expression .)
    VARARG          reduce using rule 223 (jumpExpression -> RETURN expression .)
    WHERE           reduce using rule 223 (jumpExpression -> RETURN expression .)
    OPERATOR        reduce using rule 223 (jumpExpression -> RETURN expression .)
    ELVIS           reduce using rule 223 (jumpExpression -> RETURN expression .)
    IN              reduce using rule 223 (jumpExpression -> RETURN expression .)
    NOT_IN          reduce using rule 223 (jumpExpression -> RETURN expression .)
    IS              reduce using rule 223 (jumpExpression -> RETURN expression .)
    NOT_IS          reduce using rule 223 (jumpExpression -> RETURN expression .)
    MAIOR           reduce using rule 223 (jumpExpression -> RETURN expression .)
    MENORIGUAL      reduce using rule 223 (jumpExpression -> RETURN expression .)
    MAIORIGUAL      reduce using rule 223 (jumpExpression -> RETURN expression .)
    DIFERENTE       reduce using rule 223 (jumpExpression -> RETURN expression .)
    IDENTIDADE      reduce using rule 223 (jumpExpression -> RETURN expression .)
    IGUALDADE       reduce using rule 223 (jumpExpression -> RETURN expression .)
    SEMIDENTIDADE   reduce using rule 223 (jumpExpression -> RETURN expression .)
    AND             reduce using rule 223 (jumpExpression -> RETURN expression .)
    OR              reduce using rule 223 (jumpExpression -> RETURN expression .)
    FUN             reduce using rule 223 (jumpExpression -> RETURN expression .)
    FOR             reduce using rule 223 (jumpExpression -> RETURN expression .)
    WHILE           reduce using rule 223 (jumpExpression -> RETURN expression .)
    DO              reduce using rule 223 (jumpExpression -> RETURN expression .)
    VAR             reduce using rule 223 (jumpExpression -> RETURN expression .)
    VAL             reduce using rule 223 (jumpExpression -> RETURN expression .)
    LITERAL_STRING  reduce using rule 223 (jumpExpression -> RETURN expression .)
    NUMBER          reduce using rule 223 (jumpExpression -> RETURN expression .)
    IF              reduce using rule 223 (jumpExpression -> RETURN expression .)
    RETURN          reduce using rule 223 (jumpExpression -> RETURN expression .)
    RETURN_AT       reduce using rule 223 (jumpExpression -> RETURN expression .)
    CONTINUE        reduce using rule 223 (jumpExpression -> RETURN expression .)
    CONTINUE_AT     reduce using rule 223 (jumpExpression -> RETURN expression .)
    BREAK           reduce using rule 223 (jumpExpression -> RETURN expression .)
    BREAK_AT        reduce using rule 223 (jumpExpression -> RETURN expression .)
    NOT             reduce using rule 223 (jumpExpression -> RETURN expression .)
    SUSPEND         reduce using rule 223 (jumpExpression -> RETURN expression .)
    RCHAVE          reduce using rule 223 (jumpExpression -> RETURN expression .)
    COMMA           reduce using rule 223 (jumpExpression -> RETURN expression .)
    RPAREN          reduce using rule 223 (jumpExpression -> RETURN expression .)
    RCCT            reduce using rule 223 (jumpExpression -> RETURN expression .)
    PV              reduce using rule 223 (jumpExpression -> RETURN expression .)
    ELSE            reduce using rule 223 (jumpExpression -> RETURN expression .)


state 208

    (224) jumpExpression -> RETURN_AT expression .

    INCREMENTO      reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    DECREMENTO      reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MENOR           reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    LCCT            reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    COLONCOLON      reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    PONTO           reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    LPAREN          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    LCHAVE          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    AS              reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MAISIGUAL       reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MENOSIGUAL      reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MULTIGUAL       reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    DIVIGUAL        reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MODIGUAL        reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MULT            reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    DIVIDE          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MOD             reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    PLUS            reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MINUS           reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    PONTOPONTO      reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    ID              reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    CROSSINLINE     reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    IMPORT          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    INIT            reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    NOINLINE        reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    OUT             reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    VARARG          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    WHERE           reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    OPERATOR        reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    ELVIS           reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    IN              reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    NOT_IN          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    IS              reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    NOT_IS          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MAIOR           reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MENORIGUAL      reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    MAIORIGUAL      reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    DIFERENTE       reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    IDENTIDADE      reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    IGUALDADE       reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    SEMIDENTIDADE   reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    AND             reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    OR              reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    FUN             reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    FOR             reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    WHILE           reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    DO              reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    VAR             reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    VAL             reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    LITERAL_STRING  reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    NUMBER          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    IF              reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    RETURN          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    RETURN_AT       reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    CONTINUE        reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    CONTINUE_AT     reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    BREAK           reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    BREAK_AT        reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    NOT             reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    SUSPEND         reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    RCHAVE          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    COMMA           reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    RPAREN          reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    RCCT            reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    PV              reduce using rule 224 (jumpExpression -> RETURN_AT expression .)
    ELSE            reduce using rule 224 (jumpExpression -> RETURN_AT expression .)


state 209

    (105) comparison -> infixOperation comparisonOperator . infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    infixOperation                 shift and go to state 298
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 210

    (243) comparisonOperator -> MENOR .

    LITERAL_STRING  reduce using rule 243 (comparisonOperator -> MENOR .)
    NUMBER          reduce using rule 243 (comparisonOperator -> MENOR .)
    INCREMENTO      reduce using rule 243 (comparisonOperator -> MENOR .)
    DECREMENTO      reduce using rule 243 (comparisonOperator -> MENOR .)
    MINUS           reduce using rule 243 (comparisonOperator -> MENOR .)
    PLUS            reduce using rule 243 (comparisonOperator -> MENOR .)
    NOT             reduce using rule 243 (comparisonOperator -> MENOR .)
    LPAREN          reduce using rule 243 (comparisonOperator -> MENOR .)
    ID              reduce using rule 243 (comparisonOperator -> MENOR .)
    CROSSINLINE     reduce using rule 243 (comparisonOperator -> MENOR .)
    IMPORT          reduce using rule 243 (comparisonOperator -> MENOR .)
    INIT            reduce using rule 243 (comparisonOperator -> MENOR .)
    NOINLINE        reduce using rule 243 (comparisonOperator -> MENOR .)
    OUT             reduce using rule 243 (comparisonOperator -> MENOR .)
    VARARG          reduce using rule 243 (comparisonOperator -> MENOR .)
    WHERE           reduce using rule 243 (comparisonOperator -> MENOR .)
    OPERATOR        reduce using rule 243 (comparisonOperator -> MENOR .)
    LCCT            reduce using rule 243 (comparisonOperator -> MENOR .)
    IF              reduce using rule 243 (comparisonOperator -> MENOR .)
    RETURN          reduce using rule 243 (comparisonOperator -> MENOR .)
    RETURN_AT       reduce using rule 243 (comparisonOperator -> MENOR .)
    CONTINUE        reduce using rule 243 (comparisonOperator -> MENOR .)
    CONTINUE_AT     reduce using rule 243 (comparisonOperator -> MENOR .)
    BREAK           reduce using rule 243 (comparisonOperator -> MENOR .)
    BREAK_AT        reduce using rule 243 (comparisonOperator -> MENOR .)
    LCHAVE          reduce using rule 243 (comparisonOperator -> MENOR .)
    FUN             reduce using rule 243 (comparisonOperator -> MENOR .)
    SUSPEND         reduce using rule 243 (comparisonOperator -> MENOR .)
    COLONCOLON      reduce using rule 243 (comparisonOperator -> MENOR .)


state 211

    (244) comparisonOperator -> MAIOR .

    LITERAL_STRING  reduce using rule 244 (comparisonOperator -> MAIOR .)
    NUMBER          reduce using rule 244 (comparisonOperator -> MAIOR .)
    INCREMENTO      reduce using rule 244 (comparisonOperator -> MAIOR .)
    DECREMENTO      reduce using rule 244 (comparisonOperator -> MAIOR .)
    MINUS           reduce using rule 244 (comparisonOperator -> MAIOR .)
    PLUS            reduce using rule 244 (comparisonOperator -> MAIOR .)
    NOT             reduce using rule 244 (comparisonOperator -> MAIOR .)
    LPAREN          reduce using rule 244 (comparisonOperator -> MAIOR .)
    ID              reduce using rule 244 (comparisonOperator -> MAIOR .)
    CROSSINLINE     reduce using rule 244 (comparisonOperator -> MAIOR .)
    IMPORT          reduce using rule 244 (comparisonOperator -> MAIOR .)
    INIT            reduce using rule 244 (comparisonOperator -> MAIOR .)
    NOINLINE        reduce using rule 244 (comparisonOperator -> MAIOR .)
    OUT             reduce using rule 244 (comparisonOperator -> MAIOR .)
    VARARG          reduce using rule 244 (comparisonOperator -> MAIOR .)
    WHERE           reduce using rule 244 (comparisonOperator -> MAIOR .)
    OPERATOR        reduce using rule 244 (comparisonOperator -> MAIOR .)
    LCCT            reduce using rule 244 (comparisonOperator -> MAIOR .)
    IF              reduce using rule 244 (comparisonOperator -> MAIOR .)
    RETURN          reduce using rule 244 (comparisonOperator -> MAIOR .)
    RETURN_AT       reduce using rule 244 (comparisonOperator -> MAIOR .)
    CONTINUE        reduce using rule 244 (comparisonOperator -> MAIOR .)
    CONTINUE_AT     reduce using rule 244 (comparisonOperator -> MAIOR .)
    BREAK           reduce using rule 244 (comparisonOperator -> MAIOR .)
    BREAK_AT        reduce using rule 244 (comparisonOperator -> MAIOR .)
    LCHAVE          reduce using rule 244 (comparisonOperator -> MAIOR .)
    FUN             reduce using rule 244 (comparisonOperator -> MAIOR .)
    SUSPEND         reduce using rule 244 (comparisonOperator -> MAIOR .)
    COLONCOLON      reduce using rule 244 (comparisonOperator -> MAIOR .)


state 212

    (245) comparisonOperator -> MENORIGUAL .

    LITERAL_STRING  reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    NUMBER          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    INCREMENTO      reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    DECREMENTO      reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    MINUS           reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    PLUS            reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    NOT             reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    LPAREN          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    ID              reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    CROSSINLINE     reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    IMPORT          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    INIT            reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    NOINLINE        reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    OUT             reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    VARARG          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    WHERE           reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    OPERATOR        reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    LCCT            reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    IF              reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    RETURN          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    RETURN_AT       reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    CONTINUE        reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    CONTINUE_AT     reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    BREAK           reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    BREAK_AT        reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    LCHAVE          reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    FUN             reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    SUSPEND         reduce using rule 245 (comparisonOperator -> MENORIGUAL .)
    COLONCOLON      reduce using rule 245 (comparisonOperator -> MENORIGUAL .)


state 213

    (246) comparisonOperator -> MAIORIGUAL .

    LITERAL_STRING  reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    NUMBER          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    INCREMENTO      reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    DECREMENTO      reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    MINUS           reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    PLUS            reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    NOT             reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    LPAREN          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    ID              reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    CROSSINLINE     reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    IMPORT          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    INIT            reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    NOINLINE        reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    OUT             reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    VARARG          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    WHERE           reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    OPERATOR        reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    LCCT            reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    IF              reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    RETURN          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    RETURN_AT       reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE        reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    CONTINUE_AT     reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    BREAK           reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    BREAK_AT        reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    LCHAVE          reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    FUN             reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    SUSPEND         reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)
    COLONCOLON      reduce using rule 246 (comparisonOperator -> MAIORIGUAL .)


state 214

    (106) infixOperation -> elvisExpression infixOperationRecursive .

    MENOR           reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAIOR           reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENORIGUAL      reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAIORIGUAL      reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIFERENTE       reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    IDENTIDADE      reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    IGUALDADE       reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    SEMIDENTIDADE   reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    AND             reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    OR              reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    LPAREN          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    FUN             reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    FOR             reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    WHILE           reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    DO              reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    VAR             reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    VAL             reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    ID              reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    CROSSINLINE     reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    IMPORT          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    INIT            reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOINLINE        reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    OUT             reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    VARARG          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    WHERE           reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    OPERATOR        reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    LITERAL_STRING  reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    NUMBER          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    LCCT            reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    IF              reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    RETURN          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    RETURN_AT       reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONTINUE        reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    CONTINUE_AT     reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    BREAK           reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    BREAK_AT        reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    LCHAVE          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    INCREMENTO      reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    DECREMENTO      reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    MINUS           reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    PLUS            reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT             reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    SUSPEND         reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    COLONCOLON      reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    RCHAVE          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    COMMA           reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    RPAREN          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    RCCT            reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    PONTO           reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    AS              reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    MAISIGUAL       reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    MENOSIGUAL      reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    MULTIGUAL       reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIVIGUAL        reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    MODIGUAL        reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    MULT            reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    DIVIDE          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    MOD             reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    PONTOPONTO      reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    ELVIS           reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    IN              reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT_IN          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    IS              reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    NOT_IS          reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    PV              reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)
    ELSE            reduce using rule 106 (infixOperation -> elvisExpression infixOperationRecursive .)


state 215

    (108) infixOperationRecursive -> inOrIs . elvisOrType
    (109) infixOperationRecursive -> inOrIs . elvisOrType infixOperationRecursive
    (112) elvisOrType -> . elvisExpression
    (113) elvisOrType -> . type
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 303
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130

    elvisOrType                    shift and go to state 299
    elvisExpression                shift and go to state 300
    type                           shift and go to state 301
    infixFunctionCall              shift and go to state 107
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 302
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    additiveExpression             shift and go to state 109
    receiverType                   shift and go to state 304
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87

state 216

    (110) inOrIs -> inOperator .

    SUSPEND         reduce using rule 110 (inOrIs -> inOperator .)
    LPAREN          reduce using rule 110 (inOrIs -> inOperator .)
    ID              reduce using rule 110 (inOrIs -> inOperator .)
    CROSSINLINE     reduce using rule 110 (inOrIs -> inOperator .)
    IMPORT          reduce using rule 110 (inOrIs -> inOperator .)
    INIT            reduce using rule 110 (inOrIs -> inOperator .)
    NOINLINE        reduce using rule 110 (inOrIs -> inOperator .)
    OUT             reduce using rule 110 (inOrIs -> inOperator .)
    VARARG          reduce using rule 110 (inOrIs -> inOperator .)
    WHERE           reduce using rule 110 (inOrIs -> inOperator .)
    OPERATOR        reduce using rule 110 (inOrIs -> inOperator .)
    LITERAL_STRING  reduce using rule 110 (inOrIs -> inOperator .)
    NUMBER          reduce using rule 110 (inOrIs -> inOperator .)
    INCREMENTO      reduce using rule 110 (inOrIs -> inOperator .)
    DECREMENTO      reduce using rule 110 (inOrIs -> inOperator .)
    MINUS           reduce using rule 110 (inOrIs -> inOperator .)
    PLUS            reduce using rule 110 (inOrIs -> inOperator .)
    NOT             reduce using rule 110 (inOrIs -> inOperator .)
    LCCT            reduce using rule 110 (inOrIs -> inOperator .)
    IF              reduce using rule 110 (inOrIs -> inOperator .)
    RETURN          reduce using rule 110 (inOrIs -> inOperator .)
    RETURN_AT       reduce using rule 110 (inOrIs -> inOperator .)
    CONTINUE        reduce using rule 110 (inOrIs -> inOperator .)
    CONTINUE_AT     reduce using rule 110 (inOrIs -> inOperator .)
    BREAK           reduce using rule 110 (inOrIs -> inOperator .)
    BREAK_AT        reduce using rule 110 (inOrIs -> inOperator .)
    LCHAVE          reduce using rule 110 (inOrIs -> inOperator .)
    FUN             reduce using rule 110 (inOrIs -> inOperator .)
    COLONCOLON      reduce using rule 110 (inOrIs -> inOperator .)


state 217

    (111) inOrIs -> isOperator .

    SUSPEND         reduce using rule 111 (inOrIs -> isOperator .)
    LPAREN          reduce using rule 111 (inOrIs -> isOperator .)
    ID              reduce using rule 111 (inOrIs -> isOperator .)
    CROSSINLINE     reduce using rule 111 (inOrIs -> isOperator .)
    IMPORT          reduce using rule 111 (inOrIs -> isOperator .)
    INIT            reduce using rule 111 (inOrIs -> isOperator .)
    NOINLINE        reduce using rule 111 (inOrIs -> isOperator .)
    OUT             reduce using rule 111 (inOrIs -> isOperator .)
    VARARG          reduce using rule 111 (inOrIs -> isOperator .)
    WHERE           reduce using rule 111 (inOrIs -> isOperator .)
    OPERATOR        reduce using rule 111 (inOrIs -> isOperator .)
    LITERAL_STRING  reduce using rule 111 (inOrIs -> isOperator .)
    NUMBER          reduce using rule 111 (inOrIs -> isOperator .)
    INCREMENTO      reduce using rule 111 (inOrIs -> isOperator .)
    DECREMENTO      reduce using rule 111 (inOrIs -> isOperator .)
    MINUS           reduce using rule 111 (inOrIs -> isOperator .)
    PLUS            reduce using rule 111 (inOrIs -> isOperator .)
    NOT             reduce using rule 111 (inOrIs -> isOperator .)
    LCCT            reduce using rule 111 (inOrIs -> isOperator .)
    IF              reduce using rule 111 (inOrIs -> isOperator .)
    RETURN          reduce using rule 111 (inOrIs -> isOperator .)
    RETURN_AT       reduce using rule 111 (inOrIs -> isOperator .)
    CONTINUE        reduce using rule 111 (inOrIs -> isOperator .)
    CONTINUE_AT     reduce using rule 111 (inOrIs -> isOperator .)
    BREAK           reduce using rule 111 (inOrIs -> isOperator .)
    BREAK_AT        reduce using rule 111 (inOrIs -> isOperator .)
    LCHAVE          reduce using rule 111 (inOrIs -> isOperator .)
    FUN             reduce using rule 111 (inOrIs -> isOperator .)
    COLONCOLON      reduce using rule 111 (inOrIs -> isOperator .)


state 218

    (247) inOperator -> IN .

    SUSPEND         reduce using rule 247 (inOperator -> IN .)
    LPAREN          reduce using rule 247 (inOperator -> IN .)
    ID              reduce using rule 247 (inOperator -> IN .)
    CROSSINLINE     reduce using rule 247 (inOperator -> IN .)
    IMPORT          reduce using rule 247 (inOperator -> IN .)
    INIT            reduce using rule 247 (inOperator -> IN .)
    NOINLINE        reduce using rule 247 (inOperator -> IN .)
    OUT             reduce using rule 247 (inOperator -> IN .)
    VARARG          reduce using rule 247 (inOperator -> IN .)
    WHERE           reduce using rule 247 (inOperator -> IN .)
    OPERATOR        reduce using rule 247 (inOperator -> IN .)
    LITERAL_STRING  reduce using rule 247 (inOperator -> IN .)
    NUMBER          reduce using rule 247 (inOperator -> IN .)
    INCREMENTO      reduce using rule 247 (inOperator -> IN .)
    DECREMENTO      reduce using rule 247 (inOperator -> IN .)
    MINUS           reduce using rule 247 (inOperator -> IN .)
    PLUS            reduce using rule 247 (inOperator -> IN .)
    NOT             reduce using rule 247 (inOperator -> IN .)
    LCCT            reduce using rule 247 (inOperator -> IN .)
    IF              reduce using rule 247 (inOperator -> IN .)
    RETURN          reduce using rule 247 (inOperator -> IN .)
    RETURN_AT       reduce using rule 247 (inOperator -> IN .)
    CONTINUE        reduce using rule 247 (inOperator -> IN .)
    CONTINUE_AT     reduce using rule 247 (inOperator -> IN .)
    BREAK           reduce using rule 247 (inOperator -> IN .)
    BREAK_AT        reduce using rule 247 (inOperator -> IN .)
    LCHAVE          reduce using rule 247 (inOperator -> IN .)
    FUN             reduce using rule 247 (inOperator -> IN .)
    COLONCOLON      reduce using rule 247 (inOperator -> IN .)


state 219

    (248) inOperator -> NOT_IN .

    SUSPEND         reduce using rule 248 (inOperator -> NOT_IN .)
    LPAREN          reduce using rule 248 (inOperator -> NOT_IN .)
    ID              reduce using rule 248 (inOperator -> NOT_IN .)
    CROSSINLINE     reduce using rule 248 (inOperator -> NOT_IN .)
    IMPORT          reduce using rule 248 (inOperator -> NOT_IN .)
    INIT            reduce using rule 248 (inOperator -> NOT_IN .)
    NOINLINE        reduce using rule 248 (inOperator -> NOT_IN .)
    OUT             reduce using rule 248 (inOperator -> NOT_IN .)
    VARARG          reduce using rule 248 (inOperator -> NOT_IN .)
    WHERE           reduce using rule 248 (inOperator -> NOT_IN .)
    OPERATOR        reduce using rule 248 (inOperator -> NOT_IN .)
    LITERAL_STRING  reduce using rule 248 (inOperator -> NOT_IN .)
    NUMBER          reduce using rule 248 (inOperator -> NOT_IN .)
    INCREMENTO      reduce using rule 248 (inOperator -> NOT_IN .)
    DECREMENTO      reduce using rule 248 (inOperator -> NOT_IN .)
    MINUS           reduce using rule 248 (inOperator -> NOT_IN .)
    PLUS            reduce using rule 248 (inOperator -> NOT_IN .)
    NOT             reduce using rule 248 (inOperator -> NOT_IN .)
    LCCT            reduce using rule 248 (inOperator -> NOT_IN .)
    IF              reduce using rule 248 (inOperator -> NOT_IN .)
    RETURN          reduce using rule 248 (inOperator -> NOT_IN .)
    RETURN_AT       reduce using rule 248 (inOperator -> NOT_IN .)
    CONTINUE        reduce using rule 248 (inOperator -> NOT_IN .)
    CONTINUE_AT     reduce using rule 248 (inOperator -> NOT_IN .)
    BREAK           reduce using rule 248 (inOperator -> NOT_IN .)
    BREAK_AT        reduce using rule 248 (inOperator -> NOT_IN .)
    LCHAVE          reduce using rule 248 (inOperator -> NOT_IN .)
    FUN             reduce using rule 248 (inOperator -> NOT_IN .)
    COLONCOLON      reduce using rule 248 (inOperator -> NOT_IN .)


state 220

    (249) isOperator -> IS .

    SUSPEND         reduce using rule 249 (isOperator -> IS .)
    LPAREN          reduce using rule 249 (isOperator -> IS .)
    ID              reduce using rule 249 (isOperator -> IS .)
    CROSSINLINE     reduce using rule 249 (isOperator -> IS .)
    IMPORT          reduce using rule 249 (isOperator -> IS .)
    INIT            reduce using rule 249 (isOperator -> IS .)
    NOINLINE        reduce using rule 249 (isOperator -> IS .)
    OUT             reduce using rule 249 (isOperator -> IS .)
    VARARG          reduce using rule 249 (isOperator -> IS .)
    WHERE           reduce using rule 249 (isOperator -> IS .)
    OPERATOR        reduce using rule 249 (isOperator -> IS .)
    LITERAL_STRING  reduce using rule 249 (isOperator -> IS .)
    NUMBER          reduce using rule 249 (isOperator -> IS .)
    INCREMENTO      reduce using rule 249 (isOperator -> IS .)
    DECREMENTO      reduce using rule 249 (isOperator -> IS .)
    MINUS           reduce using rule 249 (isOperator -> IS .)
    PLUS            reduce using rule 249 (isOperator -> IS .)
    NOT             reduce using rule 249 (isOperator -> IS .)
    LCCT            reduce using rule 249 (isOperator -> IS .)
    IF              reduce using rule 249 (isOperator -> IS .)
    RETURN          reduce using rule 249 (isOperator -> IS .)
    RETURN_AT       reduce using rule 249 (isOperator -> IS .)
    CONTINUE        reduce using rule 249 (isOperator -> IS .)
    CONTINUE_AT     reduce using rule 249 (isOperator -> IS .)
    BREAK           reduce using rule 249 (isOperator -> IS .)
    BREAK_AT        reduce using rule 249 (isOperator -> IS .)
    LCHAVE          reduce using rule 249 (isOperator -> IS .)
    FUN             reduce using rule 249 (isOperator -> IS .)
    COLONCOLON      reduce using rule 249 (isOperator -> IS .)


state 221

    (250) isOperator -> NOT_IS .

    SUSPEND         reduce using rule 250 (isOperator -> NOT_IS .)
    LPAREN          reduce using rule 250 (isOperator -> NOT_IS .)
    ID              reduce using rule 250 (isOperator -> NOT_IS .)
    CROSSINLINE     reduce using rule 250 (isOperator -> NOT_IS .)
    IMPORT          reduce using rule 250 (isOperator -> NOT_IS .)
    INIT            reduce using rule 250 (isOperator -> NOT_IS .)
    NOINLINE        reduce using rule 250 (isOperator -> NOT_IS .)
    OUT             reduce using rule 250 (isOperator -> NOT_IS .)
    VARARG          reduce using rule 250 (isOperator -> NOT_IS .)
    WHERE           reduce using rule 250 (isOperator -> NOT_IS .)
    OPERATOR        reduce using rule 250 (isOperator -> NOT_IS .)
    LITERAL_STRING  reduce using rule 250 (isOperator -> NOT_IS .)
    NUMBER          reduce using rule 250 (isOperator -> NOT_IS .)
    INCREMENTO      reduce using rule 250 (isOperator -> NOT_IS .)
    DECREMENTO      reduce using rule 250 (isOperator -> NOT_IS .)
    MINUS           reduce using rule 250 (isOperator -> NOT_IS .)
    PLUS            reduce using rule 250 (isOperator -> NOT_IS .)
    NOT             reduce using rule 250 (isOperator -> NOT_IS .)
    LCCT            reduce using rule 250 (isOperator -> NOT_IS .)
    IF              reduce using rule 250 (isOperator -> NOT_IS .)
    RETURN          reduce using rule 250 (isOperator -> NOT_IS .)
    RETURN_AT       reduce using rule 250 (isOperator -> NOT_IS .)
    CONTINUE        reduce using rule 250 (isOperator -> NOT_IS .)
    CONTINUE_AT     reduce using rule 250 (isOperator -> NOT_IS .)
    BREAK           reduce using rule 250 (isOperator -> NOT_IS .)
    BREAK_AT        reduce using rule 250 (isOperator -> NOT_IS .)
    LCHAVE          reduce using rule 250 (isOperator -> NOT_IS .)
    FUN             reduce using rule 250 (isOperator -> NOT_IS .)
    COLONCOLON      reduce using rule 250 (isOperator -> NOT_IS .)


state 222

    (115) elvisExpression -> infixFunctionCall ELVIS . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    infixFunctionCall              shift and go to state 107
    elvisExpression                shift and go to state 305
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 223

    (117) infixFunctionCall -> rangeExpression simpleIdentifier . infixFunctionCall
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    infixFunctionCall              shift and go to state 306
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 224

    (119) rangeExpression -> additiveExpression PONTOPONTO . rangeExpression
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    additiveExpression             shift and go to state 109
    rangeExpression                shift and go to state 307
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    simpleIdentifier               shift and go to state 126
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 225

    (121) additiveExpression -> multiplicativeExpression additiveOperator . additiveExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    multiplicativeExpression       shift and go to state 110
    additiveExpression             shift and go to state 308
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    simpleIdentifier               shift and go to state 126
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 226

    (251) additiveOperator -> PLUS .

    LITERAL_STRING  reduce using rule 251 (additiveOperator -> PLUS .)
    NUMBER          reduce using rule 251 (additiveOperator -> PLUS .)
    INCREMENTO      reduce using rule 251 (additiveOperator -> PLUS .)
    DECREMENTO      reduce using rule 251 (additiveOperator -> PLUS .)
    MINUS           reduce using rule 251 (additiveOperator -> PLUS .)
    PLUS            reduce using rule 251 (additiveOperator -> PLUS .)
    NOT             reduce using rule 251 (additiveOperator -> PLUS .)
    LPAREN          reduce using rule 251 (additiveOperator -> PLUS .)
    ID              reduce using rule 251 (additiveOperator -> PLUS .)
    CROSSINLINE     reduce using rule 251 (additiveOperator -> PLUS .)
    IMPORT          reduce using rule 251 (additiveOperator -> PLUS .)
    INIT            reduce using rule 251 (additiveOperator -> PLUS .)
    NOINLINE        reduce using rule 251 (additiveOperator -> PLUS .)
    OUT             reduce using rule 251 (additiveOperator -> PLUS .)
    VARARG          reduce using rule 251 (additiveOperator -> PLUS .)
    WHERE           reduce using rule 251 (additiveOperator -> PLUS .)
    OPERATOR        reduce using rule 251 (additiveOperator -> PLUS .)
    LCCT            reduce using rule 251 (additiveOperator -> PLUS .)
    IF              reduce using rule 251 (additiveOperator -> PLUS .)
    RETURN          reduce using rule 251 (additiveOperator -> PLUS .)
    RETURN_AT       reduce using rule 251 (additiveOperator -> PLUS .)
    CONTINUE        reduce using rule 251 (additiveOperator -> PLUS .)
    CONTINUE_AT     reduce using rule 251 (additiveOperator -> PLUS .)
    BREAK           reduce using rule 251 (additiveOperator -> PLUS .)
    BREAK_AT        reduce using rule 251 (additiveOperator -> PLUS .)
    LCHAVE          reduce using rule 251 (additiveOperator -> PLUS .)
    FUN             reduce using rule 251 (additiveOperator -> PLUS .)
    SUSPEND         reduce using rule 251 (additiveOperator -> PLUS .)
    COLONCOLON      reduce using rule 251 (additiveOperator -> PLUS .)


state 227

    (252) additiveOperator -> MINUS .

    LITERAL_STRING  reduce using rule 252 (additiveOperator -> MINUS .)
    NUMBER          reduce using rule 252 (additiveOperator -> MINUS .)
    INCREMENTO      reduce using rule 252 (additiveOperator -> MINUS .)
    DECREMENTO      reduce using rule 252 (additiveOperator -> MINUS .)
    MINUS           reduce using rule 252 (additiveOperator -> MINUS .)
    PLUS            reduce using rule 252 (additiveOperator -> MINUS .)
    NOT             reduce using rule 252 (additiveOperator -> MINUS .)
    LPAREN          reduce using rule 252 (additiveOperator -> MINUS .)
    ID              reduce using rule 252 (additiveOperator -> MINUS .)
    CROSSINLINE     reduce using rule 252 (additiveOperator -> MINUS .)
    IMPORT          reduce using rule 252 (additiveOperator -> MINUS .)
    INIT            reduce using rule 252 (additiveOperator -> MINUS .)
    NOINLINE        reduce using rule 252 (additiveOperator -> MINUS .)
    OUT             reduce using rule 252 (additiveOperator -> MINUS .)
    VARARG          reduce using rule 252 (additiveOperator -> MINUS .)
    WHERE           reduce using rule 252 (additiveOperator -> MINUS .)
    OPERATOR        reduce using rule 252 (additiveOperator -> MINUS .)
    LCCT            reduce using rule 252 (additiveOperator -> MINUS .)
    IF              reduce using rule 252 (additiveOperator -> MINUS .)
    RETURN          reduce using rule 252 (additiveOperator -> MINUS .)
    RETURN_AT       reduce using rule 252 (additiveOperator -> MINUS .)
    CONTINUE        reduce using rule 252 (additiveOperator -> MINUS .)
    CONTINUE_AT     reduce using rule 252 (additiveOperator -> MINUS .)
    BREAK           reduce using rule 252 (additiveOperator -> MINUS .)
    BREAK_AT        reduce using rule 252 (additiveOperator -> MINUS .)
    LCHAVE          reduce using rule 252 (additiveOperator -> MINUS .)
    FUN             reduce using rule 252 (additiveOperator -> MINUS .)
    SUSPEND         reduce using rule 252 (additiveOperator -> MINUS .)
    COLONCOLON      reduce using rule 252 (additiveOperator -> MINUS .)


state 228

    (68) parenthesizedType -> LPAREN type . RPAREN

    RPAREN          shift and go to state 229


state 229

    (68) parenthesizedType -> LPAREN type RPAREN .

    LCHAVE          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    FUN             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    $end            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    FOR             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    WHILE           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    DO              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    VAR             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    VAL             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    ID              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    CROSSINLINE     reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IMPORT          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    INIT            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NOINLINE        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    OUT             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    VARARG          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    WHERE           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    OPERATOR        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    LITERAL_STRING  reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NUMBER          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    LCCT            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IF              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    RETURN_AT       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    CONTINUE_AT     reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    BREAK_AT        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    INCREMENTO      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    DECREMENTO      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MINUS           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    PLUS            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NOT             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    SUSPEND         reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    COLONCOLON      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    RCHAVE          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MENOR           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    PONTO           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    AS              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MAISIGUAL       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MENOSIGUAL      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MULTIGUAL       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIGUAL        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MODIGUAL        reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MULT            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    DIVIDE          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MOD             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    PONTOPONTO      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    ELVIS           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IN              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IN          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IS              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    NOT_IS          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MAIOR           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MENORIGUAL      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    MAIORIGUAL      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    DIFERENTE       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IDENTIDADE      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    IGUALDADE       reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    SEMIDENTIDADE   reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    AND             reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    OR              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    COMMA           reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    RCCT            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    PV              reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    ELSE            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    SETA            reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)
    ATRIBUICAO      reduce using rule 68 (parenthesizedType -> LPAREN type RPAREN .)


state 230

    (67) functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive . optionalCOMMA RPAREN
    (21) optionalCOMMA -> . COMMA
    (22) optionalCOMMA -> .

    COMMA           shift and go to state 310
    RPAREN          reduce using rule 22 (optionalCOMMA -> .)

    optionalCOMMA                  shift and go to state 309

state 231

    (64) parameterOrTypeRecursive -> COMMA . optionalParameterOrType
    (65) parameterOrTypeRecursive -> COMMA . optionalParameterOrType parameterOrTypeRecursive
    (61) optionalParameterOrType -> . parameter
    (62) optionalParameterOrType -> . type
    (63) optionalParameterOrType -> .
    (39) parameter -> . simpleIdentifier DOISP type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier

    COMMA           reduce using rule 63 (optionalParameterOrType -> .)
    RPAREN          reduce using rule 63 (optionalParameterOrType -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35

    optionalParameterOrType        shift and go to state 311
    parameter                      shift and go to state 118
    type                           shift and go to state 312
    simpleIdentifier               shift and go to state 119
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38

state 232

    (59) functionType -> receiverType PONTO functionTypeParameters . SETA type

    SETA            shift and go to state 313


state 233

    (67) functionTypeParameters -> LPAREN . optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (61) optionalParameterOrType -> . parameter
    (62) optionalParameterOrType -> . type
    (63) optionalParameterOrType -> .
    (39) parameter -> . simpleIdentifier DOISP type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier

    COMMA           reduce using rule 63 (optionalParameterOrType -> .)
    RPAREN          reduce using rule 63 (optionalParameterOrType -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35

    optionalParameterOrType        shift and go to state 117
    parameter                      shift and go to state 118
    type                           shift and go to state 312
    simpleIdentifier               shift and go to state 119
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38

state 234

    (60) functionType -> functionTypeParameters SETA type .

    LCHAVE          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    FUN             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    $end            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    LPAREN          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    FOR             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    WHILE           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    DO              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    VAR             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    VAL             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    ID              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IMPORT          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    INIT            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    OUT             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    VARARG          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    WHERE           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    OPERATOR        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NUMBER          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    LCCT            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IF              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    RETURN          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    BREAK           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MINUS           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    PLUS            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NOT             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MENOR           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    PONTO           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    AS              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MAISIGUAL       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MENOSIGUAL      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MULT            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MOD             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    ELVIS           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IN              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IS              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MAIOR           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    AND             reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    OR              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    COMMA           reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    RPAREN          reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    RCCT            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    PV              reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    ELSE            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    SETA            reduce using rule 60 (functionType -> functionTypeParameters SETA type .)
    ATRIBUICAO      reduce using rule 60 (functionType -> functionTypeParameters SETA type .)


state 235

    (164) typeArguments -> MENOR typeArgumentsRecursive . MAIOR

    MAIOR           shift and go to state 314


state 236

    (165) typeArguments -> MENOR MAIOR .

    LCHAVE          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    FUN             reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    $end            reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    LPAREN          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    FOR             reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    WHILE           reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    DO              reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    VAR             reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    VAL             reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    ID              reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    CROSSINLINE     reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    IMPORT          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    INIT            reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    NOINLINE        reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    OUT             reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    VARARG          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    WHERE           reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    OPERATOR        reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    LITERAL_STRING  reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    NUMBER          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    LCCT            reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    IF              reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    RETURN          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    RETURN_AT       reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    CONTINUE        reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    CONTINUE_AT     reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    BREAK           reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    BREAK_AT        reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    INCREMENTO      reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    DECREMENTO      reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MINUS           reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    PLUS            reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    NOT             reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    SUSPEND         reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    COLONCOLON      reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    RCHAVE          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MENOR           reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    PONTO           reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    AS              reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MAISIGUAL       reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MENOSIGUAL      reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MULTIGUAL       reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    DIVIGUAL        reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MODIGUAL        reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MULT            reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    DIVIDE          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MOD             reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    PONTOPONTO      reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    ELVIS           reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    IN              reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    NOT_IN          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    IS              reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    NOT_IS          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MAIOR           reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MENORIGUAL      reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    MAIORIGUAL      reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    DIFERENTE       reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    IDENTIDADE      reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    IGUALDADE       reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    SEMIDENTIDADE   reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    AND             reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    OR              reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    COMMA           reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    RPAREN          reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    RCCT            reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    PV              reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    ELSE            reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    SETA            reduce using rule 165 (typeArguments -> MENOR MAIOR .)
    ATRIBUICAO      reduce using rule 165 (typeArguments -> MENOR MAIOR .)


state 237

    (166) typeArgumentsRecursive -> typeProjection .
    (167) typeArgumentsRecursive -> typeProjection . COMMA typeArgumentsRecursive
    (57) typeProjectionModifiers -> typeProjection .

    MAIOR           reduce using rule 166 (typeArgumentsRecursive -> typeProjection .)
    COMMA           shift and go to state 315
    SUSPEND         reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    OPERATOR        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)


state 238

    (55) typeProjection -> typeProjectionModifiers . type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    type                           shift and go to state 316
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 239

    (56) typeProjection -> type .

    COMMA           reduce using rule 56 (typeProjection -> type .)
    MAIOR           reduce using rule 56 (typeProjection -> type .)
    SUSPEND         reduce using rule 56 (typeProjection -> type .)
    LPAREN          reduce using rule 56 (typeProjection -> type .)
    ID              reduce using rule 56 (typeProjection -> type .)
    CROSSINLINE     reduce using rule 56 (typeProjection -> type .)
    IMPORT          reduce using rule 56 (typeProjection -> type .)
    INIT            reduce using rule 56 (typeProjection -> type .)
    NOINLINE        reduce using rule 56 (typeProjection -> type .)
    OUT             reduce using rule 56 (typeProjection -> type .)
    VARARG          reduce using rule 56 (typeProjection -> type .)
    WHERE           reduce using rule 56 (typeProjection -> type .)
    OPERATOR        reduce using rule 56 (typeProjection -> type .)


state 240

    (58) typeProjectionModifiers -> typeProjectionModifier . typeProjectionModifiers
    (57) typeProjectionModifiers -> . typeProjection
    (58) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (55) typeProjection -> . typeProjectionModifiers type
    (56) typeProjection -> . type
    (49) typeProjectionModifier -> . varianceModifier
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (50) varianceModifier -> . IN
    (51) varianceModifier -> . OUT
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    IN              shift and go to state 242
    OUT             shift and go to state 243
    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeProjectionModifier         shift and go to state 240
    typeProjectionModifiers        shift and go to state 317
    typeProjection                 shift and go to state 318
    type                           shift and go to state 239
    varianceModifier               shift and go to state 241
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 241

    (49) typeProjectionModifier -> varianceModifier .

    IN              reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    OUT             reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    SUSPEND         reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    LPAREN          reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    ID              reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    CROSSINLINE     reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    IMPORT          reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    INIT            reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    NOINLINE        reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    VARARG          reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    WHERE           reduce using rule 49 (typeProjectionModifier -> varianceModifier .)
    OPERATOR        reduce using rule 49 (typeProjectionModifier -> varianceModifier .)


state 242

    (50) varianceModifier -> IN .

    IN              reduce using rule 50 (varianceModifier -> IN .)
    OUT             reduce using rule 50 (varianceModifier -> IN .)
    SUSPEND         reduce using rule 50 (varianceModifier -> IN .)
    LPAREN          reduce using rule 50 (varianceModifier -> IN .)
    ID              reduce using rule 50 (varianceModifier -> IN .)
    CROSSINLINE     reduce using rule 50 (varianceModifier -> IN .)
    IMPORT          reduce using rule 50 (varianceModifier -> IN .)
    INIT            reduce using rule 50 (varianceModifier -> IN .)
    NOINLINE        reduce using rule 50 (varianceModifier -> IN .)
    VARARG          reduce using rule 50 (varianceModifier -> IN .)
    WHERE           reduce using rule 50 (varianceModifier -> IN .)
    OPERATOR        reduce using rule 50 (varianceModifier -> IN .)


state 243

    (51) varianceModifier -> OUT .
    (274) simpleIdentifier -> OUT .

  ! reduce/reduce conflict for SUSPEND resolved using rule 51 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 51 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for ID resolved using rule 51 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 51 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for IMPORT resolved using rule 51 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for INIT resolved using rule 51 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 51 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for OUT resolved using rule 51 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for VARARG resolved using rule 51 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for WHERE resolved using rule 51 (varianceModifier -> OUT .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 51 (varianceModifier -> OUT .)
    IN              reduce using rule 51 (varianceModifier -> OUT .)
    OUT             reduce using rule 51 (varianceModifier -> OUT .)
    SUSPEND         reduce using rule 51 (varianceModifier -> OUT .)
    LPAREN          reduce using rule 51 (varianceModifier -> OUT .)
    ID              reduce using rule 51 (varianceModifier -> OUT .)
    CROSSINLINE     reduce using rule 51 (varianceModifier -> OUT .)
    IMPORT          reduce using rule 51 (varianceModifier -> OUT .)
    INIT            reduce using rule 51 (varianceModifier -> OUT .)
    NOINLINE        reduce using rule 51 (varianceModifier -> OUT .)
    VARARG          reduce using rule 51 (varianceModifier -> OUT .)
    WHERE           reduce using rule 51 (varianceModifier -> OUT .)
    OPERATOR        reduce using rule 51 (varianceModifier -> OUT .)
    MENOR           reduce using rule 274 (simpleIdentifier -> OUT .)
    COMMA           reduce using rule 274 (simpleIdentifier -> OUT .)
    MAIOR           reduce using rule 274 (simpleIdentifier -> OUT .)

  ! SUSPEND         [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! LPAREN          [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! ID              [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! CROSSINLINE     [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! IMPORT          [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! INIT            [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! NOINLINE        [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! OUT             [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! VARARG          [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! WHERE           [ reduce using rule 274 (simpleIdentifier -> OUT .) ]
  ! OPERATOR        [ reduce using rule 274 (simpleIdentifier -> OUT .) ]


state 244

    (199) lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .

    INCREMENTO      reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    DECREMENTO      reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MENOR           reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    LCCT            reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    COLONCOLON      reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    PONTO           reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    LPAREN          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    LCHAVE          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    AS              reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MAISIGUAL       reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MENOSIGUAL      reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MULTIGUAL       reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    DIVIGUAL        reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MODIGUAL        reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MULT            reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    DIVIDE          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MOD             reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    PLUS            reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MINUS           reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    PONTOPONTO      reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    ID              reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    CROSSINLINE     reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IMPORT          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    INIT            reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    NOINLINE        reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    OUT             reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    VARARG          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    WHERE           reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    OPERATOR        reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    ELVIS           reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IN              reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    NOT_IN          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IS              reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    NOT_IS          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MAIOR           reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MENORIGUAL      reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    MAIORIGUAL      reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    DIFERENTE       reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IDENTIDADE      reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IGUALDADE       reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    SEMIDENTIDADE   reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    AND             reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    OR              reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    FUN             reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    FOR             reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    WHILE           reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    DO              reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    VAR             reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    VAL             reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    LITERAL_STRING  reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    NUMBER          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    IF              reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    RETURN          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    RETURN_AT       reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    CONTINUE        reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    CONTINUE_AT     reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    BREAK           reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    BREAK_AT        reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    NOT             reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    SUSPEND         reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    RCHAVE          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    COMMA           reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    RPAREN          reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    RCCT            reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    PV              reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)
    ELSE            reduce using rule 199 (lambdaLiteral -> LCHAVE optionsLambdaLiteral RCHAVE .)


state 245

    (201) optionsLambdaLiteral -> lambdaParameters SETA . statements
    (70) statements -> . statement
    (71) statements -> . statement statements
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    FUN             shift and go to state 53
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

    statements                     shift and go to state 319
    statement                      shift and go to state 46
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    expression                     shift and go to state 50
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    simpleIdentifier               shift and go to state 54
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 246

    (202) optionsLambdaLiteral -> SETA statements .

    RCHAVE          reduce using rule 202 (optionsLambdaLiteral -> SETA statements .)


state 247

    (204) lambdaParameters -> lambdaParameter COMMA . lambdaParameters
    (203) lambdaParameters -> . lambdaParameter
    (204) lambdaParameters -> . lambdaParameter COMMA lambdaParameters
    (205) lambdaParameter -> . variableDeclaration
    (206) lambdaParameter -> . multiVariableDeclaration optionalType
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (35) multiVariableDeclaration -> . LPAREN multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> . LPAREN RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    LPAREN          shift and go to state 266
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    lambdaParameter                shift and go to state 136
    lambdaParameters               shift and go to state 320
    variableDeclaration            shift and go to state 137
    multiVariableDeclaration       shift and go to state 138
    simpleIdentifier               shift and go to state 267

state 248

    (206) lambdaParameter -> multiVariableDeclaration optionalType .

    COMMA           reduce using rule 206 (lambdaParameter -> multiVariableDeclaration optionalType .)
    SETA            reduce using rule 206 (lambdaParameter -> multiVariableDeclaration optionalType .)


state 249

    (33) variableDeclaration -> simpleIdentifier DOISP . type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 39
    type                           shift and go to state 321
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38

state 250

    (35) multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive . RPAREN

    RPAREN          shift and go to state 322


state 251

    (36) multiVariableDeclaration -> LPAREN RPAREN .

    DOISP           reduce using rule 36 (multiVariableDeclaration -> LPAREN RPAREN .)
    COMMA           reduce using rule 36 (multiVariableDeclaration -> LPAREN RPAREN .)
    SETA            reduce using rule 36 (multiVariableDeclaration -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 36 (multiVariableDeclaration -> LPAREN RPAREN .)
    IN              reduce using rule 36 (multiVariableDeclaration -> LPAREN RPAREN .)


state 252

    (37) multiVariableDeclarationRecursive -> variableDeclaration .
    (38) multiVariableDeclarationRecursive -> variableDeclaration . COMMA multiVariableDeclarationRecursive

    RPAREN          reduce using rule 37 (multiVariableDeclarationRecursive -> variableDeclaration .)
    COMMA           shift and go to state 323


state 253

    (142) directlyAssignableExpression -> simpleIdentifier .
    (33) variableDeclaration -> simpleIdentifier . DOISP type
    (34) variableDeclaration -> simpleIdentifier .
    (176) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .

  ! reduce/reduce conflict for RPAREN resolved using rule 34 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (variableDeclaration -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 176 (primaryExpression -> simpleIdentifier .)
    ATRIBUICAO      reduce using rule 142 (directlyAssignableExpression -> simpleIdentifier .)
    DOISP           shift and go to state 249
    COMMA           reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    INCREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MODIGUAL        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    FUN             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    FOR             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHILE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DO              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VAR             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VAL             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NUMBER          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IF              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RETURN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RETURN_AT       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CONTINUE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    BREAK           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    BREAK_AT        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SUSPEND         reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)

  ! RPAREN          [ reduce using rule 142 (directlyAssignableExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]


state 254

    (94) chamadaDeFuncao -> statement LPAREN RPAREN .

    LPAREN          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    FUN             reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    FOR             reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    WHILE           reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    DO              reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    VAR             reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    VAL             reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    ID              reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    IMPORT          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    INIT            reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    NOINLINE        reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    OUT             reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    VARARG          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    WHERE           reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    OPERATOR        reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    NUMBER          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    LCCT            reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    IF              reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    RETURN          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    RETURN_AT       reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    CONTINUE        reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    BREAK           reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    BREAK_AT        reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    LCHAVE          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    INCREMENTO      reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    DECREMENTO      reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MINUS           reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    PLUS            reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    NOT             reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    SUSPEND         reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    COLONCOLON      reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    RCHAVE          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MENOR           reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    PONTO           reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    AS              reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MODIGUAL        reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MULT            reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    DIVIDE          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MOD             reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    ELVIS           reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    IN              reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    NOT_IN          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    IS              reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    NOT_IS          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MAIOR           reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    DIFERENTE       reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    IGUALDADE       reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    AND             reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    OR              reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    COMMA           reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    RPAREN          reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    RCCT            reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    PV              reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)
    ELSE            reduce using rule 94 (chamadaDeFuncao -> statement LPAREN RPAREN .)


state 255

    (95) chamadaDeFuncao -> statement LPAREN parametersFunction . RPAREN

    RPAREN          shift and go to state 324


state 256

    (92) parametersFunction -> primaryExpression .
    (93) parametersFunction -> primaryExpression . COMMA parametersFunction
    (134) postfixUnaryExpression -> primaryExpression .
    (135) postfixUnaryExpression -> primaryExpression . postfixUnaryExpressionRecursive
    (132) postfixUnaryExpressionRecursive -> . postfixUnarySuffix
    (133) postfixUnaryExpressionRecursive -> . postfixUnarySuffix postfixUnaryExpressionRecursive
    (136) postfixUnarySuffix -> . postfixUnaryOperator
    (137) postfixUnarySuffix -> . typeArguments
    (138) postfixUnarySuffix -> . callSuffix
    (139) postfixUnarySuffix -> . indexingSuffix
    (140) postfixUnarySuffix -> . navigationSuffix
    (263) postfixUnaryOperator -> . INCREMENTO
    (264) postfixUnaryOperator -> . DECREMENTO
    (164) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (165) typeArguments -> . MENOR MAIOR
    (157) callSuffix -> . optionalTypeArguments optionalValueArguments annotatedLambda
    (158) callSuffix -> . optionalTypeArguments optionalValueArguments
    (151) indexingSuffix -> . LCCT indexingSuffixRecursive RCCT
    (152) indexingSuffix -> . LCCT RCCT
    (155) navigationSuffix -> . memberAccessOperator simpleIdentifier CLASS
    (156) navigationSuffix -> . memberAccessOperator parenthesizedExpression CLASS
    (159) optionalTypeArguments -> . typeArguments
    (160) optionalTypeArguments -> .
    (265) memberAccessOperator -> . safeNav
    (266) memberAccessOperator -> . COLONCOLON
    (267) safeNav -> . PONTO

  ! reduce/reduce conflict for RPAREN resolved using rule 92 (parametersFunction -> primaryExpression .)
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PONTO resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for AS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MULT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MOD resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PLUS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MINUS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ID resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IMPORT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for INIT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OUT resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for VARARG resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for WHERE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for ELVIS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IN resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAIOR resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for AND resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for OR resolved using rule 134 (postfixUnaryExpression -> primaryExpression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 92 (parametersFunction -> primaryExpression .)
  ! shift/reduce conflict for COLONCOLON resolved as shift
  ! shift/reduce conflict for PONTO resolved as shift
    RPAREN          reduce using rule 92 (parametersFunction -> primaryExpression .)
    COMMA           shift and go to state 325
    AS              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MULT            reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    DIVIDE          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MOD             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    PLUS            reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MINUS           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    PONTOPONTO      reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    ID              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    CROSSINLINE     reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IMPORT          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    INIT            reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    NOINLINE        reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    OUT             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    VARARG          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    WHERE           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    OPERATOR        reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    ELVIS           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IN              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    NOT_IN          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IS              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    NOT_IS          reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MAIOR           reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MENORIGUAL      reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    MAIORIGUAL      reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    DIFERENTE       reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IDENTIDADE      reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    IGUALDADE       reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    SEMIDENTIDADE   reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    AND             reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    OR              reduce using rule 134 (postfixUnaryExpression -> primaryExpression .)
    INCREMENTO      shift and go to state 189
    DECREMENTO      shift and go to state 190
    MENOR           shift and go to state 123
    LCCT            shift and go to state 167
    LPAREN          reduce using rule 160 (optionalTypeArguments -> .)
    LCHAVE          reduce using rule 160 (optionalTypeArguments -> .)
    COLONCOLON      shift and go to state 170
    PONTO           shift and go to state 171

  ! MENOR           [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! LCCT            [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! COLONCOLON      [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! PONTO           [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! RPAREN          [ reduce using rule 134 (postfixUnaryExpression -> primaryExpression .) ]
  ! INCREMENTO      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DECREMENTO      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MENOR           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! LCCT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! COLONCOLON      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PONTO           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! AS              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MULT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DIVIDE          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MOD             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PLUS            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MINUS           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! PONTOPONTO      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! ID              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! CROSSINLINE     [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IMPORT          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! INIT            [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOINLINE        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! OUT             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! VARARG          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! WHERE           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! OPERATOR        [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! ELVIS           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IN              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOT_IN          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IS              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! NOT_IS          [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MAIOR           [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MENORIGUAL      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! MAIORIGUAL      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! DIFERENTE       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IDENTIDADE      [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! IGUALDADE       [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! SEMIDENTIDADE   [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! AND             [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! OR              [ reduce using rule 160 (optionalTypeArguments -> .) ]
  ! RPAREN          [ reduce using rule 160 (optionalTypeArguments -> .) ]

    postfixUnaryExpressionRecursive shift and go to state 182
    postfixUnarySuffix             shift and go to state 183
    postfixUnaryOperator           shift and go to state 184
    typeArguments                  shift and go to state 185
    callSuffix                     shift and go to state 186
    indexingSuffix                 shift and go to state 187
    navigationSuffix               shift and go to state 188
    optionalTypeArguments          shift and go to state 191
    memberAccessOperator           shift and go to state 168
    safeNav                        shift and go to state 169

state 257

    (213) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType . optionalType optionalTypeConstraints optionalFunctionBody
    (3) optionalType -> . DOISP type
    (4) optionalType -> .

    DOISP           shift and go to state 18
    ID              reduce using rule 4 (optionalType -> .)
    CROSSINLINE     reduce using rule 4 (optionalType -> .)
    IMPORT          reduce using rule 4 (optionalType -> .)
    INIT            reduce using rule 4 (optionalType -> .)
    NOINLINE        reduce using rule 4 (optionalType -> .)
    OUT             reduce using rule 4 (optionalType -> .)
    VARARG          reduce using rule 4 (optionalType -> .)
    WHERE           reduce using rule 4 (optionalType -> .)
    OPERATOR        reduce using rule 4 (optionalType -> .)
    ATRIBUICAO      reduce using rule 4 (optionalType -> .)
    LCHAVE          reduce using rule 4 (optionalType -> .)
    INCREMENTO      reduce using rule 4 (optionalType -> .)
    DECREMENTO      reduce using rule 4 (optionalType -> .)
    MENOR           reduce using rule 4 (optionalType -> .)
    LCCT            reduce using rule 4 (optionalType -> .)
    COLONCOLON      reduce using rule 4 (optionalType -> .)
    PONTO           reduce using rule 4 (optionalType -> .)
    LPAREN          reduce using rule 4 (optionalType -> .)
    AS              reduce using rule 4 (optionalType -> .)
    MAISIGUAL       reduce using rule 4 (optionalType -> .)
    MENOSIGUAL      reduce using rule 4 (optionalType -> .)
    MULTIGUAL       reduce using rule 4 (optionalType -> .)
    DIVIGUAL        reduce using rule 4 (optionalType -> .)
    MODIGUAL        reduce using rule 4 (optionalType -> .)
    MULT            reduce using rule 4 (optionalType -> .)
    DIVIDE          reduce using rule 4 (optionalType -> .)
    MOD             reduce using rule 4 (optionalType -> .)
    PLUS            reduce using rule 4 (optionalType -> .)
    MINUS           reduce using rule 4 (optionalType -> .)
    PONTOPONTO      reduce using rule 4 (optionalType -> .)
    ELVIS           reduce using rule 4 (optionalType -> .)
    IN              reduce using rule 4 (optionalType -> .)
    NOT_IN          reduce using rule 4 (optionalType -> .)
    IS              reduce using rule 4 (optionalType -> .)
    NOT_IS          reduce using rule 4 (optionalType -> .)
    MAIOR           reduce using rule 4 (optionalType -> .)
    MENORIGUAL      reduce using rule 4 (optionalType -> .)
    MAIORIGUAL      reduce using rule 4 (optionalType -> .)
    DIFERENTE       reduce using rule 4 (optionalType -> .)
    IDENTIDADE      reduce using rule 4 (optionalType -> .)
    IGUALDADE       reduce using rule 4 (optionalType -> .)
    SEMIDENTIDADE   reduce using rule 4 (optionalType -> .)
    AND             reduce using rule 4 (optionalType -> .)
    OR              reduce using rule 4 (optionalType -> .)
    FUN             reduce using rule 4 (optionalType -> .)
    FOR             reduce using rule 4 (optionalType -> .)
    WHILE           reduce using rule 4 (optionalType -> .)
    DO              reduce using rule 4 (optionalType -> .)
    VAR             reduce using rule 4 (optionalType -> .)
    VAL             reduce using rule 4 (optionalType -> .)
    LITERAL_STRING  reduce using rule 4 (optionalType -> .)
    NUMBER          reduce using rule 4 (optionalType -> .)
    IF              reduce using rule 4 (optionalType -> .)
    RETURN          reduce using rule 4 (optionalType -> .)
    RETURN_AT       reduce using rule 4 (optionalType -> .)
    CONTINUE        reduce using rule 4 (optionalType -> .)
    CONTINUE_AT     reduce using rule 4 (optionalType -> .)
    BREAK           reduce using rule 4 (optionalType -> .)
    BREAK_AT        reduce using rule 4 (optionalType -> .)
    NOT             reduce using rule 4 (optionalType -> .)
    SUSPEND         reduce using rule 4 (optionalType -> .)
    RCHAVE          reduce using rule 4 (optionalType -> .)
    COMMA           reduce using rule 4 (optionalType -> .)
    RPAREN          reduce using rule 4 (optionalType -> .)
    RCCT            reduce using rule 4 (optionalType -> .)
    PV              reduce using rule 4 (optionalType -> .)
    ELSE            reduce using rule 4 (optionalType -> .)

    optionalType                   shift and go to state 326

state 258

    (189) parametersWithOptionalType -> LPAREN . parametersWithOptionalTypeRecursive RPAREN
    (190) parametersWithOptionalType -> LPAREN . RPAREN
    (191) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType
    (192) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA
    (193) parameterWithOptionalType -> . optionalParameterModifiers simpleIdentifier optionalType
    (194) optionalParameterModifiers -> . parameterModifiers
    (195) optionalParameterModifiers -> .
    (196) parameterModifiers -> . VARARG
    (197) parameterModifiers -> . NOINLINE
    (198) parameterModifiers -> . CROSSINLINE

  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
    RPAREN          shift and go to state 328
    ID              reduce using rule 195 (optionalParameterModifiers -> .)
    IMPORT          reduce using rule 195 (optionalParameterModifiers -> .)
    INIT            reduce using rule 195 (optionalParameterModifiers -> .)
    OUT             reduce using rule 195 (optionalParameterModifiers -> .)
    WHERE           reduce using rule 195 (optionalParameterModifiers -> .)
    OPERATOR        reduce using rule 195 (optionalParameterModifiers -> .)
    VARARG          shift and go to state 332
    NOINLINE        shift and go to state 333
    CROSSINLINE     shift and go to state 334

  ! CROSSINLINE     [ reduce using rule 195 (optionalParameterModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 195 (optionalParameterModifiers -> .) ]
  ! VARARG          [ reduce using rule 195 (optionalParameterModifiers -> .) ]

    parametersWithOptionalTypeRecursive shift and go to state 327
    parameterWithOptionalType      shift and go to state 329
    optionalParameterModifiers     shift and go to state 330
    parameterModifiers             shift and go to state 331

state 259

    (207) optionalTypePonto -> type PONTO .

    LPAREN          reduce using rule 207 (optionalTypePonto -> type PONTO .)


state 260

    (96) assignment -> directlyAssignableExpression ATRIBUICAO expression .

    LPAREN          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FUN             reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    FOR             reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    WHILE           reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DO              reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VAR             reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VAL             reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ID              reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IMPORT          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    INIT            reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOINLINE        reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OUT             reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    VARARG          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    WHERE           reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OPERATOR        reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NUMBER          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LCCT            reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IF              reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RETURN          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONTINUE        reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    BREAK           reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    LCHAVE          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MINUS           reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PLUS            reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT             reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    SUSPEND         reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RCHAVE          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENOR           reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PONTO           reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    AS              reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MULT            reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIVIDE          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MOD             reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ELVIS           reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IN              reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT_IN          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IS              reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    NOT_IS          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAIOR           reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    AND             reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    OR              reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    COMMA           reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RPAREN          reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    RCCT            reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    PV              reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)
    ELSE            reduce using rule 96 (assignment -> directlyAssignableExpression ATRIBUICAO expression .)


state 261

    (97) assignment -> asExpression assignmentAndOperator expression .

    LPAREN          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    FUN             reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    FOR             reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    WHILE           reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    DO              reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    VAR             reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    VAL             reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    ID              reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    CROSSINLINE     reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    IMPORT          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    INIT            reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    NOINLINE        reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    OUT             reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    VARARG          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    WHERE           reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    OPERATOR        reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    LITERAL_STRING  reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    NUMBER          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    LCCT            reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    IF              reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    RETURN          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    RETURN_AT       reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    CONTINUE        reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    CONTINUE_AT     reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    BREAK           reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    BREAK_AT        reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    LCHAVE          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    INCREMENTO      reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    DECREMENTO      reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MINUS           reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    PLUS            reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    NOT             reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    SUSPEND         reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    COLONCOLON      reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    RCHAVE          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MENOR           reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    PONTO           reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    AS              reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MAISIGUAL       reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MENOSIGUAL      reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MULTIGUAL       reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    DIVIGUAL        reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MODIGUAL        reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MULT            reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    DIVIDE          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MOD             reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    PONTOPONTO      reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    ELVIS           reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    IN              reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    NOT_IN          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    IS              reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    NOT_IS          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MAIOR           reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MENORIGUAL      reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    MAIORIGUAL      reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    DIFERENTE       reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    IDENTIDADE      reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    IGUALDADE       reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    SEMIDENTIDADE   reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    AND             reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    OR              reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    COMMA           reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    RPAREN          reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    RCCT            reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    PV              reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)
    ELSE            reduce using rule 97 (assignment -> asExpression assignmentAndOperator expression .)


state 262

    (123) multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .

    PLUS            reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MINUS           reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PONTOPONTO      reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    ID              reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    CROSSINLINE     reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IMPORT          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    INIT            reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOINLINE        reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    OUT             reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    VARARG          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    WHERE           reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    OPERATOR        reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    ELVIS           reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IN              reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOT_IN          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IS              reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOT_IS          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MENOR           reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MAIOR           reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MENORIGUAL      reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MAIORIGUAL      reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DIFERENTE       reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IDENTIDADE      reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IGUALDADE       reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    SEMIDENTIDADE   reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    AND             reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    OR              reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LPAREN          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    FUN             reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    FOR             reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    WHILE           reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DO              reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    VAR             reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    VAL             reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LITERAL_STRING  reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NUMBER          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LCCT            reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    IF              reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RETURN          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RETURN_AT       reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    CONTINUE        reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    CONTINUE_AT     reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    BREAK           reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    BREAK_AT        reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    LCHAVE          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    INCREMENTO      reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DECREMENTO      reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    NOT             reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    SUSPEND         reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    COLONCOLON      reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RCHAVE          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    COMMA           reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RPAREN          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    RCCT            reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PONTO           reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    AS              reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MAISIGUAL       reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MENOSIGUAL      reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MULTIGUAL       reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DIVIGUAL        reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MODIGUAL        reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MULT            reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    DIVIDE          reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    MOD             reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    PV              reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)
    ELSE            reduce using rule 123 (multiplicativeExpression -> asExpression multiplicativeOperator multiplicativeExpression .)


state 263

    (17) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration . ATRIBUICAO expression optionalPv

    ATRIBUICAO      shift and go to state 335


state 264

    (10) genericVariableDeclaration -> multiVariableDeclaration .

    ATRIBUICAO      reduce using rule 10 (genericVariableDeclaration -> multiVariableDeclaration .)
    IN              reduce using rule 10 (genericVariableDeclaration -> multiVariableDeclaration .)


state 265

    (11) genericVariableDeclaration -> variableDeclaration .

    ATRIBUICAO      reduce using rule 11 (genericVariableDeclaration -> variableDeclaration .)
    IN              reduce using rule 11 (genericVariableDeclaration -> variableDeclaration .)


state 266

    (35) multiVariableDeclaration -> LPAREN . multiVariableDeclarationRecursive RPAREN
    (36) multiVariableDeclaration -> LPAREN . RPAREN
    (37) multiVariableDeclarationRecursive -> . variableDeclaration
    (38) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    RPAREN          shift and go to state 251
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    multiVariableDeclarationRecursive shift and go to state 250
    variableDeclaration            shift and go to state 252
    simpleIdentifier               shift and go to state 267

state 267

    (33) variableDeclaration -> simpleIdentifier . DOISP type
    (34) variableDeclaration -> simpleIdentifier .

    DOISP           shift and go to state 249
    ATRIBUICAO      reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    IN              reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    COMMA           reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    SETA            reduce using rule 34 (variableDeclaration -> simpleIdentifier .)
    RPAREN          reduce using rule 34 (variableDeclaration -> simpleIdentifier .)


state 268

    (18) typeParameters -> MENOR typeParameter . typeParametersRecursive optionalCOMMA MAIOR
    (19) typeParametersRecursive -> . COMMA typeParameter
    (20) typeParametersRecursive -> . COMMA typeParameter typeParametersRecursive

    COMMA           shift and go to state 337

    typeParametersRecursive        shift and go to state 336

state 269

    (23) typeParameter -> simpleIdentifier .
    (24) typeParameter -> simpleIdentifier . DOISP type

    COMMA           reduce using rule 23 (typeParameter -> simpleIdentifier .)
    MAIOR           reduce using rule 23 (typeParameter -> simpleIdentifier .)
    DOISP           shift and go to state 338


state 270

    (144) parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .

    ATRIBUICAO      reduce using rule 144 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)
    RPAREN          reduce using rule 144 (parenthesizedDirectlyAssignableExpression -> LPAREN directlyAssignableExpression RPAREN .)


state 271

    (184) parenthesizedExpression -> LPAREN expression RPAREN .

    INCREMENTO      reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOR           reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCCT            reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTO           reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AS              reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MULT            reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ID              reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IMPORT          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    INIT            reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OUT             reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VARARG          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHERE           reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OPERATOR        reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELVIS           reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IN              reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IS              reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIOR           reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    AND             reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    OR              reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FUN             reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    DO              reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    VAL             reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    IF              reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    RCCT            reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    PV              reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 184 (parenthesizedExpression -> LPAREN expression RPAREN .)


state 272

    (151) indexingSuffix -> LCCT indexingSuffixRecursive . RCCT

    RCCT            shift and go to state 339


state 273

    (152) indexingSuffix -> LCCT RCCT .

    ATRIBUICAO      reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    RPAREN          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    INCREMENTO      reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    DECREMENTO      reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MENOR           reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    LCCT            reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    COLONCOLON      reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    PONTO           reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    LPAREN          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    LCHAVE          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    AS              reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MAISIGUAL       reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MENOSIGUAL      reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MULTIGUAL       reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    DIVIGUAL        reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MODIGUAL        reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MULT            reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    DIVIDE          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MOD             reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    PLUS            reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MINUS           reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    PONTOPONTO      reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    ID              reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    CROSSINLINE     reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    IMPORT          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    INIT            reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    NOINLINE        reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    OUT             reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    VARARG          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    WHERE           reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    OPERATOR        reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    ELVIS           reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    IN              reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    NOT_IN          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    IS              reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    NOT_IS          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MAIOR           reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MENORIGUAL      reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    MAIORIGUAL      reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    DIFERENTE       reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    IDENTIDADE      reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    IGUALDADE       reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    SEMIDENTIDADE   reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    AND             reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    OR              reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    FUN             reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    FOR             reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    WHILE           reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    DO              reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    VAR             reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    VAL             reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    LITERAL_STRING  reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    NUMBER          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    IF              reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    RETURN          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    RETURN_AT       reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    CONTINUE        reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    CONTINUE_AT     reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    BREAK           reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    BREAK_AT        reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    NOT             reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    SUSPEND         reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    RCHAVE          reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    COMMA           reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    RCCT            reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    PV              reduce using rule 152 (indexingSuffix -> LCCT RCCT .)
    ELSE            reduce using rule 152 (indexingSuffix -> LCCT RCCT .)


state 274

    (153) indexingSuffixRecursive -> expression .
    (154) indexingSuffixRecursive -> expression . COMMA indexingSuffixRecursive

    RCCT            reduce using rule 153 (indexingSuffixRecursive -> expression .)
    COMMA           shift and go to state 340


state 275

    (155) navigationSuffix -> memberAccessOperator simpleIdentifier . CLASS

    CLASS           shift and go to state 341


state 276

    (156) navigationSuffix -> memberAccessOperator parenthesizedExpression . CLASS

    CLASS           shift and go to state 342


state 277

    (125) asExpression -> prefixUnaryExpression asOperator type .

    MAISIGUAL       reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOSIGUAL      reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    MULTIGUAL       reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIGUAL        reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    MODIGUAL        reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    MULT            reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    DIVIDE          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    MOD             reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    PLUS            reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    MINUS           reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTOPONTO      reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    ID              reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    CROSSINLINE     reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    IMPORT          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    INIT            reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    NOINLINE        reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    OUT             reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    VARARG          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    WHERE           reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    OPERATOR        reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    ELVIS           reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    IN              reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IN          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    IS              reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT_IS          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    MENOR           reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIOR           reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    MENORIGUAL      reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    MAIORIGUAL      reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    DIFERENTE       reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    IDENTIDADE      reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    IGUALDADE       reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    SEMIDENTIDADE   reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    AND             reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    OR              reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    LPAREN          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    FUN             reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    FOR             reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    WHILE           reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    DO              reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    VAR             reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    VAL             reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    LITERAL_STRING  reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    NUMBER          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    LCCT            reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    IF              reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    RETURN_AT       reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE        reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    CONTINUE_AT     reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK           reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    BREAK_AT        reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    LCHAVE          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    INCREMENTO      reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    DECREMENTO      reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    NOT             reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    SUSPEND         reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    COLONCOLON      reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    RCHAVE          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    COMMA           reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    RPAREN          reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    RCCT            reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    PONTO           reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    AS              reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    PV              reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)
    ELSE            reduce using rule 125 (asExpression -> prefixUnaryExpression asOperator type .)


state 278

    (257) asOperator -> AS asOperator .

    SUSPEND         reduce using rule 257 (asOperator -> AS asOperator .)
    LPAREN          reduce using rule 257 (asOperator -> AS asOperator .)
    ID              reduce using rule 257 (asOperator -> AS asOperator .)
    CROSSINLINE     reduce using rule 257 (asOperator -> AS asOperator .)
    IMPORT          reduce using rule 257 (asOperator -> AS asOperator .)
    INIT            reduce using rule 257 (asOperator -> AS asOperator .)
    NOINLINE        reduce using rule 257 (asOperator -> AS asOperator .)
    OUT             reduce using rule 257 (asOperator -> AS asOperator .)
    VARARG          reduce using rule 257 (asOperator -> AS asOperator .)
    WHERE           reduce using rule 257 (asOperator -> AS asOperator .)
    OPERATOR        reduce using rule 257 (asOperator -> AS asOperator .)


state 279

    (86) forStatement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN controlStructureBody
    (87) forStatement -> FOR LPAREN genericVariableDeclaration . IN expression RPAREN

    IN              shift and go to state 343


state 280

    (88) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (89) whileStatement -> WHILE LPAREN expression . RPAREN PV

    RPAREN          shift and go to state 344


state 281

    (90) doWhileStatement -> DO controlStructureBody WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 345


state 282

    (91) doWhileStatement -> DO WHILE LPAREN . expression RPAREN
    (88) whileStatement -> WHILE LPAREN . expression RPAREN controlStructureBody
    (89) whileStatement -> WHILE LPAREN . expression RPAREN PV
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 346
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 283

    (94) chamadaDeFuncao -> statement LPAREN . RPAREN
    (95) chamadaDeFuncao -> statement LPAREN . parametersFunction RPAREN
    (92) parametersFunction -> . primaryExpression
    (93) parametersFunction -> . primaryExpression COMMA parametersFunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    RPAREN          shift and go to state 254
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    parametersFunction             shift and go to state 255
    primaryExpression              shift and go to state 347
    parenthesizedExpression        shift and go to state 75
    simpleIdentifier               shift and go to state 193
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 284

    (80) block -> LCHAVE statements . RCHAVE
    (200) optionsLambdaLiteral -> statements .

  ! shift/reduce conflict for RCHAVE resolved as shift
    RCHAVE          shift and go to state 141

  ! RCHAVE          [ reduce using rule 200 (optionsLambdaLiteral -> statements .) ]


state 285

    (99) disjunction -> conjunction OR disjunction .

    LPAREN          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    FUN             reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    FOR             reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    WHILE           reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    DO              reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    VAR             reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    VAL             reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    ID              reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    CROSSINLINE     reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    IMPORT          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    INIT            reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    NOINLINE        reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    OUT             reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    VARARG          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    WHERE           reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    OPERATOR        reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    LITERAL_STRING  reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    NUMBER          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    LCCT            reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    IF              reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    RETURN          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    RETURN_AT       reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    CONTINUE        reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    CONTINUE_AT     reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    BREAK           reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    BREAK_AT        reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    LCHAVE          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    INCREMENTO      reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    DECREMENTO      reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MINUS           reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    PLUS            reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    NOT             reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    SUSPEND         reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    COLONCOLON      reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    RCHAVE          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    COMMA           reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    RPAREN          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    RCCT            reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MENOR           reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    PONTO           reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    AS              reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MAISIGUAL       reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MENOSIGUAL      reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MULTIGUAL       reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    DIVIGUAL        reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MODIGUAL        reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MULT            reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    DIVIDE          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MOD             reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    PONTOPONTO      reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    ELVIS           reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    IN              reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    NOT_IN          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    IS              reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    NOT_IS          reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MAIOR           reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MENORIGUAL      reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    MAIORIGUAL      reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    DIFERENTE       reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    IDENTIDADE      reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    IGUALDADE       reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    SEMIDENTIDADE   reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    AND             reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    OR              reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    PV              reduce using rule 99 (disjunction -> conjunction OR disjunction .)
    ELSE            reduce using rule 99 (disjunction -> conjunction OR disjunction .)


state 286

    (133) postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .

    MENOR           reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LCCT            reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    COLONCOLON      reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PONTO           reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    AS              reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAISIGUAL       reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENOSIGUAL      reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MULTIGUAL       reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIVIGUAL        reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MODIGUAL        reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MULT            reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIVIDE          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MOD             reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PLUS            reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MINUS           reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PONTOPONTO      reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ID              reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CROSSINLINE     reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IMPORT          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    INIT            reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOINLINE        reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OUT             reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VARARG          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    WHERE           reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OPERATOR        reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ELVIS           reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IN              reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT_IN          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IS              reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT_IS          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAIOR           reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MENORIGUAL      reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    MAIORIGUAL      reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DIFERENTE       reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IDENTIDADE      reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IGUALDADE       reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    SEMIDENTIDADE   reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    AND             reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    OR              reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LPAREN          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FUN             reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    FOR             reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    WHILE           reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DO              reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VAR             reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    VAL             reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LITERAL_STRING  reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NUMBER          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    IF              reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RETURN          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RETURN_AT       reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONTINUE        reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    CONTINUE_AT     reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    BREAK           reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    BREAK_AT        reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    LCHAVE          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    INCREMENTO      reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    DECREMENTO      reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    NOT             reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    SUSPEND         reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RCHAVE          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    COMMA           reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RPAREN          reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    RCCT            reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    PV              reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)
    ELSE            reduce using rule 133 (postfixUnaryExpressionRecursive -> postfixUnarySuffix postfixUnaryExpressionRecursive .)


state 287

    (157) callSuffix -> optionalTypeArguments optionalValueArguments . annotatedLambda
    (158) callSuffix -> optionalTypeArguments optionalValueArguments .
    (163) annotatedLambda -> . lambdaLiteral
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    INCREMENTO      reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DECREMENTO      reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MENOR           reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LCCT            reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    COLONCOLON      reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PONTO           reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LPAREN          reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    AS              reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MAISIGUAL       reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MENOSIGUAL      reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MULTIGUAL       reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DIVIGUAL        reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MODIGUAL        reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MULT            reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DIVIDE          reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MOD             reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PLUS            reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MINUS           reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PONTOPONTO      reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ID              reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CROSSINLINE     reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IMPORT          reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    INIT            reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOINLINE        reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OUT             reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    VARARG          reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    WHERE           reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OPERATOR        reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ELVIS           reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IN              reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOT_IN          reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IS              reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOT_IS          reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MAIOR           reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MENORIGUAL      reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    MAIORIGUAL      reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DIFERENTE       reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IDENTIDADE      reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IGUALDADE       reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    SEMIDENTIDADE   reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    AND             reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    OR              reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    FUN             reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    FOR             reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    WHILE           reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    DO              reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    VAR             reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    VAL             reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LITERAL_STRING  reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NUMBER          reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    IF              reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RETURN          reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RETURN_AT       reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CONTINUE        reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    CONTINUE_AT     reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    BREAK           reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    BREAK_AT        reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    NOT             reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    SUSPEND         reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RCHAVE          reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    COMMA           reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RPAREN          reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    RCCT            reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    PV              reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    ELSE            reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .)
    LCHAVE          shift and go to state 44

  ! LCHAVE          [ reduce using rule 158 (callSuffix -> optionalTypeArguments optionalValueArguments .) ]

    annotatedLambda                shift and go to state 348
    lambdaLiteral                  shift and go to state 349

state 288

    (161) optionalValueArguments -> valueArguments .

    LCHAVE          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    INCREMENTO      reduce using rule 161 (optionalValueArguments -> valueArguments .)
    DECREMENTO      reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MENOR           reduce using rule 161 (optionalValueArguments -> valueArguments .)
    LCCT            reduce using rule 161 (optionalValueArguments -> valueArguments .)
    COLONCOLON      reduce using rule 161 (optionalValueArguments -> valueArguments .)
    PONTO           reduce using rule 161 (optionalValueArguments -> valueArguments .)
    LPAREN          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    AS              reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MAISIGUAL       reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MENOSIGUAL      reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MULTIGUAL       reduce using rule 161 (optionalValueArguments -> valueArguments .)
    DIVIGUAL        reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MODIGUAL        reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MULT            reduce using rule 161 (optionalValueArguments -> valueArguments .)
    DIVIDE          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MOD             reduce using rule 161 (optionalValueArguments -> valueArguments .)
    PLUS            reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MINUS           reduce using rule 161 (optionalValueArguments -> valueArguments .)
    PONTOPONTO      reduce using rule 161 (optionalValueArguments -> valueArguments .)
    ID              reduce using rule 161 (optionalValueArguments -> valueArguments .)
    CROSSINLINE     reduce using rule 161 (optionalValueArguments -> valueArguments .)
    IMPORT          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    INIT            reduce using rule 161 (optionalValueArguments -> valueArguments .)
    NOINLINE        reduce using rule 161 (optionalValueArguments -> valueArguments .)
    OUT             reduce using rule 161 (optionalValueArguments -> valueArguments .)
    VARARG          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    WHERE           reduce using rule 161 (optionalValueArguments -> valueArguments .)
    OPERATOR        reduce using rule 161 (optionalValueArguments -> valueArguments .)
    ELVIS           reduce using rule 161 (optionalValueArguments -> valueArguments .)
    IN              reduce using rule 161 (optionalValueArguments -> valueArguments .)
    NOT_IN          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    IS              reduce using rule 161 (optionalValueArguments -> valueArguments .)
    NOT_IS          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MAIOR           reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MENORIGUAL      reduce using rule 161 (optionalValueArguments -> valueArguments .)
    MAIORIGUAL      reduce using rule 161 (optionalValueArguments -> valueArguments .)
    DIFERENTE       reduce using rule 161 (optionalValueArguments -> valueArguments .)
    IDENTIDADE      reduce using rule 161 (optionalValueArguments -> valueArguments .)
    IGUALDADE       reduce using rule 161 (optionalValueArguments -> valueArguments .)
    SEMIDENTIDADE   reduce using rule 161 (optionalValueArguments -> valueArguments .)
    AND             reduce using rule 161 (optionalValueArguments -> valueArguments .)
    OR              reduce using rule 161 (optionalValueArguments -> valueArguments .)
    FUN             reduce using rule 161 (optionalValueArguments -> valueArguments .)
    FOR             reduce using rule 161 (optionalValueArguments -> valueArguments .)
    WHILE           reduce using rule 161 (optionalValueArguments -> valueArguments .)
    DO              reduce using rule 161 (optionalValueArguments -> valueArguments .)
    VAR             reduce using rule 161 (optionalValueArguments -> valueArguments .)
    VAL             reduce using rule 161 (optionalValueArguments -> valueArguments .)
    LITERAL_STRING  reduce using rule 161 (optionalValueArguments -> valueArguments .)
    NUMBER          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    IF              reduce using rule 161 (optionalValueArguments -> valueArguments .)
    RETURN          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    RETURN_AT       reduce using rule 161 (optionalValueArguments -> valueArguments .)
    CONTINUE        reduce using rule 161 (optionalValueArguments -> valueArguments .)
    CONTINUE_AT     reduce using rule 161 (optionalValueArguments -> valueArguments .)
    BREAK           reduce using rule 161 (optionalValueArguments -> valueArguments .)
    BREAK_AT        reduce using rule 161 (optionalValueArguments -> valueArguments .)
    NOT             reduce using rule 161 (optionalValueArguments -> valueArguments .)
    SUSPEND         reduce using rule 161 (optionalValueArguments -> valueArguments .)
    RCHAVE          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    COMMA           reduce using rule 161 (optionalValueArguments -> valueArguments .)
    RPAREN          reduce using rule 161 (optionalValueArguments -> valueArguments .)
    RCCT            reduce using rule 161 (optionalValueArguments -> valueArguments .)
    PV              reduce using rule 161 (optionalValueArguments -> valueArguments .)
    ELSE            reduce using rule 161 (optionalValueArguments -> valueArguments .)


state 289

    (170) valueArguments -> LPAREN . RPAREN
    (171) valueArguments -> LPAREN . valueArgumentsRecursive RPAREN
    (168) valueArgumentsRecursive -> . valueArgument
    (169) valueArgumentsRecursive -> . valueArgument COMMA valueArgumentsRecursive
    (172) valueArgument -> . simpleIdentifier ATRIBUICAO MULT expression
    (173) valueArgument -> . simpleIdentifier ATRIBUICAO expression
    (174) valueArgument -> . expression
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    RPAREN          shift and go to state 350
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    valueArgumentsRecursive        shift and go to state 351
    valueArgument                  shift and go to state 352
    simpleIdentifier               shift and go to state 353
    expression                     shift and go to state 354
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 290

    (101) conjunction -> equality AND conjunction .

    OR              reduce using rule 101 (conjunction -> equality AND conjunction .)
    LPAREN          reduce using rule 101 (conjunction -> equality AND conjunction .)
    FUN             reduce using rule 101 (conjunction -> equality AND conjunction .)
    FOR             reduce using rule 101 (conjunction -> equality AND conjunction .)
    WHILE           reduce using rule 101 (conjunction -> equality AND conjunction .)
    DO              reduce using rule 101 (conjunction -> equality AND conjunction .)
    VAR             reduce using rule 101 (conjunction -> equality AND conjunction .)
    VAL             reduce using rule 101 (conjunction -> equality AND conjunction .)
    ID              reduce using rule 101 (conjunction -> equality AND conjunction .)
    CROSSINLINE     reduce using rule 101 (conjunction -> equality AND conjunction .)
    IMPORT          reduce using rule 101 (conjunction -> equality AND conjunction .)
    INIT            reduce using rule 101 (conjunction -> equality AND conjunction .)
    NOINLINE        reduce using rule 101 (conjunction -> equality AND conjunction .)
    OUT             reduce using rule 101 (conjunction -> equality AND conjunction .)
    VARARG          reduce using rule 101 (conjunction -> equality AND conjunction .)
    WHERE           reduce using rule 101 (conjunction -> equality AND conjunction .)
    OPERATOR        reduce using rule 101 (conjunction -> equality AND conjunction .)
    LITERAL_STRING  reduce using rule 101 (conjunction -> equality AND conjunction .)
    NUMBER          reduce using rule 101 (conjunction -> equality AND conjunction .)
    LCCT            reduce using rule 101 (conjunction -> equality AND conjunction .)
    IF              reduce using rule 101 (conjunction -> equality AND conjunction .)
    RETURN          reduce using rule 101 (conjunction -> equality AND conjunction .)
    RETURN_AT       reduce using rule 101 (conjunction -> equality AND conjunction .)
    CONTINUE        reduce using rule 101 (conjunction -> equality AND conjunction .)
    CONTINUE_AT     reduce using rule 101 (conjunction -> equality AND conjunction .)
    BREAK           reduce using rule 101 (conjunction -> equality AND conjunction .)
    BREAK_AT        reduce using rule 101 (conjunction -> equality AND conjunction .)
    LCHAVE          reduce using rule 101 (conjunction -> equality AND conjunction .)
    INCREMENTO      reduce using rule 101 (conjunction -> equality AND conjunction .)
    DECREMENTO      reduce using rule 101 (conjunction -> equality AND conjunction .)
    MINUS           reduce using rule 101 (conjunction -> equality AND conjunction .)
    PLUS            reduce using rule 101 (conjunction -> equality AND conjunction .)
    NOT             reduce using rule 101 (conjunction -> equality AND conjunction .)
    SUSPEND         reduce using rule 101 (conjunction -> equality AND conjunction .)
    COLONCOLON      reduce using rule 101 (conjunction -> equality AND conjunction .)
    RCHAVE          reduce using rule 101 (conjunction -> equality AND conjunction .)
    COMMA           reduce using rule 101 (conjunction -> equality AND conjunction .)
    RPAREN          reduce using rule 101 (conjunction -> equality AND conjunction .)
    RCCT            reduce using rule 101 (conjunction -> equality AND conjunction .)
    MENOR           reduce using rule 101 (conjunction -> equality AND conjunction .)
    PONTO           reduce using rule 101 (conjunction -> equality AND conjunction .)
    AS              reduce using rule 101 (conjunction -> equality AND conjunction .)
    MAISIGUAL       reduce using rule 101 (conjunction -> equality AND conjunction .)
    MENOSIGUAL      reduce using rule 101 (conjunction -> equality AND conjunction .)
    MULTIGUAL       reduce using rule 101 (conjunction -> equality AND conjunction .)
    DIVIGUAL        reduce using rule 101 (conjunction -> equality AND conjunction .)
    MODIGUAL        reduce using rule 101 (conjunction -> equality AND conjunction .)
    MULT            reduce using rule 101 (conjunction -> equality AND conjunction .)
    DIVIDE          reduce using rule 101 (conjunction -> equality AND conjunction .)
    MOD             reduce using rule 101 (conjunction -> equality AND conjunction .)
    PONTOPONTO      reduce using rule 101 (conjunction -> equality AND conjunction .)
    ELVIS           reduce using rule 101 (conjunction -> equality AND conjunction .)
    IN              reduce using rule 101 (conjunction -> equality AND conjunction .)
    NOT_IN          reduce using rule 101 (conjunction -> equality AND conjunction .)
    IS              reduce using rule 101 (conjunction -> equality AND conjunction .)
    NOT_IS          reduce using rule 101 (conjunction -> equality AND conjunction .)
    MAIOR           reduce using rule 101 (conjunction -> equality AND conjunction .)
    MENORIGUAL      reduce using rule 101 (conjunction -> equality AND conjunction .)
    MAIORIGUAL      reduce using rule 101 (conjunction -> equality AND conjunction .)
    DIFERENTE       reduce using rule 101 (conjunction -> equality AND conjunction .)
    IDENTIDADE      reduce using rule 101 (conjunction -> equality AND conjunction .)
    IGUALDADE       reduce using rule 101 (conjunction -> equality AND conjunction .)
    SEMIDENTIDADE   reduce using rule 101 (conjunction -> equality AND conjunction .)
    AND             reduce using rule 101 (conjunction -> equality AND conjunction .)
    PV              reduce using rule 101 (conjunction -> equality AND conjunction .)
    ELSE            reduce using rule 101 (conjunction -> equality AND conjunction .)


state 291

    (103) equality -> comparison equalityOperator equality .

    AND             reduce using rule 103 (equality -> comparison equalityOperator equality .)
    OR              reduce using rule 103 (equality -> comparison equalityOperator equality .)
    LPAREN          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    FUN             reduce using rule 103 (equality -> comparison equalityOperator equality .)
    FOR             reduce using rule 103 (equality -> comparison equalityOperator equality .)
    WHILE           reduce using rule 103 (equality -> comparison equalityOperator equality .)
    DO              reduce using rule 103 (equality -> comparison equalityOperator equality .)
    VAR             reduce using rule 103 (equality -> comparison equalityOperator equality .)
    VAL             reduce using rule 103 (equality -> comparison equalityOperator equality .)
    ID              reduce using rule 103 (equality -> comparison equalityOperator equality .)
    CROSSINLINE     reduce using rule 103 (equality -> comparison equalityOperator equality .)
    IMPORT          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    INIT            reduce using rule 103 (equality -> comparison equalityOperator equality .)
    NOINLINE        reduce using rule 103 (equality -> comparison equalityOperator equality .)
    OUT             reduce using rule 103 (equality -> comparison equalityOperator equality .)
    VARARG          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    WHERE           reduce using rule 103 (equality -> comparison equalityOperator equality .)
    OPERATOR        reduce using rule 103 (equality -> comparison equalityOperator equality .)
    LITERAL_STRING  reduce using rule 103 (equality -> comparison equalityOperator equality .)
    NUMBER          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    LCCT            reduce using rule 103 (equality -> comparison equalityOperator equality .)
    IF              reduce using rule 103 (equality -> comparison equalityOperator equality .)
    RETURN          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    RETURN_AT       reduce using rule 103 (equality -> comparison equalityOperator equality .)
    CONTINUE        reduce using rule 103 (equality -> comparison equalityOperator equality .)
    CONTINUE_AT     reduce using rule 103 (equality -> comparison equalityOperator equality .)
    BREAK           reduce using rule 103 (equality -> comparison equalityOperator equality .)
    BREAK_AT        reduce using rule 103 (equality -> comparison equalityOperator equality .)
    LCHAVE          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    INCREMENTO      reduce using rule 103 (equality -> comparison equalityOperator equality .)
    DECREMENTO      reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MINUS           reduce using rule 103 (equality -> comparison equalityOperator equality .)
    PLUS            reduce using rule 103 (equality -> comparison equalityOperator equality .)
    NOT             reduce using rule 103 (equality -> comparison equalityOperator equality .)
    SUSPEND         reduce using rule 103 (equality -> comparison equalityOperator equality .)
    COLONCOLON      reduce using rule 103 (equality -> comparison equalityOperator equality .)
    RCHAVE          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    COMMA           reduce using rule 103 (equality -> comparison equalityOperator equality .)
    RPAREN          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    RCCT            reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MENOR           reduce using rule 103 (equality -> comparison equalityOperator equality .)
    PONTO           reduce using rule 103 (equality -> comparison equalityOperator equality .)
    AS              reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MAISIGUAL       reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MENOSIGUAL      reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MULTIGUAL       reduce using rule 103 (equality -> comparison equalityOperator equality .)
    DIVIGUAL        reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MODIGUAL        reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MULT            reduce using rule 103 (equality -> comparison equalityOperator equality .)
    DIVIDE          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MOD             reduce using rule 103 (equality -> comparison equalityOperator equality .)
    PONTOPONTO      reduce using rule 103 (equality -> comparison equalityOperator equality .)
    ELVIS           reduce using rule 103 (equality -> comparison equalityOperator equality .)
    IN              reduce using rule 103 (equality -> comparison equalityOperator equality .)
    NOT_IN          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    IS              reduce using rule 103 (equality -> comparison equalityOperator equality .)
    NOT_IS          reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MAIOR           reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MENORIGUAL      reduce using rule 103 (equality -> comparison equalityOperator equality .)
    MAIORIGUAL      reduce using rule 103 (equality -> comparison equalityOperator equality .)
    DIFERENTE       reduce using rule 103 (equality -> comparison equalityOperator equality .)
    IDENTIDADE      reduce using rule 103 (equality -> comparison equalityOperator equality .)
    IGUALDADE       reduce using rule 103 (equality -> comparison equalityOperator equality .)
    SEMIDENTIDADE   reduce using rule 103 (equality -> comparison equalityOperator equality .)
    PV              reduce using rule 103 (equality -> comparison equalityOperator equality .)
    ELSE            reduce using rule 103 (equality -> comparison equalityOperator equality .)


state 292

    (229) callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .

    INCREMENTO      reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DECREMENTO      reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MENOR           reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LCCT            reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    COLONCOLON      reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PONTO           reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LPAREN          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LCHAVE          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    AS              reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MAISIGUAL       reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MENOSIGUAL      reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MULTIGUAL       reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DIVIGUAL        reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MODIGUAL        reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MULT            reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DIVIDE          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MOD             reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PLUS            reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MINUS           reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PONTOPONTO      reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ID              reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CROSSINLINE     reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IMPORT          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    INIT            reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOINLINE        reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OUT             reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    VARARG          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    WHERE           reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OPERATOR        reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ELVIS           reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IN              reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOT_IN          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IS              reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOT_IS          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MAIOR           reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MENORIGUAL      reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    MAIORIGUAL      reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DIFERENTE       reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IDENTIDADE      reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IGUALDADE       reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    SEMIDENTIDADE   reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    AND             reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    OR              reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    FUN             reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    FOR             reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    WHILE           reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    DO              reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    VAR             reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    VAL             reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    LITERAL_STRING  reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NUMBER          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    IF              reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RETURN          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RETURN_AT       reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CONTINUE        reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    CONTINUE_AT     reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    BREAK           reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    BREAK_AT        reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    NOT             reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    SUSPEND         reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RCHAVE          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    COMMA           reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RPAREN          reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    RCCT            reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    PV              reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)
    ELSE            reduce using rule 229 (callableReference -> optionalReceiverType COLONCOLON simpleIdentifierOrClass .)


state 293

    (232) simpleIdentifierOrClass -> simpleIdentifier .

    INCREMENTO      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    DECREMENTO      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENOR           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    LCCT            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    COLONCOLON      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    PONTO           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    LPAREN          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    LCHAVE          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    AS              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MODIGUAL        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MULT            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIVIDE          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MOD             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    PLUS            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MINUS           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    ID              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IMPORT          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    INIT            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOINLINE        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    OUT             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    VARARG          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    WHERE           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    OPERATOR        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    ELVIS           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IN              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT_IN          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IS              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT_IS          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAIOR           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    DIFERENTE       reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IGUALDADE       reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    AND             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    OR              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    FUN             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    FOR             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    WHILE           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    DO              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    VAR             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    VAL             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    NUMBER          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    IF              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    RETURN          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    RETURN_AT       reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONTINUE        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    BREAK           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    BREAK_AT        reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    NOT             reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    SUSPEND         reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    RCHAVE          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    COMMA           reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    RPAREN          reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    RCCT            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    PV              reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)
    ELSE            reduce using rule 232 (simpleIdentifierOrClass -> simpleIdentifier .)


state 294

    (233) simpleIdentifierOrClass -> CLASS .

    INCREMENTO      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    DECREMENTO      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MENOR           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    LCCT            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    COLONCOLON      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    PONTO           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    LPAREN          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    LCHAVE          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    AS              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MAISIGUAL       reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MENOSIGUAL      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MULTIGUAL       reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    DIVIGUAL        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MODIGUAL        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MULT            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    DIVIDE          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MOD             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    PLUS            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MINUS           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    PONTOPONTO      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    ID              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    CROSSINLINE     reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IMPORT          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    INIT            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    NOINLINE        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    OUT             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    VARARG          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    WHERE           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    OPERATOR        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    ELVIS           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IN              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    NOT_IN          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IS              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    NOT_IS          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MAIOR           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MENORIGUAL      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    MAIORIGUAL      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    DIFERENTE       reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IDENTIDADE      reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IGUALDADE       reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    SEMIDENTIDADE   reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    AND             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    OR              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    FUN             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    FOR             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    WHILE           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    DO              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    VAR             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    VAL             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    LITERAL_STRING  reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    NUMBER          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    IF              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    RETURN          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    RETURN_AT       reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    CONTINUE        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    CONTINUE_AT     reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    BREAK           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    BREAK_AT        reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    NOT             reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    SUSPEND         reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    RCHAVE          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    COMMA           reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    RPAREN          reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    RCCT            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    PV              reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)
    ELSE            reduce using rule 233 (simpleIdentifierOrClass -> CLASS .)


state 295

    (185) collectionLiteral -> LCCT collectionLiteralRecursive RCCT .

    INCREMENTO      reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DECREMENTO      reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENOR           reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LCCT            reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    COLONCOLON      reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PONTO           reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LPAREN          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LCHAVE          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    AS              reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAISIGUAL       reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENOSIGUAL      reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MULTIGUAL       reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIVIGUAL        reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MODIGUAL        reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MULT            reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIVIDE          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MOD             reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PLUS            reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MINUS           reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PONTOPONTO      reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ID              reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CROSSINLINE     reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IMPORT          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    INIT            reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOINLINE        reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OUT             reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VARARG          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    WHERE           reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OPERATOR        reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ELVIS           reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IN              reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT_IN          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IS              reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT_IS          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAIOR           reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MENORIGUAL      reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    MAIORIGUAL      reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DIFERENTE       reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IDENTIDADE      reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IGUALDADE       reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    SEMIDENTIDADE   reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    AND             reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    OR              reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FUN             reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    FOR             reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    WHILE           reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    DO              reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VAR             reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    VAL             reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    LITERAL_STRING  reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NUMBER          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    IF              reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RETURN          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RETURN_AT       reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONTINUE        reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    CONTINUE_AT     reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    BREAK           reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    BREAK_AT        reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    NOT             reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    SUSPEND         reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RCHAVE          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    COMMA           reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RPAREN          reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    RCCT            reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    PV              reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)
    ELSE            reduce using rule 185 (collectionLiteral -> LCCT collectionLiteralRecursive RCCT .)


state 296

    (188) collectionLiteralRecursive -> expression COMMA . collectionLiteralRecursive
    (187) collectionLiteralRecursive -> . expression
    (188) collectionLiteralRecursive -> . expression COMMA collectionLiteralRecursive
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 205
    collectionLiteralRecursive     shift and go to state 355
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 297

    (217) ifExpression -> IF LPAREN expression . RPAREN controlStructureBodyOrPV
    (218) ifExpression -> IF LPAREN expression . RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV

    RPAREN          shift and go to state 356


state 298

    (105) comparison -> infixOperation comparisonOperator infixOperation .

    DIFERENTE       reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    IDENTIDADE      reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    IGUALDADE       reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    SEMIDENTIDADE   reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    AND             reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    OR              reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    LPAREN          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    FUN             reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    FOR             reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    WHILE           reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    DO              reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    VAR             reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    VAL             reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    ID              reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    CROSSINLINE     reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    IMPORT          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    INIT            reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOINLINE        reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    OUT             reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    VARARG          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    WHERE           reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    OPERATOR        reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    LITERAL_STRING  reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    NUMBER          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    LCCT            reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    IF              reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    RETURN          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    RETURN_AT       reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    CONTINUE        reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    CONTINUE_AT     reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    BREAK           reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    BREAK_AT        reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    LCHAVE          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    INCREMENTO      reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    DECREMENTO      reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MINUS           reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    PLUS            reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOT             reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    SUSPEND         reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    COLONCOLON      reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    RCHAVE          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    COMMA           reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    RPAREN          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    RCCT            reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MENOR           reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    PONTO           reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    AS              reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MAISIGUAL       reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MENOSIGUAL      reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MULTIGUAL       reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    DIVIGUAL        reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MODIGUAL        reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MULT            reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    DIVIDE          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MOD             reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    PONTOPONTO      reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    ELVIS           reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    IN              reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOT_IN          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    IS              reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    NOT_IS          reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MAIOR           reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MENORIGUAL      reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    MAIORIGUAL      reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    PV              reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)
    ELSE            reduce using rule 105 (comparison -> infixOperation comparisonOperator infixOperation .)


state 299

    (108) infixOperationRecursive -> inOrIs elvisOrType .
    (109) infixOperationRecursive -> inOrIs elvisOrType . infixOperationRecursive
    (108) infixOperationRecursive -> . inOrIs elvisOrType
    (109) infixOperationRecursive -> . inOrIs elvisOrType infixOperationRecursive
    (110) inOrIs -> . inOperator
    (111) inOrIs -> . isOperator
    (247) inOperator -> . IN
    (248) inOperator -> . NOT_IN
    (249) isOperator -> . IS
    (250) isOperator -> . NOT_IS

  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for NOT_IN resolved as shift
  ! shift/reduce conflict for IS resolved as shift
  ! shift/reduce conflict for NOT_IS resolved as shift
    LPAREN          reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    FUN             reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    FOR             reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    WHILE           reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    DO              reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    VAR             reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    VAL             reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    ID              reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    CROSSINLINE     reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    IMPORT          reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    INIT            reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    NOINLINE        reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    OUT             reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    VARARG          reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    WHERE           reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    OPERATOR        reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    LITERAL_STRING  reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    NUMBER          reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    LCCT            reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    IF              reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    RETURN          reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    RETURN_AT       reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONTINUE        reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    CONTINUE_AT     reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    BREAK           reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    BREAK_AT        reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    LCHAVE          reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    INCREMENTO      reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    DECREMENTO      reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MINUS           reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    PLUS            reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    NOT             reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    SUSPEND         reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    COLONCOLON      reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    RCHAVE          reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENOR           reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    PONTO           reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    AS              reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAISIGUAL       reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENOSIGUAL      reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MULTIGUAL       reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIVIGUAL        reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MODIGUAL        reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MULT            reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIVIDE          reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MOD             reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    PONTOPONTO      reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    ELVIS           reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAIOR           reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MENORIGUAL      reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    MAIORIGUAL      reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    DIFERENTE       reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    IDENTIDADE      reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    IGUALDADE       reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    SEMIDENTIDADE   reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    AND             reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    OR              reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    COMMA           reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    RPAREN          reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    RCCT            reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    PV              reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    ELSE            reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .)
    IN              shift and go to state 218
    NOT_IN          shift and go to state 219
    IS              shift and go to state 220
    NOT_IS          shift and go to state 221

  ! IN              [ reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! NOT_IN          [ reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! IS              [ reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .) ]
  ! NOT_IS          [ reduce using rule 108 (infixOperationRecursive -> inOrIs elvisOrType .) ]

    inOrIs                         shift and go to state 215
    infixOperationRecursive        shift and go to state 357
    inOperator                     shift and go to state 216
    isOperator                     shift and go to state 217

state 300

    (112) elvisOrType -> elvisExpression .

    LPAREN          reduce using rule 112 (elvisOrType -> elvisExpression .)
    FUN             reduce using rule 112 (elvisOrType -> elvisExpression .)
    FOR             reduce using rule 112 (elvisOrType -> elvisExpression .)
    WHILE           reduce using rule 112 (elvisOrType -> elvisExpression .)
    DO              reduce using rule 112 (elvisOrType -> elvisExpression .)
    VAR             reduce using rule 112 (elvisOrType -> elvisExpression .)
    VAL             reduce using rule 112 (elvisOrType -> elvisExpression .)
    ID              reduce using rule 112 (elvisOrType -> elvisExpression .)
    CROSSINLINE     reduce using rule 112 (elvisOrType -> elvisExpression .)
    IMPORT          reduce using rule 112 (elvisOrType -> elvisExpression .)
    INIT            reduce using rule 112 (elvisOrType -> elvisExpression .)
    NOINLINE        reduce using rule 112 (elvisOrType -> elvisExpression .)
    OUT             reduce using rule 112 (elvisOrType -> elvisExpression .)
    VARARG          reduce using rule 112 (elvisOrType -> elvisExpression .)
    WHERE           reduce using rule 112 (elvisOrType -> elvisExpression .)
    OPERATOR        reduce using rule 112 (elvisOrType -> elvisExpression .)
    LITERAL_STRING  reduce using rule 112 (elvisOrType -> elvisExpression .)
    NUMBER          reduce using rule 112 (elvisOrType -> elvisExpression .)
    LCCT            reduce using rule 112 (elvisOrType -> elvisExpression .)
    IF              reduce using rule 112 (elvisOrType -> elvisExpression .)
    RETURN          reduce using rule 112 (elvisOrType -> elvisExpression .)
    RETURN_AT       reduce using rule 112 (elvisOrType -> elvisExpression .)
    CONTINUE        reduce using rule 112 (elvisOrType -> elvisExpression .)
    CONTINUE_AT     reduce using rule 112 (elvisOrType -> elvisExpression .)
    BREAK           reduce using rule 112 (elvisOrType -> elvisExpression .)
    BREAK_AT        reduce using rule 112 (elvisOrType -> elvisExpression .)
    LCHAVE          reduce using rule 112 (elvisOrType -> elvisExpression .)
    INCREMENTO      reduce using rule 112 (elvisOrType -> elvisExpression .)
    DECREMENTO      reduce using rule 112 (elvisOrType -> elvisExpression .)
    MINUS           reduce using rule 112 (elvisOrType -> elvisExpression .)
    PLUS            reduce using rule 112 (elvisOrType -> elvisExpression .)
    NOT             reduce using rule 112 (elvisOrType -> elvisExpression .)
    SUSPEND         reduce using rule 112 (elvisOrType -> elvisExpression .)
    COLONCOLON      reduce using rule 112 (elvisOrType -> elvisExpression .)
    RCHAVE          reduce using rule 112 (elvisOrType -> elvisExpression .)
    MENOR           reduce using rule 112 (elvisOrType -> elvisExpression .)
    PONTO           reduce using rule 112 (elvisOrType -> elvisExpression .)
    AS              reduce using rule 112 (elvisOrType -> elvisExpression .)
    MAISIGUAL       reduce using rule 112 (elvisOrType -> elvisExpression .)
    MENOSIGUAL      reduce using rule 112 (elvisOrType -> elvisExpression .)
    MULTIGUAL       reduce using rule 112 (elvisOrType -> elvisExpression .)
    DIVIGUAL        reduce using rule 112 (elvisOrType -> elvisExpression .)
    MODIGUAL        reduce using rule 112 (elvisOrType -> elvisExpression .)
    MULT            reduce using rule 112 (elvisOrType -> elvisExpression .)
    DIVIDE          reduce using rule 112 (elvisOrType -> elvisExpression .)
    MOD             reduce using rule 112 (elvisOrType -> elvisExpression .)
    PONTOPONTO      reduce using rule 112 (elvisOrType -> elvisExpression .)
    ELVIS           reduce using rule 112 (elvisOrType -> elvisExpression .)
    IN              reduce using rule 112 (elvisOrType -> elvisExpression .)
    NOT_IN          reduce using rule 112 (elvisOrType -> elvisExpression .)
    IS              reduce using rule 112 (elvisOrType -> elvisExpression .)
    NOT_IS          reduce using rule 112 (elvisOrType -> elvisExpression .)
    MAIOR           reduce using rule 112 (elvisOrType -> elvisExpression .)
    MENORIGUAL      reduce using rule 112 (elvisOrType -> elvisExpression .)
    MAIORIGUAL      reduce using rule 112 (elvisOrType -> elvisExpression .)
    DIFERENTE       reduce using rule 112 (elvisOrType -> elvisExpression .)
    IDENTIDADE      reduce using rule 112 (elvisOrType -> elvisExpression .)
    IGUALDADE       reduce using rule 112 (elvisOrType -> elvisExpression .)
    SEMIDENTIDADE   reduce using rule 112 (elvisOrType -> elvisExpression .)
    AND             reduce using rule 112 (elvisOrType -> elvisExpression .)
    OR              reduce using rule 112 (elvisOrType -> elvisExpression .)
    COMMA           reduce using rule 112 (elvisOrType -> elvisExpression .)
    RPAREN          reduce using rule 112 (elvisOrType -> elvisExpression .)
    RCCT            reduce using rule 112 (elvisOrType -> elvisExpression .)
    PV              reduce using rule 112 (elvisOrType -> elvisExpression .)
    ELSE            reduce using rule 112 (elvisOrType -> elvisExpression .)


state 301

    (113) elvisOrType -> type .

    LPAREN          reduce using rule 113 (elvisOrType -> type .)
    FUN             reduce using rule 113 (elvisOrType -> type .)
    FOR             reduce using rule 113 (elvisOrType -> type .)
    WHILE           reduce using rule 113 (elvisOrType -> type .)
    DO              reduce using rule 113 (elvisOrType -> type .)
    VAR             reduce using rule 113 (elvisOrType -> type .)
    VAL             reduce using rule 113 (elvisOrType -> type .)
    ID              reduce using rule 113 (elvisOrType -> type .)
    CROSSINLINE     reduce using rule 113 (elvisOrType -> type .)
    IMPORT          reduce using rule 113 (elvisOrType -> type .)
    INIT            reduce using rule 113 (elvisOrType -> type .)
    NOINLINE        reduce using rule 113 (elvisOrType -> type .)
    OUT             reduce using rule 113 (elvisOrType -> type .)
    VARARG          reduce using rule 113 (elvisOrType -> type .)
    WHERE           reduce using rule 113 (elvisOrType -> type .)
    OPERATOR        reduce using rule 113 (elvisOrType -> type .)
    LITERAL_STRING  reduce using rule 113 (elvisOrType -> type .)
    NUMBER          reduce using rule 113 (elvisOrType -> type .)
    LCCT            reduce using rule 113 (elvisOrType -> type .)
    IF              reduce using rule 113 (elvisOrType -> type .)
    RETURN          reduce using rule 113 (elvisOrType -> type .)
    RETURN_AT       reduce using rule 113 (elvisOrType -> type .)
    CONTINUE        reduce using rule 113 (elvisOrType -> type .)
    CONTINUE_AT     reduce using rule 113 (elvisOrType -> type .)
    BREAK           reduce using rule 113 (elvisOrType -> type .)
    BREAK_AT        reduce using rule 113 (elvisOrType -> type .)
    LCHAVE          reduce using rule 113 (elvisOrType -> type .)
    INCREMENTO      reduce using rule 113 (elvisOrType -> type .)
    DECREMENTO      reduce using rule 113 (elvisOrType -> type .)
    MINUS           reduce using rule 113 (elvisOrType -> type .)
    PLUS            reduce using rule 113 (elvisOrType -> type .)
    NOT             reduce using rule 113 (elvisOrType -> type .)
    SUSPEND         reduce using rule 113 (elvisOrType -> type .)
    COLONCOLON      reduce using rule 113 (elvisOrType -> type .)
    RCHAVE          reduce using rule 113 (elvisOrType -> type .)
    MENOR           reduce using rule 113 (elvisOrType -> type .)
    PONTO           reduce using rule 113 (elvisOrType -> type .)
    AS              reduce using rule 113 (elvisOrType -> type .)
    MAISIGUAL       reduce using rule 113 (elvisOrType -> type .)
    MENOSIGUAL      reduce using rule 113 (elvisOrType -> type .)
    MULTIGUAL       reduce using rule 113 (elvisOrType -> type .)
    DIVIGUAL        reduce using rule 113 (elvisOrType -> type .)
    MODIGUAL        reduce using rule 113 (elvisOrType -> type .)
    MULT            reduce using rule 113 (elvisOrType -> type .)
    DIVIDE          reduce using rule 113 (elvisOrType -> type .)
    MOD             reduce using rule 113 (elvisOrType -> type .)
    PONTOPONTO      reduce using rule 113 (elvisOrType -> type .)
    ELVIS           reduce using rule 113 (elvisOrType -> type .)
    IN              reduce using rule 113 (elvisOrType -> type .)
    NOT_IN          reduce using rule 113 (elvisOrType -> type .)
    IS              reduce using rule 113 (elvisOrType -> type .)
    NOT_IS          reduce using rule 113 (elvisOrType -> type .)
    MAIOR           reduce using rule 113 (elvisOrType -> type .)
    MENORIGUAL      reduce using rule 113 (elvisOrType -> type .)
    MAIORIGUAL      reduce using rule 113 (elvisOrType -> type .)
    DIFERENTE       reduce using rule 113 (elvisOrType -> type .)
    IDENTIDADE      reduce using rule 113 (elvisOrType -> type .)
    IGUALDADE       reduce using rule 113 (elvisOrType -> type .)
    SEMIDENTIDADE   reduce using rule 113 (elvisOrType -> type .)
    AND             reduce using rule 113 (elvisOrType -> type .)
    OR              reduce using rule 113 (elvisOrType -> type .)
    COMMA           reduce using rule 113 (elvisOrType -> type .)
    RPAREN          reduce using rule 113 (elvisOrType -> type .)
    RCCT            reduce using rule 113 (elvisOrType -> type .)
    PV              reduce using rule 113 (elvisOrType -> type .)
    ELSE            reduce using rule 113 (elvisOrType -> type .)


state 302

    (53) simpleUserType -> simpleIdentifier . typeArguments
    (54) simpleUserType -> simpleIdentifier .
    (176) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .
    (164) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (165) typeArguments -> . MENOR MAIOR

  ! reduce/reduce conflict for LPAREN resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for FOR resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for WHILE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DO resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for VAR resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for VAL resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RCHAVE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MENOR resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for PONTO resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for AS resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MAISIGUAL resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MENOSIGUAL resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MULTIGUAL resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DIVIGUAL resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MODIGUAL resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MULT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MOD resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for PONTOPONTO resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for ELVIS resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IN resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT_IN resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IS resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT_IS resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MAIOR resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MENORIGUAL resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MAIORIGUAL resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IDENTIDADE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IGUALDADE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for SEMIDENTIDADE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for AND resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for OR resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for COMMA resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RPAREN resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RCCT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for PV resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for ELSE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LITERAL_STRING resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for NUMBER resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for IF resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for RETURN_AT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for CONTINUE_AT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for BREAK_AT resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for FUN resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for SUSPEND resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! shift/reduce conflict for MENOR resolved as shift
    LPAREN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    FUN             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    FOR             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    WHILE           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DO              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    VAR             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    VAL             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ID              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IMPORT          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    INIT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOINLINE        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    OUT             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    VARARG          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    WHERE           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    OPERATOR        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NUMBER          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LCCT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IF              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RETURN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RETURN_AT       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CONTINUE        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    BREAK           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    BREAK_AT        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    LCHAVE          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    INCREMENTO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DECREMENTO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MINUS           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PLUS            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOT             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    SUSPEND         reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    COLONCOLON      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RCHAVE          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PONTO           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    AS              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MAISIGUAL       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MENOSIGUAL      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MULTIGUAL       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DIVIGUAL        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MODIGUAL        reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MULT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DIVIDE          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MOD             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ELVIS           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IN              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOT_IN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IS              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    NOT_IS          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MAIOR           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    DIFERENTE       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    IGUALDADE       reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    AND             reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    OR              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RPAREN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    RCCT            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    PV              reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    ELSE            reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    MENOR           shift and go to state 123

  ! MENOR           [ reduce using rule 54 (simpleUserType -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! FOR             [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! WHILE           [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! DO              [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! VAR             [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! VAL             [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! RCHAVE          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MENOR           [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! PONTO           [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! AS              [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MAISIGUAL       [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MENOSIGUAL      [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MULTIGUAL       [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! DIVIGUAL        [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MODIGUAL        [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MULT            [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! DIVIDE          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MOD             [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! PONTOPONTO      [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! ELVIS           [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! IN              [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! NOT_IN          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! IS              [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! NOT_IS          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MAIOR           [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MENORIGUAL      [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! MAIORIGUAL      [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! DIFERENTE       [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! IDENTIDADE      [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! IGUALDADE       [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! SEMIDENTIDADE   [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! AND             [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! OR              [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! COMMA           [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! RCCT            [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! PV              [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! ELSE            [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LITERAL_STRING  [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NUMBER          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IF              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! RETURN_AT       [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CONTINUE_AT     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! BREAK_AT        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! FUN             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! SUSPEND         [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]

    typeArguments                  shift and go to state 122

state 303

    (68) parenthesizedType -> LPAREN . type RPAREN
    (67) functionTypeParameters -> LPAREN . optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (184) parenthesizedExpression -> LPAREN . expression RPAREN
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (61) optionalParameterOrType -> . parameter
    (62) optionalParameterOrType -> . type
    (63) optionalParameterOrType -> .
    (12) expression -> . disjunction
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (39) parameter -> . simpleIdentifier DOISP type
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody

    COMMA           reduce using rule 63 (optionalParameterOrType -> .)
    RPAREN          reduce using rule 63 (optionalParameterOrType -> .)
    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 303
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130

    type                           shift and go to state 116
    optionalParameterOrType        shift and go to state 117
    expression                     shift and go to state 162
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    parameter                      shift and go to state 118
    disjunction                    shift and go to state 60
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    simpleIdentifier               shift and go to state 358
    conjunction                    shift and go to state 69
    receiverType                   shift and go to state 304
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87

state 304

    (59) functionType -> receiverType . PONTO functionTypeParameters SETA type
    (230) optionalReceiverType -> receiverType .

    PONTO           shift and go to state 120
    COLONCOLON      reduce using rule 230 (optionalReceiverType -> receiverType .)


state 305

    (115) elvisExpression -> infixFunctionCall ELVIS elvisExpression .

    IN              reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOT_IN          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IS              reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOT_IS          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MENOR           reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MAIOR           reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MENORIGUAL      reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MAIORIGUAL      reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DIFERENTE       reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IDENTIDADE      reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IGUALDADE       reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    SEMIDENTIDADE   reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    AND             reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    OR              reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LPAREN          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    FUN             reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    FOR             reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    WHILE           reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DO              reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    VAR             reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    VAL             reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    ID              reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    CROSSINLINE     reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IMPORT          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    INIT            reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOINLINE        reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    OUT             reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    VARARG          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    WHERE           reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    OPERATOR        reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LITERAL_STRING  reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NUMBER          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LCCT            reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    IF              reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RETURN          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RETURN_AT       reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    CONTINUE        reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    CONTINUE_AT     reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    BREAK           reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    BREAK_AT        reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    LCHAVE          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    INCREMENTO      reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DECREMENTO      reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MINUS           reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PLUS            reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    NOT             reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    SUSPEND         reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    COLONCOLON      reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RCHAVE          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    COMMA           reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RPAREN          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    RCCT            reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PONTO           reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    AS              reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MAISIGUAL       reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MENOSIGUAL      reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MULTIGUAL       reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DIVIGUAL        reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MODIGUAL        reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MULT            reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    DIVIDE          reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    MOD             reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PONTOPONTO      reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    ELVIS           reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    PV              reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)
    ELSE            reduce using rule 115 (elvisExpression -> infixFunctionCall ELVIS elvisExpression .)


state 306

    (117) infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .

    ELVIS           reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IN              reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOT_IN          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IS              reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOT_IS          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MENOR           reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MAIOR           reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MENORIGUAL      reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MAIORIGUAL      reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DIFERENTE       reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IDENTIDADE      reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IGUALDADE       reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    SEMIDENTIDADE   reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    AND             reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    OR              reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LPAREN          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    FUN             reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    FOR             reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    WHILE           reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DO              reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    VAR             reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    VAL             reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    ID              reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    CROSSINLINE     reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IMPORT          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    INIT            reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOINLINE        reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    OUT             reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    VARARG          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    WHERE           reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    OPERATOR        reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LITERAL_STRING  reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NUMBER          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LCCT            reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    IF              reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RETURN          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RETURN_AT       reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    CONTINUE        reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    CONTINUE_AT     reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    BREAK           reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    BREAK_AT        reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    LCHAVE          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    INCREMENTO      reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DECREMENTO      reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MINUS           reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PLUS            reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    NOT             reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    SUSPEND         reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    COLONCOLON      reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RCHAVE          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    COMMA           reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RPAREN          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    RCCT            reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PONTO           reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    AS              reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MAISIGUAL       reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MENOSIGUAL      reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MULTIGUAL       reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DIVIGUAL        reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MODIGUAL        reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MULT            reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    DIVIDE          reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    MOD             reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PONTOPONTO      reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    PV              reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)
    ELSE            reduce using rule 117 (infixFunctionCall -> rangeExpression simpleIdentifier infixFunctionCall .)


state 307

    (119) rangeExpression -> additiveExpression PONTOPONTO rangeExpression .

    ID              reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    CROSSINLINE     reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IMPORT          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    INIT            reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOINLINE        reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    OUT             reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    VARARG          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    WHERE           reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    OPERATOR        reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    ELVIS           reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IN              reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOT_IN          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IS              reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOT_IS          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MENOR           reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MAIOR           reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MENORIGUAL      reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MAIORIGUAL      reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DIFERENTE       reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IDENTIDADE      reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IGUALDADE       reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    SEMIDENTIDADE   reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    AND             reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    OR              reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LPAREN          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    FUN             reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    FOR             reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    WHILE           reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DO              reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    VAR             reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    VAL             reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LITERAL_STRING  reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NUMBER          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LCCT            reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    IF              reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RETURN          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RETURN_AT       reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    CONTINUE        reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    CONTINUE_AT     reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    BREAK           reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    BREAK_AT        reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    LCHAVE          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    INCREMENTO      reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DECREMENTO      reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MINUS           reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PLUS            reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    NOT             reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    SUSPEND         reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    COLONCOLON      reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RCHAVE          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    COMMA           reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RPAREN          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    RCCT            reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PONTO           reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    AS              reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MAISIGUAL       reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MENOSIGUAL      reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MULTIGUAL       reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DIVIGUAL        reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MODIGUAL        reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MULT            reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    DIVIDE          reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    MOD             reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PONTOPONTO      reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    PV              reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)
    ELSE            reduce using rule 119 (rangeExpression -> additiveExpression PONTOPONTO rangeExpression .)


state 308

    (121) additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .

    PONTOPONTO      reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    ID              reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    CROSSINLINE     reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IMPORT          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    INIT            reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOINLINE        reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    OUT             reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    VARARG          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    WHERE           reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    OPERATOR        reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    ELVIS           reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IN              reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOT_IN          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IS              reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOT_IS          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MENOR           reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MAIOR           reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MENORIGUAL      reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MAIORIGUAL      reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DIFERENTE       reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IDENTIDADE      reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IGUALDADE       reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    SEMIDENTIDADE   reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    AND             reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    OR              reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LPAREN          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    FUN             reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    FOR             reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    WHILE           reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DO              reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    VAR             reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    VAL             reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LITERAL_STRING  reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NUMBER          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LCCT            reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    IF              reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RETURN          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RETURN_AT       reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    CONTINUE        reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    CONTINUE_AT     reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    BREAK           reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    BREAK_AT        reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    LCHAVE          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    INCREMENTO      reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DECREMENTO      reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MINUS           reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PLUS            reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    NOT             reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    SUSPEND         reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    COLONCOLON      reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RCHAVE          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    COMMA           reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RPAREN          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    RCCT            reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PONTO           reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    AS              reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MAISIGUAL       reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MENOSIGUAL      reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MULTIGUAL       reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DIVIGUAL        reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MODIGUAL        reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MULT            reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    DIVIDE          reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    MOD             reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    PV              reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)
    ELSE            reduce using rule 121 (additiveExpression -> multiplicativeExpression additiveOperator additiveExpression .)


state 309

    (67) functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA . RPAREN

    RPAREN          shift and go to state 359


state 310

    (21) optionalCOMMA -> COMMA .

    RPAREN          reduce using rule 21 (optionalCOMMA -> COMMA .)
    MAIOR           reduce using rule 21 (optionalCOMMA -> COMMA .)


state 311

    (64) parameterOrTypeRecursive -> COMMA optionalParameterOrType .
    (65) parameterOrTypeRecursive -> COMMA optionalParameterOrType . parameterOrTypeRecursive
    (64) parameterOrTypeRecursive -> . COMMA optionalParameterOrType
    (65) parameterOrTypeRecursive -> . COMMA optionalParameterOrType parameterOrTypeRecursive
    (66) parameterOrTypeRecursive -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 64 (parameterOrTypeRecursive -> COMMA optionalParameterOrType .)
    RPAREN          reduce using rule 64 (parameterOrTypeRecursive -> COMMA optionalParameterOrType .)
    COMMA           shift and go to state 231

  ! COMMA           [ reduce using rule 64 (parameterOrTypeRecursive -> COMMA optionalParameterOrType .) ]
  ! COMMA           [ reduce using rule 66 (parameterOrTypeRecursive -> .) ]
  ! RPAREN          [ reduce using rule 66 (parameterOrTypeRecursive -> .) ]

    parameterOrTypeRecursive       shift and go to state 360

state 312

    (62) optionalParameterOrType -> type .

    COMMA           reduce using rule 62 (optionalParameterOrType -> type .)
    RPAREN          reduce using rule 62 (optionalParameterOrType -> type .)


state 313

    (59) functionType -> receiverType PONTO functionTypeParameters SETA . type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    type                           shift and go to state 361
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 314

    (164) typeArguments -> MENOR typeArgumentsRecursive MAIOR .

    LCHAVE          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FUN             reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    $end            reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LPAREN          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    FOR             reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    WHILE           reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DO              reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VAR             reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VAL             reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ID              reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CROSSINLINE     reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IMPORT          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    INIT            reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOINLINE        reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OUT             reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    VARARG          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    WHERE           reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OPERATOR        reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LITERAL_STRING  reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NUMBER          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    LCCT            reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IF              reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RETURN          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RETURN_AT       reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONTINUE        reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    CONTINUE_AT     reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    BREAK           reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    BREAK_AT        reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    INCREMENTO      reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DECREMENTO      reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MINUS           reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PLUS            reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT             reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SUSPEND         reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    COLONCOLON      reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RCHAVE          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENOR           reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PONTO           reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    AS              reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAISIGUAL       reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENOSIGUAL      reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MULTIGUAL       reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIVIGUAL        reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MODIGUAL        reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MULT            reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIVIDE          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MOD             reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PONTOPONTO      reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ELVIS           reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IN              reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT_IN          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IS              reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    NOT_IS          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAIOR           reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MENORIGUAL      reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    MAIORIGUAL      reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    DIFERENTE       reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IDENTIDADE      reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    IGUALDADE       reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SEMIDENTIDADE   reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    AND             reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    OR              reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    COMMA           reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RPAREN          reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    RCCT            reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    PV              reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ELSE            reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    SETA            reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)
    ATRIBUICAO      reduce using rule 164 (typeArguments -> MENOR typeArgumentsRecursive MAIOR .)


state 315

    (167) typeArgumentsRecursive -> typeProjection COMMA . typeArgumentsRecursive
    (166) typeArgumentsRecursive -> . typeProjection
    (167) typeArgumentsRecursive -> . typeProjection COMMA typeArgumentsRecursive
    (55) typeProjection -> . typeProjectionModifiers type
    (56) typeProjection -> . type
    (57) typeProjectionModifiers -> . typeProjection
    (58) typeProjectionModifiers -> . typeProjectionModifier typeProjectionModifiers
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (49) typeProjectionModifier -> . varianceModifier
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (50) varianceModifier -> . IN
    (51) varianceModifier -> . OUT
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    IN              shift and go to state 242
    OUT             shift and go to state 243
    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeProjection                 shift and go to state 237
    typeArgumentsRecursive         shift and go to state 362
    typeProjectionModifiers        shift and go to state 238
    type                           shift and go to state 239
    typeProjectionModifier         shift and go to state 240
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    varianceModifier               shift and go to state 241
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 316

    (55) typeProjection -> typeProjectionModifiers type .

    COMMA           reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    MAIOR           reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    SUSPEND         reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    LPAREN          reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    ID              reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    CROSSINLINE     reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    IMPORT          reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    INIT            reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    NOINLINE        reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    OUT             reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    VARARG          reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    WHERE           reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)
    OPERATOR        reduce using rule 55 (typeProjection -> typeProjectionModifiers type .)


state 317

    (58) typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .
    (55) typeProjection -> typeProjectionModifiers . type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

  ! shift/reduce conflict for SUSPEND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

  ! SUSPEND         [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! LPAREN          [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! ID              [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! CROSSINLINE     [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! IMPORT          [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! INIT            [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! NOINLINE        [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OUT             [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! VARARG          [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! WHERE           [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]
  ! OPERATOR        [ reduce using rule 58 (typeProjectionModifiers -> typeProjectionModifier typeProjectionModifiers .) ]

    type                           shift and go to state 316
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38
    simpleIdentifier               shift and go to state 39

state 318

    (57) typeProjectionModifiers -> typeProjection .

    SUSPEND         reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    LPAREN          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    ID              reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    CROSSINLINE     reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    IMPORT          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    INIT            reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    NOINLINE        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    OUT             reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    VARARG          reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    WHERE           reduce using rule 57 (typeProjectionModifiers -> typeProjection .)
    OPERATOR        reduce using rule 57 (typeProjectionModifiers -> typeProjection .)


state 319

    (201) optionsLambdaLiteral -> lambdaParameters SETA statements .

    RCHAVE          reduce using rule 201 (optionsLambdaLiteral -> lambdaParameters SETA statements .)


state 320

    (204) lambdaParameters -> lambdaParameter COMMA lambdaParameters .

    SETA            reduce using rule 204 (lambdaParameters -> lambdaParameter COMMA lambdaParameters .)


state 321

    (33) variableDeclaration -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 33 (variableDeclaration -> simpleIdentifier DOISP type .)
    SETA            reduce using rule 33 (variableDeclaration -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 33 (variableDeclaration -> simpleIdentifier DOISP type .)
    ATRIBUICAO      reduce using rule 33 (variableDeclaration -> simpleIdentifier DOISP type .)
    IN              reduce using rule 33 (variableDeclaration -> simpleIdentifier DOISP type .)


state 322

    (35) multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .

    DOISP           reduce using rule 35 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    COMMA           reduce using rule 35 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    SETA            reduce using rule 35 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    ATRIBUICAO      reduce using rule 35 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)
    IN              reduce using rule 35 (multiVariableDeclaration -> LPAREN multiVariableDeclarationRecursive RPAREN .)


state 323

    (38) multiVariableDeclarationRecursive -> variableDeclaration COMMA . multiVariableDeclarationRecursive
    (37) multiVariableDeclarationRecursive -> . variableDeclaration
    (38) multiVariableDeclarationRecursive -> . variableDeclaration COMMA multiVariableDeclarationRecursive
    (33) variableDeclaration -> . simpleIdentifier DOISP type
    (34) variableDeclaration -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    variableDeclaration            shift and go to state 252
    multiVariableDeclarationRecursive shift and go to state 363
    simpleIdentifier               shift and go to state 267

state 324

    (95) chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .

    LPAREN          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    FUN             reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    FOR             reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    WHILE           reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    DO              reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    VAR             reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    VAL             reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    ID              reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    CROSSINLINE     reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    IMPORT          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    INIT            reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    NOINLINE        reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    OUT             reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    VARARG          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    WHERE           reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    OPERATOR        reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    LITERAL_STRING  reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    NUMBER          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    LCCT            reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    IF              reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    RETURN          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    RETURN_AT       reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    CONTINUE        reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    CONTINUE_AT     reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    BREAK           reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    BREAK_AT        reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    LCHAVE          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    INCREMENTO      reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    DECREMENTO      reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MINUS           reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    PLUS            reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    NOT             reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    SUSPEND         reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    COLONCOLON      reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    RCHAVE          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MENOR           reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    PONTO           reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    AS              reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MAISIGUAL       reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MENOSIGUAL      reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MULTIGUAL       reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    DIVIGUAL        reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MODIGUAL        reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MULT            reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    DIVIDE          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MOD             reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    PONTOPONTO      reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    ELVIS           reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    IN              reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    NOT_IN          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    IS              reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    NOT_IS          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MAIOR           reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MENORIGUAL      reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    MAIORIGUAL      reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    DIFERENTE       reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    IDENTIDADE      reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    IGUALDADE       reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    SEMIDENTIDADE   reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    AND             reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    OR              reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    COMMA           reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    RPAREN          reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    RCCT            reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    PV              reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)
    ELSE            reduce using rule 95 (chamadaDeFuncao -> statement LPAREN parametersFunction RPAREN .)


state 325

    (93) parametersFunction -> primaryExpression COMMA . parametersFunction
    (92) parametersFunction -> . primaryExpression
    (93) parametersFunction -> . primaryExpression COMMA parametersFunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    primaryExpression              shift and go to state 347
    parametersFunction             shift and go to state 364
    parenthesizedExpression        shift and go to state 75
    simpleIdentifier               shift and go to state 193
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 326

    (213) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType . optionalTypeConstraints optionalFunctionBody
    (209) optionalTypeConstraints -> . typeConstraints
    (210) optionalTypeConstraints -> .
    (216) typeConstraints -> . simpleIdentifier DOISP type
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
    ATRIBUICAO      reduce using rule 210 (optionalTypeConstraints -> .)
    LCHAVE          reduce using rule 210 (optionalTypeConstraints -> .)
    INCREMENTO      reduce using rule 210 (optionalTypeConstraints -> .)
    DECREMENTO      reduce using rule 210 (optionalTypeConstraints -> .)
    MENOR           reduce using rule 210 (optionalTypeConstraints -> .)
    LCCT            reduce using rule 210 (optionalTypeConstraints -> .)
    COLONCOLON      reduce using rule 210 (optionalTypeConstraints -> .)
    PONTO           reduce using rule 210 (optionalTypeConstraints -> .)
    LPAREN          reduce using rule 210 (optionalTypeConstraints -> .)
    AS              reduce using rule 210 (optionalTypeConstraints -> .)
    MAISIGUAL       reduce using rule 210 (optionalTypeConstraints -> .)
    MENOSIGUAL      reduce using rule 210 (optionalTypeConstraints -> .)
    MULTIGUAL       reduce using rule 210 (optionalTypeConstraints -> .)
    DIVIGUAL        reduce using rule 210 (optionalTypeConstraints -> .)
    MODIGUAL        reduce using rule 210 (optionalTypeConstraints -> .)
    MULT            reduce using rule 210 (optionalTypeConstraints -> .)
    DIVIDE          reduce using rule 210 (optionalTypeConstraints -> .)
    MOD             reduce using rule 210 (optionalTypeConstraints -> .)
    PLUS            reduce using rule 210 (optionalTypeConstraints -> .)
    MINUS           reduce using rule 210 (optionalTypeConstraints -> .)
    PONTOPONTO      reduce using rule 210 (optionalTypeConstraints -> .)
    ELVIS           reduce using rule 210 (optionalTypeConstraints -> .)
    IN              reduce using rule 210 (optionalTypeConstraints -> .)
    NOT_IN          reduce using rule 210 (optionalTypeConstraints -> .)
    IS              reduce using rule 210 (optionalTypeConstraints -> .)
    NOT_IS          reduce using rule 210 (optionalTypeConstraints -> .)
    MAIOR           reduce using rule 210 (optionalTypeConstraints -> .)
    MENORIGUAL      reduce using rule 210 (optionalTypeConstraints -> .)
    MAIORIGUAL      reduce using rule 210 (optionalTypeConstraints -> .)
    DIFERENTE       reduce using rule 210 (optionalTypeConstraints -> .)
    IDENTIDADE      reduce using rule 210 (optionalTypeConstraints -> .)
    IGUALDADE       reduce using rule 210 (optionalTypeConstraints -> .)
    SEMIDENTIDADE   reduce using rule 210 (optionalTypeConstraints -> .)
    AND             reduce using rule 210 (optionalTypeConstraints -> .)
    OR              reduce using rule 210 (optionalTypeConstraints -> .)
    FUN             reduce using rule 210 (optionalTypeConstraints -> .)
    FOR             reduce using rule 210 (optionalTypeConstraints -> .)
    WHILE           reduce using rule 210 (optionalTypeConstraints -> .)
    DO              reduce using rule 210 (optionalTypeConstraints -> .)
    VAR             reduce using rule 210 (optionalTypeConstraints -> .)
    VAL             reduce using rule 210 (optionalTypeConstraints -> .)
    LITERAL_STRING  reduce using rule 210 (optionalTypeConstraints -> .)
    NUMBER          reduce using rule 210 (optionalTypeConstraints -> .)
    IF              reduce using rule 210 (optionalTypeConstraints -> .)
    RETURN          reduce using rule 210 (optionalTypeConstraints -> .)
    RETURN_AT       reduce using rule 210 (optionalTypeConstraints -> .)
    CONTINUE        reduce using rule 210 (optionalTypeConstraints -> .)
    CONTINUE_AT     reduce using rule 210 (optionalTypeConstraints -> .)
    BREAK           reduce using rule 210 (optionalTypeConstraints -> .)
    BREAK_AT        reduce using rule 210 (optionalTypeConstraints -> .)
    NOT             reduce using rule 210 (optionalTypeConstraints -> .)
    SUSPEND         reduce using rule 210 (optionalTypeConstraints -> .)
    RCHAVE          reduce using rule 210 (optionalTypeConstraints -> .)
    COMMA           reduce using rule 210 (optionalTypeConstraints -> .)
    RPAREN          reduce using rule 210 (optionalTypeConstraints -> .)
    RCCT            reduce using rule 210 (optionalTypeConstraints -> .)
    PV              reduce using rule 210 (optionalTypeConstraints -> .)
    ELSE            reduce using rule 210 (optionalTypeConstraints -> .)
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

  ! ID              [ reduce using rule 210 (optionalTypeConstraints -> .) ]
  ! CROSSINLINE     [ reduce using rule 210 (optionalTypeConstraints -> .) ]
  ! IMPORT          [ reduce using rule 210 (optionalTypeConstraints -> .) ]
  ! INIT            [ reduce using rule 210 (optionalTypeConstraints -> .) ]
  ! NOINLINE        [ reduce using rule 210 (optionalTypeConstraints -> .) ]
  ! OUT             [ reduce using rule 210 (optionalTypeConstraints -> .) ]
  ! VARARG          [ reduce using rule 210 (optionalTypeConstraints -> .) ]
  ! WHERE           [ reduce using rule 210 (optionalTypeConstraints -> .) ]
  ! OPERATOR        [ reduce using rule 210 (optionalTypeConstraints -> .) ]

    optionalTypeConstraints        shift and go to state 365
    typeConstraints                shift and go to state 366
    simpleIdentifier               shift and go to state 367

state 327

    (189) parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive . RPAREN

    RPAREN          shift and go to state 368


state 328

    (190) parametersWithOptionalType -> LPAREN RPAREN .

    DOISP           reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    ID              reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    IMPORT          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    INIT            reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    OUT             reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    VARARG          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHERE           reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    ATRIBUICAO      reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    LCHAVE          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENOR           reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    LCCT            reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    PONTO           reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    LPAREN          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    AS              reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MULT            reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MOD             reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    PLUS            reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MINUS           reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    ELVIS           reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    IN              reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    IS              reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAIOR           reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    AND             reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    OR              reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    FUN             reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    FOR             reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    WHILE           reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    DO              reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    VAR             reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    VAL             reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    NUMBER          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    IF              reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    RETURN          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    BREAK           reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    NOT             reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    COMMA           reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    RPAREN          reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    RCCT            reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    PV              reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)
    ELSE            reduce using rule 190 (parametersWithOptionalType -> LPAREN RPAREN .)


state 329

    (191) parametersWithOptionalTypeRecursive -> parameterWithOptionalType .
    (192) parametersWithOptionalTypeRecursive -> parameterWithOptionalType . COMMA parametersWithOptionalTypeRecursive COMMA

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 191 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType .)
    COMMA           shift and go to state 369

  ! COMMA           [ reduce using rule 191 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType .) ]


state 330

    (193) parameterWithOptionalType -> optionalParameterModifiers . simpleIdentifier optionalType
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 370

state 331

    (194) optionalParameterModifiers -> parameterModifiers .

    ID              reduce using rule 194 (optionalParameterModifiers -> parameterModifiers .)
    CROSSINLINE     reduce using rule 194 (optionalParameterModifiers -> parameterModifiers .)
    IMPORT          reduce using rule 194 (optionalParameterModifiers -> parameterModifiers .)
    INIT            reduce using rule 194 (optionalParameterModifiers -> parameterModifiers .)
    NOINLINE        reduce using rule 194 (optionalParameterModifiers -> parameterModifiers .)
    OUT             reduce using rule 194 (optionalParameterModifiers -> parameterModifiers .)
    VARARG          reduce using rule 194 (optionalParameterModifiers -> parameterModifiers .)
    WHERE           reduce using rule 194 (optionalParameterModifiers -> parameterModifiers .)
    OPERATOR        reduce using rule 194 (optionalParameterModifiers -> parameterModifiers .)


state 332

    (196) parameterModifiers -> VARARG .

    ID              reduce using rule 196 (parameterModifiers -> VARARG .)
    CROSSINLINE     reduce using rule 196 (parameterModifiers -> VARARG .)
    IMPORT          reduce using rule 196 (parameterModifiers -> VARARG .)
    INIT            reduce using rule 196 (parameterModifiers -> VARARG .)
    NOINLINE        reduce using rule 196 (parameterModifiers -> VARARG .)
    OUT             reduce using rule 196 (parameterModifiers -> VARARG .)
    VARARG          reduce using rule 196 (parameterModifiers -> VARARG .)
    WHERE           reduce using rule 196 (parameterModifiers -> VARARG .)
    OPERATOR        reduce using rule 196 (parameterModifiers -> VARARG .)


state 333

    (197) parameterModifiers -> NOINLINE .

    ID              reduce using rule 197 (parameterModifiers -> NOINLINE .)
    CROSSINLINE     reduce using rule 197 (parameterModifiers -> NOINLINE .)
    IMPORT          reduce using rule 197 (parameterModifiers -> NOINLINE .)
    INIT            reduce using rule 197 (parameterModifiers -> NOINLINE .)
    NOINLINE        reduce using rule 197 (parameterModifiers -> NOINLINE .)
    OUT             reduce using rule 197 (parameterModifiers -> NOINLINE .)
    VARARG          reduce using rule 197 (parameterModifiers -> NOINLINE .)
    WHERE           reduce using rule 197 (parameterModifiers -> NOINLINE .)
    OPERATOR        reduce using rule 197 (parameterModifiers -> NOINLINE .)


state 334

    (198) parameterModifiers -> CROSSINLINE .

    ID              reduce using rule 198 (parameterModifiers -> CROSSINLINE .)
    CROSSINLINE     reduce using rule 198 (parameterModifiers -> CROSSINLINE .)
    IMPORT          reduce using rule 198 (parameterModifiers -> CROSSINLINE .)
    INIT            reduce using rule 198 (parameterModifiers -> CROSSINLINE .)
    NOINLINE        reduce using rule 198 (parameterModifiers -> CROSSINLINE .)
    OUT             reduce using rule 198 (parameterModifiers -> CROSSINLINE .)
    VARARG          reduce using rule 198 (parameterModifiers -> CROSSINLINE .)
    WHERE           reduce using rule 198 (parameterModifiers -> CROSSINLINE .)
    OPERATOR        reduce using rule 198 (parameterModifiers -> CROSSINLINE .)


state 335

    (17) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO . expression optionalPv
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 371
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 336

    (18) typeParameters -> MENOR typeParameter typeParametersRecursive . optionalCOMMA MAIOR
    (21) optionalCOMMA -> . COMMA
    (22) optionalCOMMA -> .

    COMMA           shift and go to state 310
    MAIOR           reduce using rule 22 (optionalCOMMA -> .)

    optionalCOMMA                  shift and go to state 372

state 337

    (19) typeParametersRecursive -> COMMA . typeParameter
    (20) typeParametersRecursive -> COMMA . typeParameter typeParametersRecursive
    (23) typeParameter -> . simpleIdentifier
    (24) typeParameter -> . simpleIdentifier DOISP type
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    typeParameter                  shift and go to state 373
    simpleIdentifier               shift and go to state 269

state 338

    (24) typeParameter -> simpleIdentifier DOISP . type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 39
    type                           shift and go to state 374
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38

state 339

    (151) indexingSuffix -> LCCT indexingSuffixRecursive RCCT .

    ATRIBUICAO      reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RPAREN          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    INCREMENTO      reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DECREMENTO      reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENOR           reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LCCT            reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    COLONCOLON      reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PONTO           reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LPAREN          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LCHAVE          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    AS              reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAISIGUAL       reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENOSIGUAL      reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MULTIGUAL       reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIVIGUAL        reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MODIGUAL        reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MULT            reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIVIDE          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MOD             reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PLUS            reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MINUS           reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PONTOPONTO      reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ID              reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CROSSINLINE     reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IMPORT          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    INIT            reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOINLINE        reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OUT             reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VARARG          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    WHERE           reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OPERATOR        reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ELVIS           reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IN              reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT_IN          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IS              reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT_IS          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAIOR           reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MENORIGUAL      reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    MAIORIGUAL      reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DIFERENTE       reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IDENTIDADE      reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IGUALDADE       reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    SEMIDENTIDADE   reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    AND             reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    OR              reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FUN             reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    FOR             reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    WHILE           reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    DO              reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VAR             reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    VAL             reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    LITERAL_STRING  reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NUMBER          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    IF              reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RETURN          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RETURN_AT       reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONTINUE        reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    CONTINUE_AT     reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    BREAK           reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    BREAK_AT        reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    NOT             reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    SUSPEND         reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RCHAVE          reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    COMMA           reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    RCCT            reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    PV              reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)
    ELSE            reduce using rule 151 (indexingSuffix -> LCCT indexingSuffixRecursive RCCT .)


state 340

    (154) indexingSuffixRecursive -> expression COMMA . indexingSuffixRecursive
    (153) indexingSuffixRecursive -> . expression
    (154) indexingSuffixRecursive -> . expression COMMA indexingSuffixRecursive
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 274
    indexingSuffixRecursive        shift and go to state 375
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 341

    (155) navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .

    ATRIBUICAO      reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RPAREN          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INCREMENTO      reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DECREMENTO      reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOR           reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCCT            reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COLONCOLON      reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTO           reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LPAREN          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LCHAVE          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AS              reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAISIGUAL       reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENOSIGUAL      reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULTIGUAL       reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIGUAL        reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MODIGUAL        reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MULT            reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIVIDE          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MOD             reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PLUS            reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MINUS           reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PONTOPONTO      reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ID              reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CROSSINLINE     reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IMPORT          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    INIT            reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOINLINE        reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OUT             reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VARARG          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHERE           reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OPERATOR        reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELVIS           reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IN              reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IN          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IS              reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT_IS          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIOR           reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MENORIGUAL      reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    MAIORIGUAL      reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DIFERENTE       reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IDENTIDADE      reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IGUALDADE       reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SEMIDENTIDADE   reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    AND             reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    OR              reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FUN             reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    FOR             reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    WHILE           reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    DO              reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VAR             reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    VAL             reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    LITERAL_STRING  reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NUMBER          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    IF              reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RETURN_AT       reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE        reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    CONTINUE_AT     reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK           reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    BREAK_AT        reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    NOT             reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    SUSPEND         reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCHAVE          reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    COMMA           reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    RCCT            reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    PV              reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)
    ELSE            reduce using rule 155 (navigationSuffix -> memberAccessOperator simpleIdentifier CLASS .)


state 342

    (156) navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .

    ATRIBUICAO      reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RPAREN          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INCREMENTO      reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DECREMENTO      reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOR           reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCCT            reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COLONCOLON      reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTO           reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LPAREN          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LCHAVE          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AS              reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAISIGUAL       reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENOSIGUAL      reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULTIGUAL       reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIGUAL        reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MODIGUAL        reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MULT            reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIVIDE          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MOD             reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PLUS            reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MINUS           reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PONTOPONTO      reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ID              reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CROSSINLINE     reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IMPORT          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    INIT            reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOINLINE        reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OUT             reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VARARG          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHERE           reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OPERATOR        reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELVIS           reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IN              reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IN          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IS              reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT_IS          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIOR           reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MENORIGUAL      reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    MAIORIGUAL      reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DIFERENTE       reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IDENTIDADE      reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IGUALDADE       reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SEMIDENTIDADE   reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    AND             reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    OR              reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FUN             reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    FOR             reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    WHILE           reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    DO              reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VAR             reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    VAL             reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    LITERAL_STRING  reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NUMBER          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    IF              reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RETURN_AT       reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE        reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    CONTINUE_AT     reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK           reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    BREAK_AT        reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    NOT             reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    SUSPEND         reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCHAVE          reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    COMMA           reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    RCCT            reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    PV              reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)
    ELSE            reduce using rule 156 (navigationSuffix -> memberAccessOperator parenthesizedExpression CLASS .)


state 343

    (86) forStatement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN controlStructureBody
    (87) forStatement -> FOR LPAREN genericVariableDeclaration IN . expression RPAREN
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 376
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 344

    (88) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (89) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (78) controlStructureBody -> . block
    (79) controlStructureBody -> . statement
    (80) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    PV              shift and go to state 378
    LCHAVE          shift and go to state 180
    FUN             shift and go to state 53
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 50
    controlStructureBody           shift and go to state 377
    block                          shift and go to state 178
    statement                      shift and go to state 179
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    simpleIdentifier               shift and go to state 54
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 345

    (90) doWhileStatement -> DO controlStructureBody WHILE LPAREN . expression RPAREN
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 379
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 346

    (91) doWhileStatement -> DO WHILE LPAREN expression . RPAREN
    (88) whileStatement -> WHILE LPAREN expression . RPAREN controlStructureBody
    (89) whileStatement -> WHILE LPAREN expression . RPAREN PV

    RPAREN          shift and go to state 380


state 347

    (92) parametersFunction -> primaryExpression .
    (93) parametersFunction -> primaryExpression . COMMA parametersFunction

    RPAREN          reduce using rule 92 (parametersFunction -> primaryExpression .)
    COMMA           shift and go to state 325


state 348

    (157) callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .

    INCREMENTO      reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DECREMENTO      reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MENOR           reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LCCT            reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    COLONCOLON      reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PONTO           reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LPAREN          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LCHAVE          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    AS              reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MAISIGUAL       reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MENOSIGUAL      reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MULTIGUAL       reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DIVIGUAL        reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MODIGUAL        reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MULT            reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DIVIDE          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MOD             reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PLUS            reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MINUS           reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PONTOPONTO      reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ID              reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CROSSINLINE     reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IMPORT          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    INIT            reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOINLINE        reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OUT             reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    VARARG          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    WHERE           reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OPERATOR        reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ELVIS           reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IN              reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOT_IN          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IS              reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOT_IS          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MAIOR           reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MENORIGUAL      reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    MAIORIGUAL      reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DIFERENTE       reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IDENTIDADE      reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IGUALDADE       reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    SEMIDENTIDADE   reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    AND             reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    OR              reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    FUN             reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    FOR             reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    WHILE           reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    DO              reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    VAR             reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    VAL             reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    LITERAL_STRING  reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NUMBER          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    IF              reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RETURN          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RETURN_AT       reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CONTINUE        reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    CONTINUE_AT     reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    BREAK           reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    BREAK_AT        reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    NOT             reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    SUSPEND         reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RCHAVE          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    COMMA           reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RPAREN          reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    RCCT            reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    PV              reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)
    ELSE            reduce using rule 157 (callSuffix -> optionalTypeArguments optionalValueArguments annotatedLambda .)


state 349

    (163) annotatedLambda -> lambdaLiteral .

    INCREMENTO      reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    DECREMENTO      reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MENOR           reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    LCCT            reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    COLONCOLON      reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    PONTO           reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    LPAREN          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    LCHAVE          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    AS              reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MAISIGUAL       reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MENOSIGUAL      reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MULTIGUAL       reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    DIVIGUAL        reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MODIGUAL        reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MULT            reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    DIVIDE          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MOD             reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    PLUS            reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MINUS           reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    PONTOPONTO      reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    ID              reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    CROSSINLINE     reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    IMPORT          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    INIT            reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    NOINLINE        reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    OUT             reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    VARARG          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    WHERE           reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    OPERATOR        reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    ELVIS           reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    IN              reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    NOT_IN          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    IS              reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    NOT_IS          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MAIOR           reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MENORIGUAL      reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    MAIORIGUAL      reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    DIFERENTE       reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    IDENTIDADE      reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    IGUALDADE       reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    SEMIDENTIDADE   reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    AND             reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    OR              reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    FUN             reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    FOR             reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    WHILE           reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    DO              reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    VAR             reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    VAL             reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    LITERAL_STRING  reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    NUMBER          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    IF              reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    RETURN          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    RETURN_AT       reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    CONTINUE        reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    CONTINUE_AT     reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    BREAK           reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    BREAK_AT        reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    NOT             reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    SUSPEND         reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    RCHAVE          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    COMMA           reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    RPAREN          reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    RCCT            reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    PV              reduce using rule 163 (annotatedLambda -> lambdaLiteral .)
    ELSE            reduce using rule 163 (annotatedLambda -> lambdaLiteral .)


state 350

    (170) valueArguments -> LPAREN RPAREN .

    LCHAVE          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    INCREMENTO      reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    DECREMENTO      reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MENOR           reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    LCCT            reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    COLONCOLON      reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    PONTO           reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    LPAREN          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    AS              reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MAISIGUAL       reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MENOSIGUAL      reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MULTIGUAL       reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    DIVIGUAL        reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MODIGUAL        reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MULT            reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MOD             reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    PLUS            reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MINUS           reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    PONTOPONTO      reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    ID              reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    CROSSINLINE     reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    IMPORT          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    INIT            reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    NOINLINE        reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    OUT             reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    VARARG          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    WHERE           reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    OPERATOR        reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    ELVIS           reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    IN              reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    NOT_IN          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    IS              reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    NOT_IS          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MAIOR           reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MENORIGUAL      reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    MAIORIGUAL      reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    DIFERENTE       reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    IDENTIDADE      reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    IGUALDADE       reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    SEMIDENTIDADE   reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    AND             reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    OR              reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    FUN             reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    FOR             reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    WHILE           reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    DO              reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    VAR             reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    VAL             reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    LITERAL_STRING  reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    NUMBER          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    IF              reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    RETURN          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    RETURN_AT       reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    CONTINUE        reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    CONTINUE_AT     reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    BREAK           reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    BREAK_AT        reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    NOT             reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    SUSPEND         reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    RCHAVE          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    COMMA           reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    RPAREN          reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    RCCT            reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    PV              reduce using rule 170 (valueArguments -> LPAREN RPAREN .)
    ELSE            reduce using rule 170 (valueArguments -> LPAREN RPAREN .)


state 351

    (171) valueArguments -> LPAREN valueArgumentsRecursive . RPAREN

    RPAREN          shift and go to state 381


state 352

    (168) valueArgumentsRecursive -> valueArgument .
    (169) valueArgumentsRecursive -> valueArgument . COMMA valueArgumentsRecursive

    RPAREN          reduce using rule 168 (valueArgumentsRecursive -> valueArgument .)
    COMMA           shift and go to state 382


state 353

    (172) valueArgument -> simpleIdentifier . ATRIBUICAO MULT expression
    (173) valueArgument -> simpleIdentifier . ATRIBUICAO expression
    (176) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .

  ! reduce/reduce conflict for INCREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 176 (primaryExpression -> simpleIdentifier .)
    ATRIBUICAO      shift and go to state 383
    INCREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COMMA           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    RPAREN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 268 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 268 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 268 (label -> simpleIdentifier .)
    IF              reduce using rule 268 (label -> simpleIdentifier .)
    RETURN          reduce using rule 268 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 268 (label -> simpleIdentifier .)
    BREAK           reduce using rule 268 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 268 (label -> simpleIdentifier .)
    FUN             reduce using rule 268 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 268 (label -> simpleIdentifier .)

  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]


state 354

    (174) valueArgument -> expression .

    COMMA           reduce using rule 174 (valueArgument -> expression .)
    RPAREN          reduce using rule 174 (valueArgument -> expression .)


state 355

    (188) collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive .

    RCCT            reduce using rule 188 (collectionLiteralRecursive -> expression COMMA collectionLiteralRecursive .)


state 356

    (217) ifExpression -> IF LPAREN expression RPAREN . controlStructureBodyOrPV
    (218) ifExpression -> IF LPAREN expression RPAREN . optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (219) controlStructureBodyOrPV -> . controlStructureBody
    (220) controlStructureBodyOrPV -> . PV
    (84) optionalControlStructureBody -> . controlStructureBody
    (85) optionalControlStructureBody -> .
    (78) controlStructureBody -> . block
    (79) controlStructureBody -> . statement
    (80) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 387
    ELSE            reduce using rule 85 (optionalControlStructureBody -> .)
    LCHAVE          shift and go to state 180
    FUN             shift and go to state 53
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

  ! PV              [ reduce using rule 85 (optionalControlStructureBody -> .) ]

    expression                     shift and go to state 50
    controlStructureBodyOrPV       shift and go to state 384
    optionalControlStructureBody   shift and go to state 385
    controlStructureBody           shift and go to state 386
    block                          shift and go to state 178
    statement                      shift and go to state 179
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    simpleIdentifier               shift and go to state 54
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 357

    (109) infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .

    LPAREN          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    FUN             reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    FOR             reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    WHILE           reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DO              reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VAR             reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VAL             reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ID              reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CROSSINLINE     reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IMPORT          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    INIT            reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOINLINE        reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OUT             reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    VARARG          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    WHERE           reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OPERATOR        reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LITERAL_STRING  reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NUMBER          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LCCT            reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IF              reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RETURN          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RETURN_AT       reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONTINUE        reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    CONTINUE_AT     reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    BREAK           reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    BREAK_AT        reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    LCHAVE          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    INCREMENTO      reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DECREMENTO      reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MINUS           reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PLUS            reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT             reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    SUSPEND         reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    COLONCOLON      reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RCHAVE          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENOR           reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PONTO           reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    AS              reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAISIGUAL       reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENOSIGUAL      reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MULTIGUAL       reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIVIGUAL        reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MODIGUAL        reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MULT            reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIVIDE          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MOD             reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PONTOPONTO      reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ELVIS           reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IN              reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT_IN          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IS              reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    NOT_IS          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAIOR           reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MENORIGUAL      reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    MAIORIGUAL      reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    DIFERENTE       reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IDENTIDADE      reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    IGUALDADE       reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    SEMIDENTIDADE   reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    AND             reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    OR              reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    COMMA           reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RPAREN          reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    RCCT            reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    PV              reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)
    ELSE            reduce using rule 109 (infixOperationRecursive -> inOrIs elvisOrType infixOperationRecursive .)


state 358

    (39) parameter -> simpleIdentifier . DOISP type
    (53) simpleUserType -> simpleIdentifier . typeArguments
    (54) simpleUserType -> simpleIdentifier .
    (176) primaryExpression -> simpleIdentifier .
    (268) label -> simpleIdentifier .
    (164) typeArguments -> . MENOR typeArgumentsRecursive MAIOR
    (165) typeArguments -> . MENOR MAIOR

  ! reduce/reduce conflict for RPAREN resolved using rule 54 (simpleUserType -> simpleIdentifier .)
  ! reduce/reduce conflict for INCREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for DECREMENTO resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for MINUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for PLUS resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for ID resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for CROSSINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for IMPORT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for INIT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for NOINLINE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OUT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for VARARG resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for WHERE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LPAREN resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCCT resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for LCHAVE resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! reduce/reduce conflict for COLONCOLON resolved using rule 176 (primaryExpression -> simpleIdentifier .)
  ! shift/reduce conflict for MENOR resolved as shift
    DOISP           shift and go to state 43
    RPAREN          reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    COMMA           reduce using rule 54 (simpleUserType -> simpleIdentifier .)
    INCREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DECREMENTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCCT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    COLONCOLON      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTO           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LPAREN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    LCHAVE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MULT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIVIDE          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MOD             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PLUS            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MINUS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    PONTOPONTO      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ID              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    CROSSINLINE     reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IMPORT          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    INIT            reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOINLINE        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OUT             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    VARARG          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    WHERE           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OPERATOR        reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    ELVIS           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IN              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IN          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IS              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT_IS          reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIOR           reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MENORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    MAIORIGUAL      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    DIFERENTE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IDENTIDADE      reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    IGUALDADE       reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    SEMIDENTIDADE   reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    AND             reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    OR              reduce using rule 176 (primaryExpression -> simpleIdentifier .)
    NOT             reduce using rule 268 (label -> simpleIdentifier .)
    LITERAL_STRING  reduce using rule 268 (label -> simpleIdentifier .)
    NUMBER          reduce using rule 268 (label -> simpleIdentifier .)
    IF              reduce using rule 268 (label -> simpleIdentifier .)
    RETURN          reduce using rule 268 (label -> simpleIdentifier .)
    RETURN_AT       reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE        reduce using rule 268 (label -> simpleIdentifier .)
    CONTINUE_AT     reduce using rule 268 (label -> simpleIdentifier .)
    BREAK           reduce using rule 268 (label -> simpleIdentifier .)
    BREAK_AT        reduce using rule 268 (label -> simpleIdentifier .)
    FUN             reduce using rule 268 (label -> simpleIdentifier .)
    SUSPEND         reduce using rule 268 (label -> simpleIdentifier .)
    MENOR           shift and go to state 123

  ! MENOR           [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! RPAREN          [ reduce using rule 176 (primaryExpression -> simpleIdentifier .) ]
  ! INCREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! DECREMENTO      [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! MINUS           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! PLUS            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! ID              [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! CROSSINLINE     [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! IMPORT          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! INIT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! NOINLINE        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OUT             [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! VARARG          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! WHERE           [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! OPERATOR        [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LPAREN          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCCT            [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! LCHAVE          [ reduce using rule 268 (label -> simpleIdentifier .) ]
  ! COLONCOLON      [ reduce using rule 268 (label -> simpleIdentifier .) ]

    typeArguments                  shift and go to state 122

state 359

    (67) functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN .

    SETA            reduce using rule 67 (functionTypeParameters -> LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN .)


state 360

    (65) parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive .

    COMMA           reduce using rule 65 (parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive .)
    RPAREN          reduce using rule 65 (parameterOrTypeRecursive -> COMMA optionalParameterOrType parameterOrTypeRecursive .)


state 361

    (59) functionType -> receiverType PONTO functionTypeParameters SETA type .

    LCHAVE          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FUN             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    $end            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LPAREN          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    FOR             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHILE           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DO              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VAR             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VAL             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ID              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CROSSINLINE     reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IMPORT          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INIT            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOINLINE        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OUT             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    VARARG          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    WHERE           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OPERATOR        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LITERAL_STRING  reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NUMBER          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    LCCT            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IF              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RETURN_AT       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    CONTINUE_AT     reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    BREAK_AT        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    INCREMENTO      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DECREMENTO      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MINUS           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PLUS            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SUSPEND         reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COLONCOLON      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCHAVE          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOR           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTO           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AS              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAISIGUAL       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENOSIGUAL      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULTIGUAL       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIGUAL        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MODIGUAL        reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MULT            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIVIDE          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MOD             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PONTOPONTO      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELVIS           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IN              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IN          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IS              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    NOT_IS          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIOR           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MENORIGUAL      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    MAIORIGUAL      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    DIFERENTE       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IDENTIDADE      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    IGUALDADE       reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SEMIDENTIDADE   reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    AND             reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    OR              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    COMMA           reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RPAREN          reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    RCCT            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    PV              reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ELSE            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    SETA            reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)
    ATRIBUICAO      reduce using rule 59 (functionType -> receiverType PONTO functionTypeParameters SETA type .)


state 362

    (167) typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive .

    MAIOR           reduce using rule 167 (typeArgumentsRecursive -> typeProjection COMMA typeArgumentsRecursive .)


state 363

    (38) multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive .

    RPAREN          reduce using rule 38 (multiVariableDeclarationRecursive -> variableDeclaration COMMA multiVariableDeclarationRecursive .)


state 364

    (93) parametersFunction -> primaryExpression COMMA parametersFunction .

    RPAREN          reduce using rule 93 (parametersFunction -> primaryExpression COMMA parametersFunction .)


state 365

    (213) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints . optionalFunctionBody
    (211) optionalFunctionBody -> . functionBody
    (212) optionalFunctionBody -> .
    (25) functionBody -> . block
    (26) functionBody -> . ATRIBUICAO expression
    (80) block -> . LCHAVE statements RCHAVE

  ! shift/reduce conflict for LCHAVE resolved as shift
    LPAREN          reduce using rule 212 (optionalFunctionBody -> .)
    FUN             reduce using rule 212 (optionalFunctionBody -> .)
    FOR             reduce using rule 212 (optionalFunctionBody -> .)
    WHILE           reduce using rule 212 (optionalFunctionBody -> .)
    DO              reduce using rule 212 (optionalFunctionBody -> .)
    VAR             reduce using rule 212 (optionalFunctionBody -> .)
    VAL             reduce using rule 212 (optionalFunctionBody -> .)
    ID              reduce using rule 212 (optionalFunctionBody -> .)
    CROSSINLINE     reduce using rule 212 (optionalFunctionBody -> .)
    IMPORT          reduce using rule 212 (optionalFunctionBody -> .)
    INIT            reduce using rule 212 (optionalFunctionBody -> .)
    NOINLINE        reduce using rule 212 (optionalFunctionBody -> .)
    OUT             reduce using rule 212 (optionalFunctionBody -> .)
    VARARG          reduce using rule 212 (optionalFunctionBody -> .)
    WHERE           reduce using rule 212 (optionalFunctionBody -> .)
    OPERATOR        reduce using rule 212 (optionalFunctionBody -> .)
    LITERAL_STRING  reduce using rule 212 (optionalFunctionBody -> .)
    NUMBER          reduce using rule 212 (optionalFunctionBody -> .)
    LCCT            reduce using rule 212 (optionalFunctionBody -> .)
    IF              reduce using rule 212 (optionalFunctionBody -> .)
    RETURN          reduce using rule 212 (optionalFunctionBody -> .)
    RETURN_AT       reduce using rule 212 (optionalFunctionBody -> .)
    CONTINUE        reduce using rule 212 (optionalFunctionBody -> .)
    CONTINUE_AT     reduce using rule 212 (optionalFunctionBody -> .)
    BREAK           reduce using rule 212 (optionalFunctionBody -> .)
    BREAK_AT        reduce using rule 212 (optionalFunctionBody -> .)
    INCREMENTO      reduce using rule 212 (optionalFunctionBody -> .)
    DECREMENTO      reduce using rule 212 (optionalFunctionBody -> .)
    MINUS           reduce using rule 212 (optionalFunctionBody -> .)
    PLUS            reduce using rule 212 (optionalFunctionBody -> .)
    NOT             reduce using rule 212 (optionalFunctionBody -> .)
    SUSPEND         reduce using rule 212 (optionalFunctionBody -> .)
    COLONCOLON      reduce using rule 212 (optionalFunctionBody -> .)
    RCHAVE          reduce using rule 212 (optionalFunctionBody -> .)
    MENOR           reduce using rule 212 (optionalFunctionBody -> .)
    PONTO           reduce using rule 212 (optionalFunctionBody -> .)
    AS              reduce using rule 212 (optionalFunctionBody -> .)
    MAISIGUAL       reduce using rule 212 (optionalFunctionBody -> .)
    MENOSIGUAL      reduce using rule 212 (optionalFunctionBody -> .)
    MULTIGUAL       reduce using rule 212 (optionalFunctionBody -> .)
    DIVIGUAL        reduce using rule 212 (optionalFunctionBody -> .)
    MODIGUAL        reduce using rule 212 (optionalFunctionBody -> .)
    MULT            reduce using rule 212 (optionalFunctionBody -> .)
    DIVIDE          reduce using rule 212 (optionalFunctionBody -> .)
    MOD             reduce using rule 212 (optionalFunctionBody -> .)
    PONTOPONTO      reduce using rule 212 (optionalFunctionBody -> .)
    ELVIS           reduce using rule 212 (optionalFunctionBody -> .)
    IN              reduce using rule 212 (optionalFunctionBody -> .)
    NOT_IN          reduce using rule 212 (optionalFunctionBody -> .)
    IS              reduce using rule 212 (optionalFunctionBody -> .)
    NOT_IS          reduce using rule 212 (optionalFunctionBody -> .)
    MAIOR           reduce using rule 212 (optionalFunctionBody -> .)
    MENORIGUAL      reduce using rule 212 (optionalFunctionBody -> .)
    MAIORIGUAL      reduce using rule 212 (optionalFunctionBody -> .)
    DIFERENTE       reduce using rule 212 (optionalFunctionBody -> .)
    IDENTIDADE      reduce using rule 212 (optionalFunctionBody -> .)
    IGUALDADE       reduce using rule 212 (optionalFunctionBody -> .)
    SEMIDENTIDADE   reduce using rule 212 (optionalFunctionBody -> .)
    AND             reduce using rule 212 (optionalFunctionBody -> .)
    OR              reduce using rule 212 (optionalFunctionBody -> .)
    COMMA           reduce using rule 212 (optionalFunctionBody -> .)
    RPAREN          reduce using rule 212 (optionalFunctionBody -> .)
    RCCT            reduce using rule 212 (optionalFunctionBody -> .)
    PV              reduce using rule 212 (optionalFunctionBody -> .)
    ELSE            reduce using rule 212 (optionalFunctionBody -> .)
    ATRIBUICAO      shift and go to state 391
    LCHAVE          shift and go to state 26

  ! LCHAVE          [ reduce using rule 212 (optionalFunctionBody -> .) ]

    optionalFunctionBody           shift and go to state 388
    functionBody                   shift and go to state 389
    block                          shift and go to state 390

state 366

    (209) optionalTypeConstraints -> typeConstraints .

    ATRIBUICAO      reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    LCHAVE          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    INCREMENTO      reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    DECREMENTO      reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MENOR           reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    LCCT            reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    COLONCOLON      reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    PONTO           reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    LPAREN          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    AS              reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MAISIGUAL       reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MENOSIGUAL      reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MULTIGUAL       reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    DIVIGUAL        reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MODIGUAL        reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MULT            reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    DIVIDE          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MOD             reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    PLUS            reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MINUS           reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    PONTOPONTO      reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    ID              reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    CROSSINLINE     reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    IMPORT          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    INIT            reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    NOINLINE        reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    OUT             reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    VARARG          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    WHERE           reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    OPERATOR        reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    ELVIS           reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    IN              reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    NOT_IN          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    IS              reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    NOT_IS          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MAIOR           reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MENORIGUAL      reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    MAIORIGUAL      reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    DIFERENTE       reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    IDENTIDADE      reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    IGUALDADE       reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    SEMIDENTIDADE   reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    AND             reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    OR              reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    FUN             reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    FOR             reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    WHILE           reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    DO              reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    VAR             reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    VAL             reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    LITERAL_STRING  reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    NUMBER          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    IF              reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    RETURN          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    RETURN_AT       reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    CONTINUE        reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    CONTINUE_AT     reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    BREAK           reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    BREAK_AT        reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    NOT             reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    SUSPEND         reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    RCHAVE          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    COMMA           reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    RPAREN          reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    RCCT            reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    PV              reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)
    ELSE            reduce using rule 209 (optionalTypeConstraints -> typeConstraints .)


state 367

    (216) typeConstraints -> simpleIdentifier . DOISP type

    DOISP           shift and go to state 392


state 368

    (189) parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .

    DOISP           reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ID              reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CROSSINLINE     reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IMPORT          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    INIT            reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOINLINE        reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OUT             reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VARARG          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    WHERE           reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OPERATOR        reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ATRIBUICAO      reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LCHAVE          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    INCREMENTO      reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DECREMENTO      reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENOR           reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LCCT            reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    COLONCOLON      reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PONTO           reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LPAREN          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    AS              reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAISIGUAL       reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MULTIGUAL       reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIVIGUAL        reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MODIGUAL        reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MULT            reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIVIDE          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MOD             reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PLUS            reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MINUS           reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PONTOPONTO      reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ELVIS           reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IN              reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT_IN          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IS              reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT_IS          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAIOR           reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MENORIGUAL      reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DIFERENTE       reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IDENTIDADE      reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IGUALDADE       reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    AND             reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    OR              reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FUN             reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    FOR             reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    WHILE           reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    DO              reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VAR             reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    VAL             reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NUMBER          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    IF              reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RETURN          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RETURN_AT       reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONTINUE        reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    BREAK           reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    BREAK_AT        reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    NOT             reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    SUSPEND         reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RCHAVE          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    COMMA           reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RPAREN          reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    RCCT            reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    PV              reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)
    ELSE            reduce using rule 189 (parametersWithOptionalType -> LPAREN parametersWithOptionalTypeRecursive RPAREN .)


state 369

    (192) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA . parametersWithOptionalTypeRecursive COMMA
    (191) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType
    (192) parametersWithOptionalTypeRecursive -> . parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA
    (193) parameterWithOptionalType -> . optionalParameterModifiers simpleIdentifier optionalType
    (194) optionalParameterModifiers -> . parameterModifiers
    (195) optionalParameterModifiers -> .
    (196) parameterModifiers -> . VARARG
    (197) parameterModifiers -> . NOINLINE
    (198) parameterModifiers -> . CROSSINLINE

  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
    ID              reduce using rule 195 (optionalParameterModifiers -> .)
    IMPORT          reduce using rule 195 (optionalParameterModifiers -> .)
    INIT            reduce using rule 195 (optionalParameterModifiers -> .)
    OUT             reduce using rule 195 (optionalParameterModifiers -> .)
    WHERE           reduce using rule 195 (optionalParameterModifiers -> .)
    OPERATOR        reduce using rule 195 (optionalParameterModifiers -> .)
    VARARG          shift and go to state 332
    NOINLINE        shift and go to state 333
    CROSSINLINE     shift and go to state 334

  ! CROSSINLINE     [ reduce using rule 195 (optionalParameterModifiers -> .) ]
  ! NOINLINE        [ reduce using rule 195 (optionalParameterModifiers -> .) ]
  ! VARARG          [ reduce using rule 195 (optionalParameterModifiers -> .) ]

    parameterWithOptionalType      shift and go to state 329
    parametersWithOptionalTypeRecursive shift and go to state 393
    optionalParameterModifiers     shift and go to state 330
    parameterModifiers             shift and go to state 331

state 370

    (193) parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier . optionalType
    (3) optionalType -> . DOISP type
    (4) optionalType -> .

    DOISP           shift and go to state 18
    COMMA           reduce using rule 4 (optionalType -> .)
    RPAREN          reduce using rule 4 (optionalType -> .)

    optionalType                   shift and go to state 394

state 371

    (17) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression . optionalPv
    (8) optionalPv -> . PV
    (9) optionalPv -> .

  ! shift/reduce conflict for PV resolved as shift
    PV              shift and go to state 396
    LPAREN          reduce using rule 9 (optionalPv -> .)
    FUN             reduce using rule 9 (optionalPv -> .)
    FOR             reduce using rule 9 (optionalPv -> .)
    WHILE           reduce using rule 9 (optionalPv -> .)
    DO              reduce using rule 9 (optionalPv -> .)
    VAR             reduce using rule 9 (optionalPv -> .)
    VAL             reduce using rule 9 (optionalPv -> .)
    ID              reduce using rule 9 (optionalPv -> .)
    CROSSINLINE     reduce using rule 9 (optionalPv -> .)
    IMPORT          reduce using rule 9 (optionalPv -> .)
    INIT            reduce using rule 9 (optionalPv -> .)
    NOINLINE        reduce using rule 9 (optionalPv -> .)
    OUT             reduce using rule 9 (optionalPv -> .)
    VARARG          reduce using rule 9 (optionalPv -> .)
    WHERE           reduce using rule 9 (optionalPv -> .)
    OPERATOR        reduce using rule 9 (optionalPv -> .)
    LITERAL_STRING  reduce using rule 9 (optionalPv -> .)
    NUMBER          reduce using rule 9 (optionalPv -> .)
    LCCT            reduce using rule 9 (optionalPv -> .)
    IF              reduce using rule 9 (optionalPv -> .)
    RETURN          reduce using rule 9 (optionalPv -> .)
    RETURN_AT       reduce using rule 9 (optionalPv -> .)
    CONTINUE        reduce using rule 9 (optionalPv -> .)
    CONTINUE_AT     reduce using rule 9 (optionalPv -> .)
    BREAK           reduce using rule 9 (optionalPv -> .)
    BREAK_AT        reduce using rule 9 (optionalPv -> .)
    LCHAVE          reduce using rule 9 (optionalPv -> .)
    INCREMENTO      reduce using rule 9 (optionalPv -> .)
    DECREMENTO      reduce using rule 9 (optionalPv -> .)
    MINUS           reduce using rule 9 (optionalPv -> .)
    PLUS            reduce using rule 9 (optionalPv -> .)
    NOT             reduce using rule 9 (optionalPv -> .)
    SUSPEND         reduce using rule 9 (optionalPv -> .)
    COLONCOLON      reduce using rule 9 (optionalPv -> .)
    RCHAVE          reduce using rule 9 (optionalPv -> .)
    MENOR           reduce using rule 9 (optionalPv -> .)
    PONTO           reduce using rule 9 (optionalPv -> .)
    AS              reduce using rule 9 (optionalPv -> .)
    MAISIGUAL       reduce using rule 9 (optionalPv -> .)
    MENOSIGUAL      reduce using rule 9 (optionalPv -> .)
    MULTIGUAL       reduce using rule 9 (optionalPv -> .)
    DIVIGUAL        reduce using rule 9 (optionalPv -> .)
    MODIGUAL        reduce using rule 9 (optionalPv -> .)
    MULT            reduce using rule 9 (optionalPv -> .)
    DIVIDE          reduce using rule 9 (optionalPv -> .)
    MOD             reduce using rule 9 (optionalPv -> .)
    PONTOPONTO      reduce using rule 9 (optionalPv -> .)
    ELVIS           reduce using rule 9 (optionalPv -> .)
    IN              reduce using rule 9 (optionalPv -> .)
    NOT_IN          reduce using rule 9 (optionalPv -> .)
    IS              reduce using rule 9 (optionalPv -> .)
    NOT_IS          reduce using rule 9 (optionalPv -> .)
    MAIOR           reduce using rule 9 (optionalPv -> .)
    MENORIGUAL      reduce using rule 9 (optionalPv -> .)
    MAIORIGUAL      reduce using rule 9 (optionalPv -> .)
    DIFERENTE       reduce using rule 9 (optionalPv -> .)
    IDENTIDADE      reduce using rule 9 (optionalPv -> .)
    IGUALDADE       reduce using rule 9 (optionalPv -> .)
    SEMIDENTIDADE   reduce using rule 9 (optionalPv -> .)
    AND             reduce using rule 9 (optionalPv -> .)
    OR              reduce using rule 9 (optionalPv -> .)
    COMMA           reduce using rule 9 (optionalPv -> .)
    RPAREN          reduce using rule 9 (optionalPv -> .)
    RCCT            reduce using rule 9 (optionalPv -> .)
    ELSE            reduce using rule 9 (optionalPv -> .)

  ! PV              [ reduce using rule 9 (optionalPv -> .) ]

    optionalPv                     shift and go to state 395

state 372

    (18) typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA . MAIOR

    MAIOR           shift and go to state 397


state 373

    (19) typeParametersRecursive -> COMMA typeParameter .
    (20) typeParametersRecursive -> COMMA typeParameter . typeParametersRecursive
    (19) typeParametersRecursive -> . COMMA typeParameter
    (20) typeParametersRecursive -> . COMMA typeParameter typeParametersRecursive

  ! shift/reduce conflict for COMMA resolved as shift
    MAIOR           reduce using rule 19 (typeParametersRecursive -> COMMA typeParameter .)
    COMMA           shift and go to state 337

  ! COMMA           [ reduce using rule 19 (typeParametersRecursive -> COMMA typeParameter .) ]

    typeParametersRecursive        shift and go to state 398

state 374

    (24) typeParameter -> simpleIdentifier DOISP type .

    COMMA           reduce using rule 24 (typeParameter -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 24 (typeParameter -> simpleIdentifier DOISP type .)


state 375

    (154) indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive .

    RCCT            reduce using rule 154 (indexingSuffixRecursive -> expression COMMA indexingSuffixRecursive .)


state 376

    (86) forStatement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN controlStructureBody
    (87) forStatement -> FOR LPAREN genericVariableDeclaration IN expression . RPAREN

    RPAREN          shift and go to state 399


state 377

    (88) whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .

    LPAREN          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FUN             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DO              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ID              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IF              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AS              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IN              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IS              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    AND             reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    OR              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    PV              reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 88 (whileStatement -> WHILE LPAREN expression RPAREN controlStructureBody .)


state 378

    (89) whileStatement -> WHILE LPAREN expression RPAREN PV .

    LPAREN          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FUN             reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    FOR             reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHILE           reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DO              reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VAR             reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VAL             reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ID              reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CROSSINLINE     reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IMPORT          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INIT            reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOINLINE        reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OUT             reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    VARARG          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    WHERE           reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OPERATOR        reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LITERAL_STRING  reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NUMBER          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCCT            reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IF              reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RETURN_AT       reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE        reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    CONTINUE_AT     reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK           reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    BREAK_AT        reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    LCHAVE          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    INCREMENTO      reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DECREMENTO      reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MINUS           reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PLUS            reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT             reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SUSPEND         reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COLONCOLON      reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCHAVE          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOR           reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTO           reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AS              reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAISIGUAL       reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENOSIGUAL      reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULTIGUAL       reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIGUAL        reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MODIGUAL        reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MULT            reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIVIDE          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MOD             reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PONTOPONTO      reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELVIS           reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IN              reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IN          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IS              reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    NOT_IS          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIOR           reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MENORIGUAL      reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    MAIORIGUAL      reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    DIFERENTE       reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IDENTIDADE      reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    IGUALDADE       reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    SEMIDENTIDADE   reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    AND             reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    OR              reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    COMMA           reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RPAREN          reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    RCCT            reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    PV              reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)
    ELSE            reduce using rule 89 (whileStatement -> WHILE LPAREN expression RPAREN PV .)


state 379

    (90) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression . RPAREN

    RPAREN          shift and go to state 400


state 380

    (91) doWhileStatement -> DO WHILE LPAREN expression RPAREN .
    (88) whileStatement -> WHILE LPAREN expression RPAREN . controlStructureBody
    (89) whileStatement -> WHILE LPAREN expression RPAREN . PV
    (78) controlStructureBody -> . block
    (79) controlStructureBody -> . statement
    (80) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

  ! shift/reduce conflict for PV resolved as shift
  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COLONCOLON      reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .)
    PV              shift and go to state 378
    LCHAVE          shift and go to state 180
    FUN             shift and go to state 53
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

  ! LPAREN          [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FUN             [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! FOR             [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DO              [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VAR             [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VAL             [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! ID              [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INIT            [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OUT             [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! IF              [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! NOT             [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! PV              [ reduce using rule 91 (doWhileStatement -> DO WHILE LPAREN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 231 (optionalReceiverType -> .) ]

    expression                     shift and go to state 50
    controlStructureBody           shift and go to state 377
    block                          shift and go to state 178
    statement                      shift and go to state 179
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    simpleIdentifier               shift and go to state 54
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 381

    (171) valueArguments -> LPAREN valueArgumentsRecursive RPAREN .

    LCHAVE          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    INCREMENTO      reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DECREMENTO      reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENOR           reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LCCT            reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    COLONCOLON      reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PONTO           reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LPAREN          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    AS              reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAISIGUAL       reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENOSIGUAL      reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MULTIGUAL       reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIVIGUAL        reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MODIGUAL        reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MULT            reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIVIDE          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MOD             reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PLUS            reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MINUS           reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PONTOPONTO      reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ID              reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CROSSINLINE     reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IMPORT          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    INIT            reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOINLINE        reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OUT             reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VARARG          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    WHERE           reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OPERATOR        reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ELVIS           reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IN              reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT_IN          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IS              reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT_IS          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAIOR           reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MENORIGUAL      reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    MAIORIGUAL      reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DIFERENTE       reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IDENTIDADE      reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IGUALDADE       reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    SEMIDENTIDADE   reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    AND             reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    OR              reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FUN             reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    FOR             reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    WHILE           reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    DO              reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VAR             reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    VAL             reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    LITERAL_STRING  reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NUMBER          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    IF              reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RETURN          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RETURN_AT       reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONTINUE        reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    CONTINUE_AT     reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    BREAK           reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    BREAK_AT        reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    NOT             reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    SUSPEND         reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RCHAVE          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    COMMA           reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RPAREN          reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    RCCT            reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    PV              reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)
    ELSE            reduce using rule 171 (valueArguments -> LPAREN valueArgumentsRecursive RPAREN .)


state 382

    (169) valueArgumentsRecursive -> valueArgument COMMA . valueArgumentsRecursive
    (168) valueArgumentsRecursive -> . valueArgument
    (169) valueArgumentsRecursive -> . valueArgument COMMA valueArgumentsRecursive
    (172) valueArgument -> . simpleIdentifier ATRIBUICAO MULT expression
    (173) valueArgument -> . simpleIdentifier ATRIBUICAO expression
    (174) valueArgument -> . expression
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    valueArgument                  shift and go to state 352
    valueArgumentsRecursive        shift and go to state 401
    simpleIdentifier               shift and go to state 353
    expression                     shift and go to state 354
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 383

    (172) valueArgument -> simpleIdentifier ATRIBUICAO . MULT expression
    (173) valueArgument -> simpleIdentifier ATRIBUICAO . expression
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    MULT            shift and go to state 402
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    simpleIdentifier               shift and go to state 126
    expression                     shift and go to state 403
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 384

    (217) ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .

    INCREMENTO      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DECREMENTO      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENOR           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LCCT            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    COLONCOLON      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PONTO           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LPAREN          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LCHAVE          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    AS              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAISIGUAL       reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENOSIGUAL      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MULTIGUAL       reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIVIGUAL        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MODIGUAL        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MULT            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIVIDE          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MOD             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PLUS            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MINUS           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PONTOPONTO      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ID              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CROSSINLINE     reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IMPORT          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    INIT            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOINLINE        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OUT             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VARARG          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    WHERE           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OPERATOR        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ELVIS           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IN              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT_IN          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IS              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT_IS          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAIOR           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MENORIGUAL      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    MAIORIGUAL      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DIFERENTE       reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IDENTIDADE      reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IGUALDADE       reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    SEMIDENTIDADE   reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    AND             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    OR              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FUN             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    FOR             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    WHILE           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    DO              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VAR             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    VAL             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    LITERAL_STRING  reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NUMBER          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    IF              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RETURN          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RETURN_AT       reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONTINUE        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    CONTINUE_AT     reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    BREAK           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    BREAK_AT        reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    NOT             reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    SUSPEND         reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RCHAVE          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    COMMA           reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RPAREN          reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    RCCT            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    PV              reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)
    ELSE            reduce using rule 217 (ifExpression -> IF LPAREN expression RPAREN controlStructureBodyOrPV .)


state 385

    (218) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody . optionalPV ELSE controlStructureBodyOrPV
    (221) optionalPV -> . PV
    (222) optionalPV -> .

    PV              shift and go to state 405
    ELSE            reduce using rule 222 (optionalPV -> .)

    optionalPV                     shift and go to state 404

state 386

    (219) controlStructureBodyOrPV -> controlStructureBody .
    (84) optionalControlStructureBody -> controlStructureBody .

  ! reduce/reduce conflict for PV resolved using rule 84 (optionalControlStructureBody -> controlStructureBody .)
  ! reduce/reduce conflict for ELSE resolved using rule 84 (optionalControlStructureBody -> controlStructureBody .)
    LPAREN          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    FUN             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    FOR             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    WHILE           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    DO              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    VAR             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    VAL             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    ID              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    CROSSINLINE     reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IMPORT          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    INIT            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    NOINLINE        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    OUT             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    VARARG          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    WHERE           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    OPERATOR        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    LITERAL_STRING  reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    NUMBER          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    LCCT            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IF              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN_AT       reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE_AT     reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK_AT        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    LCHAVE          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    INCREMENTO      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    DECREMENTO      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MINUS           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    PLUS            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    SUSPEND         reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    COLONCOLON      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    RCHAVE          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOR           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTO           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    AS              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MAISIGUAL       reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOSIGUAL      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MULTIGUAL       reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIGUAL        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MODIGUAL        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MULT            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIDE          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MOD             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTOPONTO      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    ELVIS           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IN              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IN          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IS              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IS          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIOR           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MENORIGUAL      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIORIGUAL      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    DIFERENTE       reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IDENTIDADE      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IGUALDADE       reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    AND             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    OR              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    COMMA           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    RPAREN          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    RCCT            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    PV              reduce using rule 84 (optionalControlStructureBody -> controlStructureBody .)
    ELSE            reduce using rule 84 (optionalControlStructureBody -> controlStructureBody .)

  ! PV              [ reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .) ]
  ! ELSE            [ reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .) ]


state 387

    (220) controlStructureBodyOrPV -> PV .

    LPAREN          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    FUN             reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    FOR             reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    WHILE           reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    DO              reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    VAR             reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    VAL             reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    ID              reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    CROSSINLINE     reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    IMPORT          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    INIT            reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    NOINLINE        reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    OUT             reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    VARARG          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    WHERE           reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    OPERATOR        reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    LITERAL_STRING  reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    NUMBER          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    LCCT            reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    IF              reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    RETURN          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    RETURN_AT       reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    CONTINUE        reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    CONTINUE_AT     reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    BREAK           reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    BREAK_AT        reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    LCHAVE          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    INCREMENTO      reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    DECREMENTO      reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MINUS           reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    PLUS            reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    NOT             reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    SUSPEND         reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    COLONCOLON      reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    RCHAVE          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MENOR           reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    PONTO           reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    AS              reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MAISIGUAL       reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MENOSIGUAL      reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MULTIGUAL       reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    DIVIGUAL        reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MODIGUAL        reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MULT            reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    DIVIDE          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MOD             reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    PONTOPONTO      reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    ELVIS           reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    IN              reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    NOT_IN          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    IS              reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    NOT_IS          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MAIOR           reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MENORIGUAL      reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    MAIORIGUAL      reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    DIFERENTE       reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    IDENTIDADE      reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    IGUALDADE       reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    SEMIDENTIDADE   reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    AND             reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    OR              reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    COMMA           reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    RPAREN          reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    RCCT            reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    PV              reduce using rule 220 (controlStructureBodyOrPV -> PV .)
    ELSE            reduce using rule 220 (controlStructureBodyOrPV -> PV .)


state 388

    (213) anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .

    INCREMENTO      reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DECREMENTO      reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MENOR           reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LCCT            reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    COLONCOLON      reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PONTO           reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LPAREN          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LCHAVE          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    AS              reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MAISIGUAL       reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MENOSIGUAL      reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MULTIGUAL       reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DIVIGUAL        reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MODIGUAL        reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MULT            reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DIVIDE          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MOD             reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PLUS            reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MINUS           reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PONTOPONTO      reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ID              reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CROSSINLINE     reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IMPORT          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    INIT            reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOINLINE        reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OUT             reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    VARARG          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    WHERE           reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OPERATOR        reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ELVIS           reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IN              reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOT_IN          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IS              reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOT_IS          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MAIOR           reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MENORIGUAL      reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    MAIORIGUAL      reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DIFERENTE       reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IDENTIDADE      reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IGUALDADE       reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    SEMIDENTIDADE   reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    AND             reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    OR              reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    FUN             reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    FOR             reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    WHILE           reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    DO              reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    VAR             reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    VAL             reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    LITERAL_STRING  reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NUMBER          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    IF              reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RETURN          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RETURN_AT       reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CONTINUE        reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    CONTINUE_AT     reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    BREAK           reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    BREAK_AT        reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    NOT             reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    SUSPEND         reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RCHAVE          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    COMMA           reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RPAREN          reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    RCCT            reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    PV              reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)
    ELSE            reduce using rule 213 (anonymousFunction -> FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody .)


state 389

    (211) optionalFunctionBody -> functionBody .

    LPAREN          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    FUN             reduce using rule 211 (optionalFunctionBody -> functionBody .)
    FOR             reduce using rule 211 (optionalFunctionBody -> functionBody .)
    WHILE           reduce using rule 211 (optionalFunctionBody -> functionBody .)
    DO              reduce using rule 211 (optionalFunctionBody -> functionBody .)
    VAR             reduce using rule 211 (optionalFunctionBody -> functionBody .)
    VAL             reduce using rule 211 (optionalFunctionBody -> functionBody .)
    ID              reduce using rule 211 (optionalFunctionBody -> functionBody .)
    CROSSINLINE     reduce using rule 211 (optionalFunctionBody -> functionBody .)
    IMPORT          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    INIT            reduce using rule 211 (optionalFunctionBody -> functionBody .)
    NOINLINE        reduce using rule 211 (optionalFunctionBody -> functionBody .)
    OUT             reduce using rule 211 (optionalFunctionBody -> functionBody .)
    VARARG          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    WHERE           reduce using rule 211 (optionalFunctionBody -> functionBody .)
    OPERATOR        reduce using rule 211 (optionalFunctionBody -> functionBody .)
    LITERAL_STRING  reduce using rule 211 (optionalFunctionBody -> functionBody .)
    NUMBER          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    LCCT            reduce using rule 211 (optionalFunctionBody -> functionBody .)
    IF              reduce using rule 211 (optionalFunctionBody -> functionBody .)
    RETURN          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    RETURN_AT       reduce using rule 211 (optionalFunctionBody -> functionBody .)
    CONTINUE        reduce using rule 211 (optionalFunctionBody -> functionBody .)
    CONTINUE_AT     reduce using rule 211 (optionalFunctionBody -> functionBody .)
    BREAK           reduce using rule 211 (optionalFunctionBody -> functionBody .)
    BREAK_AT        reduce using rule 211 (optionalFunctionBody -> functionBody .)
    LCHAVE          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    INCREMENTO      reduce using rule 211 (optionalFunctionBody -> functionBody .)
    DECREMENTO      reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MINUS           reduce using rule 211 (optionalFunctionBody -> functionBody .)
    PLUS            reduce using rule 211 (optionalFunctionBody -> functionBody .)
    NOT             reduce using rule 211 (optionalFunctionBody -> functionBody .)
    SUSPEND         reduce using rule 211 (optionalFunctionBody -> functionBody .)
    COLONCOLON      reduce using rule 211 (optionalFunctionBody -> functionBody .)
    RCHAVE          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MENOR           reduce using rule 211 (optionalFunctionBody -> functionBody .)
    PONTO           reduce using rule 211 (optionalFunctionBody -> functionBody .)
    AS              reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MAISIGUAL       reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MENOSIGUAL      reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MULTIGUAL       reduce using rule 211 (optionalFunctionBody -> functionBody .)
    DIVIGUAL        reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MODIGUAL        reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MULT            reduce using rule 211 (optionalFunctionBody -> functionBody .)
    DIVIDE          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MOD             reduce using rule 211 (optionalFunctionBody -> functionBody .)
    PONTOPONTO      reduce using rule 211 (optionalFunctionBody -> functionBody .)
    ELVIS           reduce using rule 211 (optionalFunctionBody -> functionBody .)
    IN              reduce using rule 211 (optionalFunctionBody -> functionBody .)
    NOT_IN          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    IS              reduce using rule 211 (optionalFunctionBody -> functionBody .)
    NOT_IS          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MAIOR           reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MENORIGUAL      reduce using rule 211 (optionalFunctionBody -> functionBody .)
    MAIORIGUAL      reduce using rule 211 (optionalFunctionBody -> functionBody .)
    DIFERENTE       reduce using rule 211 (optionalFunctionBody -> functionBody .)
    IDENTIDADE      reduce using rule 211 (optionalFunctionBody -> functionBody .)
    IGUALDADE       reduce using rule 211 (optionalFunctionBody -> functionBody .)
    SEMIDENTIDADE   reduce using rule 211 (optionalFunctionBody -> functionBody .)
    AND             reduce using rule 211 (optionalFunctionBody -> functionBody .)
    OR              reduce using rule 211 (optionalFunctionBody -> functionBody .)
    COMMA           reduce using rule 211 (optionalFunctionBody -> functionBody .)
    RPAREN          reduce using rule 211 (optionalFunctionBody -> functionBody .)
    RCCT            reduce using rule 211 (optionalFunctionBody -> functionBody .)
    PV              reduce using rule 211 (optionalFunctionBody -> functionBody .)
    ELSE            reduce using rule 211 (optionalFunctionBody -> functionBody .)


state 390

    (25) functionBody -> block .

    LPAREN          reduce using rule 25 (functionBody -> block .)
    FUN             reduce using rule 25 (functionBody -> block .)
    FOR             reduce using rule 25 (functionBody -> block .)
    WHILE           reduce using rule 25 (functionBody -> block .)
    DO              reduce using rule 25 (functionBody -> block .)
    VAR             reduce using rule 25 (functionBody -> block .)
    VAL             reduce using rule 25 (functionBody -> block .)
    ID              reduce using rule 25 (functionBody -> block .)
    CROSSINLINE     reduce using rule 25 (functionBody -> block .)
    IMPORT          reduce using rule 25 (functionBody -> block .)
    INIT            reduce using rule 25 (functionBody -> block .)
    NOINLINE        reduce using rule 25 (functionBody -> block .)
    OUT             reduce using rule 25 (functionBody -> block .)
    VARARG          reduce using rule 25 (functionBody -> block .)
    WHERE           reduce using rule 25 (functionBody -> block .)
    OPERATOR        reduce using rule 25 (functionBody -> block .)
    LITERAL_STRING  reduce using rule 25 (functionBody -> block .)
    NUMBER          reduce using rule 25 (functionBody -> block .)
    LCCT            reduce using rule 25 (functionBody -> block .)
    IF              reduce using rule 25 (functionBody -> block .)
    RETURN          reduce using rule 25 (functionBody -> block .)
    RETURN_AT       reduce using rule 25 (functionBody -> block .)
    CONTINUE        reduce using rule 25 (functionBody -> block .)
    CONTINUE_AT     reduce using rule 25 (functionBody -> block .)
    BREAK           reduce using rule 25 (functionBody -> block .)
    BREAK_AT        reduce using rule 25 (functionBody -> block .)
    LCHAVE          reduce using rule 25 (functionBody -> block .)
    INCREMENTO      reduce using rule 25 (functionBody -> block .)
    DECREMENTO      reduce using rule 25 (functionBody -> block .)
    MINUS           reduce using rule 25 (functionBody -> block .)
    PLUS            reduce using rule 25 (functionBody -> block .)
    NOT             reduce using rule 25 (functionBody -> block .)
    SUSPEND         reduce using rule 25 (functionBody -> block .)
    COLONCOLON      reduce using rule 25 (functionBody -> block .)
    RCHAVE          reduce using rule 25 (functionBody -> block .)
    MENOR           reduce using rule 25 (functionBody -> block .)
    PONTO           reduce using rule 25 (functionBody -> block .)
    AS              reduce using rule 25 (functionBody -> block .)
    MAISIGUAL       reduce using rule 25 (functionBody -> block .)
    MENOSIGUAL      reduce using rule 25 (functionBody -> block .)
    MULTIGUAL       reduce using rule 25 (functionBody -> block .)
    DIVIGUAL        reduce using rule 25 (functionBody -> block .)
    MODIGUAL        reduce using rule 25 (functionBody -> block .)
    MULT            reduce using rule 25 (functionBody -> block .)
    DIVIDE          reduce using rule 25 (functionBody -> block .)
    MOD             reduce using rule 25 (functionBody -> block .)
    PONTOPONTO      reduce using rule 25 (functionBody -> block .)
    ELVIS           reduce using rule 25 (functionBody -> block .)
    IN              reduce using rule 25 (functionBody -> block .)
    NOT_IN          reduce using rule 25 (functionBody -> block .)
    IS              reduce using rule 25 (functionBody -> block .)
    NOT_IS          reduce using rule 25 (functionBody -> block .)
    MAIOR           reduce using rule 25 (functionBody -> block .)
    MENORIGUAL      reduce using rule 25 (functionBody -> block .)
    MAIORIGUAL      reduce using rule 25 (functionBody -> block .)
    DIFERENTE       reduce using rule 25 (functionBody -> block .)
    IDENTIDADE      reduce using rule 25 (functionBody -> block .)
    IGUALDADE       reduce using rule 25 (functionBody -> block .)
    SEMIDENTIDADE   reduce using rule 25 (functionBody -> block .)
    AND             reduce using rule 25 (functionBody -> block .)
    OR              reduce using rule 25 (functionBody -> block .)
    COMMA           reduce using rule 25 (functionBody -> block .)
    RPAREN          reduce using rule 25 (functionBody -> block .)
    RCCT            reduce using rule 25 (functionBody -> block .)
    PV              reduce using rule 25 (functionBody -> block .)
    ELSE            reduce using rule 25 (functionBody -> block .)


state 391

    (26) functionBody -> ATRIBUICAO . expression
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 406
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    simpleIdentifier               shift and go to state 126
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 392

    (216) typeConstraints -> simpleIdentifier DOISP . type
    (40) type -> . typeModifiers optype
    (41) type -> . optype
    (46) typeModifiers -> . typeModifier
    (47) typeModifiers -> . typeModifier typeModifiers
    (43) optype -> . parenthesizedType
    (44) optype -> . functionType
    (45) optype -> . userType
    (48) typeModifier -> . SUSPEND
    (68) parenthesizedType -> . LPAREN type RPAREN
    (59) functionType -> . receiverType PONTO functionTypeParameters SETA type
    (60) functionType -> . functionTypeParameters SETA type
    (52) userType -> . simpleUserType
    (69) receiverType -> . typeModifier parenthesizedType
    (67) functionTypeParameters -> . LPAREN optionalParameterOrType parameterOrTypeRecursive optionalCOMMA RPAREN
    (53) simpleUserType -> . simpleIdentifier typeArguments
    (54) simpleUserType -> . simpleIdentifier
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR

    SUSPEND         shift and go to state 34
    LPAREN          shift and go to state 35
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14

    simpleIdentifier               shift and go to state 39
    type                           shift and go to state 407
    typeModifiers                  shift and go to state 28
    optype                         shift and go to state 29
    typeModifier                   shift and go to state 30
    parenthesizedType              shift and go to state 31
    functionType                   shift and go to state 32
    userType                       shift and go to state 33
    receiverType                   shift and go to state 36
    functionTypeParameters         shift and go to state 37
    simpleUserType                 shift and go to state 38

state 393

    (192) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive . COMMA

    COMMA           shift and go to state 408


state 394

    (193) parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType .

    COMMA           reduce using rule 193 (parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType .)
    RPAREN          reduce using rule 193 (parameterWithOptionalType -> optionalParameterModifiers simpleIdentifier optionalType .)


state 395

    (17) propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .

    LPAREN          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    FUN             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    FOR             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    WHILE           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DO              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    VAR             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    VAL             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ID              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CROSSINLINE     reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IMPORT          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    INIT            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOINLINE        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OUT             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    VARARG          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    WHERE           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OPERATOR        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LITERAL_STRING  reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NUMBER          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LCCT            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IF              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RETURN          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RETURN_AT       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CONTINUE        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    CONTINUE_AT     reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    BREAK           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    BREAK_AT        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    LCHAVE          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    INCREMENTO      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DECREMENTO      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MINUS           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PLUS            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOT             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    SUSPEND         reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    COLONCOLON      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RCHAVE          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MENOR           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PONTO           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    AS              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MAISIGUAL       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MENOSIGUAL      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MULTIGUAL       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DIVIGUAL        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MODIGUAL        reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MULT            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DIVIDE          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MOD             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PONTOPONTO      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ELVIS           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IN              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOT_IN          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IS              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    NOT_IS          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MAIOR           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MENORIGUAL      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    MAIORIGUAL      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    DIFERENTE       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IDENTIDADE      reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    IGUALDADE       reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    SEMIDENTIDADE   reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    AND             reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    OR              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    COMMA           reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RPAREN          reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    RCCT            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    PV              reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)
    ELSE            reduce using rule 17 (propertyDeclaration -> varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv .)


state 396

    (8) optionalPv -> PV .

    LPAREN          reduce using rule 8 (optionalPv -> PV .)
    FUN             reduce using rule 8 (optionalPv -> PV .)
    FOR             reduce using rule 8 (optionalPv -> PV .)
    WHILE           reduce using rule 8 (optionalPv -> PV .)
    DO              reduce using rule 8 (optionalPv -> PV .)
    VAR             reduce using rule 8 (optionalPv -> PV .)
    VAL             reduce using rule 8 (optionalPv -> PV .)
    ID              reduce using rule 8 (optionalPv -> PV .)
    CROSSINLINE     reduce using rule 8 (optionalPv -> PV .)
    IMPORT          reduce using rule 8 (optionalPv -> PV .)
    INIT            reduce using rule 8 (optionalPv -> PV .)
    NOINLINE        reduce using rule 8 (optionalPv -> PV .)
    OUT             reduce using rule 8 (optionalPv -> PV .)
    VARARG          reduce using rule 8 (optionalPv -> PV .)
    WHERE           reduce using rule 8 (optionalPv -> PV .)
    OPERATOR        reduce using rule 8 (optionalPv -> PV .)
    LITERAL_STRING  reduce using rule 8 (optionalPv -> PV .)
    NUMBER          reduce using rule 8 (optionalPv -> PV .)
    LCCT            reduce using rule 8 (optionalPv -> PV .)
    IF              reduce using rule 8 (optionalPv -> PV .)
    RETURN          reduce using rule 8 (optionalPv -> PV .)
    RETURN_AT       reduce using rule 8 (optionalPv -> PV .)
    CONTINUE        reduce using rule 8 (optionalPv -> PV .)
    CONTINUE_AT     reduce using rule 8 (optionalPv -> PV .)
    BREAK           reduce using rule 8 (optionalPv -> PV .)
    BREAK_AT        reduce using rule 8 (optionalPv -> PV .)
    LCHAVE          reduce using rule 8 (optionalPv -> PV .)
    INCREMENTO      reduce using rule 8 (optionalPv -> PV .)
    DECREMENTO      reduce using rule 8 (optionalPv -> PV .)
    MINUS           reduce using rule 8 (optionalPv -> PV .)
    PLUS            reduce using rule 8 (optionalPv -> PV .)
    NOT             reduce using rule 8 (optionalPv -> PV .)
    SUSPEND         reduce using rule 8 (optionalPv -> PV .)
    COLONCOLON      reduce using rule 8 (optionalPv -> PV .)
    RCHAVE          reduce using rule 8 (optionalPv -> PV .)
    MENOR           reduce using rule 8 (optionalPv -> PV .)
    PONTO           reduce using rule 8 (optionalPv -> PV .)
    AS              reduce using rule 8 (optionalPv -> PV .)
    MAISIGUAL       reduce using rule 8 (optionalPv -> PV .)
    MENOSIGUAL      reduce using rule 8 (optionalPv -> PV .)
    MULTIGUAL       reduce using rule 8 (optionalPv -> PV .)
    DIVIGUAL        reduce using rule 8 (optionalPv -> PV .)
    MODIGUAL        reduce using rule 8 (optionalPv -> PV .)
    MULT            reduce using rule 8 (optionalPv -> PV .)
    DIVIDE          reduce using rule 8 (optionalPv -> PV .)
    MOD             reduce using rule 8 (optionalPv -> PV .)
    PONTOPONTO      reduce using rule 8 (optionalPv -> PV .)
    ELVIS           reduce using rule 8 (optionalPv -> PV .)
    IN              reduce using rule 8 (optionalPv -> PV .)
    NOT_IN          reduce using rule 8 (optionalPv -> PV .)
    IS              reduce using rule 8 (optionalPv -> PV .)
    NOT_IS          reduce using rule 8 (optionalPv -> PV .)
    MAIOR           reduce using rule 8 (optionalPv -> PV .)
    MENORIGUAL      reduce using rule 8 (optionalPv -> PV .)
    MAIORIGUAL      reduce using rule 8 (optionalPv -> PV .)
    DIFERENTE       reduce using rule 8 (optionalPv -> PV .)
    IDENTIDADE      reduce using rule 8 (optionalPv -> PV .)
    IGUALDADE       reduce using rule 8 (optionalPv -> PV .)
    SEMIDENTIDADE   reduce using rule 8 (optionalPv -> PV .)
    AND             reduce using rule 8 (optionalPv -> PV .)
    OR              reduce using rule 8 (optionalPv -> PV .)
    COMMA           reduce using rule 8 (optionalPv -> PV .)
    RPAREN          reduce using rule 8 (optionalPv -> PV .)
    RCCT            reduce using rule 8 (optionalPv -> PV .)
    PV              reduce using rule 8 (optionalPv -> PV .)
    ELSE            reduce using rule 8 (optionalPv -> PV .)


state 397

    (18) typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .

    LPAREN          reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    ID              reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    CROSSINLINE     reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    IMPORT          reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    INIT            reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    NOINLINE        reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    OUT             reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    VARARG          reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    WHERE           reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)
    OPERATOR        reduce using rule 18 (typeParameters -> MENOR typeParameter typeParametersRecursive optionalCOMMA MAIOR .)


state 398

    (20) typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .

    COMMA           reduce using rule 20 (typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .)
    MAIOR           reduce using rule 20 (typeParametersRecursive -> COMMA typeParameter typeParametersRecursive .)


state 399

    (86) forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN . controlStructureBody
    (87) forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .
    (78) controlStructureBody -> . block
    (79) controlStructureBody -> . statement
    (80) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

  ! shift/reduce conflict for LCHAVE resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CROSSINLINE resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for INIT resolved as shift
  ! shift/reduce conflict for NOINLINE resolved as shift
  ! shift/reduce conflict for OUT resolved as shift
  ! shift/reduce conflict for VARARG resolved as shift
  ! shift/reduce conflict for WHERE resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LITERAL_STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for LCCT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for RETURN_AT resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for CONTINUE_AT resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for BREAK_AT resolved as shift
  ! reduce/reduce conflict for COLONCOLON resolved using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
  ! shift/reduce conflict for INCREMENTO resolved as shift
  ! shift/reduce conflict for DECREMENTO resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for SUSPEND resolved as shift
    COLONCOLON      reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    RCHAVE          reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MENOR           reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    PONTO           reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    AS              reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MAISIGUAL       reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MENOSIGUAL      reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MULTIGUAL       reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    DIVIGUAL        reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MODIGUAL        reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MULT            reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    DIVIDE          reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MOD             reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    PONTOPONTO      reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    ELVIS           reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    IN              reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    NOT_IN          reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    IS              reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    NOT_IS          reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MAIOR           reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MENORIGUAL      reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    MAIORIGUAL      reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    DIFERENTE       reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    IDENTIDADE      reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    IGUALDADE       reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    AND             reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    OR              reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    COMMA           reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    RPAREN          reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    RCCT            reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    PV              reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    ELSE            reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .)
    LCHAVE          shift and go to state 180
    FUN             shift and go to state 53
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

  ! LPAREN          [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! FUN             [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! FOR             [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! WHILE           [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! DO              [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! VAR             [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! VAL             [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! ID              [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! CROSSINLINE     [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! IMPORT          [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! INIT            [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! NOINLINE        [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! OUT             [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! VARARG          [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! WHERE           [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! OPERATOR        [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! LITERAL_STRING  [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! NUMBER          [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! LCCT            [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! IF              [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! RETURN          [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! RETURN_AT       [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! CONTINUE        [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! CONTINUE_AT     [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! BREAK           [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! BREAK_AT        [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! LCHAVE          [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! INCREMENTO      [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! DECREMENTO      [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! MINUS           [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! PLUS            [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! NOT             [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! SUSPEND         [ reduce using rule 87 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN .) ]
  ! COLONCOLON      [ reduce using rule 231 (optionalReceiverType -> .) ]

    expression                     shift and go to state 50
    controlStructureBody           shift and go to state 409
    block                          shift and go to state 178
    statement                      shift and go to state 179
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    simpleIdentifier               shift and go to state 54
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 400

    (90) doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .

    LPAREN          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FUN             reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    FOR             reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHILE           reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DO              reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VAR             reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VAL             reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CROSSINLINE     reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IMPORT          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INIT            reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOINLINE        reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OUT             reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    VARARG          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    WHERE           reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OPERATOR        reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LITERAL_STRING  reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NUMBER          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCCT            reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IF              reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RETURN_AT       reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    CONTINUE_AT     reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK           reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    BREAK_AT        reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    LCHAVE          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    INCREMENTO      reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DECREMENTO      reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MINUS           reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PLUS            reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT             reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SUSPEND         reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COLONCOLON      reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCHAVE          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOR           reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTO           reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AS              reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAISIGUAL       reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENOSIGUAL      reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULTIGUAL       reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIGUAL        reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MODIGUAL        reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MULT            reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MOD             reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PONTOPONTO      reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELVIS           reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IN              reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IN          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IS              reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    NOT_IS          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIOR           reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MENORIGUAL      reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    MAIORIGUAL      reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    DIFERENTE       reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IDENTIDADE      reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    IGUALDADE       reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    SEMIDENTIDADE   reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    AND             reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    OR              reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    COMMA           reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    RCCT            reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    PV              reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)
    ELSE            reduce using rule 90 (doWhileStatement -> DO controlStructureBody WHILE LPAREN expression RPAREN .)


state 401

    (169) valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive .

    RPAREN          reduce using rule 169 (valueArgumentsRecursive -> valueArgument COMMA valueArgumentsRecursive .)


state 402

    (172) valueArgument -> simpleIdentifier ATRIBUICAO MULT . expression
    (12) expression -> . disjunction
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (69) receiverType -> . typeModifier parenthesizedType
    (48) typeModifier -> . SUSPEND

    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    LPAREN          shift and go to state 129
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    LCHAVE          shift and go to state 44
    FUN             shift and go to state 130
    SUSPEND         shift and go to state 34

    simpleIdentifier               shift and go to state 126
    expression                     shift and go to state 410
    disjunction                    shift and go to state 60
    conjunction                    shift and go to state 69
    equality                       shift and go to state 74
    comparison                     shift and go to state 84
    infixOperation                 shift and go to state 98
    elvisExpression                shift and go to state 105
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110
    asExpression                   shift and go to state 127
    prefixUnaryExpression          shift and go to state 65
    prefixUnaryExpressionRecursive shift and go to state 73
    postfixUnaryExpression         shift and go to state 128
    unaryPrefix                    shift and go to state 83
    primaryExpression              shift and go to state 72
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    receiverType                   shift and go to state 99
    typeModifier                   shift and go to state 106

state 403

    (173) valueArgument -> simpleIdentifier ATRIBUICAO expression .

    COMMA           reduce using rule 173 (valueArgument -> simpleIdentifier ATRIBUICAO expression .)
    RPAREN          reduce using rule 173 (valueArgument -> simpleIdentifier ATRIBUICAO expression .)


state 404

    (218) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV . ELSE controlStructureBodyOrPV

    ELSE            shift and go to state 411


state 405

    (221) optionalPV -> PV .

    ELSE            reduce using rule 221 (optionalPV -> PV .)


state 406

    (26) functionBody -> ATRIBUICAO expression .

    LPAREN          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    FUN             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    FOR             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    WHILE           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    DO              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    VAR             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    VAL             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    ID              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    CROSSINLINE     reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IMPORT          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    INIT            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NOINLINE        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    OUT             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    VARARG          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    WHERE           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    OPERATOR        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    LITERAL_STRING  reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NUMBER          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    LCCT            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IF              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    RETURN          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    RETURN_AT       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    CONTINUE        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    CONTINUE_AT     reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    BREAK           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    BREAK_AT        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    LCHAVE          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    INCREMENTO      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    DECREMENTO      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MINUS           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    PLUS            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NOT             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    SUSPEND         reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    COLONCOLON      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    RCHAVE          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MENOR           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    PONTO           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    AS              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MAISIGUAL       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MENOSIGUAL      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MULTIGUAL       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    DIVIGUAL        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MODIGUAL        reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MULT            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    DIVIDE          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MOD             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    PONTOPONTO      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    ELVIS           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IN              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NOT_IN          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IS              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    NOT_IS          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MAIOR           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MENORIGUAL      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    MAIORIGUAL      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    DIFERENTE       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IDENTIDADE      reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    IGUALDADE       reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    SEMIDENTIDADE   reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    AND             reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    OR              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    COMMA           reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    RPAREN          reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    RCCT            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    PV              reduce using rule 26 (functionBody -> ATRIBUICAO expression .)
    ELSE            reduce using rule 26 (functionBody -> ATRIBUICAO expression .)


state 407

    (216) typeConstraints -> simpleIdentifier DOISP type .

    ATRIBUICAO      reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    LCHAVE          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    INCREMENTO      reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    DECREMENTO      reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MENOR           reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    LCCT            reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    COLONCOLON      reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    PONTO           reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    LPAREN          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    AS              reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MAISIGUAL       reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MENOSIGUAL      reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MULTIGUAL       reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    DIVIGUAL        reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MODIGUAL        reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MULT            reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    DIVIDE          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MOD             reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    PLUS            reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MINUS           reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    PONTOPONTO      reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    ID              reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    CROSSINLINE     reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    IMPORT          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    INIT            reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    NOINLINE        reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    OUT             reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    VARARG          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    WHERE           reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    OPERATOR        reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    ELVIS           reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    IN              reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT_IN          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    IS              reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT_IS          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MAIOR           reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MENORIGUAL      reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    MAIORIGUAL      reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    DIFERENTE       reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    IDENTIDADE      reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    IGUALDADE       reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    SEMIDENTIDADE   reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    AND             reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    OR              reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    FUN             reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    FOR             reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    WHILE           reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    DO              reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    VAR             reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    VAL             reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    LITERAL_STRING  reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    NUMBER          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    IF              reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    RETURN          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    RETURN_AT       reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    CONTINUE        reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    CONTINUE_AT     reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    BREAK           reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    BREAK_AT        reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    NOT             reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    SUSPEND         reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    RCHAVE          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    COMMA           reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    RPAREN          reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    RCCT            reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    PV              reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)
    ELSE            reduce using rule 216 (typeConstraints -> simpleIdentifier DOISP type .)


state 408

    (192) parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA .

    RPAREN          reduce using rule 192 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA .)
    COMMA           reduce using rule 192 (parametersWithOptionalTypeRecursive -> parameterWithOptionalType COMMA parametersWithOptionalTypeRecursive COMMA .)


state 409

    (86) forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .

    LPAREN          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    FUN             reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    FOR             reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHILE           reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    DO              reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    VAR             reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    VAL             reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    ID              reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    CROSSINLINE     reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IMPORT          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    INIT            reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOINLINE        reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    OUT             reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    VARARG          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    WHERE           reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    OPERATOR        reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    LITERAL_STRING  reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    NUMBER          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    LCCT            reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IF              reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    RETURN_AT       reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE        reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    CONTINUE_AT     reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK           reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    BREAK_AT        reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    LCHAVE          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    INCREMENTO      reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    DECREMENTO      reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MINUS           reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    PLUS            reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT             reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    SUSPEND         reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    COLONCOLON      reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    RCHAVE          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENOR           reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    PONTO           reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    AS              reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAISIGUAL       reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENOSIGUAL      reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MULTIGUAL       reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIGUAL        reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MODIGUAL        reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MULT            reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIVIDE          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MOD             reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    PONTOPONTO      reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    ELVIS           reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IN              reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IN          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IS              reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    NOT_IS          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAIOR           reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MENORIGUAL      reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    MAIORIGUAL      reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    DIFERENTE       reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IDENTIDADE      reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    IGUALDADE       reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    AND             reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    OR              reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    COMMA           reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    RPAREN          reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    RCCT            reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    PV              reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)
    ELSE            reduce using rule 86 (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody .)


state 410

    (172) valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .

    COMMA           reduce using rule 172 (valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .)
    RPAREN          reduce using rule 172 (valueArgument -> simpleIdentifier ATRIBUICAO MULT expression .)


state 411

    (218) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE . controlStructureBodyOrPV
    (219) controlStructureBodyOrPV -> . controlStructureBody
    (220) controlStructureBodyOrPV -> . PV
    (78) controlStructureBody -> . block
    (79) controlStructureBody -> . statement
    (80) block -> . LCHAVE statements RCHAVE
    (72) statement -> . functionDeclaration
    (73) statement -> . assignment
    (74) statement -> . loopStatement
    (75) statement -> . expression
    (76) statement -> . propertyDeclaration
    (77) statement -> . chamadaDeFuncao
    (7) functionDeclaration -> . FUN simpleIdentifier functionValueParameters optionalType optionalBlock
    (96) assignment -> . directlyAssignableExpression ATRIBUICAO expression
    (97) assignment -> . asExpression assignmentAndOperator expression
    (81) loopStatement -> . forStatement
    (82) loopStatement -> . whileStatement
    (83) loopStatement -> . doWhileStatement
    (12) expression -> . disjunction
    (17) propertyDeclaration -> . varOrVal optionalTypeParameters genericVariableDeclaration ATRIBUICAO expression optionalPv
    (94) chamadaDeFuncao -> . statement LPAREN RPAREN
    (95) chamadaDeFuncao -> . statement LPAREN parametersFunction RPAREN
    (141) directlyAssignableExpression -> . postfixUnaryExpression assignableSuffix
    (142) directlyAssignableExpression -> . simpleIdentifier
    (143) directlyAssignableExpression -> . parenthesizedDirectlyAssignableExpression
    (124) asExpression -> . prefixUnaryExpression
    (125) asExpression -> . prefixUnaryExpression asOperator type
    (86) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN controlStructureBody
    (87) forStatement -> . FOR LPAREN genericVariableDeclaration IN expression RPAREN
    (88) whileStatement -> . WHILE LPAREN expression RPAREN controlStructureBody
    (89) whileStatement -> . WHILE LPAREN expression RPAREN PV
    (90) doWhileStatement -> . DO controlStructureBody WHILE LPAREN expression RPAREN
    (91) doWhileStatement -> . DO WHILE LPAREN expression RPAREN
    (98) disjunction -> . conjunction
    (99) disjunction -> . conjunction OR disjunction
    (13) varOrVal -> . VAR
    (14) varOrVal -> . VAL
    (134) postfixUnaryExpression -> . primaryExpression
    (135) postfixUnaryExpression -> . primaryExpression postfixUnaryExpressionRecursive
    (269) simpleIdentifier -> . ID
    (270) simpleIdentifier -> . CROSSINLINE
    (271) simpleIdentifier -> . IMPORT
    (272) simpleIdentifier -> . INIT
    (273) simpleIdentifier -> . NOINLINE
    (274) simpleIdentifier -> . OUT
    (275) simpleIdentifier -> . VARARG
    (276) simpleIdentifier -> . WHERE
    (277) simpleIdentifier -> . OPERATOR
    (144) parenthesizedDirectlyAssignableExpression -> . LPAREN directlyAssignableExpression RPAREN
    (126) prefixUnaryExpression -> . prefixUnaryExpressionRecursive postfixUnaryExpression
    (127) prefixUnaryExpression -> . postfixUnaryExpression
    (100) conjunction -> . equality
    (101) conjunction -> . equality AND conjunction
    (175) primaryExpression -> . parenthesizedExpression
    (176) primaryExpression -> . simpleIdentifier
    (177) primaryExpression -> . LITERAL_STRING
    (178) primaryExpression -> . NUMBER
    (179) primaryExpression -> . callableReference
    (180) primaryExpression -> . functionLiteral
    (181) primaryExpression -> . collectionLiteral
    (182) primaryExpression -> . ifExpression
    (183) primaryExpression -> . jumpExpression
    (130) prefixUnaryExpressionRecursive -> . unaryPrefix
    (131) prefixUnaryExpressionRecursive -> . unaryPrefix prefixUnaryExpressionRecursive
    (102) equality -> . comparison
    (103) equality -> . comparison equalityOperator equality
    (184) parenthesizedExpression -> . LPAREN expression RPAREN
    (229) callableReference -> . optionalReceiverType COLONCOLON simpleIdentifierOrClass
    (214) functionLiteral -> . lambdaLiteral
    (215) functionLiteral -> . anonymousFunction
    (185) collectionLiteral -> . LCCT collectionLiteralRecursive RCCT
    (186) collectionLiteral -> . LCCT RCCT
    (217) ifExpression -> . IF LPAREN expression RPAREN controlStructureBodyOrPV
    (218) ifExpression -> . IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV
    (223) jumpExpression -> . RETURN expression
    (224) jumpExpression -> . RETURN_AT expression
    (225) jumpExpression -> . CONTINUE
    (226) jumpExpression -> . CONTINUE_AT
    (227) jumpExpression -> . BREAK
    (228) jumpExpression -> . BREAK_AT
    (128) unaryPrefix -> . label
    (129) unaryPrefix -> . prefixUnaryOperator
    (104) comparison -> . infixOperation
    (105) comparison -> . infixOperation comparisonOperator infixOperation
    (230) optionalReceiverType -> . receiverType
    (231) optionalReceiverType -> .
    (199) lambdaLiteral -> . LCHAVE optionsLambdaLiteral RCHAVE
    (213) anonymousFunction -> . FUN optionalTypePonto parametersWithOptionalType optionalType optionalTypeConstraints optionalFunctionBody
    (268) label -> . simpleIdentifier
    (258) prefixUnaryOperator -> . INCREMENTO
    (259) prefixUnaryOperator -> . DECREMENTO
    (260) prefixUnaryOperator -> . MINUS
    (261) prefixUnaryOperator -> . PLUS
    (262) prefixUnaryOperator -> . NOT
    (106) infixOperation -> . elvisExpression infixOperationRecursive
    (107) infixOperation -> . elvisExpression
    (69) receiverType -> . typeModifier parenthesizedType
    (114) elvisExpression -> . infixFunctionCall
    (115) elvisExpression -> . infixFunctionCall ELVIS elvisExpression
    (48) typeModifier -> . SUSPEND
    (116) infixFunctionCall -> . rangeExpression
    (117) infixFunctionCall -> . rangeExpression simpleIdentifier infixFunctionCall
    (118) rangeExpression -> . additiveExpression
    (119) rangeExpression -> . additiveExpression PONTOPONTO rangeExpression
    (120) additiveExpression -> . multiplicativeExpression
    (121) additiveExpression -> . multiplicativeExpression additiveOperator additiveExpression
    (122) multiplicativeExpression -> . asExpression
    (123) multiplicativeExpression -> . asExpression multiplicativeOperator multiplicativeExpression

    PV              shift and go to state 387
    LCHAVE          shift and go to state 180
    FUN             shift and go to state 53
    FOR             shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    VAR             shift and go to state 70
    VAL             shift and go to state 71
    ID              shift and go to state 6
    CROSSINLINE     shift and go to state 7
    IMPORT          shift and go to state 8
    INIT            shift and go to state 9
    NOINLINE        shift and go to state 10
    OUT             shift and go to state 11
    VARARG          shift and go to state 12
    WHERE           shift and go to state 13
    OPERATOR        shift and go to state 14
    LPAREN          shift and go to state 62
    LITERAL_STRING  shift and go to state 76
    NUMBER          shift and go to state 77
    LCCT            shift and go to state 88
    IF              shift and go to state 89
    RETURN          shift and go to state 90
    RETURN_AT       shift and go to state 91
    CONTINUE        shift and go to state 92
    CONTINUE_AT     shift and go to state 93
    BREAK           shift and go to state 94
    BREAK_AT        shift and go to state 95
    COLONCOLON      reduce using rule 231 (optionalReceiverType -> .)
    INCREMENTO      shift and go to state 100
    DECREMENTO      shift and go to state 101
    MINUS           shift and go to state 102
    PLUS            shift and go to state 103
    NOT             shift and go to state 104
    SUSPEND         shift and go to state 34

    expression                     shift and go to state 50
    controlStructureBodyOrPV       shift and go to state 412
    controlStructureBody           shift and go to state 413
    block                          shift and go to state 178
    statement                      shift and go to state 179
    functionDeclaration            shift and go to state 47
    assignment                     shift and go to state 48
    loopStatement                  shift and go to state 49
    propertyDeclaration            shift and go to state 51
    chamadaDeFuncao                shift and go to state 52
    simpleIdentifier               shift and go to state 54
    directlyAssignableExpression   shift and go to state 55
    asExpression                   shift and go to state 56
    forStatement                   shift and go to state 57
    whileStatement                 shift and go to state 58
    doWhileStatement               shift and go to state 59
    disjunction                    shift and go to state 60
    varOrVal                       shift and go to state 61
    postfixUnaryExpression         shift and go to state 63
    parenthesizedDirectlyAssignableExpression shift and go to state 64
    prefixUnaryExpression          shift and go to state 65
    conjunction                    shift and go to state 69
    primaryExpression              shift and go to state 72
    prefixUnaryExpressionRecursive shift and go to state 73
    equality                       shift and go to state 74
    parenthesizedExpression        shift and go to state 75
    callableReference              shift and go to state 78
    functionLiteral                shift and go to state 79
    collectionLiteral              shift and go to state 80
    ifExpression                   shift and go to state 81
    jumpExpression                 shift and go to state 82
    unaryPrefix                    shift and go to state 83
    comparison                     shift and go to state 84
    optionalReceiverType           shift and go to state 85
    lambdaLiteral                  shift and go to state 86
    anonymousFunction              shift and go to state 87
    label                          shift and go to state 96
    prefixUnaryOperator            shift and go to state 97
    infixOperation                 shift and go to state 98
    receiverType                   shift and go to state 99
    elvisExpression                shift and go to state 105
    typeModifier                   shift and go to state 106
    infixFunctionCall              shift and go to state 107
    rangeExpression                shift and go to state 108
    additiveExpression             shift and go to state 109
    multiplicativeExpression       shift and go to state 110

state 412

    (218) ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .

    INCREMENTO      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DECREMENTO      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MENOR           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LCCT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    COLONCOLON      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PONTO           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LPAREN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LCHAVE          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    AS              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MAISIGUAL       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MENOSIGUAL      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MULTIGUAL       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DIVIGUAL        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MODIGUAL        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MULT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DIVIDE          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MOD             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PLUS            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MINUS           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PONTOPONTO      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ID              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CROSSINLINE     reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IMPORT          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    INIT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOINLINE        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OUT             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    VARARG          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    WHERE           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OPERATOR        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ELVIS           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IN              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOT_IN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IS              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOT_IS          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MAIOR           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MENORIGUAL      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    MAIORIGUAL      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DIFERENTE       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IDENTIDADE      reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IGUALDADE       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    SEMIDENTIDADE   reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    AND             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    OR              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    FUN             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    FOR             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    WHILE           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    DO              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    VAR             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    VAL             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    LITERAL_STRING  reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NUMBER          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    IF              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RETURN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RETURN_AT       reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CONTINUE        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    CONTINUE_AT     reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    BREAK           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    BREAK_AT        reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    NOT             reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    SUSPEND         reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RCHAVE          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    COMMA           reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RPAREN          reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    RCCT            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    PV              reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)
    ELSE            reduce using rule 218 (ifExpression -> IF LPAREN expression RPAREN optionalControlStructureBody optionalPV ELSE controlStructureBodyOrPV .)


state 413

    (219) controlStructureBodyOrPV -> controlStructureBody .

    LPAREN          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    FUN             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    FOR             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    WHILE           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    DO              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    VAR             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    VAL             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    ID              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    CROSSINLINE     reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IMPORT          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    INIT            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    NOINLINE        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    OUT             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    VARARG          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    WHERE           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    OPERATOR        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    LITERAL_STRING  reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    NUMBER          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    LCCT            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IF              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    RETURN_AT       reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    CONTINUE_AT     reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    BREAK_AT        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    LCHAVE          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    INCREMENTO      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    DECREMENTO      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MINUS           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    PLUS            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    SUSPEND         reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    COLONCOLON      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    RCHAVE          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOR           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTO           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    AS              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MAISIGUAL       reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MENOSIGUAL      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MULTIGUAL       reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIGUAL        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MODIGUAL        reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MULT            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    DIVIDE          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MOD             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    PONTOPONTO      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    ELVIS           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IN              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IN          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IS              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    NOT_IS          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIOR           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MENORIGUAL      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    MAIORIGUAL      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    DIFERENTE       reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IDENTIDADE      reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    IGUALDADE       reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    SEMIDENTIDADE   reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    AND             reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    OR              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    COMMA           reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    RPAREN          reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    RCCT            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    PV              reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)
    ELSE            reduce using rule 219 (controlStructureBodyOrPV -> controlStructureBody .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LCHAVE in state 17 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 30 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 30 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 39 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 53 resolved as shift
WARNING: shift/reduce conflict for MAISIGUAL in state 56 resolved as shift
WARNING: shift/reduce conflict for MENOSIGUAL in state 56 resolved as shift
WARNING: shift/reduce conflict for MULTIGUAL in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIGUAL in state 56 resolved as shift
WARNING: shift/reduce conflict for MODIGUAL in state 56 resolved as shift
WARNING: shift/reduce conflict for MULT in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 56 resolved as shift
WARNING: shift/reduce conflict for MOD in state 56 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 63 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 63 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 63 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 63 resolved as shift
WARNING: shift/reduce conflict for AS in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 72 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 72 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 72 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 72 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 72 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 72 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 72 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 72 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 72 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 83 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 83 resolved as shift
WARNING: shift/reduce conflict for INIT in state 83 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 83 resolved as shift
WARNING: shift/reduce conflict for OUT in state 83 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 83 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 83 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 83 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 84 resolved as shift
WARNING: shift/reduce conflict for IDENTIDADE in state 84 resolved as shift
WARNING: shift/reduce conflict for IGUALDADE in state 84 resolved as shift
WARNING: shift/reduce conflict for SEMIDENTIDADE in state 84 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 98 resolved as shift
WARNING: shift/reduce conflict for MAIOR in state 98 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for MAIORIGUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for IN in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 105 resolved as shift
WARNING: shift/reduce conflict for IS in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 105 resolved as shift
WARNING: shift/reduce conflict for ELVIS in state 107 resolved as shift
WARNING: shift/reduce conflict for ID in state 108 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 108 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 108 resolved as shift
WARNING: shift/reduce conflict for INIT in state 108 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 108 resolved as shift
WARNING: shift/reduce conflict for OUT in state 108 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 108 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 108 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 108 resolved as shift
WARNING: shift/reduce conflict for PONTOPONTO in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 112 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 116 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 117 resolved as shift
WARNING: shift/reduce conflict for MULT in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 127 resolved as shift
WARNING: shift/reduce conflict for MOD in state 127 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 130 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 179 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 183 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 183 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 183 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 183 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 183 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 183 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 183 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 183 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 183 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 183 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 191 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 256 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 256 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 256 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 256 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 256 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 256 resolved as shift
WARNING: shift/reduce conflict for COLONCOLON in state 256 resolved as shift
WARNING: shift/reduce conflict for PONTO in state 256 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 258 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 258 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 258 resolved as shift
WARNING: shift/reduce conflict for RCHAVE in state 284 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 287 resolved as shift
WARNING: shift/reduce conflict for IN in state 299 resolved as shift
WARNING: shift/reduce conflict for NOT_IN in state 299 resolved as shift
WARNING: shift/reduce conflict for IS in state 299 resolved as shift
WARNING: shift/reduce conflict for NOT_IS in state 299 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 302 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 311 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 311 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 317 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 317 resolved as shift
WARNING: shift/reduce conflict for ID in state 317 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 317 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 317 resolved as shift
WARNING: shift/reduce conflict for INIT in state 317 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 317 resolved as shift
WARNING: shift/reduce conflict for OUT in state 317 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 317 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 317 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 317 resolved as shift
WARNING: shift/reduce conflict for ID in state 326 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 326 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 326 resolved as shift
WARNING: shift/reduce conflict for INIT in state 326 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 326 resolved as shift
WARNING: shift/reduce conflict for OUT in state 326 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 326 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 326 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 326 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 329 resolved as shift
WARNING: shift/reduce conflict for PV in state 356 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 358 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 365 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 369 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 369 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 369 resolved as shift
WARNING: shift/reduce conflict for PV in state 371 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 373 resolved as shift
WARNING: shift/reduce conflict for PV in state 380 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 380 resolved as shift
WARNING: shift/reduce conflict for FUN in state 380 resolved as shift
WARNING: shift/reduce conflict for FOR in state 380 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 380 resolved as shift
WARNING: shift/reduce conflict for DO in state 380 resolved as shift
WARNING: shift/reduce conflict for VAR in state 380 resolved as shift
WARNING: shift/reduce conflict for VAL in state 380 resolved as shift
WARNING: shift/reduce conflict for ID in state 380 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 380 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 380 resolved as shift
WARNING: shift/reduce conflict for INIT in state 380 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 380 resolved as shift
WARNING: shift/reduce conflict for OUT in state 380 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 380 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 380 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 380 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 380 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 380 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 380 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 380 resolved as shift
WARNING: shift/reduce conflict for IF in state 380 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 380 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 380 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 380 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 380 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 380 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 380 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 380 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 380 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 380 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 380 resolved as shift
WARNING: shift/reduce conflict for NOT in state 380 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 380 resolved as shift
WARNING: shift/reduce conflict for LCHAVE in state 399 resolved as shift
WARNING: shift/reduce conflict for FUN in state 399 resolved as shift
WARNING: shift/reduce conflict for FOR in state 399 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 399 resolved as shift
WARNING: shift/reduce conflict for DO in state 399 resolved as shift
WARNING: shift/reduce conflict for VAR in state 399 resolved as shift
WARNING: shift/reduce conflict for VAL in state 399 resolved as shift
WARNING: shift/reduce conflict for ID in state 399 resolved as shift
WARNING: shift/reduce conflict for CROSSINLINE in state 399 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 399 resolved as shift
WARNING: shift/reduce conflict for INIT in state 399 resolved as shift
WARNING: shift/reduce conflict for NOINLINE in state 399 resolved as shift
WARNING: shift/reduce conflict for OUT in state 399 resolved as shift
WARNING: shift/reduce conflict for VARARG in state 399 resolved as shift
WARNING: shift/reduce conflict for WHERE in state 399 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 399 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 399 resolved as shift
WARNING: shift/reduce conflict for LITERAL_STRING in state 399 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 399 resolved as shift
WARNING: shift/reduce conflict for LCCT in state 399 resolved as shift
WARNING: shift/reduce conflict for IF in state 399 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 399 resolved as shift
WARNING: shift/reduce conflict for RETURN_AT in state 399 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 399 resolved as shift
WARNING: shift/reduce conflict for CONTINUE_AT in state 399 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 399 resolved as shift
WARNING: shift/reduce conflict for BREAK_AT in state 399 resolved as shift
WARNING: shift/reduce conflict for INCREMENTO in state 399 resolved as shift
WARNING: shift/reduce conflict for DECREMENTO in state 399 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 399 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 399 resolved as shift
WARNING: shift/reduce conflict for NOT in state 399 resolved as shift
WARNING: shift/reduce conflict for SUSPEND in state 399 resolved as shift
WARNING: reduce/reduce conflict in state 54 resolved using rule (directlyAssignableExpression -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 54
WARNING: reduce/reduce conflict in state 72 resolved using rule (postfixUnaryExpression -> primaryExpression)
WARNING: rejected rule (optionalTypeArguments -> <empty>) in state 72
WARNING: reduce/reduce conflict in state 126 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 126
WARNING: reduce/reduce conflict in state 139 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 139
WARNING: reduce/reduce conflict in state 183 resolved using rule (postfixUnaryExpressionRecursive -> postfixUnarySuffix)
WARNING: rejected rule (optionalTypeArguments -> <empty>) in state 183
WARNING: reduce/reduce conflict in state 185 resolved using rule (postfixUnarySuffix -> typeArguments)
WARNING: rejected rule (optionalTypeArguments -> typeArguments) in state 185
WARNING: reduce/reduce conflict in state 243 resolved using rule (varianceModifier -> OUT)
WARNING: rejected rule (simpleIdentifier -> OUT) in state 243
WARNING: reduce/reduce conflict in state 253 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (directlyAssignableExpression -> simpleIdentifier) in state 253
WARNING: reduce/reduce conflict in state 253 resolved using rule (variableDeclaration -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 253
WARNING: reduce/reduce conflict in state 253 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 253
WARNING: reduce/reduce conflict in state 256 resolved using rule (parametersFunction -> primaryExpression)
WARNING: rejected rule (postfixUnaryExpression -> primaryExpression) in state 256
WARNING: reduce/reduce conflict in state 256 resolved using rule (postfixUnaryExpression -> primaryExpression)
WARNING: rejected rule (optionalTypeArguments -> <empty>) in state 256
WARNING: reduce/reduce conflict in state 256 resolved using rule (parametersFunction -> primaryExpression)
WARNING: rejected rule (optionalTypeArguments -> <empty>) in state 256
WARNING: reduce/reduce conflict in state 302 resolved using rule (simpleUserType -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 302
WARNING: reduce/reduce conflict in state 302 resolved using rule (simpleUserType -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 302
WARNING: reduce/reduce conflict in state 311 resolved using rule (parameterOrTypeRecursive -> COMMA optionalParameterOrType)
WARNING: rejected rule (parameterOrTypeRecursive -> <empty>) in state 311
WARNING: reduce/reduce conflict in state 353 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 353
WARNING: reduce/reduce conflict in state 358 resolved using rule (simpleUserType -> simpleIdentifier)
WARNING: rejected rule (primaryExpression -> simpleIdentifier) in state 358
WARNING: reduce/reduce conflict in state 358 resolved using rule (primaryExpression -> simpleIdentifier)
WARNING: rejected rule (label -> simpleIdentifier) in state 358
WARNING: reduce/reduce conflict in state 380 resolved using rule (doWhileStatement -> DO WHILE LPAREN expression RPAREN)
WARNING: rejected rule (optionalReceiverType -> <empty>) in state 380
WARNING: reduce/reduce conflict in state 386 resolved using rule (optionalControlStructureBody -> controlStructureBody)
WARNING: rejected rule (controlStructureBodyOrPV -> controlStructureBody) in state 386
WARNING: reduce/reduce conflict in state 399 resolved using rule (forStatement -> FOR LPAREN genericVariableDeclaration IN expression RPAREN)
WARNING: rejected rule (optionalReceiverType -> <empty>) in state 399
WARNING: Rule (optionalTypeArguments -> typeArguments) is never reduced
